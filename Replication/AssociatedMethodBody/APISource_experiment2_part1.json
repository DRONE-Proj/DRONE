{"Number":"1","API Relative Path":"java.io.BufferedInputStream.java-read(byte-int-int)","Corresponding Source":"/**\n     * Reads bytes from this byte-input stream into the specified byte array,\n     * starting at the given offset.\n     *\n     * <p> This method implements the general contract of the corresponding\n     * <code>{@link InputStream#read(byte[], int, int) read}<\/code> method of\n     * the <code>{@link InputStream}<\/code> class.  As an additional\n     * convenience, it attempts to read as many bytes as possible by repeatedly\n     * invoking the <code>read<\/code> method of the underlying stream.  This\n     * iterated <code>read<\/code> continues until one of the following\n     * conditions becomes true: <ul>\n     *\n     *   <li> The specified number of bytes have been read,\n     *\n     *   <li> The <code>read<\/code> method of the underlying stream returns\n     *   <code>-1<\/code>, indicating end-of-file, or\n     *\n     *   <li> The <code>available<\/code> method of the underlying stream\n     *   returns zero, indicating that further input requests would block.\n     *\n     * <\/ul> If the first <code>read<\/code> on the underlying stream returns\n     * <code>-1<\/code> to indicate end-of-file then this method returns\n     * <code>-1<\/code>.  Otherwise this method returns the number of bytes\n     * actually read.\n     *\n     * <p> Subclasses of this class are encouraged, but not required, to\n     * attempt to read as many bytes as possible in the same fashion.\n     *\n     * @param      b     destination buffer.\n     * @param      off   offset at which to start storing bytes.\n     * @param      len   maximum number of bytes to read.\n     * @return     the number of bytes read, or <code>-1<\/code> if the end of\n     *             the stream has been reached.\n     * @exception  IOException  if this input stream has been closed by\n     *                          invoking its {@link #close()} method,\n     *                          or an I/O error occurs.\n     */\n    public synchronized int read(byte b[], int off, int len)\n        throws IOException\n    {\n        getBufIfOpen(); // Check for closed stream\n        if ((off | len | (off + len) | (b.length - (off + len))) < 0) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return 0;\n        }\n\n        int n = 0;\n        for (;;) {\n            int nread = read1(b, off + n, len - n);\n            if (nread <= 0)\n                return (n == 0) ? nread : n;\n            n += nread;\n            if (n >= len)\n                return n;\n            // if not closed but no bytes available, return\n            InputStream input = in;\n            if (input != null && input.available() <= 0)\n                return n;\n        }\n    }"}
{"Number":"2","API Relative Path":"java.io.BufferedReader.java-read(char-int-int)","Corresponding Source":"/**\n     * Reads characters into a portion of an array.\n     *\n     * <p> This method implements the general contract of the corresponding\n     * <code>{@link Reader#read(char[], int, int) read}<\/code> method of the\n     * <code>{@link Reader}<\/code> class.  As an additional convenience, it\n     * attempts to read as many characters as possible by repeatedly invoking\n     * the <code>read<\/code> method of the underlying stream.  This iterated\n     * <code>read<\/code> continues until one of the following conditions becomes\n     * true: <ul>\n     *\n     *   <li> The specified number of characters have been read,\n     *\n     *   <li> The <code>read<\/code> method of the underlying stream returns\n     *   <code>-1<\/code>, indicating end-of-file, or\n     *\n     *   <li> The <code>ready<\/code> method of the underlying stream\n     *   returns <code>false<\/code>, indicating that further input requests\n     *   would block.\n     *\n     * <\/ul> If the first <code>read<\/code> on the underlying stream returns\n     * <code>-1<\/code> to indicate end-of-file then this method returns\n     * <code>-1<\/code>.  Otherwise this method returns the number of characters\n     * actually read.\n     *\n     * <p> Subclasses of this class are encouraged, but not required, to\n     * attempt to read as many characters as possible in the same fashion.\n     *\n     * <p> Ordinarily this method takes characters from this stream's character\n     * buffer, filling it from the underlying stream as necessary.  If,\n     * however, the buffer is empty, the mark is not valid, and the requested\n     * length is at least as large as the buffer, then this method will read\n     * characters directly from the underlying stream into the given array.\n     * Thus redundant <code>BufferedReader<\/code>s will not copy data\n     * unnecessarily.\n     *\n     * @param      cbuf  Destination buffer\n     * @param      off   Offset at which to start storing characters\n     * @param      len   Maximum number of characters to read\n     *\n     * @return     The number of characters read, or -1 if the end of the\n     *             stream has been reached\n     *\n     * @exception  IOException  If an I/O error occurs\n     */\n    public int read(char cbuf[], int off, int len) throws IOException {\n        synchronized (lock) {\n            ensureOpen();\n            if ((off < 0) || (off > cbuf.length) || (len < 0) ||\n                ((off + len) > cbuf.length) || ((off + len) < 0)) {\n                throw new IndexOutOfBoundsException();\n            } else if (len == 0) {\n                return 0;\n            }\n\n            int n = read1(cbuf, off, len);\n            if (n <= 0) return n;\n            while ((n < len) && in.ready()) {\n                int n1 = read1(cbuf, off + n, len - n);\n                if (n1 <= 0) break;\n                n += n1;\n            }\n            return n;\n        }\n    }"}
{"Number":"3","API Relative Path":"java.io.BufferedWriter.java-write(char-int-int)","Corresponding Source":"/**\n     * Writes a portion of an array of characters.\n     *\n     * <p> Ordinarily this method stores characters from the given array into\n     * this stream's buffer, flushing the buffer to the underlying stream as\n     * needed.  If the requested length is at least as large as the buffer,\n     * however, then this method will flush the buffer and write the characters\n     * directly to the underlying stream.  Thus redundant\n     * <code>BufferedWriter<\/code>s will not copy data unnecessarily.\n     *\n     * @param  cbuf  A character array\n     * @param  off   Offset from which to start reading characters\n     * @param  len   Number of characters to write\n     *\n     * @exception  IOException  If an I/O error occurs\n     */\n    public void write(char cbuf[], int off, int len) throws IOException {\n        synchronized (lock) {\n            ensureOpen();\n            if ((off < 0) || (off > cbuf.length) || (len < 0) ||\n                ((off + len) > cbuf.length) || ((off + len) < 0)) {\n                throw new IndexOutOfBoundsException();\n            } else if (len == 0) {\n                return;\n            }\n\n            if (len >= nChars) {\n                /* If the request length exceeds the size of the output buffer,\n                   flush the buffer and then write the data directly.  In this\n                   way buffered streams will cascade harmlessly. */\n                flushBuffer();\n                out.write(cbuf, off, len);\n                return;\n            }\n\n            int b = off, t = off + len;\n            while (b < t) {\n                int d = min(nChars - nextChar, t - b);\n                System.arraycopy(cbuf, b, cb, nextChar, d);\n                b += d;\n                nextChar += d;\n                if (nextChar >= nChars)\n                    flushBuffer();\n            }\n        }\n    }"}
{"Number":"4","API Relative Path":"java.io.ByteArrayInputStream.java-read(byte-int-int)","Corresponding Source":"/**\n     * Reads up to <code>len<\/code> bytes of data into an array of bytes\n     * from this input stream.\n     * If <code>pos<\/code> equals <code>count<\/code>,\n     * then <code>-1<\/code> is returned to indicate\n     * end of file. Otherwise, the  number <code>k<\/code>\n     * of bytes read is equal to the smaller of\n     * <code>len<\/code> and <code>count-pos<\/code>.\n     * If <code>k<\/code> is positive, then bytes\n     * <code>buf[pos]<\/code> through <code>buf[pos+k-1]<\/code>\n     * are copied into <code>b[off]<\/code>  through\n     * <code>b[off+k-1]<\/code> in the manner performed\n     * by <code>System.arraycopy<\/code>. The\n     * value <code>k<\/code> is added into <code>pos<\/code>\n     * and <code>k<\/code> is returned.\n     * <p>\n     * This <code>read<\/code> method cannot block.\n     *\n     * @param   b     the buffer into which the data is read.\n     * @param   off   the start offset in the destination array <code>b<\/code>\n     * @param   len   the maximum number of bytes read.\n     * @return  the total number of bytes read into the buffer, or\n     *          <code>-1<\/code> if there is no more data because the end of\n     *          the stream has been reached.\n     * @exception  NullPointerException If <code>b<\/code> is <code>null<\/code>.\n     * @exception  IndexOutOfBoundsException If <code>off<\/code> is negative,\n     * <code>len<\/code> is negative, or <code>len<\/code> is greater than\n     * <code>b.length - off<\/code>\n     */\n    public synchronized int read(byte b[], int off, int len) {\n        if (b == null) {\n            throw new NullPointerException();\n        } else if (off < 0 || len < 0 || len > b.length - off) {\n            throw new IndexOutOfBoundsException();\n        }\n\n        if (pos >= count) {\n            return -1;\n        }\n\n        int avail = count - pos;\n        if (len > avail) {\n            len = avail;\n        }\n        if (len <= 0) {\n            return 0;\n        }\n        System.arraycopy(buf, pos, b, off, len);\n        pos += len;\n        return len;\n    }"}
{"Number":"5","API Relative Path":"java.io.ByteArrayOutputStream.java-write(byte-int-int)","Corresponding Source":"/**\n     * Writes <code>len<\/code> bytes from the specified byte array\n     * starting at offset <code>off<\/code> to this byte array output stream.\n     *\n     * @param   b     the data.\n     * @param   off   the start offset in the data.\n     * @param   len   the number of bytes to write.\n     */\n    public synchronized void write(byte b[], int off, int len) {\n        if ((off < 0) || (off > b.length) || (len < 0) ||\n            ((off + len) - b.length > 0)) {\n            throw new IndexOutOfBoundsException();\n        }\n        ensureCapacity(count + len);\n        System.arraycopy(b, off, buf, count, len);\n        count += len;\n    }"}
{"Number":"6","API Relative Path":"java.io.CharArrayReader.java-CharArrayReader(char-int-int)","Corresponding Source":"/**\n     * Creates a CharArrayReader from the specified array of chars.\n     *\n     * <p> The resulting reader will start reading at the given\n     * <tt>offset<\/tt>.  The total number of <tt>char<\/tt> values that can be\n     * read from this reader will be either <tt>length<\/tt> or\n     * <tt>buf.length-offset<\/tt>, whichever is smaller.\n     *\n     * @throws IllegalArgumentException\n     *         If <tt>offset<\/tt> is negative or greater than\n     *         <tt>buf.length<\/tt>, or if <tt>length<\/tt> is negative, or if\n     *         the sum of these two values is negative.\n     *\n     * @param buf       Input buffer (not copied)\n     * @param offset    Offset of the first char to read\n     * @param length    Number of chars to read\n     */\n    public CharArrayReader(char buf[], int offset, int length) {\n        if ((offset < 0) || (offset > buf.length) || (length < 0) ||\n            ((offset + length) < 0)) {\n            throw new IllegalArgumentException();\n        }\n        this.buf = buf;\n        this.pos = offset;\n        this.count = Math.min(offset + length, buf.length);\n        this.markedPos = offset;\n    }"}
{"Number":"7","API Relative Path":"java.io.CharArrayReader.java-read(char-int-int)","Corresponding Source":"/**\n     * Reads characters into a portion of an array.\n     * @param b  Destination buffer\n     * @param off  Offset at which to start storing characters\n     * @param len   Maximum number of characters to read\n     * @return  The actual number of characters read, or -1 if\n     *          the end of the stream has been reached\n     *\n     * @exception   IOException  If an I/O error occurs\n     */\n    public int read(char b[], int off, int len) throws IOException {\n        synchronized (lock) {\n            ensureOpen();\n            if ((off < 0) || (off > b.length) || (len < 0) ||\n                ((off + len) > b.length) || ((off + len) < 0)) {\n                throw new IndexOutOfBoundsException();\n            } else if (len == 0) {\n                return 0;\n            }\n\n            if (pos >= count) {\n                return -1;\n            }\n            if (pos + len > count) {\n                len = count - pos;\n            }\n            if (len <= 0) {\n                return 0;\n            }\n            System.arraycopy(buf, pos, b, off, len);\n            pos += len;\n            return len;\n        }\n    }"}
{"Number":"8","API Relative Path":"java.io.CharArrayWriter.java-write(char-int-int)","Corresponding Source":"/**\n     * Writes characters to the buffer.\n     * @param c the data to be written\n     * @param off       the start offset in the data\n     * @param len       the number of chars that are written\n     */\n    public void write(char c[], int off, int len) {\n        if ((off < 0) || (off > c.length) || (len < 0) ||\n            ((off + len) > c.length) || ((off + len) < 0)) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return;\n        }\n        synchronized (lock) {\n            int newcount = count + len;\n            if (newcount > buf.length) {\n                buf = Arrays.copyOf(buf, Math.max(buf.length << 1, newcount));\n            }\n            System.arraycopy(c, off, buf, count, len);\n            count = newcount;\n        }\n    }"}
{"Number":"9","API Relative Path":"java.io.DataInputStream.java-readFully(byte-int-int)","Corresponding Source":"/**\n     * See the general contract of the <code>readFully<\/code>\n     * method of <code>DataInput<\/code>.\n     * <p>\n     * Bytes\n     * for this operation are read from the contained\n     * input stream.\n     *\n     * @param      b     the buffer into which the data is read.\n     * @param      off   the start offset of the data.\n     * @param      len   the number of bytes to read.\n     * @exception  EOFException  if this input stream reaches the end before\n     *               reading all the bytes.\n     * @exception  IOException   the stream has been closed and the contained\n     *             input stream does not support reading after close, or\n     *             another I/O error occurs.\n     * @see        java.io.FilterInputStream#in\n     */\n    public final void readFully(byte b[], int off, int len) throws IOException {\n        if (len < 0)\n            throw new IndexOutOfBoundsException();\n        int n = 0;\n        while (n < len) {\n            int count = in.read(b, off + n, len - n);\n            if (count < 0)\n                throw new EOFException();\n            n += count;\n        }\n    }"}
{"Number":"10","API Relative Path":"java.io.File.java-createTempFile(String-String-File)","Corresponding Source":"/**\n     * <p> Creates a new empty file in the specified directory, using the\n     * given prefix and suffix strings to generate its name.  If this method\n     * returns successfully then it is guaranteed that:\n     *\n     * <ol>\n     * <li> The file denoted by the returned abstract pathname did not exist\n     *      before this method was invoked, and\n     * <li> Neither this method nor any of its variants will return the same\n     *      abstract pathname again in the current invocation of the virtual\n     *      machine.\n     * <\/ol>\n     *\n     * This method provides only part of a temporary-file facility.  To arrange\n     * for a file created by this method to be deleted automatically, use the\n     * <code>{@link #deleteOnExit}<\/code> method.\n     *\n     * <p> The <code>prefix<\/code> argument must be at least three characters\n     * long.  It is recommended that the prefix be a short, meaningful string\n     * such as <code>\"hjb\"<\/code> or <code>\"mail\"<\/code>.  The\n     * <code>suffix<\/code> argument may be <code>null<\/code>, in which case the\n     * suffix <code>\".tmp\"<\/code> will be used.\n     *\n     * <p> To create the new file, the prefix and the suffix may first be\n     * adjusted to fit the limitations of the underlying platform.  If the\n     * prefix is too long then it will be truncated, but its first three\n     * characters will always be preserved.  If the suffix is too long then it\n     * too will be truncated, but if it begins with a period character\n     * (<code>'.'<\/code>) then the period and the first three characters\n     * following it will always be preserved.  Once these adjustments have been\n     * made the name of the new file will be generated by concatenating the\n     * prefix, five or more internally-generated characters, and the suffix.\n     *\n     * <p> If the <code>directory<\/code> argument is <code>null<\/code> then the\n     * system-dependent default temporary-file directory will be used.  The\n     * default temporary-file directory is specified by the system property\n     * <code>java.io.tmpdir<\/code>.  On UNIX systems the default value of this\n     * property is typically <code>\"/tmp\"<\/code> or <code>\"/var/tmp\"<\/code>; on\n     * Microsoft Windows systems it is typically <code>\"C:\\\\WINNT\\\\TEMP\"<\/code>.  A different\n     * value may be given to this system property when the Java virtual machine\n     * is invoked, but programmatic changes to this property are not guaranteed\n     * to have any effect upon the temporary directory used by this method.\n     *\n     * @param  prefix     The prefix string to be used in generating the file's\n     *                    name; must be at least three characters long\n     *\n     * @param  suffix     The suffix string to be used in generating the file's\n     *                    name; may be <code>null<\/code>, in which case the\n     *                    suffix <code>\".tmp\"<\/code> will be used\n     *\n     * @param  directory  The directory in which the file is to be created, or\n     *                    <code>null<\/code> if the default temporary-file\n     *                    directory is to be used\n     *\n     * @return  An abstract pathname denoting a newly-created empty file\n     *\n     * @throws  IllegalArgumentException\n     *          If the <code>prefix<\/code> argument contains fewer than three\n     *          characters\n     *\n     * @throws  IOException  If a file could not be created\n     *\n     * @throws  SecurityException\n     *          If a security manager exists and its <code>{@link\n     *          java.lang.SecurityManager#checkWrite(java.lang.String)}<\/code>\n     *          method does not allow a file to be created\n     *\n     * @since 1.2\n     */\n    public static File createTempFile(String prefix, String suffix,\n                                      File directory)\n        throws IOException\n    {\n        if (prefix.length() < 3)\n            throw new IllegalArgumentException(\"Prefix string too short\");\n        if (suffix == null)\n            suffix = \".tmp\";\n\n        File tmpdir = (directory != null) ? directory\n                                          : TempDirectory.location();\n        SecurityManager sm = System.getSecurityManager();\n        File f;\n        do {\n            f = TempDirectory.generateFile(prefix, suffix, tmpdir);\n\n            if (sm != null) {\n                try {\n                    sm.checkWrite(f.getPath());\n                } catch (SecurityException se) {\n                    // don't reveal temporary directory location\n                    if (directory == null)\n                        throw new SecurityException(\"Unable to create temporary file\");\n                    throw se;\n                }\n            }\n        } while ((fs.getBooleanAttributes(f) & FileSystem.BA_EXISTS) != 0);\n\n        if (!fs.createFileExclusively(f.getPath()))\n            throw new IOException(\"Unable to create temporary file\");\n\n        return f;\n    }"}
{"Number":"11","API Relative Path":"java.io.File.java-File(String)","Corresponding Source":"/**\n     * Creates a new <code>File<\/code> instance by converting the given\n     * pathname string into an abstract pathname.  If the given string is\n     * the empty string, then the result is the empty abstract pathname.\n     *\n     * @param   pathname  A pathname string\n     * @throws  NullPointerException\n     *          If the <code>pathname<\/code> argument is <code>null<\/code>\n     */\n    public File(String pathname) {\n        if (pathname == null) {\n            throw new NullPointerException();\n        }\n        this.path = fs.normalize(pathname);\n        this.prefixLength = fs.prefixLength(this.path);\n    }"}
{"Number":"12","API Relative Path":"java.io.File.java-setLastModified(long)","Corresponding Source":"/**\n     * Sets the last-modified time of the file or directory named by this\n     * abstract pathname.\n     *\n     * <p> All platforms support file-modification times to the nearest second,\n     * but some provide more precision.  The argument will be truncated to fit\n     * the supported precision.  If the operation succeeds and no intervening\n     * operations on the file take place, then the next invocation of the\n     * <code>{@link #lastModified}<\/code> method will return the (possibly\n     * truncated) <code>time<\/code> argument that was passed to this method.\n     *\n     * @param  time  The new last-modified time, measured in milliseconds since\n     *               the epoch (00:00:00 GMT, January 1, 1970)\n     *\n     * @return <code>true<\/code> if and only if the operation succeeded;\n     *          <code>false<\/code> otherwise\n     *\n     * @throws  IllegalArgumentException  If the argument is negative\n     *\n     * @throws  SecurityException\n     *          If a security manager exists and its <code>{@link\n     *          java.lang.SecurityManager#checkWrite(java.lang.String)}<\/code>\n     *          method denies write access to the named file\n     *\n     * @since 1.2\n     */\n    public boolean setLastModified(long time) {\n        if (time < 0) throw new IllegalArgumentException(\"Negative time\");\n        SecurityManager security = System.getSecurityManager();\n        if (security != null) {\n            security.checkWrite(path);\n        }\n        if (isInvalid()) {\n            return false;\n        }\n        return fs.setLastModifiedTime(this, time);\n    }"}
{"Number":"13","API Relative Path":"java.io.FileInputStream.java-FileInputStream(FileDescriptor)","Corresponding Source":"/**\n     * Creates a <code>FileInputStream<\/code> by using the file descriptor\n     * <code>fdObj<\/code>, which represents an existing connection to an\n     * actual file in the file system.\n     * <p>\n     * If there is a security manager, its <code>checkRead<\/code> method is\n     * called with the file descriptor <code>fdObj<\/code> as its argument to\n     * see if it's ok to read the file descriptor. If read access is denied\n     * to the file descriptor a <code>SecurityException<\/code> is thrown.\n     * <p>\n     * If <code>fdObj<\/code> is null then a <code>NullPointerException<\/code>\n     * is thrown.\n     * <p>\n     * This constructor does not throw an exception if <code>fdObj<\/code>\n     * is {@link java.io.FileDescriptor#valid() invalid}.\n     * However, if the methods are invoked on the resulting stream to attempt\n     * I/O on the stream, an <code>IOException<\/code> is thrown.\n     *\n     * @param      fdObj   the file descriptor to be opened for reading.\n     * @throws     SecurityException      if a security manager exists and its\n     *                 <code>checkRead<\/code> method denies read access to the\n     *                 file descriptor.\n     * @see        SecurityManager#checkRead(java.io.FileDescriptor)\n     */\n    public FileInputStream(FileDescriptor fdObj) {\n        SecurityManager security = System.getSecurityManager();\n        if (fdObj == null) {\n            throw new NullPointerException();\n        }\n        if (security != null) {\n            security.checkRead(fdObj);\n        }\n        fd = fdObj;\n        path = null;\n\n        /*\n         * FileDescriptor is being shared by streams.\n         * Register this stream with FileDescriptor tracker.\n         */\n        fd.attach(this);\n    }"}
{"Number":"14","API Relative Path":"java.io.FileInputStream.java-FileInputStream(FileDescriptor)","Corresponding Source":"/**\n     * Creates a <code>FileInputStream<\/code> by using the file descriptor\n     * <code>fdObj<\/code>, which represents an existing connection to an\n     * actual file in the file system.\n     * <p>\n     * If there is a security manager, its <code>checkRead<\/code> method is\n     * called with the file descriptor <code>fdObj<\/code> as its argument to\n     * see if it's ok to read the file descriptor. If read access is denied\n     * to the file descriptor a <code>SecurityException<\/code> is thrown.\n     * <p>\n     * If <code>fdObj<\/code> is null then a <code>NullPointerException<\/code>\n     * is thrown.\n     * <p>\n     * This constructor does not throw an exception if <code>fdObj<\/code>\n     * is {@link java.io.FileDescriptor#valid() invalid}.\n     * However, if the methods are invoked on the resulting stream to attempt\n     * I/O on the stream, an <code>IOException<\/code> is thrown.\n     *\n     * @param      fdObj   the file descriptor to be opened for reading.\n     * @throws     SecurityException      if a security manager exists and its\n     *                 <code>checkRead<\/code> method denies read access to the\n     *                 file descriptor.\n     * @see        SecurityManager#checkRead(java.io.FileDescriptor)\n     */\n    public FileInputStream(FileDescriptor fdObj) {\n        SecurityManager security = System.getSecurityManager();\n        if (fdObj == null) {\n            throw new NullPointerException();\n        }\n        if (security != null) {\n            security.checkRead(fdObj);\n        }\n        fd = fdObj;\n        path = null;\n\n        /*\n         * FileDescriptor is being shared by streams.\n         * Register this stream with FileDescriptor tracker.\n         */\n        fd.attach(this);\n    }"}
{"Number":"15","API Relative Path":"java.io.FileInputStream.java-FileInputStream(String)","Corresponding Source":"/**\n     * Creates a <code>FileInputStream<\/code> by\n     * opening a connection to an actual file,\n     * the file named by the path name <code>name<\/code>\n     * in the file system.  A new <code>FileDescriptor<\/code>\n     * object is created to represent this file\n     * connection.\n     * <p>\n     * First, if there is a security\n     * manager, its <code>checkRead<\/code> method\n     * is called with the <code>name<\/code> argument\n     * as its argument.\n     * <p>\n     * If the named file does not exist, is a directory rather than a regular\n     * file, or for some other reason cannot be opened for reading then a\n     * <code>FileNotFoundException<\/code> is thrown.\n     *\n     * @param      name   the system-dependent file name.\n     * @exception  FileNotFoundException  if the file does not exist,\n     *                   is a directory rather than a regular file,\n     *                   or for some other reason cannot be opened for\n     *                   reading.\n     * @exception  SecurityException      if a security manager exists and its\n     *               <code>checkRead<\/code> method denies read access\n     *               to the file.\n     * @see        java.lang.SecurityManager#checkRead(java.lang.String)\n     */\n    public FileInputStream(String name) throws FileNotFoundException {\n        this(name != null ? new File(name) : null);\n    }"}
{"Number":"16","API Relative Path":"java.io.FileOutputStream.java-FileOutputStream(FileDescriptor)","Corresponding Source":"/**\n     * Creates a file output stream to write to the specified file\n     * descriptor, which represents an existing connection to an actual\n     * file in the file system.\n     * <p>\n     * First, if there is a security manager, its <code>checkWrite<\/code>\n     * method is called with the file descriptor <code>fdObj<\/code>\n     * argument as its argument.\n     * <p>\n     * If <code>fdObj<\/code> is null then a <code>NullPointerException<\/code>\n     * is thrown.\n     * <p>\n     * This constructor does not throw an exception if <code>fdObj<\/code>\n     * is {@link java.io.FileDescriptor#valid() invalid}.\n     * However, if the methods are invoked on the resulting stream to attempt\n     * I/O on the stream, an <code>IOException<\/code> is thrown.\n     *\n     * @param      fdObj   the file descriptor to be opened for writing\n     * @exception  SecurityException  if a security manager exists and its\n     *               <code>checkWrite<\/code> method denies\n     *               write access to the file descriptor\n     * @see        java.lang.SecurityManager#checkWrite(java.io.FileDescriptor)\n     */\n    public FileOutputStream(FileDescriptor fdObj) {\n        SecurityManager security = System.getSecurityManager();\n        if (fdObj == null) {\n            throw new NullPointerException();\n        }\n        if (security != null) {\n            security.checkWrite(fdObj);\n        }\n        this.fd = fdObj;\n        this.append = false;\n        this.path = null;\n\n        fd.attach(this);\n    }"}
{"Number":"17","API Relative Path":"java.io.FileOutputStream.java-FileOutputStream(FileDescriptor)","Corresponding Source":"/**\n     * Creates a file output stream to write to the specified file\n     * descriptor, which represents an existing connection to an actual\n     * file in the file system.\n     * <p>\n     * First, if there is a security manager, its <code>checkWrite<\/code>\n     * method is called with the file descriptor <code>fdObj<\/code>\n     * argument as its argument.\n     * <p>\n     * If <code>fdObj<\/code> is null then a <code>NullPointerException<\/code>\n     * is thrown.\n     * <p>\n     * This constructor does not throw an exception if <code>fdObj<\/code>\n     * is {@link java.io.FileDescriptor#valid() invalid}.\n     * However, if the methods are invoked on the resulting stream to attempt\n     * I/O on the stream, an <code>IOException<\/code> is thrown.\n     *\n     * @param      fdObj   the file descriptor to be opened for writing\n     * @exception  SecurityException  if a security manager exists and its\n     *               <code>checkWrite<\/code> method denies\n     *               write access to the file descriptor\n     * @see        java.lang.SecurityManager#checkWrite(java.io.FileDescriptor)\n     */\n    public FileOutputStream(FileDescriptor fdObj) {\n        SecurityManager security = System.getSecurityManager();\n        if (fdObj == null) {\n            throw new NullPointerException();\n        }\n        if (security != null) {\n            security.checkWrite(fdObj);\n        }\n        this.fd = fdObj;\n        this.append = false;\n        this.path = null;\n\n        fd.attach(this);\n    }"}
{"Number":"18","API Relative Path":"java.io.FileOutputStream.java-FileOutputStream(String)","Corresponding Source":"/**\n     * Creates a file output stream to write to the file with the\n     * specified name. A new <code>FileDescriptor<\/code> object is\n     * created to represent this file connection.\n     * <p>\n     * First, if there is a security manager, its <code>checkWrite<\/code>\n     * method is called with <code>name<\/code> as its argument.\n     * <p>\n     * If the file exists but is a directory rather than a regular file, does\n     * not exist but cannot be created, or cannot be opened for any other\n     * reason then a <code>FileNotFoundException<\/code> is thrown.\n     *\n     * @param      name   the system-dependent filename\n     * @exception  FileNotFoundException  if the file exists but is a directory\n     *                   rather than a regular file, does not exist but cannot\n     *                   be created, or cannot be opened for any other reason\n     * @exception  SecurityException  if a security manager exists and its\n     *               <code>checkWrite<\/code> method denies write access\n     *               to the file.\n     * @see        java.lang.SecurityManager#checkWrite(java.lang.String)\n     */\n    public FileOutputStream(String name) throws FileNotFoundException {\n        this(name != null ? new File(name) : null, false);\n    }"}
{"Number":"19","API Relative Path":"java.io.FileOutputStream.java-FileOutputStream(String-boolean)","Corresponding Source":"/**\n     * Creates a file output stream to write to the file with the specified\n     * name.  If the second argument is <code>true<\/code>, then\n     * bytes will be written to the end of the file rather than the beginning.\n     * A new <code>FileDescriptor<\/code> object is created to represent this\n     * file connection.\n     * <p>\n     * First, if there is a security manager, its <code>checkWrite<\/code>\n     * method is called with <code>name<\/code> as its argument.\n     * <p>\n     * If the file exists but is a directory rather than a regular file, does\n     * not exist but cannot be created, or cannot be opened for any other\n     * reason then a <code>FileNotFoundException<\/code> is thrown.\n     *\n     * @param     name        the system-dependent file name\n     * @param     append      if <code>true<\/code>, then bytes will be written\n     *                   to the end of the file rather than the beginning\n     * @exception  FileNotFoundException  if the file exists but is a directory\n     *                   rather than a regular file, does not exist but cannot\n     *                   be created, or cannot be opened for any other reason.\n     * @exception  SecurityException  if a security manager exists and its\n     *               <code>checkWrite<\/code> method denies write access\n     *               to the file.\n     * @see        java.lang.SecurityManager#checkWrite(java.lang.String)\n     * @since     JDK1.1\n     */\n    public FileOutputStream(String name, boolean append)\n        throws FileNotFoundException\n    {\n        this(name != null ? new File(name) : null, append);\n    }"}
{"Number":"20","API Relative Path":"java.io.FilePermission.java-FilePermission(String-int)","Corresponding Source":"/**\n     * Creates a new FilePermission object using an action mask.\n     * More efficient than the FilePermission(String, String) constructor.\n     * Can be used from within\n     * code that needs to create a FilePermission object to pass into the\n     * <code>implies<\/code> method.\n     *\n     * @param path the pathname of the file/directory.\n     * @param mask the action mask to use.\n     */\n\n    // package private for use by the FilePermissionCollection add method\n    FilePermission(String path, int mask) {\n        super(path);\n        init(mask);\n    }"}
{"Number":"21","API Relative Path":"java.io.FileReader.java-FileReader(FileDescriptor)","Corresponding Source":"/**\n    * Creates a new <tt>FileReader<\/tt>, given the\n    * <tt>FileDescriptor<\/tt> to read from.\n    *\n    * @param fd the FileDescriptor to read from\n    */\n    public FileReader(FileDescriptor fd) {\n        super(new FileInputStream(fd));\n    }"}
{"Number":"22","API Relative Path":"java.io.FileReader.java-FileReader(FileDescriptor)","Corresponding Source":"/**\n    * Creates a new <tt>FileReader<\/tt>, given the\n    * <tt>FileDescriptor<\/tt> to read from.\n    *\n    * @param fd the FileDescriptor to read from\n    */\n    public FileReader(FileDescriptor fd) {\n        super(new FileInputStream(fd));\n    }"}
{"Number":"23","API Relative Path":"java.io.FileReader.java-FileReader(String)","Corresponding Source":"/**\n    * Creates a new <tt>FileReader<\/tt>, given the name of the\n    * file to read from.\n    *\n    * @param fileName the name of the file to read from\n    * @exception  FileNotFoundException  if the named file does not exist,\n    *                   is a directory rather than a regular file,\n    *                   or for some other reason cannot be opened for\n    *                   reading.\n    */\n    public FileReader(String fileName) throws FileNotFoundException {\n        super(new FileInputStream(fileName));\n    }"}
{"Number":"24","API Relative Path":"java.io.FileWriter.java-FileWriter(FileDescriptor)","Corresponding Source":"/**\n     * Constructs a FileWriter object associated with a file descriptor.\n     *\n     * @param fd  FileDescriptor object to write to.\n     */\n    public FileWriter(FileDescriptor fd) {\n        super(new FileOutputStream(fd));\n    }"}
{"Number":"25","API Relative Path":"java.io.FileWriter.java-FileWriter(FileDescriptor)","Corresponding Source":"/**\n     * Constructs a FileWriter object associated with a file descriptor.\n     *\n     * @param fd  FileDescriptor object to write to.\n     */\n    public FileWriter(FileDescriptor fd) {\n        super(new FileOutputStream(fd));\n    }"}
{"Number":"26","API Relative Path":"java.io.FileWriter.java-FileWriter(String)","Corresponding Source":"/**\n     * Constructs a FileWriter object given a file name.\n     *\n     * @param fileName  String The system-dependent filename.\n     * @throws IOException  if the named file exists but is a directory rather\n     *                  than a regular file, does not exist but cannot be\n     *                  created, or cannot be opened for any other reason\n     */\n    public FileWriter(String fileName) throws IOException {\n        super(new FileOutputStream(fileName));\n    }"}
{"Number":"27","API Relative Path":"java.io.FileWriter.java-FileWriter(String-boolean)","Corresponding Source":"/**\n     * Constructs a FileWriter object given a file name with a boolean\n     * indicating whether or not to append the data written.\n     *\n     * @param fileName  String The system-dependent filename.\n     * @param append    boolean if <code>true<\/code>, then data will be written\n     *                  to the end of the file rather than the beginning.\n     * @throws IOException  if the named file exists but is a directory rather\n     *                  than a regular file, does not exist but cannot be\n     *                  created, or cannot be opened for any other reason\n     */\n    public FileWriter(String fileName, boolean append) throws IOException {\n        super(new FileOutputStream(fileName, append));\n    }"}
{"Number":"28","API Relative Path":"java.io.FilterOutputStream.java-write(byte-int-int)","Corresponding Source":"/**\n     * Writes <code>len<\/code> bytes from the specified\n     * <code>byte<\/code> array starting at offset <code>off<\/code> to\n     * this output stream.\n     * <p>\n     * The <code>write<\/code> method of <code>FilterOutputStream<\/code>\n     * calls the <code>write<\/code> method of one argument on each\n     * <code>byte<\/code> to output.\n     * <p>\n     * Note that this method does not call the <code>write<\/code> method\n     * of its underlying input stream with the same arguments. Subclasses\n     * of <code>FilterOutputStream<\/code> should provide a more efficient\n     * implementation of this method.\n     *\n     * @param      b     the data.\n     * @param      off   the start offset in the data.\n     * @param      len   the number of bytes to write.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.FilterOutputStream#write(int)\n     */\n    public void write(byte b[], int off, int len) throws IOException {\n        if ((off | len | (b.length - (len + off)) | (off + len)) < 0)\n            throw new IndexOutOfBoundsException();\n\n        for (int i = 0 ; i < len ; i++) {\n            write(b[off + i]);\n        }\n    }"}
{"Number":"29","API Relative Path":"java.io.InputStream.java-read(byte-int-int)","Corresponding Source":"/**\n     * Reads up to <code>len<\/code> bytes of data from the input stream into\n     * an array of bytes.  An attempt is made to read as many as\n     * <code>len<\/code> bytes, but a smaller number may be read.\n     * The number of bytes actually read is returned as an integer.\n     *\n     * <p> This method blocks until input data is available, end of file is\n     * detected, or an exception is thrown.\n     *\n     * <p> If <code>len<\/code> is zero, then no bytes are read and\n     * <code>0<\/code> is returned; otherwise, there is an attempt to read at\n     * least one byte. If no byte is available because the stream is at end of\n     * file, the value <code>-1<\/code> is returned; otherwise, at least one\n     * byte is read and stored into <code>b<\/code>.\n     *\n     * <p> The first byte read is stored into element <code>b[off]<\/code>, the\n     * next one into <code>b[off+1]<\/code>, and so on. The number of bytes read\n     * is, at most, equal to <code>len<\/code>. Let <i>k<\/i> be the number of\n     * bytes actually read; these bytes will be stored in elements\n     * <code>b[off]<\/code> through <code>b[off+<\/code><i>k<\/i><code>-1]<\/code>,\n     * leaving elements <code>b[off+<\/code><i>k<\/i><code>]<\/code> through\n     * <code>b[off+len-1]<\/code> unaffected.\n     *\n     * <p> In every case, elements <code>b[0]<\/code> through\n     * <code>b[off]<\/code> and elements <code>b[off+len]<\/code> through\n     * <code>b[b.length-1]<\/code> are unaffected.\n     *\n     * <p> The <code>read(b,<\/code> <code>off,<\/code> <code>len)<\/code> method\n     * for class <code>InputStream<\/code> simply calls the method\n     * <code>read()<\/code> repeatedly. If the first such call results in an\n     * <code>IOException<\/code>, that exception is returned from the call to\n     * the <code>read(b,<\/code> <code>off,<\/code> <code>len)<\/code> method.  If\n     * any subsequent call to <code>read()<\/code> results in a\n     * <code>IOException<\/code>, the exception is caught and treated as if it\n     * were end of file; the bytes read up to that point are stored into\n     * <code>b<\/code> and the number of bytes read before the exception\n     * occurred is returned. The default implementation of this method blocks\n     * until the requested amount of input data <code>len<\/code> has been read,\n     * end of file is detected, or an exception is thrown. Subclasses are encouraged\n     * to provide a more efficient implementation of this method.\n     *\n     * @param      b     the buffer into which the data is read.\n     * @param      off   the start offset in array <code>b<\/code>\n     *                   at which the data is written.\n     * @param      len   the maximum number of bytes to read.\n     * @return     the total number of bytes read into the buffer, or\n     *             <code>-1<\/code> if there is no more data because the end of\n     *             the stream has been reached.\n     * @exception  IOException If the first byte cannot be read for any reason\n     * other than end of file, or if the input stream has been closed, or if\n     * some other I/O error occurs.\n     * @exception  NullPointerException If <code>b<\/code> is <code>null<\/code>.\n     * @exception  IndexOutOfBoundsException If <code>off<\/code> is negative,\n     * <code>len<\/code> is negative, or <code>len<\/code> is greater than\n     * <code>b.length - off<\/code>\n     * @see        java.io.InputStream#read()\n     */\n    public int read(byte b[], int off, int len) throws IOException {\n        if (b == null) {\n            throw new NullPointerException();\n        } else if (off < 0 || len < 0 || len > b.length - off) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return 0;\n        }\n\n        int c = read();\n        if (c == -1) {\n            return -1;\n        }\n        b[off] = (byte)c;\n\n        int i = 1;\n        try {\n            for (; i < len ; i++) {\n                c = read();\n                if (c == -1) {\n                    break;\n                }\n                b[off + i] = (byte)c;\n            }\n        } catch (IOException ee) {\n        }\n        return i;\n    }"}
{"Number":"30","API Relative Path":"java.io.InputStreamReader.java-InputStreamReader(InputStream-Charset)","Corresponding Source":"/**\n     * Creates an InputStreamReader that uses the given charset decoder.\n     *\n     * @param  in       An InputStream\n     * @param  dec      A charset decoder\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public InputStreamReader(InputStream in, CharsetDecoder dec) {\n        super(in);\n        if (dec == null)\n            throw new NullPointerException(\"charset decoder\");\n        sd = StreamDecoder.forInputStreamReader(in, this, dec);\n    }"}
{"Number":"31","API Relative Path":"java.io.InputStreamReader.java-InputStreamReader(InputStream-CharsetDecoder)","Corresponding Source":"/**\n     * Creates an InputStreamReader that uses the given charset decoder.\n     *\n     * @param  in       An InputStream\n     * @param  dec      A charset decoder\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public InputStreamReader(InputStream in, CharsetDecoder dec) {\n        super(in);\n        if (dec == null)\n            throw new NullPointerException(\"charset decoder\");\n        sd = StreamDecoder.forInputStreamReader(in, this, dec);\n    }"}
{"Number":"32","API Relative Path":"java.io.InputStreamReader.java-InputStreamReader(InputStream-String)","Corresponding Source":"/**\n     * Creates an InputStreamReader that uses the named charset.\n     *\n     * @param  in\n     *         An InputStream\n     *\n     * @param  charsetName\n     *         The name of a supported\n     *         {@link java.nio.charset.Charset charset}\n     *\n     * @exception  UnsupportedEncodingException\n     *             If the named charset is not supported\n     */\n    public InputStreamReader(InputStream in, String charsetName)\n        throws UnsupportedEncodingException\n    {\n        super(in);\n        if (charsetName == null)\n            throw new NullPointerException(\"charsetName\");\n        sd = StreamDecoder.forInputStreamReader(in, this, charsetName);\n    }"}
{"Number":"33","API Relative Path":"java.io.LineNumberInputStream.java-read(byte-int-int)","Corresponding Source":"/**\n     * Reads up to {@code len} bytes of data from this input stream\n     * into an array of bytes. This method blocks until some input is available.\n     * <p>\n     * The {@code read} method of\n     * {@code LineNumberInputStream} repeatedly calls the\n     * {@code read} method of zero arguments to fill in the byte array.\n     *\n     * @param      b     the buffer into which the data is read.\n     * @param      off   the start offset of the data.\n     * @param      len   the maximum number of bytes read.\n     * @return     the total number of bytes read into the buffer, or\n     *             {@code -1} if there is no more data because the end of\n     *             this stream has been reached.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.LineNumberInputStream#read()\n     */\n    public int read(byte b[], int off, int len) throws IOException {\n        if (b == null) {\n            throw new NullPointerException();\n        } else if ((off < 0) || (off > b.length) || (len < 0) ||\n                   ((off + len) > b.length) || ((off + len) < 0)) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return 0;\n        }\n\n        int c = read();\n        if (c == -1) {\n            return -1;\n        }\n        b[off] = (byte)c;\n\n        int i = 1;\n        try {\n            for (; i < len ; i++) {\n                c = read();\n                if (c == -1) {\n                    break;\n                }\n                if (b != null) {\n                    b[off + i] = (byte)c;\n                }\n            }\n        } catch (IOException ee) {\n        }\n        return i;\n    }"}
{"Number":"34","API Relative Path":"java.io.LineNumberInputStream.java-read(byte-int-int)","Corresponding Source":"/**\n     * Reads up to {@code len} bytes of data from this input stream\n     * into an array of bytes. This method blocks until some input is available.\n     * <p>\n     * The {@code read} method of\n     * {@code LineNumberInputStream} repeatedly calls the\n     * {@code read} method of zero arguments to fill in the byte array.\n     *\n     * @param      b     the buffer into which the data is read.\n     * @param      off   the start offset of the data.\n     * @param      len   the maximum number of bytes read.\n     * @return     the total number of bytes read into the buffer, or\n     *             {@code -1} if there is no more data because the end of\n     *             this stream has been reached.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.LineNumberInputStream#read()\n     */\n    public int read(byte b[], int off, int len) throws IOException {\n        if (b == null) {\n            throw new NullPointerException();\n        } else if ((off < 0) || (off > b.length) || (len < 0) ||\n                   ((off + len) > b.length) || ((off + len) < 0)) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return 0;\n        }\n\n        int c = read();\n        if (c == -1) {\n            return -1;\n        }\n        b[off] = (byte)c;\n\n        int i = 1;\n        try {\n            for (; i < len ; i++) {\n                c = read();\n                if (c == -1) {\n                    break;\n                }\n                if (b != null) {\n                    b[off + i] = (byte)c;\n                }\n            }\n        } catch (IOException ee) {\n        }\n        return i;\n    }"}
{"Number":"35","API Relative Path":"java.io.ObjectInputStream.java-read(byte[]-int-int)","Corresponding Source":"/**\n     * Reads into an array of bytes.  This method will block until some input\n     * is available. Consider using java.io.DataInputStream.readFully to read\n     * exactly 'length' bytes.\n     *\n     * @param   buf the buffer into which the data is read\n     * @param   off the start offset of the data\n     * @param   len the maximum number of bytes read\n     * @return  the actual number of bytes read, -1 is returned when the end of\n     *          the stream is reached.\n     * @throws  IOException If an I/O error has occurred.\n     * @see java.io.DataInputStream#readFully(byte[],int,int)\n     */\n    public int read(byte[] buf, int off, int len) throws IOException {\n        if (buf == null) {\n            throw new NullPointerException();\n        }\n        int endoff = off + len;\n        if (off < 0 || len < 0 || endoff > buf.length || endoff < 0) {\n            throw new IndexOutOfBoundsException();\n        }\n        return bin.read(buf, off, len, false);\n    }"}
{"Number":"36","API Relative Path":"java.io.ObjectInputStream.java-read(byte[]-int-int)","Corresponding Source":"/**\n     * Reads into an array of bytes.  This method will block until some input\n     * is available. Consider using java.io.DataInputStream.readFully to read\n     * exactly 'length' bytes.\n     *\n     * @param   buf the buffer into which the data is read\n     * @param   off the start offset of the data\n     * @param   len the maximum number of bytes read\n     * @return  the actual number of bytes read, -1 is returned when the end of\n     *          the stream is reached.\n     * @throws  IOException If an I/O error has occurred.\n     * @see java.io.DataInputStream#readFully(byte[],int,int)\n     */\n    public int read(byte[] buf, int off, int len) throws IOException {\n        if (buf == null) {\n            throw new NullPointerException();\n        }\n        int endoff = off + len;\n        if (off < 0 || len < 0 || endoff > buf.length || endoff < 0) {\n            throw new IndexOutOfBoundsException();\n        }\n        return bin.read(buf, off, len, false);\n    }"}
{"Number":"37","API Relative Path":"java.io.ObjectInputStream.java-readFully(byte[]-int-int)","Corresponding Source":"/**\n     * Reads bytes, blocking until all bytes are read.\n     *\n     * @param   buf the buffer into which the data is read\n     * @param   off the start offset of the data\n     * @param   len the maximum number of bytes to read\n     * @throws  EOFException If end of file is reached.\n     * @throws  IOException If other I/O error has occurred.\n     */\n    public void readFully(byte[] buf, int off, int len) throws IOException {\n        int endoff = off + len;\n        if (off < 0 || len < 0 || endoff > buf.length || endoff < 0) {\n            throw new IndexOutOfBoundsException();\n        }\n        bin.readFully(buf, off, len, false);\n    }"}
{"Number":"38","API Relative Path":"java.io.ObjectOutputStream.java-write(byte[]-int-int)","Corresponding Source":"/**\n     * Writes a sub array of bytes.\n     *\n     * @param   buf the data to be written\n     * @param   off the start offset in the data\n     * @param   len the number of bytes that are written\n     * @throws  IOException If an I/O error has occurred.\n     */\n    public void write(byte[] buf, int off, int len) throws IOException {\n        if (buf == null) {\n            throw new NullPointerException();\n        }\n        int endoff = off + len;\n        if (off < 0 || len < 0 || endoff > buf.length || endoff < 0) {\n            throw new IndexOutOfBoundsException();\n        }\n        bout.write(buf, off, len, false);\n    }"}
{"Number":"39","API Relative Path":"java.io.ObjectOutputStream.java-write(byte[]-int-int)","Corresponding Source":"/**\n     * Writes a sub array of bytes.\n     *\n     * @param   buf the data to be written\n     * @param   off the start offset in the data\n     * @param   len the number of bytes that are written\n     * @throws  IOException If an I/O error has occurred.\n     */\n    public void write(byte[] buf, int off, int len) throws IOException {\n        if (buf == null) {\n            throw new NullPointerException();\n        }\n        int endoff = off + len;\n        if (off < 0 || len < 0 || endoff > buf.length || endoff < 0) {\n            throw new IndexOutOfBoundsException();\n        }\n        bout.write(buf, off, len, false);\n    }"}
{"Number":"40","API Relative Path":"java.io.ObjectStreamClass.java-initNonProxy(ObjectStreamClass-Class-ClassNotFoundException-ObjectStreamClass)","Corresponding Source":"/**\n     * Initializes class descriptor representing a non-proxy class.\n     */\n    void initNonProxy(ObjectStreamClass model,\n                      Class<?> cl,\n                      ClassNotFoundException resolveEx,\n                      ObjectStreamClass superDesc)\n        throws InvalidClassException\n    {\n        long suid = Long.valueOf(model.getSerialVersionUID());\n        ObjectStreamClass osc = null;\n        if (cl != null) {\n            osc = lookup(cl, true);\n            if (osc.isProxy) {\n                throw new InvalidClassException(\n                        \"cannot bind non-proxy descriptor to a proxy class\");\n            }\n            if (model.isEnum != osc.isEnum) {\n                throw new InvalidClassException(model.isEnum ?\n                        \"cannot bind enum descriptor to a non-enum class\" :\n                        \"cannot bind non-enum descriptor to an enum class\");\n            }\n\n            if (model.serializable == osc.serializable &&\n                    !cl.isArray() &&\n                    suid != osc.getSerialVersionUID()) {\n                throw new InvalidClassException(osc.name,\n                        \"local class incompatible: \" +\n                                \"stream classdesc serialVersionUID = \" + suid +\n                                \", local class serialVersionUID = \" +\n                                osc.getSerialVersionUID());\n            }\n\n            if (!classNamesEqual(model.name, osc.name)) {\n                throw new InvalidClassException(osc.name,\n                        \"local class name incompatible with stream class \" +\n                                \"name \\\"\" + model.name + \"\\\"\");\n            }\n\n            if (!model.isEnum) {\n                if ((model.serializable == osc.serializable) &&\n                        (model.externalizable != osc.externalizable)) {\n                    throw new InvalidClassException(osc.name,\n                            \"Serializable incompatible with Externalizable\");\n                }\n\n                if ((model.serializable != osc.serializable) ||\n                        (model.externalizable != osc.externalizable) ||\n                        !(model.serializable || model.externalizable)) {\n                    deserializeEx = new ExceptionInfo(\n                            osc.name, \"class invalid for deserialization\");\n                }\n            }\n        }\n\n        this.cl = cl;\n        this.resolveEx = resolveEx;\n        this.superDesc = superDesc;\n        name = model.name;\n        this.suid = suid;\n        isProxy = false;\n        isEnum = model.isEnum;\n        serializable = model.serializable;\n        externalizable = model.externalizable;\n        hasBlockExternalData = model.hasBlockExternalData;\n        hasWriteObjectData = model.hasWriteObjectData;\n        fields = model.fields;\n        primDataSize = model.primDataSize;\n        numObjFields = model.numObjFields;\n\n        if (osc != null) {\n            localDesc = osc;\n            writeObjectMethod = localDesc.writeObjectMethod;\n            readObjectMethod = localDesc.readObjectMethod;\n            readObjectNoDataMethod = localDesc.readObjectNoDataMethod;\n            writeReplaceMethod = localDesc.writeReplaceMethod;\n            readResolveMethod = localDesc.readResolveMethod;\n            if (deserializeEx == null) {\n                deserializeEx = localDesc.deserializeEx;\n            }\n            cons = localDesc.cons;\n        }\n\n        fieldRefl = getReflector(fields, localDesc);\n        // reassign to matched fields so as to reflect local unshared settings\n        fields = fieldRefl.getFields();\n        initialized = true;\n    }"}
{"Number":"41","API Relative Path":"java.io.ObjectStreamClass.java-initNonProxy(ObjectStreamClass-Class-ClassNotFoundException-ObjectStreamClass)","Corresponding Source":"/**\n     * Initializes class descriptor representing a non-proxy class.\n     */\n    void initNonProxy(ObjectStreamClass model,\n                      Class<?> cl,\n                      ClassNotFoundException resolveEx,\n                      ObjectStreamClass superDesc)\n        throws InvalidClassException\n    {\n        long suid = Long.valueOf(model.getSerialVersionUID());\n        ObjectStreamClass osc = null;\n        if (cl != null) {\n            osc = lookup(cl, true);\n            if (osc.isProxy) {\n                throw new InvalidClassException(\n                        \"cannot bind non-proxy descriptor to a proxy class\");\n            }\n            if (model.isEnum != osc.isEnum) {\n                throw new InvalidClassException(model.isEnum ?\n                        \"cannot bind enum descriptor to a non-enum class\" :\n                        \"cannot bind non-enum descriptor to an enum class\");\n            }\n\n            if (model.serializable == osc.serializable &&\n                    !cl.isArray() &&\n                    suid != osc.getSerialVersionUID()) {\n                throw new InvalidClassException(osc.name,\n                        \"local class incompatible: \" +\n                                \"stream classdesc serialVersionUID = \" + suid +\n                                \", local class serialVersionUID = \" +\n                                osc.getSerialVersionUID());\n            }\n\n            if (!classNamesEqual(model.name, osc.name)) {\n                throw new InvalidClassException(osc.name,\n                        \"local class name incompatible with stream class \" +\n                                \"name \\\"\" + model.name + \"\\\"\");\n            }\n\n            if (!model.isEnum) {\n                if ((model.serializable == osc.serializable) &&\n                        (model.externalizable != osc.externalizable)) {\n                    throw new InvalidClassException(osc.name,\n                            \"Serializable incompatible with Externalizable\");\n                }\n\n                if ((model.serializable != osc.serializable) ||\n                        (model.externalizable != osc.externalizable) ||\n                        !(model.serializable || model.externalizable)) {\n                    deserializeEx = new ExceptionInfo(\n                            osc.name, \"class invalid for deserialization\");\n                }\n            }\n        }\n\n        this.cl = cl;\n        this.resolveEx = resolveEx;\n        this.superDesc = superDesc;\n        name = model.name;\n        this.suid = suid;\n        isProxy = false;\n        isEnum = model.isEnum;\n        serializable = model.serializable;\n        externalizable = model.externalizable;\n        hasBlockExternalData = model.hasBlockExternalData;\n        hasWriteObjectData = model.hasWriteObjectData;\n        fields = model.fields;\n        primDataSize = model.primDataSize;\n        numObjFields = model.numObjFields;\n\n        if (osc != null) {\n            localDesc = osc;\n            writeObjectMethod = localDesc.writeObjectMethod;\n            readObjectMethod = localDesc.readObjectMethod;\n            readObjectNoDataMethod = localDesc.readObjectNoDataMethod;\n            writeReplaceMethod = localDesc.writeReplaceMethod;\n            readResolveMethod = localDesc.readResolveMethod;\n            if (deserializeEx == null) {\n                deserializeEx = localDesc.deserializeEx;\n            }\n            cons = localDesc.cons;\n        }\n\n        fieldRefl = getReflector(fields, localDesc);\n        // reassign to matched fields so as to reflect local unshared settings\n        fields = fieldRefl.getFields();\n        initialized = true;\n    }"}
{"Number":"42","API Relative Path":"java.io.ObjectStreamClass.java-initNonProxy(ObjectStreamClass-Class-ClassNotFoundException-ObjectStreamClass)","Corresponding Source":"/**\n     * Initializes class descriptor representing a non-proxy class.\n     */\n    void initNonProxy(ObjectStreamClass model,\n                      Class<?> cl,\n                      ClassNotFoundException resolveEx,\n                      ObjectStreamClass superDesc)\n        throws InvalidClassException\n    {\n        long suid = Long.valueOf(model.getSerialVersionUID());\n        ObjectStreamClass osc = null;\n        if (cl != null) {\n            osc = lookup(cl, true);\n            if (osc.isProxy) {\n                throw new InvalidClassException(\n                        \"cannot bind non-proxy descriptor to a proxy class\");\n            }\n            if (model.isEnum != osc.isEnum) {\n                throw new InvalidClassException(model.isEnum ?\n                        \"cannot bind enum descriptor to a non-enum class\" :\n                        \"cannot bind non-enum descriptor to an enum class\");\n            }\n\n            if (model.serializable == osc.serializable &&\n                    !cl.isArray() &&\n                    suid != osc.getSerialVersionUID()) {\n                throw new InvalidClassException(osc.name,\n                        \"local class incompatible: \" +\n                                \"stream classdesc serialVersionUID = \" + suid +\n                                \", local class serialVersionUID = \" +\n                                osc.getSerialVersionUID());\n            }\n\n            if (!classNamesEqual(model.name, osc.name)) {\n                throw new InvalidClassException(osc.name,\n                        \"local class name incompatible with stream class \" +\n                                \"name \\\"\" + model.name + \"\\\"\");\n            }\n\n            if (!model.isEnum) {\n                if ((model.serializable == osc.serializable) &&\n                        (model.externalizable != osc.externalizable)) {\n                    throw new InvalidClassException(osc.name,\n                            \"Serializable incompatible with Externalizable\");\n                }\n\n                if ((model.serializable != osc.serializable) ||\n                        (model.externalizable != osc.externalizable) ||\n                        !(model.serializable || model.externalizable)) {\n                    deserializeEx = new ExceptionInfo(\n                            osc.name, \"class invalid for deserialization\");\n                }\n            }\n        }\n\n        this.cl = cl;\n        this.resolveEx = resolveEx;\n        this.superDesc = superDesc;\n        name = model.name;\n        this.suid = suid;\n        isProxy = false;\n        isEnum = model.isEnum;\n        serializable = model.serializable;\n        externalizable = model.externalizable;\n        hasBlockExternalData = model.hasBlockExternalData;\n        hasWriteObjectData = model.hasWriteObjectData;\n        fields = model.fields;\n        primDataSize = model.primDataSize;\n        numObjFields = model.numObjFields;\n\n        if (osc != null) {\n            localDesc = osc;\n            writeObjectMethod = localDesc.writeObjectMethod;\n            readObjectMethod = localDesc.readObjectMethod;\n            readObjectNoDataMethod = localDesc.readObjectNoDataMethod;\n            writeReplaceMethod = localDesc.writeReplaceMethod;\n            readResolveMethod = localDesc.readResolveMethod;\n            if (deserializeEx == null) {\n                deserializeEx = localDesc.deserializeEx;\n            }\n            cons = localDesc.cons;\n        }\n\n        fieldRefl = getReflector(fields, localDesc);\n        // reassign to matched fields so as to reflect local unshared settings\n        fields = fieldRefl.getFields();\n        initialized = true;\n    }"}
{"Number":"43","API Relative Path":"java.io.ObjectStreamClass.java-initProxy(Class-ClassNotFoundException-ObjectStreamClass)","Corresponding Source":"/**\n     * Initializes class descriptor representing a proxy class.\n     */\n    void initProxy(Class<?> cl,\n                   ClassNotFoundException resolveEx,\n                   ObjectStreamClass superDesc)\n        throws InvalidClassException\n    {\n        ObjectStreamClass osc = null;\n        if (cl != null) {\n            osc = lookup(cl, true);\n            if (!osc.isProxy) {\n                throw new InvalidClassException(\n                    \"cannot bind proxy descriptor to a non-proxy class\");\n            }\n        }\n        this.cl = cl;\n        this.resolveEx = resolveEx;\n        this.superDesc = superDesc;\n        isProxy = true;\n        serializable = true;\n        suid = Long.valueOf(0);\n        fields = NO_FIELDS;\n        if (osc != null) {\n            localDesc = osc;\n            name = localDesc.name;\n            externalizable = localDesc.externalizable;\n            writeReplaceMethod = localDesc.writeReplaceMethod;\n            readResolveMethod = localDesc.readResolveMethod;\n            deserializeEx = localDesc.deserializeEx;\n            cons = localDesc.cons;\n        }\n        fieldRefl = getReflector(fields, localDesc);\n        initialized = true;\n    }"}
{"Number":"44","API Relative Path":"java.io.ObjectStreamField.java-ObjectStreamField(String-Class-boolean)","Corresponding Source":"/**\n     * Creates an ObjectStreamField representing a serializable field with the\n     * given name and type.  If unshared is false, values of the represented\n     * field are serialized and deserialized in the default manner--if the\n     * field is non-primitive, object values are serialized and deserialized as\n     * if they had been written and read by calls to writeObject and\n     * readObject.  If unshared is true, values of the represented field are\n     * serialized and deserialized as if they had been written and read by\n     * calls to writeUnshared and readUnshared.\n     *\n     * @param   name field name\n     * @param   type field type\n     * @param   unshared if false, write/read field values in the same manner\n     *          as writeObject/readObject; if true, write/read in the same\n     *          manner as writeUnshared/readUnshared\n     * @since   1.4\n     */\n    public ObjectStreamField(String name, Class<?> type, boolean unshared) {\n        if (name == null) {\n            throw new NullPointerException();\n        }\n        this.name = name;\n        this.type = type;\n        this.unshared = unshared;\n        signature = getClassSignature(type).intern();\n        field = null;\n    }"}
{"Number":"45","API Relative Path":"java.io.ObjectStreamField.java-ObjectStreamField(String-Class-boolean)","Corresponding Source":"/**\n     * Creates an ObjectStreamField representing a serializable field with the\n     * given name and type.  If unshared is false, values of the represented\n     * field are serialized and deserialized in the default manner--if the\n     * field is non-primitive, object values are serialized and deserialized as\n     * if they had been written and read by calls to writeObject and\n     * readObject.  If unshared is true, values of the represented field are\n     * serialized and deserialized as if they had been written and read by\n     * calls to writeUnshared and readUnshared.\n     *\n     * @param   name field name\n     * @param   type field type\n     * @param   unshared if false, write/read field values in the same manner\n     *          as writeObject/readObject; if true, write/read in the same\n     *          manner as writeUnshared/readUnshared\n     * @since   1.4\n     */\n    public ObjectStreamField(String name, Class<?> type, boolean unshared) {\n        if (name == null) {\n            throw new NullPointerException();\n        }\n        this.name = name;\n        this.type = type;\n        this.unshared = unshared;\n        signature = getClassSignature(type).intern();\n        field = null;\n    }"}
{"Number":"46","API Relative Path":"java.io.ObjectStreamField.java-ObjectStreamField(String-String-boolean)","Corresponding Source":"/**\n     * Creates an ObjectStreamField representing a field with the given name,\n     * signature and unshared setting.\n     */\n    ObjectStreamField(String name, String signature, boolean unshared) {\n        if (name == null) {\n            throw new NullPointerException();\n        }\n        this.name = name;\n        this.signature = signature.intern();\n        this.unshared = unshared;\n        field = null;\n\n        switch (signature.charAt(0)) {\n            case 'Z': type = Boolean.TYPE; break;\n            case 'B': type = Byte.TYPE; break;\n            case 'C': type = Character.TYPE; break;\n            case 'S': type = Short.TYPE; break;\n            case 'I': type = Integer.TYPE; break;\n            case 'J': type = Long.TYPE; break;\n            case 'F': type = Float.TYPE; break;\n            case 'D': type = Double.TYPE; break;\n            case 'L':\n            case '[': type = Object.class; break;\n            default: throw new IllegalArgumentException(\"illegal signature\");\n        }\n    }"}
{"Number":"47","API Relative Path":"java.io.OutputStream.java-write(byte-int-int)","Corresponding Source":"/**\n     * Writes <code>len<\/code> bytes from the specified byte array\n     * starting at offset <code>off<\/code> to this output stream.\n     * The general contract for <code>write(b, off, len)<\/code> is that\n     * some of the bytes in the array <code>b<\/code> are written to the\n     * output stream in order; element <code>b[off]<\/code> is the first\n     * byte written and <code>b[off+len-1]<\/code> is the last byte written\n     * by this operation.\n     * <p>\n     * The <code>write<\/code> method of <code>OutputStream<\/code> calls\n     * the write method of one argument on each of the bytes to be\n     * written out. Subclasses are encouraged to override this method and\n     * provide a more efficient implementation.\n     * <p>\n     * If <code>b<\/code> is <code>null<\/code>, a\n     * <code>NullPointerException<\/code> is thrown.\n     * <p>\n     * If <code>off<\/code> is negative, or <code>len<\/code> is negative, or\n     * <code>off+len<\/code> is greater than the length of the array\n     * <code>b<\/code>, then an <tt>IndexOutOfBoundsException<\/tt> is thrown.\n     *\n     * @param      b     the data.\n     * @param      off   the start offset in the data.\n     * @param      len   the number of bytes to write.\n     * @exception  IOException  if an I/O error occurs. In particular,\n     *             an <code>IOException<\/code> is thrown if the output\n     *             stream is closed.\n     */\n    public void write(byte b[], int off, int len) throws IOException {\n        if (b == null) {\n            throw new NullPointerException();\n        } else if ((off < 0) || (off > b.length) || (len < 0) ||\n                   ((off + len) > b.length) || ((off + len) < 0)) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return;\n        }\n        for (int i = 0 ; i < len ; i++) {\n            write(b[off + i]);\n        }\n    }"}
{"Number":"48","API Relative Path":"java.io.OutputStream.java-write(byte-int-int)","Corresponding Source":"/**\n     * Writes <code>len<\/code> bytes from the specified byte array\n     * starting at offset <code>off<\/code> to this output stream.\n     * The general contract for <code>write(b, off, len)<\/code> is that\n     * some of the bytes in the array <code>b<\/code> are written to the\n     * output stream in order; element <code>b[off]<\/code> is the first\n     * byte written and <code>b[off+len-1]<\/code> is the last byte written\n     * by this operation.\n     * <p>\n     * The <code>write<\/code> method of <code>OutputStream<\/code> calls\n     * the write method of one argument on each of the bytes to be\n     * written out. Subclasses are encouraged to override this method and\n     * provide a more efficient implementation.\n     * <p>\n     * If <code>b<\/code> is <code>null<\/code>, a\n     * <code>NullPointerException<\/code> is thrown.\n     * <p>\n     * If <code>off<\/code> is negative, or <code>len<\/code> is negative, or\n     * <code>off+len<\/code> is greater than the length of the array\n     * <code>b<\/code>, then an <tt>IndexOutOfBoundsException<\/tt> is thrown.\n     *\n     * @param      b     the data.\n     * @param      off   the start offset in the data.\n     * @param      len   the number of bytes to write.\n     * @exception  IOException  if an I/O error occurs. In particular,\n     *             an <code>IOException<\/code> is thrown if the output\n     *             stream is closed.\n     */\n    public void write(byte b[], int off, int len) throws IOException {\n        if (b == null) {\n            throw new NullPointerException();\n        } else if ((off < 0) || (off > b.length) || (len < 0) ||\n                   ((off + len) > b.length) || ((off + len) < 0)) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return;\n        }\n        for (int i = 0 ; i < len ; i++) {\n            write(b[off + i]);\n        }\n    }"}
{"Number":"49","API Relative Path":"java.io.OutputStream.java-write(byte-int-int)","Corresponding Source":"/**\n     * Writes <code>len<\/code> bytes from the specified byte array\n     * starting at offset <code>off<\/code> to this output stream.\n     * The general contract for <code>write(b, off, len)<\/code> is that\n     * some of the bytes in the array <code>b<\/code> are written to the\n     * output stream in order; element <code>b[off]<\/code> is the first\n     * byte written and <code>b[off+len-1]<\/code> is the last byte written\n     * by this operation.\n     * <p>\n     * The <code>write<\/code> method of <code>OutputStream<\/code> calls\n     * the write method of one argument on each of the bytes to be\n     * written out. Subclasses are encouraged to override this method and\n     * provide a more efficient implementation.\n     * <p>\n     * If <code>b<\/code> is <code>null<\/code>, a\n     * <code>NullPointerException<\/code> is thrown.\n     * <p>\n     * If <code>off<\/code> is negative, or <code>len<\/code> is negative, or\n     * <code>off+len<\/code> is greater than the length of the array\n     * <code>b<\/code>, then an <tt>IndexOutOfBoundsException<\/tt> is thrown.\n     *\n     * @param      b     the data.\n     * @param      off   the start offset in the data.\n     * @param      len   the number of bytes to write.\n     * @exception  IOException  if an I/O error occurs. In particular,\n     *             an <code>IOException<\/code> is thrown if the output\n     *             stream is closed.\n     */\n    public void write(byte b[], int off, int len) throws IOException {\n        if (b == null) {\n            throw new NullPointerException();\n        } else if ((off < 0) || (off > b.length) || (len < 0) ||\n                   ((off + len) > b.length) || ((off + len) < 0)) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return;\n        }\n        for (int i = 0 ; i < len ; i++) {\n            write(b[off + i]);\n        }\n    }"}
{"Number":"50","API Relative Path":"java.io.OutputStreamWriter.java-OutputStreamWriter(OutputStream-Charset)","Corresponding Source":"/**\n     * Creates an OutputStreamWriter that uses the given charset encoder.\n     *\n     * @param  out\n     *         An OutputStream\n     *\n     * @param  enc\n     *         A charset encoder\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public OutputStreamWriter(OutputStream out, CharsetEncoder enc) {\n        super(out);\n        if (enc == null)\n            throw new NullPointerException(\"charset encoder\");\n        se = StreamEncoder.forOutputStreamWriter(out, this, enc);\n    }"}
{"Number":"51","API Relative Path":"java.io.OutputStreamWriter.java-OutputStreamWriter(OutputStream-CharsetEncoder)","Corresponding Source":"/**\n     * Creates an OutputStreamWriter that uses the given charset encoder.\n     *\n     * @param  out\n     *         An OutputStream\n     *\n     * @param  enc\n     *         A charset encoder\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public OutputStreamWriter(OutputStream out, CharsetEncoder enc) {\n        super(out);\n        if (enc == null)\n            throw new NullPointerException(\"charset encoder\");\n        se = StreamEncoder.forOutputStreamWriter(out, this, enc);\n    }"}
{"Number":"52","API Relative Path":"java.io.OutputStreamWriter.java-OutputStreamWriter(OutputStream-String)","Corresponding Source":"/**\n     * Creates an OutputStreamWriter that uses the named charset.\n     *\n     * @param  out\n     *         An OutputStream\n     *\n     * @param  charsetName\n     *         The name of a supported\n     *         {@link java.nio.charset.Charset charset}\n     *\n     * @exception  UnsupportedEncodingException\n     *             If the named encoding is not supported\n     */\n    public OutputStreamWriter(OutputStream out, String charsetName)\n        throws UnsupportedEncodingException\n    {\n        super(out);\n        if (charsetName == null)\n            throw new NullPointerException(\"charsetName\");\n        se = StreamEncoder.forOutputStreamWriter(out, this, charsetName);\n    }"}
{"Number":"53","API Relative Path":"java.io.PipedInputStream.java-read(byte-int-int)","Corresponding Source":"/**\n     * Reads up to <code>len<\/code> bytes of data from this piped input\n     * stream into an array of bytes. Less than <code>len<\/code> bytes\n     * will be read if the end of the data stream is reached or if\n     * <code>len<\/code> exceeds the pipe's buffer size.\n     * If <code>len <\/code> is zero, then no bytes are read and 0 is returned;\n     * otherwise, the method blocks until at least 1 byte of input is\n     * available, end of the stream has been detected, or an exception is\n     * thrown.\n     *\n     * @param      b     the buffer into which the data is read.\n     * @param      off   the start offset in the destination array <code>b<\/code>\n     * @param      len   the maximum number of bytes read.\n     * @return     the total number of bytes read into the buffer, or\n     *             <code>-1<\/code> if there is no more data because the end of\n     *             the stream has been reached.\n     * @exception  NullPointerException If <code>b<\/code> is <code>null<\/code>.\n     * @exception  IndexOutOfBoundsException If <code>off<\/code> is negative,\n     * <code>len<\/code> is negative, or <code>len<\/code> is greater than\n     * <code>b.length - off<\/code>\n     * @exception  IOException if the pipe is <a href=\"#BROKEN\"> <code>broken<\/code><\/a>,\n     *           {@link #connect(java.io.PipedOutputStream) unconnected},\n     *           closed, or if an I/O error occurs.\n     */\n    public synchronized int read(byte b[], int off, int len)  throws IOException {\n        if (b == null) {\n            throw new NullPointerException();\n        } else if (off < 0 || len < 0 || len > b.length - off) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return 0;\n        }\n\n        /* possibly wait on the first character */\n        int c = read();\n        if (c < 0) {\n            return -1;\n        }\n        b[off] = (byte) c;\n        int rlen = 1;\n        while ((in >= 0) && (len > 1)) {\n\n            int available;\n\n            if (in > out) {\n                available = Math.min((buffer.length - out), (in - out));\n            } else {\n                available = buffer.length - out;\n            }\n\n            // A byte is read beforehand outside the loop\n            if (available > (len - 1)) {\n                available = len - 1;\n            }\n            System.arraycopy(buffer, out, b, off + rlen, available);\n            out += available;\n            rlen += available;\n            len -= available;\n\n            if (out >= buffer.length) {\n                out = 0;\n            }\n            if (in == out) {\n                /* now empty */\n                in = -1;\n            }\n        }\n        return rlen;\n    }"}
{"Number":"54","API Relative Path":"java.io.PipedOutputStream.java-connect(PipedInputStream)","Corresponding Source":"/**\n     * Connects this piped output stream to a receiver. If this object\n     * is already connected to some other piped input stream, an\n     * <code>IOException<\/code> is thrown.\n     * <p>\n     * If <code>snk<\/code> is an unconnected piped input stream and\n     * <code>src<\/code> is an unconnected piped output stream, they may\n     * be connected by either the call:\n     * <blockquote><pre>\n     * src.connect(snk)<\/pre><\/blockquote>\n     * or the call:\n     * <blockquote><pre>\n     * snk.connect(src)<\/pre><\/blockquote>\n     * The two calls have the same effect.\n     *\n     * @param      snk   the piped input stream to connect to.\n     * @exception  IOException  if an I/O error occurs.\n     */\n    public synchronized void connect(PipedInputStream snk) throws IOException {\n        if (snk == null) {\n            throw new NullPointerException();\n        } else if (sink != null || snk.connected) {\n            throw new IOException(\"Already connected\");\n        }\n        sink = snk;\n        snk.in = -1;\n        snk.out = 0;\n        snk.connected = true;\n    }"}
{"Number":"55","API Relative Path":"java.io.PipedOutputStream.java-connect(PipedInputStream)","Corresponding Source":"/**\n     * Connects this piped output stream to a receiver. If this object\n     * is already connected to some other piped input stream, an\n     * <code>IOException<\/code> is thrown.\n     * <p>\n     * If <code>snk<\/code> is an unconnected piped input stream and\n     * <code>src<\/code> is an unconnected piped output stream, they may\n     * be connected by either the call:\n     * <blockquote><pre>\n     * src.connect(snk)<\/pre><\/blockquote>\n     * or the call:\n     * <blockquote><pre>\n     * snk.connect(src)<\/pre><\/blockquote>\n     * The two calls have the same effect.\n     *\n     * @param      snk   the piped input stream to connect to.\n     * @exception  IOException  if an I/O error occurs.\n     */\n    public synchronized void connect(PipedInputStream snk) throws IOException {\n        if (snk == null) {\n            throw new NullPointerException();\n        } else if (sink != null || snk.connected) {\n            throw new IOException(\"Already connected\");\n        }\n        sink = snk;\n        snk.in = -1;\n        snk.out = 0;\n        snk.connected = true;\n    }"}
{"Number":"56","API Relative Path":"java.io.PipedOutputStream.java-PipedOutputStream(PipedInputStream)","Corresponding Source":"/**\n     * Creates a piped output stream connected to the specified piped\n     * input stream. Data bytes written to this stream will then be\n     * available as input from <code>snk<\/code>.\n     *\n     * @param      snk   The piped input stream to connect to.\n     * @exception  IOException  if an I/O error occurs.\n     */\n    public PipedOutputStream(PipedInputStream snk)  throws IOException {\n        connect(snk);\n    }"}
{"Number":"57","API Relative Path":"java.io.PipedOutputStream.java-PipedOutputStream(PipedInputStream)","Corresponding Source":"/**\n     * Creates a piped output stream connected to the specified piped\n     * input stream. Data bytes written to this stream will then be\n     * available as input from <code>snk<\/code>.\n     *\n     * @param      snk   The piped input stream to connect to.\n     * @exception  IOException  if an I/O error occurs.\n     */\n    public PipedOutputStream(PipedInputStream snk)  throws IOException {\n        connect(snk);\n    }"}
{"Number":"58","API Relative Path":"java.io.PipedOutputStream.java-write(byte-int-int)","Corresponding Source":"/**\n     * Writes <code>len<\/code> bytes from the specified byte array\n     * starting at offset <code>off<\/code> to this piped output stream.\n     * This method blocks until all the bytes are written to the output\n     * stream.\n     *\n     * @param      b     the data.\n     * @param      off   the start offset in the data.\n     * @param      len   the number of bytes to write.\n     * @exception IOException if the pipe is <a href=#BROKEN> broken<\/a>,\n     *          {@link #connect(java.io.PipedInputStream) unconnected},\n     *          closed, or if an I/O error occurs.\n     */\n    public void write(byte b[], int off, int len) throws IOException {\n        if (sink == null) {\n            throw new IOException(\"Pipe not connected\");\n        } else if (b == null) {\n            throw new NullPointerException();\n        } else if ((off < 0) || (off > b.length) || (len < 0) ||\n                   ((off + len) > b.length) || ((off + len) < 0)) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return;\n        }\n        sink.receive(b, off, len);\n    }"}
{"Number":"59","API Relative Path":"java.io.PipedOutputStream.java-write(byte-int-int)","Corresponding Source":"/**\n     * Writes <code>len<\/code> bytes from the specified byte array\n     * starting at offset <code>off<\/code> to this piped output stream.\n     * This method blocks until all the bytes are written to the output\n     * stream.\n     *\n     * @param      b     the data.\n     * @param      off   the start offset in the data.\n     * @param      len   the number of bytes to write.\n     * @exception IOException if the pipe is <a href=#BROKEN> broken<\/a>,\n     *          {@link #connect(java.io.PipedInputStream) unconnected},\n     *          closed, or if an I/O error occurs.\n     */\n    public void write(byte b[], int off, int len) throws IOException {\n        if (sink == null) {\n            throw new IOException(\"Pipe not connected\");\n        } else if (b == null) {\n            throw new NullPointerException();\n        } else if ((off < 0) || (off > b.length) || (len < 0) ||\n                   ((off + len) > b.length) || ((off + len) < 0)) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return;\n        }\n        sink.receive(b, off, len);\n    }"}
{"Number":"60","API Relative Path":"java.io.PipedOutputStream.java-write(byte-int-int)","Corresponding Source":"/**\n     * Writes <code>len<\/code> bytes from the specified byte array\n     * starting at offset <code>off<\/code> to this piped output stream.\n     * This method blocks until all the bytes are written to the output\n     * stream.\n     *\n     * @param      b     the data.\n     * @param      off   the start offset in the data.\n     * @param      len   the number of bytes to write.\n     * @exception IOException if the pipe is <a href=#BROKEN> broken<\/a>,\n     *          {@link #connect(java.io.PipedInputStream) unconnected},\n     *          closed, or if an I/O error occurs.\n     */\n    public void write(byte b[], int off, int len) throws IOException {\n        if (sink == null) {\n            throw new IOException(\"Pipe not connected\");\n        } else if (b == null) {\n            throw new NullPointerException();\n        } else if ((off < 0) || (off > b.length) || (len < 0) ||\n                   ((off + len) > b.length) || ((off + len) < 0)) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return;\n        }\n        sink.receive(b, off, len);\n    }"}
{"Number":"61","API Relative Path":"java.io.PipedReader.java-read(char-int-int)","Corresponding Source":"/**\n     * Reads up to <code>len<\/code> characters of data from this piped\n     * stream into an array of characters. Less than <code>len<\/code> characters\n     * will be read if the end of the data stream is reached or if\n     * <code>len<\/code> exceeds the pipe's buffer size. This method\n     * blocks until at least one character of input is available.\n     *\n     * @param      cbuf     the buffer into which the data is read.\n     * @param      off   the start offset of the data.\n     * @param      len   the maximum number of characters read.\n     * @return     the total number of characters read into the buffer, or\n     *             <code>-1<\/code> if there is no more data because the end of\n     *             the stream has been reached.\n     * @exception  IOException  if the pipe is\n     *                  <a href=PipedInputStream.html#BROKEN> <code>broken<\/code><\/a>,\n     *                  {@link #connect(java.io.PipedWriter) unconnected}, closed,\n     *                  or an I/O error occurs.\n     */\n    public synchronized int read(char cbuf[], int off, int len)  throws IOException {\n        if (!connected) {\n            throw new IOException(\"Pipe not connected\");\n        } else if (closedByReader) {\n            throw new IOException(\"Pipe closed\");\n        } else if (writeSide != null && !writeSide.isAlive()\n                   && !closedByWriter && (in < 0)) {\n            throw new IOException(\"Write end dead\");\n        }\n\n        if ((off < 0) || (off > cbuf.length) || (len < 0) ||\n            ((off + len) > cbuf.length) || ((off + len) < 0)) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return 0;\n        }\n\n        /* possibly wait on the first character */\n        int c = read();\n        if (c < 0) {\n            return -1;\n        }\n        cbuf[off] =  (char)c;\n        int rlen = 1;\n        while ((in >= 0) && (--len > 0)) {\n            cbuf[off + rlen] = buffer[out++];\n            rlen++;\n            if (out >= buffer.length) {\n                out = 0;\n            }\n            if (in == out) {\n                /* now empty */\n                in = -1;\n            }\n        }\n        return rlen;\n    }"}
{"Number":"62","API Relative Path":"java.io.PipedWriter.java-connect(PipedReader)","Corresponding Source":"/**\n     * Connects this piped writer to a receiver. If this object\n     * is already connected to some other piped reader, an\n     * <code>IOException<\/code> is thrown.\n     * <p>\n     * If <code>snk<\/code> is an unconnected piped reader and\n     * <code>src<\/code> is an unconnected piped writer, they may\n     * be connected by either the call:\n     * <blockquote><pre>\n     * src.connect(snk)<\/pre><\/blockquote>\n     * or the call:\n     * <blockquote><pre>\n     * snk.connect(src)<\/pre><\/blockquote>\n     * The two calls have the same effect.\n     *\n     * @param      snk   the piped reader to connect to.\n     * @exception  IOException  if an I/O error occurs.\n     */\n    public synchronized void connect(PipedReader snk) throws IOException {\n        if (snk == null) {\n            throw new NullPointerException();\n        } else if (sink != null || snk.connected) {\n            throw new IOException(\"Already connected\");\n        } else if (snk.closedByReader || closed) {\n            throw new IOException(\"Pipe closed\");\n        }\n\n        sink = snk;\n        snk.in = -1;\n        snk.out = 0;\n        snk.connected = true;\n    }"}
{"Number":"63","API Relative Path":"java.io.PipedWriter.java-connect(PipedReader)","Corresponding Source":"/**\n     * Connects this piped writer to a receiver. If this object\n     * is already connected to some other piped reader, an\n     * <code>IOException<\/code> is thrown.\n     * <p>\n     * If <code>snk<\/code> is an unconnected piped reader and\n     * <code>src<\/code> is an unconnected piped writer, they may\n     * be connected by either the call:\n     * <blockquote><pre>\n     * src.connect(snk)<\/pre><\/blockquote>\n     * or the call:\n     * <blockquote><pre>\n     * snk.connect(src)<\/pre><\/blockquote>\n     * The two calls have the same effect.\n     *\n     * @param      snk   the piped reader to connect to.\n     * @exception  IOException  if an I/O error occurs.\n     */\n    public synchronized void connect(PipedReader snk) throws IOException {\n        if (snk == null) {\n            throw new NullPointerException();\n        } else if (sink != null || snk.connected) {\n            throw new IOException(\"Already connected\");\n        } else if (snk.closedByReader || closed) {\n            throw new IOException(\"Pipe closed\");\n        }\n\n        sink = snk;\n        snk.in = -1;\n        snk.out = 0;\n        snk.connected = true;\n    }"}
{"Number":"64","API Relative Path":"java.io.PipedWriter.java-PipedWriter(PipedReader)","Corresponding Source":"/**\n     * Creates a piped writer connected to the specified piped\n     * reader. Data characters written to this stream will then be\n     * available as input from <code>snk<\/code>.\n     *\n     * @param      snk   The piped reader to connect to.\n     * @exception  IOException  if an I/O error occurs.\n     */\n    public PipedWriter(PipedReader snk)  throws IOException {\n        connect(snk);\n    }"}
{"Number":"65","API Relative Path":"java.io.PipedWriter.java-PipedWriter(PipedReader)","Corresponding Source":"/**\n     * Creates a piped writer connected to the specified piped\n     * reader. Data characters written to this stream will then be\n     * available as input from <code>snk<\/code>.\n     *\n     * @param      snk   The piped reader to connect to.\n     * @exception  IOException  if an I/O error occurs.\n     */\n    public PipedWriter(PipedReader snk)  throws IOException {\n        connect(snk);\n    }"}
{"Number":"66","API Relative Path":"java.io.PipedWriter.java-write(char-int-int)","Corresponding Source":"/**\n     * Writes <code>len<\/code> characters from the specified character array\n     * starting at offset <code>off<\/code> to this piped output stream.\n     * This method blocks until all the characters are written to the output\n     * stream.\n     * If a thread was reading data characters from the connected piped input\n     * stream, but the thread is no longer alive, then an\n     * <code>IOException<\/code> is thrown.\n     *\n     * @param      cbuf  the data.\n     * @param      off   the start offset in the data.\n     * @param      len   the number of characters to write.\n     * @exception  IOException  if the pipe is\n     *          <a href=PipedOutputStream.html#BROKEN> <code>broken<\/code><\/a>,\n     *          {@link #connect(java.io.PipedReader) unconnected}, closed\n     *          or an I/O error occurs.\n     */\n    public void write(char cbuf[], int off, int len) throws IOException {\n        if (sink == null) {\n            throw new IOException(\"Pipe not connected\");\n        } else if ((off | len | (off + len) | (cbuf.length - (off + len))) < 0) {\n            throw new IndexOutOfBoundsException();\n        }\n        sink.receive(cbuf, off, len);\n    }"}
{"Number":"67","API Relative Path":"java.io.PrintStream.java-PrintStream(File-String)","Corresponding Source":"/**\n     * Creates a new print stream, without automatic line flushing, with the\n     * specified file and charset.  This convenience constructor creates\n     * the necessary intermediate {@link java.io.OutputStreamWriter\n     * OutputStreamWriter}, which will encode characters using the provided\n     * charset.\n     *\n     * @param  file\n     *         The file to use as the destination of this print stream.  If the\n     *         file exists, then it will be truncated to zero size; otherwise,\n     *         a new file will be created.  The output will be written to the\n     *         file and is buffered.\n     *\n     * @param  csn\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  FileNotFoundException\n     *          If the given file object does not denote an existing, writable\n     *          regular file and a new regular file of that name cannot be\n     *          created, or if some other error occurs while opening or\n     *          creating the file\n     *\n     * @throws  SecurityException\n     *          If a security manager is present and {@link\n     *          SecurityManager#checkWrite checkWrite(file.getPath())}\n     *          denies write access to the file\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  1.5\n     */\n    public PrintStream(File file, String csn)\n        throws FileNotFoundException, UnsupportedEncodingException\n    {\n        // ensure charset is checked before the file is opened\n        this(false, toCharset(csn), new FileOutputStream(file));\n    }"}
{"Number":"68","API Relative Path":"java.io.PrintStream.java-PrintStream(OutputStream-boolean)","Corresponding Source":"/**\n     * Creates a new print stream.\n     *\n     * @param  out        The output stream to which values and objects will be\n     *                    printed\n     * @param  autoFlush  A boolean; if true, the output buffer will be flushed\n     *                    whenever a byte array is written, one of the\n     *                    <code>println<\/code> methods is invoked, or a newline\n     *                    character or byte (<code>'\\n'<\/code>) is written\n     *\n     * @see java.io.PrintWriter#PrintWriter(java.io.OutputStream, boolean)\n     */\n    public PrintStream(OutputStream out, boolean autoFlush) {\n        this(autoFlush, requireNonNull(out, \"Null output stream\"));\n    }"}
{"Number":"69","API Relative Path":"java.io.PrintStream.java-PrintStream(OutputStream-boolean-String)","Corresponding Source":"/**\n     * Creates a new print stream.\n     *\n     * @param  out        The output stream to which values and objects will be\n     *                    printed\n     * @param  autoFlush  A boolean; if true, the output buffer will be flushed\n     *                    whenever a byte array is written, one of the\n     *                    <code>println<\/code> methods is invoked, or a newline\n     *                    character or byte (<code>'\\n'<\/code>) is written\n     * @param  encoding   The name of a supported\n     *                    <a href=\"../lang/package-summary.html#charenc\">\n     *                    character encoding<\/a>\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named encoding is not supported\n     *\n     * @since  1.4\n     */\n    public PrintStream(OutputStream out, boolean autoFlush, String encoding)\n        throws UnsupportedEncodingException\n    {\n        this(autoFlush,\n             requireNonNull(out, \"Null output stream\"),\n             toCharset(encoding));\n    }"}
{"Number":"70","API Relative Path":"java.io.PrintStream.java-PrintStream(OutputStream-boolean-String)","Corresponding Source":"/**\n     * Creates a new print stream.\n     *\n     * @param  out        The output stream to which values and objects will be\n     *                    printed\n     * @param  autoFlush  A boolean; if true, the output buffer will be flushed\n     *                    whenever a byte array is written, one of the\n     *                    <code>println<\/code> methods is invoked, or a newline\n     *                    character or byte (<code>'\\n'<\/code>) is written\n     * @param  encoding   The name of a supported\n     *                    <a href=\"../lang/package-summary.html#charenc\">\n     *                    character encoding<\/a>\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named encoding is not supported\n     *\n     * @since  1.4\n     */\n    public PrintStream(OutputStream out, boolean autoFlush, String encoding)\n        throws UnsupportedEncodingException\n    {\n        this(autoFlush,\n             requireNonNull(out, \"Null output stream\"),\n             toCharset(encoding));\n    }"}
{"Number":"71","API Relative Path":"java.io.PrintStream.java-PrintStream(String)","Corresponding Source":"/**\n     * Creates a new print stream, without automatic line flushing, with the\n     * specified file name.  This convenience constructor creates\n     * the necessary intermediate {@link java.io.OutputStreamWriter\n     * OutputStreamWriter}, which will encode characters using the\n     * {@linkplain java.nio.charset.Charset#defaultCharset() default charset}\n     * for this instance of the Java virtual machine.\n     *\n     * @param  fileName\n     *         The name of the file to use as the destination of this print\n     *         stream.  If the file exists, then it will be truncated to\n     *         zero size; otherwise, a new file will be created.  The output\n     *         will be written to the file and is buffered.\n     *\n     * @throws  FileNotFoundException\n     *          If the given file object does not denote an existing, writable\n     *          regular file and a new regular file of that name cannot be\n     *          created, or if some other error occurs while opening or\n     *          creating the file\n     *\n     * @throws  SecurityException\n     *          If a security manager is present and {@link\n     *          SecurityManager#checkWrite checkWrite(fileName)} denies write\n     *          access to the file\n     *\n     * @since  1.5\n     */\n    public PrintStream(String fileName) throws FileNotFoundException {\n        this(false, new FileOutputStream(fileName));\n    }"}
{"Number":"72","API Relative Path":"java.io.PrintStream.java-PrintStream(String-String)","Corresponding Source":"/**\n     * Creates a new print stream, without automatic line flushing, with the\n     * specified file name and charset.  This convenience constructor creates\n     * the necessary intermediate {@link java.io.OutputStreamWriter\n     * OutputStreamWriter}, which will encode characters using the provided\n     * charset.\n     *\n     * @param  fileName\n     *         The name of the file to use as the destination of this print\n     *         stream.  If the file exists, then it will be truncated to\n     *         zero size; otherwise, a new file will be created.  The output\n     *         will be written to the file and is buffered.\n     *\n     * @param  csn\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  FileNotFoundException\n     *          If the given file object does not denote an existing, writable\n     *          regular file and a new regular file of that name cannot be\n     *          created, or if some other error occurs while opening or\n     *          creating the file\n     *\n     * @throws  SecurityException\n     *          If a security manager is present and {@link\n     *          SecurityManager#checkWrite checkWrite(fileName)} denies write\n     *          access to the file\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  1.5\n     */\n    public PrintStream(String fileName, String csn)\n        throws FileNotFoundException, UnsupportedEncodingException\n    {\n        // ensure charset is checked before the file is opened\n        this(false, toCharset(csn), new FileOutputStream(fileName));\n    }"}
{"Number":"73","API Relative Path":"java.io.PrintStream.java-PrintStream(String-String)","Corresponding Source":"/**\n     * Creates a new print stream, without automatic line flushing, with the\n     * specified file name and charset.  This convenience constructor creates\n     * the necessary intermediate {@link java.io.OutputStreamWriter\n     * OutputStreamWriter}, which will encode characters using the provided\n     * charset.\n     *\n     * @param  fileName\n     *         The name of the file to use as the destination of this print\n     *         stream.  If the file exists, then it will be truncated to\n     *         zero size; otherwise, a new file will be created.  The output\n     *         will be written to the file and is buffered.\n     *\n     * @param  csn\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  FileNotFoundException\n     *          If the given file object does not denote an existing, writable\n     *          regular file and a new regular file of that name cannot be\n     *          created, or if some other error occurs while opening or\n     *          creating the file\n     *\n     * @throws  SecurityException\n     *          If a security manager is present and {@link\n     *          SecurityManager#checkWrite checkWrite(fileName)} denies write\n     *          access to the file\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  1.5\n     */\n    public PrintStream(String fileName, String csn)\n        throws FileNotFoundException, UnsupportedEncodingException\n    {\n        // ensure charset is checked before the file is opened\n        this(false, toCharset(csn), new FileOutputStream(fileName));\n    }"}
{"Number":"74","API Relative Path":"java.io.PrintWriter.java-PrintWriter(File-String)","Corresponding Source":"/**\n     * Creates a new PrintWriter, without automatic line flushing, with the\n     * specified file and charset.  This convenience constructor creates the\n     * necessary intermediate {@link java.io.OutputStreamWriter\n     * OutputStreamWriter}, which will encode characters using the provided\n     * charset.\n     *\n     * @param  file\n     *         The file to use as the destination of this writer.  If the file\n     *         exists then it will be truncated to zero size; otherwise, a new\n     *         file will be created.  The output will be written to the file\n     *         and is buffered.\n     *\n     * @param  csn\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  FileNotFoundException\n     *          If the given file object does not denote an existing, writable\n     *          regular file and a new regular file of that name cannot be\n     *          created, or if some other error occurs while opening or\n     *          creating the file\n     *\n     * @throws  SecurityException\n     *          If a security manager is present and {@link\n     *          SecurityManager#checkWrite checkWrite(file.getPath())}\n     *          denies write access to the file\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  1.5\n     */\n    public PrintWriter(File file, String csn)\n        throws FileNotFoundException, UnsupportedEncodingException\n    {\n        this(toCharset(csn), file);\n    }"}
{"Number":"75","API Relative Path":"java.io.PrintWriter.java-PrintWriter(String)","Corresponding Source":"/**\n     * Creates a new PrintWriter, without automatic line flushing, with the\n     * specified file name.  This convenience constructor creates the necessary\n     * intermediate {@link java.io.OutputStreamWriter OutputStreamWriter},\n     * which will encode characters using the {@linkplain\n     * java.nio.charset.Charset#defaultCharset() default charset} for this\n     * instance of the Java virtual machine.\n     *\n     * @param  fileName\n     *         The name of the file to use as the destination of this writer.\n     *         If the file exists then it will be truncated to zero size;\n     *         otherwise, a new file will be created.  The output will be\n     *         written to the file and is buffered.\n     *\n     * @throws  FileNotFoundException\n     *          If the given string does not denote an existing, writable\n     *          regular file and a new regular file of that name cannot be\n     *          created, or if some other error occurs while opening or\n     *          creating the file\n     *\n     * @throws  SecurityException\n     *          If a security manager is present and {@link\n     *          SecurityManager#checkWrite checkWrite(fileName)} denies write\n     *          access to the file\n     *\n     * @since  1.5\n     */\n    public PrintWriter(String fileName) throws FileNotFoundException {\n        this(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileName))),\n             false);\n    }"}
{"Number":"76","API Relative Path":"java.io.PrintWriter.java-PrintWriter(String-String)","Corresponding Source":"/**\n     * Creates a new PrintWriter, without automatic line flushing, with the\n     * specified file name and charset.  This convenience constructor creates\n     * the necessary intermediate {@link java.io.OutputStreamWriter\n     * OutputStreamWriter}, which will encode characters using the provided\n     * charset.\n     *\n     * @param  fileName\n     *         The name of the file to use as the destination of this writer.\n     *         If the file exists then it will be truncated to zero size;\n     *         otherwise, a new file will be created.  The output will be\n     *         written to the file and is buffered.\n     *\n     * @param  csn\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  FileNotFoundException\n     *          If the given string does not denote an existing, writable\n     *          regular file and a new regular file of that name cannot be\n     *          created, or if some other error occurs while opening or\n     *          creating the file\n     *\n     * @throws  SecurityException\n     *          If a security manager is present and {@link\n     *          SecurityManager#checkWrite checkWrite(fileName)} denies write\n     *          access to the file\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  1.5\n     */\n    public PrintWriter(String fileName, String csn)\n        throws FileNotFoundException, UnsupportedEncodingException\n    {\n        this(toCharset(csn), new File(fileName));\n    }"}
{"Number":"77","API Relative Path":"java.io.PrintWriter.java-PrintWriter(String-String)","Corresponding Source":"/**\n     * Creates a new PrintWriter, without automatic line flushing, with the\n     * specified file name and charset.  This convenience constructor creates\n     * the necessary intermediate {@link java.io.OutputStreamWriter\n     * OutputStreamWriter}, which will encode characters using the provided\n     * charset.\n     *\n     * @param  fileName\n     *         The name of the file to use as the destination of this writer.\n     *         If the file exists then it will be truncated to zero size;\n     *         otherwise, a new file will be created.  The output will be\n     *         written to the file and is buffered.\n     *\n     * @param  csn\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  FileNotFoundException\n     *          If the given string does not denote an existing, writable\n     *          regular file and a new regular file of that name cannot be\n     *          created, or if some other error occurs while opening or\n     *          creating the file\n     *\n     * @throws  SecurityException\n     *          If a security manager is present and {@link\n     *          SecurityManager#checkWrite checkWrite(fileName)} denies write\n     *          access to the file\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  1.5\n     */\n    public PrintWriter(String fileName, String csn)\n        throws FileNotFoundException, UnsupportedEncodingException\n    {\n        this(toCharset(csn), new File(fileName));\n    }"}
{"Number":"78","API Relative Path":"java.io.PushbackInputStream.java-read(byte[]-int-int)","Corresponding Source":"/**\n     * Pushes back a portion of an array of bytes by copying it to the front\n     * of the pushback buffer.  After this method returns, the next byte to be\n     * read will have the value <code>b[off]<\/code>, the byte after that will\n     * have the value <code>b[off+1]<\/code>, and so forth.\n     *\n     * @param b the byte array to push back.\n     * @param off the start offset of the data.\n     * @param len the number of bytes to push back.\n     * @exception IOException If there is not enough room in the pushback\n     *            buffer for the specified number of bytes,\n     *            or this input stream has been closed by\n     *            invoking its {@link #close()} method.\n     * @since     JDK1.1\n     */\n    public void unread(byte[] b, int off, int len) throws IOException {\n        ensureOpen();\n        if (len > pos) {\n            throw new IOException(\"Push back buffer is full\");\n        }\n        pos -= len;\n        System.arraycopy(b, off, buf, pos, len);\n    }"}
{"Number":"79","API Relative Path":"java.io.PushbackInputStream.java-unread(byte[]-int-int)","Corresponding Source":"/**\n     * Pushes back a portion of an array of bytes by copying it to the front\n     * of the pushback buffer.  After this method returns, the next byte to be\n     * read will have the value <code>b[off]<\/code>, the byte after that will\n     * have the value <code>b[off+1]<\/code>, and so forth.\n     *\n     * @param b the byte array to push back.\n     * @param off the start offset of the data.\n     * @param len the number of bytes to push back.\n     * @exception IOException If there is not enough room in the pushback\n     *            buffer for the specified number of bytes,\n     *            or this input stream has been closed by\n     *            invoking its {@link #close()} method.\n     * @since     JDK1.1\n     */\n    public void unread(byte[] b, int off, int len) throws IOException {\n        ensureOpen();\n        if (len > pos) {\n            throw new IOException(\"Push back buffer is full\");\n        }\n        pos -= len;\n        System.arraycopy(b, off, buf, pos, len);\n    }"}
{"Number":"80","API Relative Path":"java.io.PushbackReader.java-unread(char-int-int)","Corresponding Source":"/**\n     * Pushes back a portion of an array of characters by copying it to the\n     * front of the pushback buffer.  After this method returns, the next\n     * character to be read will have the value <code>cbuf[off]<\/code>, the\n     * character after that will have the value <code>cbuf[off+1]<\/code>, and\n     * so forth.\n     *\n     * @param  cbuf  Character array\n     * @param  off   Offset of first character to push back\n     * @param  len   Number of characters to push back\n     *\n     * @exception  IOException  If there is insufficient room in the pushback\n     *                          buffer, or if some other I/O error occurs\n     */\n    public void unread(char cbuf[], int off, int len) throws IOException {\n        synchronized (lock) {\n            ensureOpen();\n            if (len > pos)\n                throw new IOException(\"Pushback buffer overflow\");\n            pos -= len;\n            System.arraycopy(cbuf, off, buf, pos, len);\n        }\n    }"}
{"Number":"81","API Relative Path":"java.io.RandomAccessFile.java-RandomAccessFile(String-String)","Corresponding Source":"/**\n     * Creates a random access file stream to read from, and optionally\n     * to write to, a file with the specified name. A new\n     * {@link FileDescriptor} object is created to represent the\n     * connection to the file.\n     *\n     * <p> The <tt>mode<\/tt> argument specifies the access mode with which the\n     * file is to be opened.  The permitted values and their meanings are as\n     * specified for the <a\n     * href=\"#mode\"><tt>RandomAccessFile(File,String)<\/tt><\/a> constructor.\n     *\n     * <p>\n     * If there is a security manager, its {@code checkRead} method\n     * is called with the {@code name} argument\n     * as its argument to see if read access to the file is allowed.\n     * If the mode allows writing, the security manager's\n     * {@code checkWrite} method\n     * is also called with the {@code name} argument\n     * as its argument to see if write access to the file is allowed.\n     *\n     * @param      name   the system-dependent filename\n     * @param      mode   the access <a href=\"#mode\">mode<\/a>\n     * @exception  IllegalArgumentException  if the mode argument is not equal\n     *               to one of <tt>\"r\"<\/tt>, <tt>\"rw\"<\/tt>, <tt>\"rws\"<\/tt>, or\n     *               <tt>\"rwd\"<\/tt>\n     * @exception FileNotFoundException\n     *            if the mode is <tt>\"r\"<\/tt> but the given string does not\n     *            denote an existing regular file, or if the mode begins with\n     *            <tt>\"rw\"<\/tt> but the given string does not denote an\n     *            existing, writable regular file and a new regular file of\n     *            that name cannot be created, or if some other error occurs\n     *            while opening or creating the file\n     * @exception  SecurityException         if a security manager exists and its\n     *               {@code checkRead} method denies read access to the file\n     *               or the mode is \"rw\" and the security manager's\n     *               {@code checkWrite} method denies write access to the file\n     * @see        java.lang.SecurityException\n     * @see        java.lang.SecurityManager#checkRead(java.lang.String)\n     * @see        java.lang.SecurityManager#checkWrite(java.lang.String)\n     * @revised 1.4\n     * @spec JSR-51\n     */\n    public RandomAccessFile(String name, String mode)\n        throws FileNotFoundException\n    {\n        this(name != null ? new File(name) : null, mode);\n    }"}
{"Number":"82","API Relative Path":"java.io.Reader.java-Reader(Object)","Corresponding Source":"/**\n     * Creates a new character-stream reader whose critical sections will\n     * synchronize on the given object.\n     *\n     * @param lock  The Object to synchronize on.\n     */\n    protected Reader(Object lock) {\n        if (lock == null) {\n            throw new NullPointerException();\n        }\n        this.lock = lock;\n    }"}
{"Number":"83","API Relative Path":"java.io.SequenceInputStream.java-read(byte-int-int)","Corresponding Source":"/**\n     * Reads up to <code>len<\/code> bytes of data from this input stream\n     * into an array of bytes.  If <code>len<\/code> is not zero, the method\n     * blocks until at least 1 byte of input is available; otherwise, no\n     * bytes are read and <code>0<\/code> is returned.\n     * <p>\n     * The <code>read<\/code> method of <code>SequenceInputStream<\/code>\n     * tries to read the data from the current substream. If it fails to\n     * read any characters because the substream has reached the end of\n     * the stream, it calls the <code>close<\/code> method of the current\n     * substream and begins reading from the next substream.\n     *\n     * @param      b     the buffer into which the data is read.\n     * @param      off   the start offset in array <code>b<\/code>\n     *                   at which the data is written.\n     * @param      len   the maximum number of bytes read.\n     * @return     int   the number of bytes read.\n     * @exception  NullPointerException If <code>b<\/code> is <code>null<\/code>.\n     * @exception  IndexOutOfBoundsException If <code>off<\/code> is negative,\n     * <code>len<\/code> is negative, or <code>len<\/code> is greater than\n     * <code>b.length - off<\/code>\n     * @exception  IOException  if an I/O error occurs.\n     */\n    public int read(byte b[], int off, int len) throws IOException {\n        if (in == null) {\n            return -1;\n        } else if (b == null) {\n            throw new NullPointerException();\n        } else if (off < 0 || len < 0 || len > b.length - off) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return 0;\n        }\n        do {\n            int n = in.read(b, off, len);\n            if (n > 0) {\n                return n;\n            }\n            nextStream();\n        } while (in != null);\n        return -1;\n    }"}
{"Number":"84","API Relative Path":"java.io.StreamTokenizer.java-StreamTokenizer(InputStream)","Corresponding Source":"/**\n     * Creates a stream tokenizer that parses the specified input\n     * stream. The stream tokenizer is initialized to the following\n     * default state:\n     * <ul>\n     * <li>All byte values {@code 'A'} through {@code 'Z'},\n     *     {@code 'a'} through {@code 'z'}, and\n     *     {@code '\\u005Cu00A0'} through {@code '\\u005Cu00FF'} are\n     *     considered to be alphabetic.\n     * <li>All byte values {@code '\\u005Cu0000'} through\n     *     {@code '\\u005Cu0020'} are considered to be white space.\n     * <li>{@code '/'} is a comment character.\n     * <li>Single quote {@code '\\u005C''} and double quote {@code '\"'}\n     *     are string quote characters.\n     * <li>Numbers are parsed.\n     * <li>Ends of lines are treated as white space, not as separate tokens.\n     * <li>C-style and C++-style comments are not recognized.\n     * <\/ul>\n     *\n     * @deprecated As of JDK version 1.1, the preferred way to tokenize an\n     * input stream is to convert it into a character stream, for example:\n     * <blockquote><pre>\n     *   Reader r = new BufferedReader(new InputStreamReader(is));\n     *   StreamTokenizer st = new StreamTokenizer(r);\n     * <\/pre><\/blockquote>\n     *\n     * @param      is        an input stream.\n     * @see        java.io.BufferedReader\n     * @see        java.io.InputStreamReader\n     * @see        java.io.StreamTokenizer#StreamTokenizer(java.io.Reader)\n     */\n    @Deprecated\n    public StreamTokenizer(InputStream is) {\n        this();\n        if (is == null) {\n            throw new NullPointerException();\n        }\n        input = is;\n    }"}
{"Number":"85","API Relative Path":"java.io.StreamTokenizer.java-StreamTokenizer(Reader)","Corresponding Source":"/**\n     * Create a tokenizer that parses the given character stream.\n     *\n     * @param r  a Reader object providing the input stream.\n     * @since   JDK1.1\n     */\n    public StreamTokenizer(Reader r) {\n        this();\n        if (r == null) {\n            throw new NullPointerException();\n        }\n        reader = r;\n    }"}
{"Number":"86","API Relative Path":"java.io.StringBufferInputStream.java-read(byte-int-int)","Corresponding Source":"/**\n     * Reads up to <code>len<\/code> bytes of data from this input stream\n     * into an array of bytes.\n     * <p>\n     * The <code>read<\/code> method of\n     * <code>StringBufferInputStream<\/code> cannot block. It copies the\n     * low eight bits from the characters in this input stream's buffer into\n     * the byte array argument.\n     *\n     * @param      b     the buffer into which the data is read.\n     * @param      off   the start offset of the data.\n     * @param      len   the maximum number of bytes read.\n     * @return     the total number of bytes read into the buffer, or\n     *             <code>-1<\/code> if there is no more data because the end of\n     *             the stream has been reached.\n     */\n    public synchronized int read(byte b[], int off, int len) {\n        if (b == null) {\n            throw new NullPointerException();\n        } else if ((off < 0) || (off > b.length) || (len < 0) ||\n                   ((off + len) > b.length) || ((off + len) < 0)) {\n            throw new IndexOutOfBoundsException();\n        }\n        if (pos >= count) {\n            return -1;\n        }\n        if (pos + len > count) {\n            len = count - pos;\n        }\n        if (len <= 0) {\n            return 0;\n        }\n        String  s = buffer;\n        int cnt = len;\n        while (--cnt >= 0) {\n            b[off++] = (byte)s.charAt(pos++);\n        }\n\n        return len;\n    }"}
{"Number":"87","API Relative Path":"java.io.StringBufferInputStream.java-read(byte-int-int)","Corresponding Source":"/**\n     * Reads up to <code>len<\/code> bytes of data from this input stream\n     * into an array of bytes.\n     * <p>\n     * The <code>read<\/code> method of\n     * <code>StringBufferInputStream<\/code> cannot block. It copies the\n     * low eight bits from the characters in this input stream's buffer into\n     * the byte array argument.\n     *\n     * @param      b     the buffer into which the data is read.\n     * @param      off   the start offset of the data.\n     * @param      len   the maximum number of bytes read.\n     * @return     the total number of bytes read into the buffer, or\n     *             <code>-1<\/code> if there is no more data because the end of\n     *             the stream has been reached.\n     */\n    public synchronized int read(byte b[], int off, int len) {\n        if (b == null) {\n            throw new NullPointerException();\n        } else if ((off < 0) || (off > b.length) || (len < 0) ||\n                   ((off + len) > b.length) || ((off + len) < 0)) {\n            throw new IndexOutOfBoundsException();\n        }\n        if (pos >= count) {\n            return -1;\n        }\n        if (pos + len > count) {\n            len = count - pos;\n        }\n        if (len <= 0) {\n            return 0;\n        }\n        String  s = buffer;\n        int cnt = len;\n        while (--cnt >= 0) {\n            b[off++] = (byte)s.charAt(pos++);\n        }\n\n        return len;\n    }"}
{"Number":"88","API Relative Path":"java.io.StringReader.java-read(char-int-int)","Corresponding Source":"/**\n     * Reads characters into a portion of an array.\n     *\n     * @param      cbuf  Destination buffer\n     * @param      off   Offset at which to start writing characters\n     * @param      len   Maximum number of characters to read\n     *\n     * @return     The number of characters read, or -1 if the end of the\n     *             stream has been reached\n     *\n     * @exception  IOException  If an I/O error occurs\n     */\n    public int read(char cbuf[], int off, int len) throws IOException {\n        synchronized (lock) {\n            ensureOpen();\n            if ((off < 0) || (off > cbuf.length) || (len < 0) ||\n                ((off + len) > cbuf.length) || ((off + len) < 0)) {\n                throw new IndexOutOfBoundsException();\n            } else if (len == 0) {\n                return 0;\n            }\n            if (next >= length)\n                return -1;\n            int n = Math.min(length - next, len);\n            str.getChars(next, next + n, cbuf, off);\n            next += n;\n            return n;\n        }\n    }"}
{"Number":"89","API Relative Path":"java.io.StringWriter.java-write(char-int-int)","Corresponding Source":"/**\n     * Write a portion of an array of characters.\n     *\n     * @param  cbuf  Array of characters\n     * @param  off   Offset from which to start writing characters\n     * @param  len   Number of characters to write\n     */\n    public void write(char cbuf[], int off, int len) {\n        if ((off < 0) || (off > cbuf.length) || (len < 0) ||\n            ((off + len) > cbuf.length) || ((off + len) < 0)) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return;\n        }\n        buf.append(cbuf, off, len);\n    }"}
{"Number":"90","API Relative Path":"java.io.StringWriter.java-write(String-int-int)","Corresponding Source":"/**\n     * Write a portion of a string.\n     *\n     * @param  str  String to be written\n     * @param  off  Offset from which to start writing characters\n     * @param  len  Number of characters to write\n     */\n    public void write(String str, int off, int len)  {\n        buf.append(str.substring(off, off + len));\n    }"}
{"Number":"91","API Relative Path":"java.io.Writer.java-Writer(Object)","Corresponding Source":"/**\n     * Creates a new character-stream writer whose critical sections will\n     * synchronize on the given object.\n     *\n     * @param  lock\n     *         Object to synchronize on\n     */\n    protected Writer(Object lock) {\n        if (lock == null) {\n            throw new NullPointerException();\n        }\n        this.lock = lock;\n    }"}
{"Number":"92","API Relative Path":"java.lang.AbstractStringBuilder.java-append(CharSequence-int-int)","Corresponding Source":"/**\n     * Appends a subsequence of the specified {@code CharSequence} to this\n     * sequence.\n     * <p>\n     * Characters of the argument {@code s}, starting at\n     * index {@code start}, are appended, in order, to the contents of\n     * this sequence up to the (exclusive) index {@code end}. The length\n     * of this sequence is increased by the value of {@code end - start}.\n     * <p>\n     * Let <i>n<\/i> be the length of this character sequence just prior to\n     * execution of the {@code append} method. Then the character at\n     * index <i>k<\/i> in this character sequence becomes equal to the\n     * character at index <i>k<\/i> in this sequence, if <i>k<\/i> is less than\n     * <i>n<\/i>; otherwise, it is equal to the character at index\n     * <i>k+start-n<\/i> in the argument {@code s}.\n     * <p>\n     * If {@code s} is {@code null}, then this method appends\n     * characters as if the s parameter was a sequence containing the four\n     * characters {@code \"null\"}.\n     *\n     * @param   s the sequence to append.\n     * @param   start   the starting index of the subsequence to be appended.\n     * @param   end     the end index of the subsequence to be appended.\n     * @return  a reference to this object.\n     * @throws     IndexOutOfBoundsException if\n     *             {@code start} is negative, or\n     *             {@code start} is greater than {@code end} or\n     *             {@code end} is greater than {@code s.length()}\n     */\n    @Override\n    public AbstractStringBuilder append(CharSequence s, int start, int end) {\n        if (s == null)\n            s = \"null\";\n        if ((start < 0) || (start > end) || (end > s.length()))\n            throw new IndexOutOfBoundsException(\n                \"start \" + start + \", end \" + end + \", s.length() \"\n                + s.length());\n        int len = end - start;\n        ensureCapacityInternal(count + len);\n        for (int i = start, j = count; i < end; i++, j++)\n            value[j] = s.charAt(i);\n        count += len;\n        return this;\n    }"}
{"Number":"93","API Relative Path":"java.lang.AbstractStringBuilder.java-charAt(int)","Corresponding Source":"/**\n     * Removes the {@code char} at the specified position in this\n     * sequence. This sequence is shortened by one {@code char}.\n     *\n     * <p>Note: If the character at the given index is a supplementary\n     * character, this method does not remove the entire character. If\n     * correct handling of supplementary characters is required,\n     * determine the number of {@code char}s to remove by calling\n     * {@code Character.charCount(thisSequence.codePointAt(index))},\n     * where {@code thisSequence} is this sequence.\n     *\n     * @param       index  Index of {@code char} to remove\n     * @return      This object.\n     * @throws      StringIndexOutOfBoundsException  if the {@code index}\n     *              is negative or greater than or equal to\n     *              {@code length()}.\n     */\n    public AbstractStringBuilder deleteCharAt(int index) {\n        if ((index < 0) || (index >= count))\n            throw new StringIndexOutOfBoundsException(index);\n        System.arraycopy(value, index+1, value, index, count-index-1);\n        count--;\n        return this;\n    }"}
{"Number":"94","API Relative Path":"java.lang.AbstractStringBuilder.java-codePointAt(int)","Corresponding Source":"/**\n     * Returns the character (Unicode code point) at the specified\n     * index. The index refers to {@code char} values\n     * (Unicode code units) and ranges from {@code 0} to\n     * {@link #length()}{@code  - 1}.\n     *\n     * <p> If the {@code char} value specified at the given index\n     * is in the high-surrogate range, the following index is less\n     * than the length of this sequence, and the\n     * {@code char} value at the following index is in the\n     * low-surrogate range, then the supplementary code point\n     * corresponding to this surrogate pair is returned. Otherwise,\n     * the {@code char} value at the given index is returned.\n     *\n     * @param      index the index to the {@code char} values\n     * @return     the code point value of the character at the\n     *             {@code index}\n     * @exception  IndexOutOfBoundsException  if the {@code index}\n     *             argument is negative or not less than the length of this\n     *             sequence.\n     */\n    public int codePointAt(int index) {\n        if ((index < 0) || (index >= count)) {\n            throw new StringIndexOutOfBoundsException(index);\n        }\n        return Character.codePointAtImpl(value, index, count);\n    }"}
{"Number":"95","API Relative Path":"java.lang.AbstractStringBuilder.java-codePointCount(int-int)","Corresponding Source":"/**\n     * Returns the number of Unicode code points in the specified text\n     * range of this sequence. The text range begins at the specified\n     * {@code beginIndex} and extends to the {@code char} at\n     * index {@code endIndex - 1}. Thus the length (in\n     * {@code char}s) of the text range is\n     * {@code endIndex-beginIndex}. Unpaired surrogates within\n     * this sequence count as one code point each.\n     *\n     * @param beginIndex the index to the first {@code char} of\n     * the text range.\n     * @param endIndex the index after the last {@code char} of\n     * the text range.\n     * @return the number of Unicode code points in the specified text\n     * range\n     * @exception IndexOutOfBoundsException if the\n     * {@code beginIndex} is negative, or {@code endIndex}\n     * is larger than the length of this sequence, or\n     * {@code beginIndex} is larger than {@code endIndex}.\n     */\n    public int codePointCount(int beginIndex, int endIndex) {\n        if (beginIndex < 0 || endIndex > count || beginIndex > endIndex) {\n            throw new IndexOutOfBoundsException();\n        }\n        return Character.codePointCountImpl(value, beginIndex, endIndex-beginIndex);\n    }"}
{"Number":"96","API Relative Path":"java.lang.AbstractStringBuilder.java-deleteCharAt(int)","Corresponding Source":"/**\n     * Removes the {@code char} at the specified position in this\n     * sequence. This sequence is shortened by one {@code char}.\n     *\n     * <p>Note: If the character at the given index is a supplementary\n     * character, this method does not remove the entire character. If\n     * correct handling of supplementary characters is required,\n     * determine the number of {@code char}s to remove by calling\n     * {@code Character.charCount(thisSequence.codePointAt(index))},\n     * where {@code thisSequence} is this sequence.\n     *\n     * @param       index  Index of {@code char} to remove\n     * @return      This object.\n     * @throws      StringIndexOutOfBoundsException  if the {@code index}\n     *              is negative or greater than or equal to\n     *              {@code length()}.\n     */\n    public AbstractStringBuilder deleteCharAt(int index) {\n        if ((index < 0) || (index >= count))\n            throw new StringIndexOutOfBoundsException(index);\n        System.arraycopy(value, index+1, value, index, count-index-1);\n        count--;\n        return this;\n    }"}
{"Number":"97","API Relative Path":"java.lang.AbstractStringBuilder.java-ensureCapacity(int)","Corresponding Source":"/**\n     * Ensures that the capacity is at least equal to the specified minimum.\n     * If the current capacity is less than the argument, then a new internal\n     * array is allocated with greater capacity. The new capacity is the\n     * larger of:\n     * <ul>\n     * <li>The {@code minimumCapacity} argument.\n     * <li>Twice the old capacity, plus {@code 2}.\n     * <\/ul>\n     * If the {@code minimumCapacity} argument is nonpositive, this\n     * method takes no action and simply returns.\n     * Note that subsequent operations on this object can reduce the\n     * actual capacity below that requested here.\n     *\n     * @param   minimumCapacity   the minimum desired capacity.\n     */\n    public void ensureCapacity(int minimumCapacity) {\n        if (minimumCapacity > 0)\n            ensureCapacityInternal(minimumCapacity);\n    }"}
{"Number":"98","API Relative Path":"java.lang.AbstractStringBuilder.java-expandCapacity(int)","Corresponding Source":"/**\n     * This implements the expansion semantics of ensureCapacity with no\n     * size check or synchronization.\n     */\n    void expandCapacity(int minimumCapacity) {\n        int newCapacity = value.length * 2 + 2;\n        if (newCapacity - minimumCapacity < 0)\n            newCapacity = minimumCapacity;\n        if (newCapacity < 0) {\n            if (minimumCapacity < 0) // overflow\n                throw new OutOfMemoryError();\n            newCapacity = Integer.MAX_VALUE;\n        }\n        value = Arrays.copyOf(value, newCapacity);\n    }"}
{"Number":"99","API Relative Path":"java.lang.AbstractStringBuilder.java-getChars(int-int-char[]-int)","Corresponding Source":"/**\n     * Characters are copied from this sequence into the\n     * destination character array {@code dst}. The first character to\n     * be copied is at index {@code srcBegin}; the last character to\n     * be copied is at index {@code srcEnd-1}. The total number of\n     * characters to be copied is {@code srcEnd-srcBegin}. The\n     * characters are copied into the subarray of {@code dst} starting\n     * at index {@code dstBegin} and ending at index:\n     * <pre>{@code\n     * dstbegin + (srcEnd-srcBegin) - 1\n     * }<\/pre>\n     *\n     * @param      srcBegin   start copying at this offset.\n     * @param      srcEnd     stop copying at this offset.\n     * @param      dst        the array to copy the data into.\n     * @param      dstBegin   offset into {@code dst}.\n     * @throws     IndexOutOfBoundsException  if any of the following is true:\n     *             <ul>\n     *             <li>{@code srcBegin} is negative\n     *             <li>{@code dstBegin} is negative\n     *             <li>the {@code srcBegin} argument is greater than\n     *             the {@code srcEnd} argument.\n     *             <li>{@code srcEnd} is greater than\n     *             {@code this.length()}.\n     *             <li>{@code dstBegin+srcEnd-srcBegin} is greater than\n     *             {@code dst.length}\n     *             <\/ul>\n     */\n    public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)\n    {\n        if (srcBegin < 0)\n            throw new StringIndexOutOfBoundsException(srcBegin);\n        if ((srcEnd < 0) || (srcEnd > count))\n            throw new StringIndexOutOfBoundsException(srcEnd);\n        if (srcBegin > srcEnd)\n            throw new StringIndexOutOfBoundsException(\"srcBegin > srcEnd\");\n        System.arraycopy(value, srcBegin, dst, dstBegin, srcEnd - srcBegin);\n    }"}
{"Number":"100","API Relative Path":"java.lang.AbstractStringBuilder.java-getChars(int-int-char[]-int)","Corresponding Source":"/**\n     * Characters are copied from this sequence into the\n     * destination character array {@code dst}. The first character to\n     * be copied is at index {@code srcBegin}; the last character to\n     * be copied is at index {@code srcEnd-1}. The total number of\n     * characters to be copied is {@code srcEnd-srcBegin}. The\n     * characters are copied into the subarray of {@code dst} starting\n     * at index {@code dstBegin} and ending at index:\n     * <pre>{@code\n     * dstbegin + (srcEnd-srcBegin) - 1\n     * }<\/pre>\n     *\n     * @param      srcBegin   start copying at this offset.\n     * @param      srcEnd     stop copying at this offset.\n     * @param      dst        the array to copy the data into.\n     * @param      dstBegin   offset into {@code dst}.\n     * @throws     IndexOutOfBoundsException  if any of the following is true:\n     *             <ul>\n     *             <li>{@code srcBegin} is negative\n     *             <li>{@code dstBegin} is negative\n     *             <li>the {@code srcBegin} argument is greater than\n     *             the {@code srcEnd} argument.\n     *             <li>{@code srcEnd} is greater than\n     *             {@code this.length()}.\n     *             <li>{@code dstBegin+srcEnd-srcBegin} is greater than\n     *             {@code dst.length}\n     *             <\/ul>\n     */\n    public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)\n    {\n        if (srcBegin < 0)\n            throw new StringIndexOutOfBoundsException(srcBegin);\n        if ((srcEnd < 0) || (srcEnd > count))\n            throw new StringIndexOutOfBoundsException(srcEnd);\n        if (srcBegin > srcEnd)\n            throw new StringIndexOutOfBoundsException(\"srcBegin > srcEnd\");\n        System.arraycopy(value, srcBegin, dst, dstBegin, srcEnd - srcBegin);\n    }"}
{"Number":"101","API Relative Path":"java.lang.AbstractStringBuilder.java-getChars(int-int-char[]-int)","Corresponding Source":"/**\n     * Characters are copied from this sequence into the\n     * destination character array {@code dst}. The first character to\n     * be copied is at index {@code srcBegin}; the last character to\n     * be copied is at index {@code srcEnd-1}. The total number of\n     * characters to be copied is {@code srcEnd-srcBegin}. The\n     * characters are copied into the subarray of {@code dst} starting\n     * at index {@code dstBegin} and ending at index:\n     * <pre>{@code\n     * dstbegin + (srcEnd-srcBegin) - 1\n     * }<\/pre>\n     *\n     * @param      srcBegin   start copying at this offset.\n     * @param      srcEnd     stop copying at this offset.\n     * @param      dst        the array to copy the data into.\n     * @param      dstBegin   offset into {@code dst}.\n     * @throws     IndexOutOfBoundsException  if any of the following is true:\n     *             <ul>\n     *             <li>{@code srcBegin} is negative\n     *             <li>{@code dstBegin} is negative\n     *             <li>the {@code srcBegin} argument is greater than\n     *             the {@code srcEnd} argument.\n     *             <li>{@code srcEnd} is greater than\n     *             {@code this.length()}.\n     *             <li>{@code dstBegin+srcEnd-srcBegin} is greater than\n     *             {@code dst.length}\n     *             <\/ul>\n     */\n    public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)\n    {\n        if (srcBegin < 0)\n            throw new StringIndexOutOfBoundsException(srcBegin);\n        if ((srcEnd < 0) || (srcEnd > count))\n            throw new StringIndexOutOfBoundsException(srcEnd);\n        if (srcBegin > srcEnd)\n            throw new StringIndexOutOfBoundsException(\"srcBegin > srcEnd\");\n        System.arraycopy(value, srcBegin, dst, dstBegin, srcEnd - srcBegin);\n    }"}
{"Number":"102","API Relative Path":"java.lang.AbstractStringBuilder.java-insert(int-CharSequence-int-int)","Corresponding Source":"/**\n     * Inserts a subsequence of the specified {@code CharSequence} into\n     * this sequence.\n     * <p>\n     * The subsequence of the argument {@code s} specified by\n     * {@code start} and {@code end} are inserted,\n     * in order, into this sequence at the specified destination offset, moving\n     * up any characters originally above that position. The length of this\n     * sequence is increased by {@code end - start}.\n     * <p>\n     * The character at index <i>k<\/i> in this sequence becomes equal to:\n     * <ul>\n     * <li>the character at index <i>k<\/i> in this sequence, if\n     * <i>k<\/i> is less than {@code dstOffset}\n     * <li>the character at index <i>k<\/i>{@code +start-dstOffset} in\n     * the argument {@code s}, if <i>k<\/i> is greater than or equal to\n     * {@code dstOffset} but is less than {@code dstOffset+end-start}\n     * <li>the character at index <i>k<\/i>{@code -(end-start)} in this\n     * sequence, if <i>k<\/i> is greater than or equal to\n     * {@code dstOffset+end-start}\n     * <\/ul><p>\n     * The {@code dstOffset} argument must be greater than or equal to\n     * {@code 0}, and less than or equal to the {@linkplain #length() length}\n     * of this sequence.\n     * <p>The start argument must be nonnegative, and not greater than\n     * {@code end}.\n     * <p>The end argument must be greater than or equal to\n     * {@code start}, and less than or equal to the length of s.\n     *\n     * <p>If {@code s} is {@code null}, then this method inserts\n     * characters as if the s parameter was a sequence containing the four\n     * characters {@code \"null\"}.\n     *\n     * @param      dstOffset   the offset in this sequence.\n     * @param      s       the sequence to be inserted.\n     * @param      start   the starting index of the subsequence to be inserted.\n     * @param      end     the end index of the subsequence to be inserted.\n     * @return     a reference to this object.\n     * @throws     IndexOutOfBoundsException  if {@code dstOffset}\n     *             is negative or greater than {@code this.length()}, or\n     *              {@code start} or {@code end} are negative, or\n     *              {@code start} is greater than {@code end} or\n     *              {@code end} is greater than {@code s.length()}\n     */\n     public AbstractStringBuilder insert(int dstOffset, CharSequence s,\n                                         int start, int end) {\n        if (s == null)\n            s = \"null\";\n        if ((dstOffset < 0) || (dstOffset > this.length()))\n            throw new IndexOutOfBoundsException(\"dstOffset \"+dstOffset);\n        if ((start < 0) || (end < 0) || (start > end) || (end > s.length()))\n            throw new IndexOutOfBoundsException(\n                \"start \" + start + \", end \" + end + \", s.length() \"\n                + s.length());\n        int len = end - start;\n        ensureCapacityInternal(count + len);\n        System.arraycopy(value, dstOffset, value, dstOffset + len,\n                         count - dstOffset);\n        for (int i=start; i<end; i++)\n            value[dstOffset++] = s.charAt(i);\n        count += len;\n        return this;\n    }"}
{"Number":"103","API Relative Path":"java.lang.AbstractStringBuilder.java-insert(int-char[])","Corresponding Source":"/**\n     * Inserts the string representation of the {@code char}\n     * argument into this sequence.\n     * <p>\n     * The overall effect is exactly as if the second argument were\n     * converted to a string by the method {@link String#valueOf(char)},\n     * and the character in that string were then\n     * {@link #insert(int,String) inserted} into this character\n     * sequence at the indicated offset.\n     * <p>\n     * The {@code offset} argument must be greater than or equal to\n     * {@code 0}, and less than or equal to the {@linkplain #length() length}\n     * of this sequence.\n     *\n     * @param      offset   the offset.\n     * @param      c        a {@code char}.\n     * @return     a reference to this object.\n     * @throws     IndexOutOfBoundsException  if the offset is invalid.\n     */\n    public AbstractStringBuilder insert(int offset, char c) {\n        ensureCapacityInternal(count + 1);\n        System.arraycopy(value, offset, value, offset + 1, count - offset);\n        value[offset] = c;\n        count += 1;\n        return this;\n    }"}
{"Number":"104","API Relative Path":"java.lang.AbstractStringBuilder.java-insert(int-char[]-int-int)","Corresponding Source":"/**\n     * Inserts a subsequence of the specified {@code CharSequence} into\n     * this sequence.\n     * <p>\n     * The subsequence of the argument {@code s} specified by\n     * {@code start} and {@code end} are inserted,\n     * in order, into this sequence at the specified destination offset, moving\n     * up any characters originally above that position. The length of this\n     * sequence is increased by {@code end - start}.\n     * <p>\n     * The character at index <i>k<\/i> in this sequence becomes equal to:\n     * <ul>\n     * <li>the character at index <i>k<\/i> in this sequence, if\n     * <i>k<\/i> is less than {@code dstOffset}\n     * <li>the character at index <i>k<\/i>{@code +start-dstOffset} in\n     * the argument {@code s}, if <i>k<\/i> is greater than or equal to\n     * {@code dstOffset} but is less than {@code dstOffset+end-start}\n     * <li>the character at index <i>k<\/i>{@code -(end-start)} in this\n     * sequence, if <i>k<\/i> is greater than or equal to\n     * {@code dstOffset+end-start}\n     * <\/ul><p>\n     * The {@code dstOffset} argument must be greater than or equal to\n     * {@code 0}, and less than or equal to the {@linkplain #length() length}\n     * of this sequence.\n     * <p>The start argument must be nonnegative, and not greater than\n     * {@code end}.\n     * <p>The end argument must be greater than or equal to\n     * {@code start}, and less than or equal to the length of s.\n     *\n     * <p>If {@code s} is {@code null}, then this method inserts\n     * characters as if the s parameter was a sequence containing the four\n     * characters {@code \"null\"}.\n     *\n     * @param      dstOffset   the offset in this sequence.\n     * @param      s       the sequence to be inserted.\n     * @param      start   the starting index of the subsequence to be inserted.\n     * @param      end     the end index of the subsequence to be inserted.\n     * @return     a reference to this object.\n     * @throws     IndexOutOfBoundsException  if {@code dstOffset}\n     *             is negative or greater than {@code this.length()}, or\n     *              {@code start} or {@code end} are negative, or\n     *              {@code start} is greater than {@code end} or\n     *              {@code end} is greater than {@code s.length()}\n     */\n     public AbstractStringBuilder insert(int dstOffset, CharSequence s,\n                                         int start, int end) {\n        if (s == null)\n            s = \"null\";\n        if ((dstOffset < 0) || (dstOffset > this.length()))\n            throw new IndexOutOfBoundsException(\"dstOffset \"+dstOffset);\n        if ((start < 0) || (end < 0) || (start > end) || (end > s.length()))\n            throw new IndexOutOfBoundsException(\n                \"start \" + start + \", end \" + end + \", s.length() \"\n                + s.length());\n        int len = end - start;\n        ensureCapacityInternal(count + len);\n        System.arraycopy(value, dstOffset, value, dstOffset + len,\n                         count - dstOffset);\n        for (int i=start; i<end; i++)\n            value[dstOffset++] = s.charAt(i);\n        count += len;\n        return this;\n    }"}
{"Number":"105","API Relative Path":"java.lang.AbstractStringBuilder.java-insert(int-String)","Corresponding Source":"/**\n     * Inserts the string into this character sequence.\n     * <p>\n     * The characters of the {@code String} argument are inserted, in\n     * order, into this sequence at the indicated offset, moving up any\n     * characters originally above that position and increasing the length\n     * of this sequence by the length of the argument. If\n     * {@code str} is {@code null}, then the four characters\n     * {@code \"null\"} are inserted into this sequence.\n     * <p>\n     * The character at index <i>k<\/i> in the new character sequence is\n     * equal to:\n     * <ul>\n     * <li>the character at index <i>k<\/i> in the old character sequence, if\n     * <i>k<\/i> is less than {@code offset}\n     * <li>the character at index <i>k<\/i>{@code -offset} in the\n     * argument {@code str}, if <i>k<\/i> is not less than\n     * {@code offset} but is less than {@code offset+str.length()}\n     * <li>the character at index <i>k<\/i>{@code -str.length()} in the\n     * old character sequence, if <i>k<\/i> is not less than\n     * {@code offset+str.length()}\n     * <\/ul><p>\n     * The {@code offset} argument must be greater than or equal to\n     * {@code 0}, and less than or equal to the {@linkplain #length() length}\n     * of this sequence.\n     *\n     * @param      offset   the offset.\n     * @param      str      a string.\n     * @return     a reference to this object.\n     * @throws     StringIndexOutOfBoundsException  if the offset is invalid.\n     */\n    public AbstractStringBuilder insert(int offset, String str) {\n        if ((offset < 0) || (offset > length()))\n            throw new StringIndexOutOfBoundsException(offset);\n        if (str == null)\n            str = \"null\";\n        int len = str.length();\n        ensureCapacityInternal(count + len);\n        System.arraycopy(value, offset, value, offset + len, count - offset);\n        str.getChars(value, offset);\n        count += len;\n        return this;\n    }"}
{"Number":"106","API Relative Path":"java.lang.AbstractStringBuilder.java-offsetByCodePoints(int-int)","Corresponding Source":"/**\n     * Returns the index within this sequence that is offset from the\n     * given {@code index} by {@code codePointOffset} code\n     * points. Unpaired surrogates within the text range given by\n     * {@code index} and {@code codePointOffset} count as\n     * one code point each.\n     *\n     * @param index the index to be offset\n     * @param codePointOffset the offset in code points\n     * @return the index within this sequence\n     * @exception IndexOutOfBoundsException if {@code index}\n     *   is negative or larger then the length of this sequence,\n     *   or if {@code codePointOffset} is positive and the subsequence\n     *   starting with {@code index} has fewer than\n     *   {@code codePointOffset} code points,\n     *   or if {@code codePointOffset} is negative and the subsequence\n     *   before {@code index} has fewer than the absolute value of\n     *   {@code codePointOffset} code points.\n     */\n    public int offsetByCodePoints(int index, int codePointOffset) {\n        if (index < 0 || index > count) {\n            throw new IndexOutOfBoundsException();\n        }\n        return Character.offsetByCodePointsImpl(value, 0, count,\n                                                index, codePointOffset);\n    }"}
{"Number":"107","API Relative Path":"java.lang.AbstractStringBuilder.java-offsetByCodePoints(int-int)","Corresponding Source":"/**\n     * Returns the index within this sequence that is offset from the\n     * given {@code index} by {@code codePointOffset} code\n     * points. Unpaired surrogates within the text range given by\n     * {@code index} and {@code codePointOffset} count as\n     * one code point each.\n     *\n     * @param index the index to be offset\n     * @param codePointOffset the offset in code points\n     * @return the index within this sequence\n     * @exception IndexOutOfBoundsException if {@code index}\n     *   is negative or larger then the length of this sequence,\n     *   or if {@code codePointOffset} is positive and the subsequence\n     *   starting with {@code index} has fewer than\n     *   {@code codePointOffset} code points,\n     *   or if {@code codePointOffset} is negative and the subsequence\n     *   before {@code index} has fewer than the absolute value of\n     *   {@code codePointOffset} code points.\n     */\n    public int offsetByCodePoints(int index, int codePointOffset) {\n        if (index < 0 || index > count) {\n            throw new IndexOutOfBoundsException();\n        }\n        return Character.offsetByCodePointsImpl(value, 0, count,\n                                                index, codePointOffset);\n    }"}
{"Number":"108","API Relative Path":"java.lang.AbstractStringBuilder.java-replace(int-int-String)","Corresponding Source":"/**\n     * Replaces the characters in a substring of this sequence\n     * with characters in the specified {@code String}. The substring\n     * begins at the specified {@code start} and extends to the character\n     * at index {@code end - 1} or to the end of the\n     * sequence if no such character exists. First the\n     * characters in the substring are removed and then the specified\n     * {@code String} is inserted at {@code start}. (This\n     * sequence will be lengthened to accommodate the\n     * specified String if necessary.)\n     *\n     * @param      start    The beginning index, inclusive.\n     * @param      end      The ending index, exclusive.\n     * @param      str   String that will replace previous contents.\n     * @return     This object.\n     * @throws     StringIndexOutOfBoundsException  if {@code start}\n     *             is negative, greater than {@code length()}, or\n     *             greater than {@code end}.\n     */\n    public AbstractStringBuilder replace(int start, int end, String str) {\n        if (start < 0)\n            throw new StringIndexOutOfBoundsException(start);\n        if (start > count)\n            throw new StringIndexOutOfBoundsException(\"start > length()\");\n        if (start > end)\n            throw new StringIndexOutOfBoundsException(\"start > end\");\n\n        if (end > count)\n            end = count;\n        int len = str.length();\n        int newCount = count + len - (end - start);\n        ensureCapacityInternal(newCount);\n\n        System.arraycopy(value, end, value, start + len, count - end);\n        str.getChars(value, start);\n        count = newCount;\n        return this;\n    }"}
{"Number":"109","API Relative Path":"java.lang.AbstractStringBuilder.java-setCharAt(int-char)","Corresponding Source":"/**\n     * The character at the specified index is set to {@code ch}. This\n     * sequence is altered to represent a new character sequence that is\n     * identical to the old character sequence, except that it contains the\n     * character {@code ch} at position {@code index}.\n     * <p>\n     * The index argument must be greater than or equal to\n     * {@code 0}, and less than the length of this sequence.\n     *\n     * @param      index   the index of the character to modify.\n     * @param      ch      the new character.\n     * @throws     IndexOutOfBoundsException  if {@code index} is\n     *             negative or greater than or equal to {@code length()}.\n     */\n    public void setCharAt(int index, char ch) {\n        if ((index < 0) || (index >= count))\n            throw new StringIndexOutOfBoundsException(index);\n        value[index] = ch;\n    }"}
{"Number":"110","API Relative Path":"java.lang.AbstractStringBuilder.java-setLength(int)","Corresponding Source":"/**\n     * Sets the length of the character sequence.\n     * The sequence is changed to a new character sequence\n     * whose length is specified by the argument. For every nonnegative\n     * index <i>k<\/i> less than {@code newLength}, the character at\n     * index <i>k<\/i> in the new character sequence is the same as the\n     * character at index <i>k<\/i> in the old sequence if <i>k<\/i> is less\n     * than the length of the old character sequence; otherwise, it is the\n     * null character {@code '\\u005Cu0000'}.\n     *\n     * In other words, if the {@code newLength} argument is less than\n     * the current length, the length is changed to the specified length.\n     * <p>\n     * If the {@code newLength} argument is greater than or equal\n     * to the current length, sufficient null characters\n     * ({@code '\\u005Cu0000'}) are appended so that\n     * length becomes the {@code newLength} argument.\n     * <p>\n     * The {@code newLength} argument must be greater than or equal\n     * to {@code 0}.\n     *\n     * @param      newLength   the new length\n     * @throws     IndexOutOfBoundsException  if the\n     *               {@code newLength} argument is negative.\n     */\n    public void setLength(int newLength) {\n        if (newLength < 0)\n            throw new StringIndexOutOfBoundsException(newLength);\n        ensureCapacityInternal(newLength);\n\n        if (count < newLength) {\n            Arrays.fill(value, count, newLength, '\\0');\n        }\n\n        count = newLength;\n    }"}
{"Number":"111","API Relative Path":"java.lang.AbstractStringBuilder.java-setLength(int)","Corresponding Source":"/**\n     * Sets the length of the character sequence.\n     * The sequence is changed to a new character sequence\n     * whose length is specified by the argument. For every nonnegative\n     * index <i>k<\/i> less than {@code newLength}, the character at\n     * index <i>k<\/i> in the new character sequence is the same as the\n     * character at index <i>k<\/i> in the old sequence if <i>k<\/i> is less\n     * than the length of the old character sequence; otherwise, it is the\n     * null character {@code '\\u005Cu0000'}.\n     *\n     * In other words, if the {@code newLength} argument is less than\n     * the current length, the length is changed to the specified length.\n     * <p>\n     * If the {@code newLength} argument is greater than or equal\n     * to the current length, sufficient null characters\n     * ({@code '\\u005Cu0000'}) are appended so that\n     * length becomes the {@code newLength} argument.\n     * <p>\n     * The {@code newLength} argument must be greater than or equal\n     * to {@code 0}.\n     *\n     * @param      newLength   the new length\n     * @throws     IndexOutOfBoundsException  if the\n     *               {@code newLength} argument is negative.\n     */\n    public void setLength(int newLength) {\n        if (newLength < 0)\n            throw new StringIndexOutOfBoundsException(newLength);\n        ensureCapacityInternal(newLength);\n\n        if (count < newLength) {\n            Arrays.fill(value, count, newLength, '\\0');\n        }\n\n        count = newLength;\n    }"}
{"Number":"112","API Relative Path":"java.lang.AbstractStringBuilder.java-setLength(int)","Corresponding Source":"/**\n     * Sets the length of the character sequence.\n     * The sequence is changed to a new character sequence\n     * whose length is specified by the argument. For every nonnegative\n     * index <i>k<\/i> less than {@code newLength}, the character at\n     * index <i>k<\/i> in the new character sequence is the same as the\n     * character at index <i>k<\/i> in the old sequence if <i>k<\/i> is less\n     * than the length of the old character sequence; otherwise, it is the\n     * null character {@code '\\u005Cu0000'}.\n     *\n     * In other words, if the {@code newLength} argument is less than\n     * the current length, the length is changed to the specified length.\n     * <p>\n     * If the {@code newLength} argument is greater than or equal\n     * to the current length, sufficient null characters\n     * ({@code '\\u005Cu0000'}) are appended so that\n     * length becomes the {@code newLength} argument.\n     * <p>\n     * The {@code newLength} argument must be greater than or equal\n     * to {@code 0}.\n     *\n     * @param      newLength   the new length\n     * @throws     IndexOutOfBoundsException  if the\n     *               {@code newLength} argument is negative.\n     */\n    public void setLength(int newLength) {\n        if (newLength < 0)\n            throw new StringIndexOutOfBoundsException(newLength);\n        ensureCapacityInternal(newLength);\n\n        if (count < newLength) {\n            Arrays.fill(value, count, newLength, '\\0');\n        }\n\n        count = newLength;\n    }"}
{"Number":"113","API Relative Path":"java.lang.AbstractStringBuilder.java-setLength(int)","Corresponding Source":"/**\n     * Sets the length of the character sequence.\n     * The sequence is changed to a new character sequence\n     * whose length is specified by the argument. For every nonnegative\n     * index <i>k<\/i> less than {@code newLength}, the character at\n     * index <i>k<\/i> in the new character sequence is the same as the\n     * character at index <i>k<\/i> in the old sequence if <i>k<\/i> is less\n     * than the length of the old character sequence; otherwise, it is the\n     * null character {@code '\\u005Cu0000'}.\n     *\n     * In other words, if the {@code newLength} argument is less than\n     * the current length, the length is changed to the specified length.\n     * <p>\n     * If the {@code newLength} argument is greater than or equal\n     * to the current length, sufficient null characters\n     * ({@code '\\u005Cu0000'}) are appended so that\n     * length becomes the {@code newLength} argument.\n     * <p>\n     * The {@code newLength} argument must be greater than or equal\n     * to {@code 0}.\n     *\n     * @param      newLength   the new length\n     * @throws     IndexOutOfBoundsException  if the\n     *               {@code newLength} argument is negative.\n     */\n    public void setLength(int newLength) {\n        if (newLength < 0)\n            throw new StringIndexOutOfBoundsException(newLength);\n        ensureCapacityInternal(newLength);\n\n        if (count < newLength) {\n            Arrays.fill(value, count, newLength, '\\0');\n        }\n\n        count = newLength;\n    }"}
{"Number":"114","API Relative Path":"java.lang.AbstractStringBuilder.java-subSequence(int-int)","Corresponding Source":"/**\n     * Returns a new character sequence that is a subsequence of this sequence.\n     *\n     * <p> An invocation of this method of the form\n     *\n     * <pre>{@code\n     * sb.subSequence(begin,&nbsp;end)}<\/pre>\n     *\n     * behaves in exactly the same way as the invocation\n     *\n     * <pre>{@code\n     * sb.substring(begin,&nbsp;end)}<\/pre>\n     *\n     * This method is provided so that this class can\n     * implement the {@link CharSequence} interface.\n     *\n     * @param      start   the start index, inclusive.\n     * @param      end     the end index, exclusive.\n     * @return     the specified subsequence.\n     *\n     * @throws  IndexOutOfBoundsException\n     *          if {@code start} or {@code end} are negative,\n     *          if {@code end} is greater than {@code length()},\n     *          or if {@code start} is greater than {@code end}\n     * @spec JSR-51\n     */\n    @Override\n    public CharSequence subSequence(int start, int end) {\n        return substring(start, end);\n    }"}
{"Number":"115","API Relative Path":"java.lang.AbstractStringBuilder.java-subSequence(int-int)","Corresponding Source":"/**\n     * Returns a new character sequence that is a subsequence of this sequence.\n     *\n     * <p> An invocation of this method of the form\n     *\n     * <pre>{@code\n     * sb.subSequence(begin,&nbsp;end)}<\/pre>\n     *\n     * behaves in exactly the same way as the invocation\n     *\n     * <pre>{@code\n     * sb.substring(begin,&nbsp;end)}<\/pre>\n     *\n     * This method is provided so that this class can\n     * implement the {@link CharSequence} interface.\n     *\n     * @param      start   the start index, inclusive.\n     * @param      end     the end index, exclusive.\n     * @return     the specified subsequence.\n     *\n     * @throws  IndexOutOfBoundsException\n     *          if {@code start} or {@code end} are negative,\n     *          if {@code end} is greater than {@code length()},\n     *          or if {@code start} is greater than {@code end}\n     * @spec JSR-51\n     */\n    @Override\n    public CharSequence subSequence(int start, int end) {\n        return substring(start, end);\n    }"}
{"Number":"116","API Relative Path":"java.lang.AbstractStringBuilder.java-subSequence(int-int)","Corresponding Source":"/**\n     * Returns a new character sequence that is a subsequence of this sequence.\n     *\n     * <p> An invocation of this method of the form\n     *\n     * <pre>{@code\n     * sb.subSequence(begin,&nbsp;end)}<\/pre>\n     *\n     * behaves in exactly the same way as the invocation\n     *\n     * <pre>{@code\n     * sb.substring(begin,&nbsp;end)}<\/pre>\n     *\n     * This method is provided so that this class can\n     * implement the {@link CharSequence} interface.\n     *\n     * @param      start   the start index, inclusive.\n     * @param      end     the end index, exclusive.\n     * @return     the specified subsequence.\n     *\n     * @throws  IndexOutOfBoundsException\n     *          if {@code start} or {@code end} are negative,\n     *          if {@code end} is greater than {@code length()},\n     *          or if {@code start} is greater than {@code end}\n     * @spec JSR-51\n     */\n    @Override\n    public CharSequence subSequence(int start, int end) {\n        return substring(start, end);\n    }"}
{"Number":"117","API Relative Path":"java.lang.AbstractStringBuilder.java-substring(int-int)","Corresponding Source":"/**\n     * Returns a new {@code String} that contains a subsequence of\n     * characters currently contained in this sequence. The\n     * substring begins at the specified {@code start} and\n     * extends to the character at index {@code end - 1}.\n     *\n     * @param      start    The beginning index, inclusive.\n     * @param      end      The ending index, exclusive.\n     * @return     The new string.\n     * @throws     StringIndexOutOfBoundsException  if {@code start}\n     *             or {@code end} are negative or greater than\n     *             {@code length()}, or {@code start} is\n     *             greater than {@code end}.\n     */\n    public String substring(int start, int end) {\n        if (start < 0)\n            throw new StringIndexOutOfBoundsException(start);\n        if (end > count)\n            throw new StringIndexOutOfBoundsException(end);\n        if (start > end)\n            throw new StringIndexOutOfBoundsException(end - start);\n        return new String(value, start, end - start);\n    }"}
{"Number":"118","API Relative Path":"java.lang.AbstractStringBuilder.java-substring(int-int)","Corresponding Source":"/**\n     * Returns a new {@code String} that contains a subsequence of\n     * characters currently contained in this sequence. The\n     * substring begins at the specified {@code start} and\n     * extends to the character at index {@code end - 1}.\n     *\n     * @param      start    The beginning index, inclusive.\n     * @param      end      The ending index, exclusive.\n     * @return     The new string.\n     * @throws     StringIndexOutOfBoundsException  if {@code start}\n     *             or {@code end} are negative or greater than\n     *             {@code length()}, or {@code start} is\n     *             greater than {@code end}.\n     */\n    public String substring(int start, int end) {\n        if (start < 0)\n            throw new StringIndexOutOfBoundsException(start);\n        if (end > count)\n            throw new StringIndexOutOfBoundsException(end);\n        if (start > end)\n            throw new StringIndexOutOfBoundsException(end - start);\n        return new String(value, start, end - start);\n    }"}
{"Number":"119","API Relative Path":"java.lang.BootstrapMethodError.java-BootstrapMethodError(Throwable)","Corresponding Source":"/**\n     * Constructs a {@code BootstrapMethodError} with the specified\n     * cause.\n     *\n     * @param cause the cause, may be {@code null}.\n     */\n    public BootstrapMethodError(Throwable cause) {\n        // cf. Throwable(Throwable cause) constructor.\n        super(cause == null ? null : cause.toString());\n        initCause(cause);\n    }"}
{"Number":"120","API Relative Path":"java.lang.BootstrapMethodError.java-BootstrapMethodError(Throwable)","Corresponding Source":"/**\n     * Constructs a {@code BootstrapMethodError} with the specified\n     * cause.\n     *\n     * @param cause the cause, may be {@code null}.\n     */\n    public BootstrapMethodError(Throwable cause) {\n        // cf. Throwable(Throwable cause) constructor.\n        super(cause == null ? null : cause.toString());\n        initCause(cause);\n    }"}
{"Number":"121","API Relative Path":"java.lang.Byte.java-Byte(String)","Corresponding Source":"/**\n     * Constructs a newly allocated {@code Byte} object that\n     * represents the {@code byte} value indicated by the\n     * {@code String} parameter. The string is converted to a\n     * {@code byte} value in exactly the manner used by the\n     * {@code parseByte} method for radix 10.\n     *\n     * @param s         the {@code String} to be converted to a\n     *                  {@code Byte}\n     * @throws           NumberFormatException If the {@code String}\n     *                  does not contain a parsable {@code byte}.\n     * @see        java.lang.Byte#parseByte(java.lang.String, int)\n     */\n    public Byte(String s) throws NumberFormatException {\n        this.value = parseByte(s, 10);\n    }"}
{"Number":"122","API Relative Path":"java.lang.Byte.java-parseByte(String-int)","Corresponding Source":"/**\n     * Parses the string argument as a signed {@code byte} in the\n     * radix specified by the second argument. The characters in the\n     * string must all be digits, of the specified radix (as\n     * determined by whether {@link java.lang.Character#digit(char,\n     * int)} returns a nonnegative value) except that the first\n     * character may be an ASCII minus sign {@code '-'}\n     * ({@code '\\u005Cu002D'}) to indicate a negative value or an\n     * ASCII plus sign {@code '+'} ({@code '\\u005Cu002B'}) to\n     * indicate a positive value.  The resulting {@code byte} value is\n     * returned.\n     *\n     * <p>An exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * <ul>\n     * <li> The first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * <li> The radix is either smaller than {@link\n     * java.lang.Character#MIN_RADIX} or larger than {@link\n     * java.lang.Character#MAX_RADIX}.\n     *\n     * <li> Any character of the string is not a digit of the\n     * specified radix, except that the first character may be a minus\n     * sign {@code '-'} ({@code '\\u005Cu002D'}) or plus sign\n     * {@code '+'} ({@code '\\u005Cu002B'}) provided that the\n     * string is longer than length 1.\n     *\n     * <li> The value represented by the string is not a value of type\n     * {@code byte}.\n     * <\/ul>\n     *\n     * @param s         the {@code String} containing the\n     *                  {@code byte}\n     *                  representation to be parsed\n     * @param radix     the radix to be used while parsing {@code s}\n     * @return          the {@code byte} value represented by the string\n     *                   argument in the specified radix\n     * @throws          NumberFormatException If the string does\n     *                  not contain a parsable {@code byte}.\n     */\n    public static byte parseByte(String s, int radix)\n        throws NumberFormatException {\n        int i = Integer.parseInt(s, radix);\n        if (i < MIN_VALUE || i > MAX_VALUE)\n            throw new NumberFormatException(\n                \"Value out of range. Value:\\\"\" + s + \"\\\" Radix:\" + radix);\n        return (byte)i;\n    }"}
{"Number":"123","API Relative Path":"java.lang.Byte.java-parseByte(String-int)","Corresponding Source":"/**\n     * Parses the string argument as a signed {@code byte} in the\n     * radix specified by the second argument. The characters in the\n     * string must all be digits, of the specified radix (as\n     * determined by whether {@link java.lang.Character#digit(char,\n     * int)} returns a nonnegative value) except that the first\n     * character may be an ASCII minus sign {@code '-'}\n     * ({@code '\\u005Cu002D'}) to indicate a negative value or an\n     * ASCII plus sign {@code '+'} ({@code '\\u005Cu002B'}) to\n     * indicate a positive value.  The resulting {@code byte} value is\n     * returned.\n     *\n     * <p>An exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * <ul>\n     * <li> The first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * <li> The radix is either smaller than {@link\n     * java.lang.Character#MIN_RADIX} or larger than {@link\n     * java.lang.Character#MAX_RADIX}.\n     *\n     * <li> Any character of the string is not a digit of the\n     * specified radix, except that the first character may be a minus\n     * sign {@code '-'} ({@code '\\u005Cu002D'}) or plus sign\n     * {@code '+'} ({@code '\\u005Cu002B'}) provided that the\n     * string is longer than length 1.\n     *\n     * <li> The value represented by the string is not a value of type\n     * {@code byte}.\n     * <\/ul>\n     *\n     * @param s         the {@code String} containing the\n     *                  {@code byte}\n     *                  representation to be parsed\n     * @param radix     the radix to be used while parsing {@code s}\n     * @return          the {@code byte} value represented by the string\n     *                   argument in the specified radix\n     * @throws          NumberFormatException If the string does\n     *                  not contain a parsable {@code byte}.\n     */\n    public static byte parseByte(String s, int radix)\n        throws NumberFormatException {\n        int i = Integer.parseInt(s, radix);\n        if (i < MIN_VALUE || i > MAX_VALUE)\n            throw new NumberFormatException(\n                \"Value out of range. Value:\\\"\" + s + \"\\\" Radix:\" + radix);\n        return (byte)i;\n    }"}
{"Number":"124","API Relative Path":"java.lang.Byte.java-parseByte(String-int)","Corresponding Source":"/**\n     * Parses the string argument as a signed {@code byte} in the\n     * radix specified by the second argument. The characters in the\n     * string must all be digits, of the specified radix (as\n     * determined by whether {@link java.lang.Character#digit(char,\n     * int)} returns a nonnegative value) except that the first\n     * character may be an ASCII minus sign {@code '-'}\n     * ({@code '\\u005Cu002D'}) to indicate a negative value or an\n     * ASCII plus sign {@code '+'} ({@code '\\u005Cu002B'}) to\n     * indicate a positive value.  The resulting {@code byte} value is\n     * returned.\n     *\n     * <p>An exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * <ul>\n     * <li> The first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * <li> The radix is either smaller than {@link\n     * java.lang.Character#MIN_RADIX} or larger than {@link\n     * java.lang.Character#MAX_RADIX}.\n     *\n     * <li> Any character of the string is not a digit of the\n     * specified radix, except that the first character may be a minus\n     * sign {@code '-'} ({@code '\\u005Cu002D'}) or plus sign\n     * {@code '+'} ({@code '\\u005Cu002B'}) provided that the\n     * string is longer than length 1.\n     *\n     * <li> The value represented by the string is not a value of type\n     * {@code byte}.\n     * <\/ul>\n     *\n     * @param s         the {@code String} containing the\n     *                  {@code byte}\n     *                  representation to be parsed\n     * @param radix     the radix to be used while parsing {@code s}\n     * @return          the {@code byte} value represented by the string\n     *                   argument in the specified radix\n     * @throws          NumberFormatException If the string does\n     *                  not contain a parsable {@code byte}.\n     */\n    public static byte parseByte(String s, int radix)\n        throws NumberFormatException {\n        int i = Integer.parseInt(s, radix);\n        if (i < MIN_VALUE || i > MAX_VALUE)\n            throw new NumberFormatException(\n                \"Value out of range. Value:\\\"\" + s + \"\\\" Radix:\" + radix);\n        return (byte)i;\n    }"}
{"Number":"125","API Relative Path":"java.lang.Byte.java-valueOf(String-int)","Corresponding Source":"/**\n     * Returns a {@code Byte} object holding the value\n     * extracted from the specified {@code String} when parsed\n     * with the radix given by the second argument. The first argument\n     * is interpreted as representing a signed {@code byte} in\n     * the radix specified by the second argument, exactly as if the\n     * argument were given to the {@link #parseByte(java.lang.String,\n     * int)} method. The result is a {@code Byte} object that\n     * represents the {@code byte} value specified by the string.\n     *\n     * <p> In other words, this method returns a {@code Byte} object\n     * equal to the value of:\n     *\n     * <blockquote>\n     * {@code new Byte(Byte.parseByte(s, radix))}\n     * <\/blockquote>\n     *\n     * @param s         the string to be parsed\n     * @param radix     the radix to be used in interpreting {@code s}\n     * @return          a {@code Byte} object holding the value\n     *                  represented by the string argument in the\n     *                  specified radix.\n     * @throws          NumberFormatException If the {@code String} does\n     *                  not contain a parsable {@code byte}.\n     */\n    public static Byte valueOf(String s, int radix)\n        throws NumberFormatException {\n        return valueOf(parseByte(s, radix));\n    }"}
{"Number":"126","API Relative Path":"java.lang.Byte.java-valueOf(String-int)","Corresponding Source":"/**\n     * Returns a {@code Byte} object holding the value\n     * extracted from the specified {@code String} when parsed\n     * with the radix given by the second argument. The first argument\n     * is interpreted as representing a signed {@code byte} in\n     * the radix specified by the second argument, exactly as if the\n     * argument were given to the {@link #parseByte(java.lang.String,\n     * int)} method. The result is a {@code Byte} object that\n     * represents the {@code byte} value specified by the string.\n     *\n     * <p> In other words, this method returns a {@code Byte} object\n     * equal to the value of:\n     *\n     * <blockquote>\n     * {@code new Byte(Byte.parseByte(s, radix))}\n     * <\/blockquote>\n     *\n     * @param s         the string to be parsed\n     * @param radix     the radix to be used in interpreting {@code s}\n     * @return          a {@code Byte} object holding the value\n     *                  represented by the string argument in the\n     *                  specified radix.\n     * @throws          NumberFormatException If the {@code String} does\n     *                  not contain a parsable {@code byte}.\n     */\n    public static Byte valueOf(String s, int radix)\n        throws NumberFormatException {\n        return valueOf(parseByte(s, radix));\n    }"}
{"Number":"127","API Relative Path":"java.lang.Byte.java-valueOf(String-int)","Corresponding Source":"/**\n     * Returns a {@code Byte} object holding the value\n     * extracted from the specified {@code String} when parsed\n     * with the radix given by the second argument. The first argument\n     * is interpreted as representing a signed {@code byte} in\n     * the radix specified by the second argument, exactly as if the\n     * argument were given to the {@link #parseByte(java.lang.String,\n     * int)} method. The result is a {@code Byte} object that\n     * represents the {@code byte} value specified by the string.\n     *\n     * <p> In other words, this method returns a {@code Byte} object\n     * equal to the value of:\n     *\n     * <blockquote>\n     * {@code new Byte(Byte.parseByte(s, radix))}\n     * <\/blockquote>\n     *\n     * @param s         the string to be parsed\n     * @param radix     the radix to be used in interpreting {@code s}\n     * @return          a {@code Byte} object holding the value\n     *                  represented by the string argument in the\n     *                  specified radix.\n     * @throws          NumberFormatException If the {@code String} does\n     *                  not contain a parsable {@code byte}.\n     */\n    public static Byte valueOf(String s, int radix)\n        throws NumberFormatException {\n        return valueOf(parseByte(s, radix));\n    }"}
{"Number":"128","API Relative Path":"java.lang.Character.java-codePointAt(char[]-int-int)","Corresponding Source":"/**\n     * Returns the code point at the given index of the\n     * {@code char} array, where only array elements with\n     * {@code index} less than {@code limit} can be used. If\n     * the {@code char} value at the given index in the\n     * {@code char} array is in the high-surrogate range, the\n     * following index is less than the {@code limit}, and the\n     * {@code char} value at the following index is in the\n     * low-surrogate range, then the supplementary code point\n     * corresponding to this surrogate pair is returned. Otherwise,\n     * the {@code char} value at the given index is returned.\n     *\n     * @param a the {@code char} array\n     * @param index the index to the {@code char} values (Unicode\n     * code units) in the {@code char} array to be converted\n     * @param limit the index after the last array element that\n     * can be used in the {@code char} array\n     * @return the Unicode code point at the given index\n     * @exception NullPointerException if {@code a} is null.\n     * @exception IndexOutOfBoundsException if the {@code index}\n     * argument is negative or not less than the {@code limit}\n     * argument, or if the {@code limit} argument is negative or\n     * greater than the length of the {@code char} array.\n     * @since  1.5\n     */\n    public static int codePointAt(char[] a, int index, int limit) {\n        if (index >= limit || limit < 0 || limit > a.length) {\n            throw new IndexOutOfBoundsException();\n        }\n        return codePointAtImpl(a, index, limit);\n    }"}
{"Number":"129","API Relative Path":"java.lang.Character.java-codePointBefore(char[]-int-int)","Corresponding Source":"/**\n     * Returns the code point preceding the given index of the\n     * {@code char} array, where only array elements with\n     * {@code index} greater than or equal to {@code start}\n     * can be used. If the {@code char} value at {@code (index - 1)}\n     * in the {@code char} array is in the\n     * low-surrogate range, {@code (index - 2)} is not less than\n     * {@code start}, and the {@code char} value at\n     * {@code (index - 2)} in the {@code char} array is in\n     * the high-surrogate range, then the supplementary code point\n     * corresponding to this surrogate pair is returned. Otherwise,\n     * the {@code char} value at {@code (index - 1)} is\n     * returned.\n     *\n     * @param a the {@code char} array\n     * @param index the index following the code point that should be returned\n     * @param start the index of the first array element in the\n     * {@code char} array\n     * @return the Unicode code point value before the given index.\n     * @exception NullPointerException if {@code a} is null.\n     * @exception IndexOutOfBoundsException if the {@code index}\n     * argument is not greater than the {@code start} argument or\n     * is greater than the length of the {@code char} array, or\n     * if the {@code start} argument is negative or not less than\n     * the length of the {@code char} array.\n     * @since  1.5\n     */\n    public static int codePointBefore(char[] a, int index, int start) {\n        if (index <= start || start < 0 || start >= a.length) {\n            throw new IndexOutOfBoundsException();\n        }\n        return codePointBeforeImpl(a, index, start);\n    }"}
{"Number":"130","API Relative Path":"java.lang.Character.java-codePointCount(char[]-int-int)","Corresponding Source":"/**\n     * Returns the number of Unicode code points in a subarray of the\n     * {@code char} array argument. The {@code offset}\n     * argument is the index of the first {@code char} of the\n     * subarray and the {@code count} argument specifies the\n     * length of the subarray in {@code char}s. Unpaired\n     * surrogates within the subarray count as one code point each.\n     *\n     * @param a the {@code char} array\n     * @param offset the index of the first {@code char} in the\n     * given {@code char} array\n     * @param count the length of the subarray in {@code char}s\n     * @return the number of Unicode code points in the specified subarray\n     * @exception NullPointerException if {@code a} is null.\n     * @exception IndexOutOfBoundsException if {@code offset} or\n     * {@code count} is negative, or if {@code offset +\n     * count} is larger than the length of the given array.\n     * @since  1.5\n     */\n    public static int codePointCount(char[] a, int offset, int count) {\n        if (count > a.length - offset || offset < 0 || count < 0) {\n            throw new IndexOutOfBoundsException();\n        }\n        return codePointCountImpl(a, offset, count);\n    }"}
{"Number":"131","API Relative Path":"java.lang.Character.java-offsetByCodePoints(CharSequence-int-int)","Corresponding Source":"/**\n     * Returns the index within the given char sequence that is offset\n     * from the given {@code index} by {@code codePointOffset}\n     * code points. Unpaired surrogates within the text range given by\n     * {@code index} and {@code codePointOffset} count as\n     * one code point each.\n     *\n     * @param seq the char sequence\n     * @param index the index to be offset\n     * @param codePointOffset the offset in code points\n     * @return the index within the char sequence\n     * @exception NullPointerException if {@code seq} is null.\n     * @exception IndexOutOfBoundsException if {@code index}\n     *   is negative or larger then the length of the char sequence,\n     *   or if {@code codePointOffset} is positive and the\n     *   subsequence starting with {@code index} has fewer than\n     *   {@code codePointOffset} code points, or if\n     *   {@code codePointOffset} is negative and the subsequence\n     *   before {@code index} has fewer than the absolute value\n     *   of {@code codePointOffset} code points.\n     * @since 1.5\n     */\n    public static int offsetByCodePoints(CharSequence seq, int index,\n                                         int codePointOffset) {\n        int length = seq.length();\n        if (index < 0 || index > length) {\n            throw new IndexOutOfBoundsException();\n        }\n\n        int x = index;\n        if (codePointOffset >= 0) {\n            int i;\n            for (i = 0; x < length && i < codePointOffset; i++) {\n                if (isHighSurrogate(seq.charAt(x++)) && x < length &&\n                    isLowSurrogate(seq.charAt(x))) {\n                    x++;\n                }\n            }\n            if (i < codePointOffset) {\n                throw new IndexOutOfBoundsException();\n            }\n        } else {\n            int i;\n            for (i = codePointOffset; x > 0 && i < 0; i++) {\n                if (isLowSurrogate(seq.charAt(--x)) && x > 0 &&\n                    isHighSurrogate(seq.charAt(x-1))) {\n                    x--;\n                }\n            }\n            if (i < 0) {\n                throw new IndexOutOfBoundsException();\n            }\n        }\n        return x;\n    }"}
{"Number":"132","API Relative Path":"java.lang.Character.java-offsetByCodePoints(CharSequence-int-int)","Corresponding Source":"/**\n     * Returns the index within the given char sequence that is offset\n     * from the given {@code index} by {@code codePointOffset}\n     * code points. Unpaired surrogates within the text range given by\n     * {@code index} and {@code codePointOffset} count as\n     * one code point each.\n     *\n     * @param seq the char sequence\n     * @param index the index to be offset\n     * @param codePointOffset the offset in code points\n     * @return the index within the char sequence\n     * @exception NullPointerException if {@code seq} is null.\n     * @exception IndexOutOfBoundsException if {@code index}\n     *   is negative or larger then the length of the char sequence,\n     *   or if {@code codePointOffset} is positive and the\n     *   subsequence starting with {@code index} has fewer than\n     *   {@code codePointOffset} code points, or if\n     *   {@code codePointOffset} is negative and the subsequence\n     *   before {@code index} has fewer than the absolute value\n     *   of {@code codePointOffset} code points.\n     * @since 1.5\n     */\n    public static int offsetByCodePoints(CharSequence seq, int index,\n                                         int codePointOffset) {\n        int length = seq.length();\n        if (index < 0 || index > length) {\n            throw new IndexOutOfBoundsException();\n        }\n\n        int x = index;\n        if (codePointOffset >= 0) {\n            int i;\n            for (i = 0; x < length && i < codePointOffset; i++) {\n                if (isHighSurrogate(seq.charAt(x++)) && x < length &&\n                    isLowSurrogate(seq.charAt(x))) {\n                    x++;\n                }\n            }\n            if (i < codePointOffset) {\n                throw new IndexOutOfBoundsException();\n            }\n        } else {\n            int i;\n            for (i = codePointOffset; x > 0 && i < 0; i++) {\n                if (isLowSurrogate(seq.charAt(--x)) && x > 0 &&\n                    isHighSurrogate(seq.charAt(x-1))) {\n                    x--;\n                }\n            }\n            if (i < 0) {\n                throw new IndexOutOfBoundsException();\n            }\n        }\n        return x;\n    }"}
{"Number":"133","API Relative Path":"java.lang.Character.java-offsetByCodePoints(char[]-int-int-int-int)","Corresponding Source":"/**\n     * Returns the index within the given {@code char} subarray\n     * that is offset from the given {@code index} by\n     * {@code codePointOffset} code points. The\n     * {@code start} and {@code count} arguments specify a\n     * subarray of the {@code char} array. Unpaired surrogates\n     * within the text range given by {@code index} and\n     * {@code codePointOffset} count as one code point each.\n     *\n     * @param a the {@code char} array\n     * @param start the index of the first {@code char} of the\n     * subarray\n     * @param count the length of the subarray in {@code char}s\n     * @param index the index to be offset\n     * @param codePointOffset the offset in code points\n     * @return the index within the subarray\n     * @exception NullPointerException if {@code a} is null.\n     * @exception IndexOutOfBoundsException\n     *   if {@code start} or {@code count} is negative,\n     *   or if {@code start + count} is larger than the length of\n     *   the given array,\n     *   or if {@code index} is less than {@code start} or\n     *   larger then {@code start + count},\n     *   or if {@code codePointOffset} is positive and the text range\n     *   starting with {@code index} and ending with {@code start + count - 1}\n     *   has fewer than {@code codePointOffset} code\n     *   points,\n     *   or if {@code codePointOffset} is negative and the text range\n     *   starting with {@code start} and ending with {@code index - 1}\n     *   has fewer than the absolute value of\n     *   {@code codePointOffset} code points.\n     * @since 1.5\n     */\n    public static int offsetByCodePoints(char[] a, int start, int count,\n                                         int index, int codePointOffset) {\n        if (count > a.length-start || start < 0 || count < 0\n            || index < start || index > start+count) {\n            throw new IndexOutOfBoundsException();\n        }\n        return offsetByCodePointsImpl(a, start, count, index, codePointOffset);\n    }"}
{"Number":"134","API Relative Path":"java.lang.Character.java-offsetByCodePoints(char[]-int-int-int-int)","Corresponding Source":"/**\n     * Returns the index within the given {@code char} subarray\n     * that is offset from the given {@code index} by\n     * {@code codePointOffset} code points. The\n     * {@code start} and {@code count} arguments specify a\n     * subarray of the {@code char} array. Unpaired surrogates\n     * within the text range given by {@code index} and\n     * {@code codePointOffset} count as one code point each.\n     *\n     * @param a the {@code char} array\n     * @param start the index of the first {@code char} of the\n     * subarray\n     * @param count the length of the subarray in {@code char}s\n     * @param index the index to be offset\n     * @param codePointOffset the offset in code points\n     * @return the index within the subarray\n     * @exception NullPointerException if {@code a} is null.\n     * @exception IndexOutOfBoundsException\n     *   if {@code start} or {@code count} is negative,\n     *   or if {@code start + count} is larger than the length of\n     *   the given array,\n     *   or if {@code index} is less than {@code start} or\n     *   larger then {@code start + count},\n     *   or if {@code codePointOffset} is positive and the text range\n     *   starting with {@code index} and ending with {@code start + count - 1}\n     *   has fewer than {@code codePointOffset} code\n     *   points,\n     *   or if {@code codePointOffset} is negative and the text range\n     *   starting with {@code start} and ending with {@code index - 1}\n     *   has fewer than the absolute value of\n     *   {@code codePointOffset} code points.\n     * @since 1.5\n     */\n    public static int offsetByCodePoints(char[] a, int start, int count,\n                                         int index, int codePointOffset) {\n        if (count > a.length-start || start < 0 || count < 0\n            || index < start || index > start+count) {\n            throw new IndexOutOfBoundsException();\n        }\n        return offsetByCodePointsImpl(a, start, count, index, codePointOffset);\n    }"}
{"Number":"135","API Relative Path":"java.lang.Class.java-getAnnotation(Class)","Corresponding Source":"/**\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.5\n     */\n    @SuppressWarnings(\"unchecked\")\n    public <A extends Annotation> A getAnnotation(Class<A> annotationClass) {\n        Objects.requireNonNull(annotationClass);\n\n        return (A) annotationData().annotations.get(annotationClass);\n    }"}
{"Number":"136","API Relative Path":"java.lang.Class.java-getAnnotationsByType(Class)","Corresponding Source":"/**\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.8\n     */\n    @Override\n    public <A extends Annotation> A[] getAnnotationsByType(Class<A> annotationClass) {\n        Objects.requireNonNull(annotationClass);\n\n        AnnotationData annotationData = annotationData();\n        return AnnotationSupport.getAssociatedAnnotations(annotationData.declaredAnnotations,\n                                                          this,\n                                                          annotationClass);\n    }"}
{"Number":"137","API Relative Path":"java.lang.Class.java-getDeclaredAnnotation(Class)","Corresponding Source":"/**\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.8\n     */\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public <A extends Annotation> A getDeclaredAnnotation(Class<A> annotationClass) {\n        Objects.requireNonNull(annotationClass);\n\n        return (A) annotationData().declaredAnnotations.get(annotationClass);\n    }"}
{"Number":"138","API Relative Path":"java.lang.Class.java-getDeclaredAnnotationsByType(Class)","Corresponding Source":"/**\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.8\n     */\n    @Override\n    public <A extends Annotation> A[] getDeclaredAnnotationsByType(Class<A> annotationClass) {\n        Objects.requireNonNull(annotationClass);\n\n        return AnnotationSupport.getDirectlyAndIndirectlyPresent(annotationData().declaredAnnotations,\n                                                                 annotationClass);\n    }"}
{"Number":"139","API Relative Path":"java.lang.ClassLoader.java-defineClass(String-byte[]-int-int-ProtectionDomain)","Corresponding Source":"/**\n     * Converts an array of bytes into an instance of class <tt>Class<\/tt>,\n     * with an optional <tt>ProtectionDomain<\/tt>.  If the domain is\n     * <tt>null<\/tt>, then a default domain will be assigned to the class as\n     * specified in the documentation for {@link #defineClass(String, byte[],\n     * int, int)}.  Before the class can be used it must be resolved.\n     *\n     * <p> The first class defined in a package determines the exact set of\n     * certificates that all subsequent classes defined in that package must\n     * contain.  The set of certificates for a class is obtained from the\n     * {@link java.security.CodeSource <tt>CodeSource<\/tt>} within the\n     * <tt>ProtectionDomain<\/tt> of the class.  Any classes added to that\n     * package must contain the same set of certificates or a\n     * <tt>SecurityException<\/tt> will be thrown.  Note that if\n     * <tt>name<\/tt> is <tt>null<\/tt>, this check is not performed.\n     * You should always pass in the <a href=\"#name\">binary name<\/a> of the\n     * class you are defining as well as the bytes.  This ensures that the\n     * class you are defining is indeed the class you think it is.\n     *\n     * <p> The specified <tt>name<\/tt> cannot begin with \"<tt>java.<\/tt>\", since\n     * all classes in the \"<tt>java.*<\/tt> packages can only be defined by the\n     * bootstrap class loader.  If <tt>name<\/tt> is not <tt>null<\/tt>, it\n     * must be equal to the <a href=\"#name\">binary name<\/a> of the class\n     * specified by the byte array \"<tt>b<\/tt>\", otherwise a {@link\n     * NoClassDefFoundError <tt>NoClassDefFoundError<\/tt>} will be thrown. <\/p>\n     *\n     * @param  name\n     *         The expected <a href=\"#name\">binary name<\/a> of the class, or\n     *         <tt>null<\/tt> if not known\n     *\n     * @param  b\n     *         The bytes that make up the class data. The bytes in positions\n     *         <tt>off<\/tt> through <tt>off+len-1<\/tt> should have the format\n     *         of a valid class file as defined by\n     *         <cite>The Java&trade; Virtual Machine Specification<\/cite>.\n     *\n     * @param  off\n     *         The start offset in <tt>b<\/tt> of the class data\n     *\n     * @param  len\n     *         The length of the class data\n     *\n     * @param  protectionDomain\n     *         The ProtectionDomain of the class\n     *\n     * @return  The <tt>Class<\/tt> object created from the data,\n     *          and optional <tt>ProtectionDomain<\/tt>.\n     *\n     * @throws  ClassFormatError\n     *          If the data did not contain a valid class\n     *\n     * @throws  NoClassDefFoundError\n     *          If <tt>name<\/tt> is not equal to the <a href=\"#name\">binary\n     *          name<\/a> of the class specified by <tt>b<\/tt>\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If either <tt>off<\/tt> or <tt>len<\/tt> is negative, or if\n     *          <tt>off+len<\/tt> is greater than <tt>b.length<\/tt>.\n     *\n     * @throws  SecurityException\n     *          If an attempt is made to add this class to a package that\n     *          contains classes that were signed by a different set of\n     *          certificates than this class, or if <tt>name<\/tt> begins with\n     *          \"<tt>java.<\/tt>\".\n     */\n    protected final Class<?> defineClass(String name, byte[] b, int off, int len,\n                                         ProtectionDomain protectionDomain)\n        throws ClassFormatError\n    {\n        protectionDomain = preDefineClass(name, protectionDomain);\n        String source = defineClassSourceLocation(protectionDomain);\n        Class<?> c = defineClass1(name, b, off, len, protectionDomain, source);\n        postDefineClass(c, protectionDomain);\n        return c;\n    }"}
{"Number":"140","API Relative Path":"java.lang.instrument.ClassDefinition.java-ClassDefinition(Class-byte[])","Corresponding Source":"/**\n     *  Creates a new <code>ClassDefinition<\/code> binding using the supplied\n     *  class and class file bytes. Does not copy the supplied buffer, just captures a reference to it.\n     *\n     * @param theClass the <code>Class<\/code> that needs redefining\n     * @param theClassFile the new class file bytes\n     *\n     * @throws java.lang.NullPointerException if the supplied class or array is <code>null<\/code>.\n     */\n    public\n    ClassDefinition(    Class<?> theClass,\n                        byte[]  theClassFile) {\n        if (theClass == null || theClassFile == null) {\n            throw new NullPointerException();\n        }\n        mClass      = theClass;\n        mClassFile  = theClassFile;\n    }"}
{"Number":"141","API Relative Path":"java.lang.Integer.java-Integer(String)","Corresponding Source":"/**\n     * Determines the integer value of the system property with the\n     * specified name.\n     *\n     * <p>The first argument is treated as the name of a system\n     * property.  System properties are accessible through the {@link\n     * java.lang.System#getProperty(java.lang.String)} method. The\n     * string value of this property is then interpreted as an integer\n     * value using the grammar supported by {@link Integer#decode decode} and\n     * an {@code Integer} object representing this value is returned.\n     *\n     * <p>If there is no property with the specified name, if the\n     * specified name is empty or {@code null}, or if the property\n     * does not have the correct numeric format, then {@code null} is\n     * returned.\n     *\n     * <p>In other words, this method returns an {@code Integer}\n     * object equal to the value of:\n     *\n     * <blockquote>\n     *  {@code getInteger(nm, null)}\n     * <\/blockquote>\n     *\n     * @param   nm   property name.\n     * @return  the {@code Integer} value of the property.\n     * @throws  SecurityException for the same reasons as\n     *          {@link System#getProperty(String) System.getProperty}\n     * @see     java.lang.System#getProperty(java.lang.String)\n     * @see     java.lang.System#getProperty(java.lang.String, java.lang.String)\n     */\n    public static Integer getInteger(String nm) {\n        return getInteger(nm, null);\n    }"}
{"Number":"142","API Relative Path":"java.lang.Integer.java-parseInt(String-int)","Corresponding Source":"/**\n     * Parses the string argument as a signed integer in the radix\n     * specified by the second argument. The characters in the string\n     * must all be digits of the specified radix (as determined by\n     * whether {@link java.lang.Character#digit(char, int)} returns a\n     * nonnegative value), except that the first character may be an\n     * ASCII minus sign {@code '-'} ({@code '\\u005Cu002D'}) to\n     * indicate a negative value or an ASCII plus sign {@code '+'}\n     * ({@code '\\u005Cu002B'}) to indicate a positive value. The\n     * resulting integer value is returned.\n     *\n     * <p>An exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * <ul>\n     * <li>The first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * <li>The radix is either smaller than\n     * {@link java.lang.Character#MIN_RADIX} or\n     * larger than {@link java.lang.Character#MAX_RADIX}.\n     *\n     * <li>Any character of the string is not a digit of the specified\n     * radix, except that the first character may be a minus sign\n     * {@code '-'} ({@code '\\u005Cu002D'}) or plus sign\n     * {@code '+'} ({@code '\\u005Cu002B'}) provided that the\n     * string is longer than length 1.\n     *\n     * <li>The value represented by the string is not a value of type\n     * {@code int}.\n     * <\/ul>\n     *\n     * <p>Examples:\n     * <blockquote><pre>\n     * parseInt(\"0\", 10) returns 0\n     * parseInt(\"473\", 10) returns 473\n     * parseInt(\"+42\", 10) returns 42\n     * parseInt(\"-0\", 10) returns 0\n     * parseInt(\"-FF\", 16) returns -255\n     * parseInt(\"1100110\", 2) returns 102\n     * parseInt(\"2147483647\", 10) returns 2147483647\n     * parseInt(\"-2147483648\", 10) returns -2147483648\n     * parseInt(\"2147483648\", 10) throws a NumberFormatException\n     * parseInt(\"99\", 8) throws a NumberFormatException\n     * parseInt(\"Kona\", 10) throws a NumberFormatException\n     * parseInt(\"Kona\", 27) returns 411787\n     * <\/pre><\/blockquote>\n     *\n     * @param      s   the {@code String} containing the integer\n     *                  representation to be parsed\n     * @param      radix   the radix to be used while parsing {@code s}.\n     * @return     the integer represented by the string argument in the\n     *             specified radix.\n     * @exception  NumberFormatException if the {@code String}\n     *             does not contain a parsable {@code int}.\n     */\n    public static int parseInt(String s, int radix)\n                throws NumberFormatException\n    {\n        /*\n         * WARNING: This method may be invoked early during VM initialization\n         * before IntegerCache is initialized. Care must be taken to not use\n         * the valueOf method.\n         */\n\n        if (s == null) {\n            throw new NumberFormatException(\"null\");\n        }\n\n        if (radix < Character.MIN_RADIX) {\n            throw new NumberFormatException(\"radix \" + radix +\n                                            \" less than Character.MIN_RADIX\");\n        }\n\n        if (radix > Character.MAX_RADIX) {\n            throw new NumberFormatException(\"radix \" + radix +\n                                            \" greater than Character.MAX_RADIX\");\n        }\n\n        int result = 0;\n        boolean negative = false;\n        int i = 0, len = s.length();\n        int limit = -Integer.MAX_VALUE;\n        int multmin;\n        int digit;\n\n        if (len > 0) {\n            char firstChar = s.charAt(0);\n            if (firstChar < '0') { // Possible leading \"+\" or \"-\"\n                if (firstChar == '-') {\n                    negative = true;\n                    limit = Integer.MIN_VALUE;\n                } else if (firstChar != '+')\n                    throw NumberFormatException.forInputString(s);\n\n                if (len == 1) // Cannot have lone \"+\" or \"-\"\n                    throw NumberFormatException.forInputString(s);\n                i++;\n            }\n            multmin = limit / radix;\n            while (i < len) {\n                // Accumulating negatively avoids surprises near MAX_VALUE\n                digit = Character.digit(s.charAt(i++),radix);\n                if (digit < 0) {\n                    throw NumberFormatException.forInputString(s);\n                }\n                if (result < multmin) {\n                    throw NumberFormatException.forInputString(s);\n                }\n                result *= radix;\n                if (result < limit + digit) {\n                    throw NumberFormatException.forInputString(s);\n                }\n                result -= digit;\n            }\n        } else {\n            throw NumberFormatException.forInputString(s);\n        }\n        return negative ? result : -result;\n    }"}
{"Number":"143","API Relative Path":"java.lang.Integer.java-parseInt(String-int)","Corresponding Source":"/**\n     * Parses the string argument as a signed integer in the radix\n     * specified by the second argument. The characters in the string\n     * must all be digits of the specified radix (as determined by\n     * whether {@link java.lang.Character#digit(char, int)} returns a\n     * nonnegative value), except that the first character may be an\n     * ASCII minus sign {@code '-'} ({@code '\\u005Cu002D'}) to\n     * indicate a negative value or an ASCII plus sign {@code '+'}\n     * ({@code '\\u005Cu002B'}) to indicate a positive value. The\n     * resulting integer value is returned.\n     *\n     * <p>An exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * <ul>\n     * <li>The first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * <li>The radix is either smaller than\n     * {@link java.lang.Character#MIN_RADIX} or\n     * larger than {@link java.lang.Character#MAX_RADIX}.\n     *\n     * <li>Any character of the string is not a digit of the specified\n     * radix, except that the first character may be a minus sign\n     * {@code '-'} ({@code '\\u005Cu002D'}) or plus sign\n     * {@code '+'} ({@code '\\u005Cu002B'}) provided that the\n     * string is longer than length 1.\n     *\n     * <li>The value represented by the string is not a value of type\n     * {@code int}.\n     * <\/ul>\n     *\n     * <p>Examples:\n     * <blockquote><pre>\n     * parseInt(\"0\", 10) returns 0\n     * parseInt(\"473\", 10) returns 473\n     * parseInt(\"+42\", 10) returns 42\n     * parseInt(\"-0\", 10) returns 0\n     * parseInt(\"-FF\", 16) returns -255\n     * parseInt(\"1100110\", 2) returns 102\n     * parseInt(\"2147483647\", 10) returns 2147483647\n     * parseInt(\"-2147483648\", 10) returns -2147483648\n     * parseInt(\"2147483648\", 10) throws a NumberFormatException\n     * parseInt(\"99\", 8) throws a NumberFormatException\n     * parseInt(\"Kona\", 10) throws a NumberFormatException\n     * parseInt(\"Kona\", 27) returns 411787\n     * <\/pre><\/blockquote>\n     *\n     * @param      s   the {@code String} containing the integer\n     *                  representation to be parsed\n     * @param      radix   the radix to be used while parsing {@code s}.\n     * @return     the integer represented by the string argument in the\n     *             specified radix.\n     * @exception  NumberFormatException if the {@code String}\n     *             does not contain a parsable {@code int}.\n     */\n    public static int parseInt(String s, int radix)\n                throws NumberFormatException\n    {\n        /*\n         * WARNING: This method may be invoked early during VM initialization\n         * before IntegerCache is initialized. Care must be taken to not use\n         * the valueOf method.\n         */\n\n        if (s == null) {\n            throw new NumberFormatException(\"null\");\n        }\n\n        if (radix < Character.MIN_RADIX) {\n            throw new NumberFormatException(\"radix \" + radix +\n                                            \" less than Character.MIN_RADIX\");\n        }\n\n        if (radix > Character.MAX_RADIX) {\n            throw new NumberFormatException(\"radix \" + radix +\n                                            \" greater than Character.MAX_RADIX\");\n        }\n\n        int result = 0;\n        boolean negative = false;\n        int i = 0, len = s.length();\n        int limit = -Integer.MAX_VALUE;\n        int multmin;\n        int digit;\n\n        if (len > 0) {\n            char firstChar = s.charAt(0);\n            if (firstChar < '0') { // Possible leading \"+\" or \"-\"\n                if (firstChar == '-') {\n                    negative = true;\n                    limit = Integer.MIN_VALUE;\n                } else if (firstChar != '+')\n                    throw NumberFormatException.forInputString(s);\n\n                if (len == 1) // Cannot have lone \"+\" or \"-\"\n                    throw NumberFormatException.forInputString(s);\n                i++;\n            }\n            multmin = limit / radix;\n            while (i < len) {\n                // Accumulating negatively avoids surprises near MAX_VALUE\n                digit = Character.digit(s.charAt(i++),radix);\n                if (digit < 0) {\n                    throw NumberFormatException.forInputString(s);\n                }\n                if (result < multmin) {\n                    throw NumberFormatException.forInputString(s);\n                }\n                result *= radix;\n                if (result < limit + digit) {\n                    throw NumberFormatException.forInputString(s);\n                }\n                result -= digit;\n            }\n        } else {\n            throw NumberFormatException.forInputString(s);\n        }\n        return negative ? result : -result;\n    }"}
{"Number":"144","API Relative Path":"java.lang.Integer.java-parseInt(String-int)","Corresponding Source":"/**\n     * Parses the string argument as a signed integer in the radix\n     * specified by the second argument. The characters in the string\n     * must all be digits of the specified radix (as determined by\n     * whether {@link java.lang.Character#digit(char, int)} returns a\n     * nonnegative value), except that the first character may be an\n     * ASCII minus sign {@code '-'} ({@code '\\u005Cu002D'}) to\n     * indicate a negative value or an ASCII plus sign {@code '+'}\n     * ({@code '\\u005Cu002B'}) to indicate a positive value. The\n     * resulting integer value is returned.\n     *\n     * <p>An exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * <ul>\n     * <li>The first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * <li>The radix is either smaller than\n     * {@link java.lang.Character#MIN_RADIX} or\n     * larger than {@link java.lang.Character#MAX_RADIX}.\n     *\n     * <li>Any character of the string is not a digit of the specified\n     * radix, except that the first character may be a minus sign\n     * {@code '-'} ({@code '\\u005Cu002D'}) or plus sign\n     * {@code '+'} ({@code '\\u005Cu002B'}) provided that the\n     * string is longer than length 1.\n     *\n     * <li>The value represented by the string is not a value of type\n     * {@code int}.\n     * <\/ul>\n     *\n     * <p>Examples:\n     * <blockquote><pre>\n     * parseInt(\"0\", 10) returns 0\n     * parseInt(\"473\", 10) returns 473\n     * parseInt(\"+42\", 10) returns 42\n     * parseInt(\"-0\", 10) returns 0\n     * parseInt(\"-FF\", 16) returns -255\n     * parseInt(\"1100110\", 2) returns 102\n     * parseInt(\"2147483647\", 10) returns 2147483647\n     * parseInt(\"-2147483648\", 10) returns -2147483648\n     * parseInt(\"2147483648\", 10) throws a NumberFormatException\n     * parseInt(\"99\", 8) throws a NumberFormatException\n     * parseInt(\"Kona\", 10) throws a NumberFormatException\n     * parseInt(\"Kona\", 27) returns 411787\n     * <\/pre><\/blockquote>\n     *\n     * @param      s   the {@code String} containing the integer\n     *                  representation to be parsed\n     * @param      radix   the radix to be used while parsing {@code s}.\n     * @return     the integer represented by the string argument in the\n     *             specified radix.\n     * @exception  NumberFormatException if the {@code String}\n     *             does not contain a parsable {@code int}.\n     */\n    public static int parseInt(String s, int radix)\n                throws NumberFormatException\n    {\n        /*\n         * WARNING: This method may be invoked early during VM initialization\n         * before IntegerCache is initialized. Care must be taken to not use\n         * the valueOf method.\n         */\n\n        if (s == null) {\n            throw new NumberFormatException(\"null\");\n        }\n\n        if (radix < Character.MIN_RADIX) {\n            throw new NumberFormatException(\"radix \" + radix +\n                                            \" less than Character.MIN_RADIX\");\n        }\n\n        if (radix > Character.MAX_RADIX) {\n            throw new NumberFormatException(\"radix \" + radix +\n                                            \" greater than Character.MAX_RADIX\");\n        }\n\n        int result = 0;\n        boolean negative = false;\n        int i = 0, len = s.length();\n        int limit = -Integer.MAX_VALUE;\n        int multmin;\n        int digit;\n\n        if (len > 0) {\n            char firstChar = s.charAt(0);\n            if (firstChar < '0') { // Possible leading \"+\" or \"-\"\n                if (firstChar == '-') {\n                    negative = true;\n                    limit = Integer.MIN_VALUE;\n                } else if (firstChar != '+')\n                    throw NumberFormatException.forInputString(s);\n\n                if (len == 1) // Cannot have lone \"+\" or \"-\"\n                    throw NumberFormatException.forInputString(s);\n                i++;\n            }\n            multmin = limit / radix;\n            while (i < len) {\n                // Accumulating negatively avoids surprises near MAX_VALUE\n                digit = Character.digit(s.charAt(i++),radix);\n                if (digit < 0) {\n                    throw NumberFormatException.forInputString(s);\n                }\n                if (result < multmin) {\n                    throw NumberFormatException.forInputString(s);\n                }\n                result *= radix;\n                if (result < limit + digit) {\n                    throw NumberFormatException.forInputString(s);\n                }\n                result -= digit;\n            }\n        } else {\n            throw NumberFormatException.forInputString(s);\n        }\n        return negative ? result : -result;\n    }"}
{"Number":"145","API Relative Path":"java.lang.Integer.java-parseUnsignedInt(String-int)","Corresponding Source":"/**\n     * Parses the string argument as an unsigned integer in the radix\n     * specified by the second argument.  An unsigned integer maps the\n     * values usually associated with negative numbers to positive\n     * numbers larger than {@code MAX_VALUE}.\n     *\n     * The characters in the string must all be digits of the\n     * specified radix (as determined by whether {@link\n     * java.lang.Character#digit(char, int)} returns a nonnegative\n     * value), except that the first character may be an ASCII plus\n     * sign {@code '+'} ({@code '\\u005Cu002B'}). The resulting\n     * integer value is returned.\n     *\n     * <p>An exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * <ul>\n     * <li>The first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * <li>The radix is either smaller than\n     * {@link java.lang.Character#MIN_RADIX} or\n     * larger than {@link java.lang.Character#MAX_RADIX}.\n     *\n     * <li>Any character of the string is not a digit of the specified\n     * radix, except that the first character may be a plus sign\n     * {@code '+'} ({@code '\\u005Cu002B'}) provided that the\n     * string is longer than length 1.\n     *\n     * <li>The value represented by the string is larger than the\n     * largest unsigned {@code int}, 2<sup>32<\/sup>-1.\n     *\n     * <\/ul>\n     *\n     *\n     * @param      s   the {@code String} containing the unsigned integer\n     *                  representation to be parsed\n     * @param      radix   the radix to be used while parsing {@code s}.\n     * @return     the integer represented by the string argument in the\n     *             specified radix.\n     * @throws     NumberFormatException if the {@code String}\n     *             does not contain a parsable {@code int}.\n     * @since 1.8\n     */\n    public static int parseUnsignedInt(String s, int radix)\n                throws NumberFormatException {\n        if (s == null)  {\n            throw new NumberFormatException(\"null\");\n        }\n\n        int len = s.length();\n        if (len > 0) {\n            char firstChar = s.charAt(0);\n            if (firstChar == '-') {\n                throw new\n                    NumberFormatException(String.format(\"Illegal leading minus sign \" +\n                                                       \"on unsigned string %s.\", s));\n            } else {\n                if (len <= 5 || // Integer.MAX_VALUE in Character.MAX_RADIX is 6 digits\n                    (radix == 10 && len <= 9) ) { // Integer.MAX_VALUE in base 10 is 10 digits\n                    return parseInt(s, radix);\n                } else {\n                    long ell = Long.parseLong(s, radix);\n                    if ((ell & 0xffff_ffff_0000_0000L) == 0) {\n                        return (int) ell;\n                    } else {\n                        throw new\n                            NumberFormatException(String.format(\"String value %s exceeds \" +\n                                                                \"range of unsigned int.\", s));\n                    }\n                }\n            }\n        } else {\n            throw NumberFormatException.forInputString(s);\n        }\n    }"}
{"Number":"146","API Relative Path":"java.lang.Integer.java-parseUnsignedInt(String-int)","Corresponding Source":"/**\n     * Parses the string argument as an unsigned integer in the radix\n     * specified by the second argument.  An unsigned integer maps the\n     * values usually associated with negative numbers to positive\n     * numbers larger than {@code MAX_VALUE}.\n     *\n     * The characters in the string must all be digits of the\n     * specified radix (as determined by whether {@link\n     * java.lang.Character#digit(char, int)} returns a nonnegative\n     * value), except that the first character may be an ASCII plus\n     * sign {@code '+'} ({@code '\\u005Cu002B'}). The resulting\n     * integer value is returned.\n     *\n     * <p>An exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * <ul>\n     * <li>The first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * <li>The radix is either smaller than\n     * {@link java.lang.Character#MIN_RADIX} or\n     * larger than {@link java.lang.Character#MAX_RADIX}.\n     *\n     * <li>Any character of the string is not a digit of the specified\n     * radix, except that the first character may be a plus sign\n     * {@code '+'} ({@code '\\u005Cu002B'}) provided that the\n     * string is longer than length 1.\n     *\n     * <li>The value represented by the string is larger than the\n     * largest unsigned {@code int}, 2<sup>32<\/sup>-1.\n     *\n     * <\/ul>\n     *\n     *\n     * @param      s   the {@code String} containing the unsigned integer\n     *                  representation to be parsed\n     * @param      radix   the radix to be used while parsing {@code s}.\n     * @return     the integer represented by the string argument in the\n     *             specified radix.\n     * @throws     NumberFormatException if the {@code String}\n     *             does not contain a parsable {@code int}.\n     * @since 1.8\n     */\n    public static int parseUnsignedInt(String s, int radix)\n                throws NumberFormatException {\n        if (s == null)  {\n            throw new NumberFormatException(\"null\");\n        }\n\n        int len = s.length();\n        if (len > 0) {\n            char firstChar = s.charAt(0);\n            if (firstChar == '-') {\n                throw new\n                    NumberFormatException(String.format(\"Illegal leading minus sign \" +\n                                                       \"on unsigned string %s.\", s));\n            } else {\n                if (len <= 5 || // Integer.MAX_VALUE in Character.MAX_RADIX is 6 digits\n                    (radix == 10 && len <= 9) ) { // Integer.MAX_VALUE in base 10 is 10 digits\n                    return parseInt(s, radix);\n                } else {\n                    long ell = Long.parseLong(s, radix);\n                    if ((ell & 0xffff_ffff_0000_0000L) == 0) {\n                        return (int) ell;\n                    } else {\n                        throw new\n                            NumberFormatException(String.format(\"String value %s exceeds \" +\n                                                                \"range of unsigned int.\", s));\n                    }\n                }\n            }\n        } else {\n            throw NumberFormatException.forInputString(s);\n        }\n    }"}
{"Number":"147","API Relative Path":"java.lang.Integer.java-parseUnsignedInt(String-int)","Corresponding Source":"/**\n     * Parses the string argument as an unsigned integer in the radix\n     * specified by the second argument.  An unsigned integer maps the\n     * values usually associated with negative numbers to positive\n     * numbers larger than {@code MAX_VALUE}.\n     *\n     * The characters in the string must all be digits of the\n     * specified radix (as determined by whether {@link\n     * java.lang.Character#digit(char, int)} returns a nonnegative\n     * value), except that the first character may be an ASCII plus\n     * sign {@code '+'} ({@code '\\u005Cu002B'}). The resulting\n     * integer value is returned.\n     *\n     * <p>An exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * <ul>\n     * <li>The first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * <li>The radix is either smaller than\n     * {@link java.lang.Character#MIN_RADIX} or\n     * larger than {@link java.lang.Character#MAX_RADIX}.\n     *\n     * <li>Any character of the string is not a digit of the specified\n     * radix, except that the first character may be a plus sign\n     * {@code '+'} ({@code '\\u005Cu002B'}) provided that the\n     * string is longer than length 1.\n     *\n     * <li>The value represented by the string is larger than the\n     * largest unsigned {@code int}, 2<sup>32<\/sup>-1.\n     *\n     * <\/ul>\n     *\n     *\n     * @param      s   the {@code String} containing the unsigned integer\n     *                  representation to be parsed\n     * @param      radix   the radix to be used while parsing {@code s}.\n     * @return     the integer represented by the string argument in the\n     *             specified radix.\n     * @throws     NumberFormatException if the {@code String}\n     *             does not contain a parsable {@code int}.\n     * @since 1.8\n     */\n    public static int parseUnsignedInt(String s, int radix)\n                throws NumberFormatException {\n        if (s == null)  {\n            throw new NumberFormatException(\"null\");\n        }\n\n        int len = s.length();\n        if (len > 0) {\n            char firstChar = s.charAt(0);\n            if (firstChar == '-') {\n                throw new\n                    NumberFormatException(String.format(\"Illegal leading minus sign \" +\n                                                       \"on unsigned string %s.\", s));\n            } else {\n                if (len <= 5 || // Integer.MAX_VALUE in Character.MAX_RADIX is 6 digits\n                    (radix == 10 && len <= 9) ) { // Integer.MAX_VALUE in base 10 is 10 digits\n                    return parseInt(s, radix);\n                } else {\n                    long ell = Long.parseLong(s, radix);\n                    if ((ell & 0xffff_ffff_0000_0000L) == 0) {\n                        return (int) ell;\n                    } else {\n                        throw new\n                            NumberFormatException(String.format(\"String value %s exceeds \" +\n                                                                \"range of unsigned int.\", s));\n                    }\n                }\n            }\n        } else {\n            throw NumberFormatException.forInputString(s);\n        }\n    }"}
{"Number":"148","API Relative Path":"java.lang.Integer.java-parseUnsignedInt(String-int)","Corresponding Source":"/**\n     * Parses the string argument as an unsigned integer in the radix\n     * specified by the second argument.  An unsigned integer maps the\n     * values usually associated with negative numbers to positive\n     * numbers larger than {@code MAX_VALUE}.\n     *\n     * The characters in the string must all be digits of the\n     * specified radix (as determined by whether {@link\n     * java.lang.Character#digit(char, int)} returns a nonnegative\n     * value), except that the first character may be an ASCII plus\n     * sign {@code '+'} ({@code '\\u005Cu002B'}). The resulting\n     * integer value is returned.\n     *\n     * <p>An exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * <ul>\n     * <li>The first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * <li>The radix is either smaller than\n     * {@link java.lang.Character#MIN_RADIX} or\n     * larger than {@link java.lang.Character#MAX_RADIX}.\n     *\n     * <li>Any character of the string is not a digit of the specified\n     * radix, except that the first character may be a plus sign\n     * {@code '+'} ({@code '\\u005Cu002B'}) provided that the\n     * string is longer than length 1.\n     *\n     * <li>The value represented by the string is larger than the\n     * largest unsigned {@code int}, 2<sup>32<\/sup>-1.\n     *\n     * <\/ul>\n     *\n     *\n     * @param      s   the {@code String} containing the unsigned integer\n     *                  representation to be parsed\n     * @param      radix   the radix to be used while parsing {@code s}.\n     * @return     the integer represented by the string argument in the\n     *             specified radix.\n     * @throws     NumberFormatException if the {@code String}\n     *             does not contain a parsable {@code int}.\n     * @since 1.8\n     */\n    public static int parseUnsignedInt(String s, int radix)\n                throws NumberFormatException {\n        if (s == null)  {\n            throw new NumberFormatException(\"null\");\n        }\n\n        int len = s.length();\n        if (len > 0) {\n            char firstChar = s.charAt(0);\n            if (firstChar == '-') {\n                throw new\n                    NumberFormatException(String.format(\"Illegal leading minus sign \" +\n                                                       \"on unsigned string %s.\", s));\n            } else {\n                if (len <= 5 || // Integer.MAX_VALUE in Character.MAX_RADIX is 6 digits\n                    (radix == 10 && len <= 9) ) { // Integer.MAX_VALUE in base 10 is 10 digits\n                    return parseInt(s, radix);\n                } else {\n                    long ell = Long.parseLong(s, radix);\n                    if ((ell & 0xffff_ffff_0000_0000L) == 0) {\n                        return (int) ell;\n                    } else {\n                        throw new\n                            NumberFormatException(String.format(\"String value %s exceeds \" +\n                                                                \"range of unsigned int.\", s));\n                    }\n                }\n            }\n        } else {\n            throw NumberFormatException.forInputString(s);\n        }\n    }"}
{"Number":"149","API Relative Path":"java.lang.Integer.java-parseUnsignedInt(String-int)","Corresponding Source":"/**\n     * Parses the string argument as an unsigned integer in the radix\n     * specified by the second argument.  An unsigned integer maps the\n     * values usually associated with negative numbers to positive\n     * numbers larger than {@code MAX_VALUE}.\n     *\n     * The characters in the string must all be digits of the\n     * specified radix (as determined by whether {@link\n     * java.lang.Character#digit(char, int)} returns a nonnegative\n     * value), except that the first character may be an ASCII plus\n     * sign {@code '+'} ({@code '\\u005Cu002B'}). The resulting\n     * integer value is returned.\n     *\n     * <p>An exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * <ul>\n     * <li>The first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * <li>The radix is either smaller than\n     * {@link java.lang.Character#MIN_RADIX} or\n     * larger than {@link java.lang.Character#MAX_RADIX}.\n     *\n     * <li>Any character of the string is not a digit of the specified\n     * radix, except that the first character may be a plus sign\n     * {@code '+'} ({@code '\\u005Cu002B'}) provided that the\n     * string is longer than length 1.\n     *\n     * <li>The value represented by the string is larger than the\n     * largest unsigned {@code int}, 2<sup>32<\/sup>-1.\n     *\n     * <\/ul>\n     *\n     *\n     * @param      s   the {@code String} containing the unsigned integer\n     *                  representation to be parsed\n     * @param      radix   the radix to be used while parsing {@code s}.\n     * @return     the integer represented by the string argument in the\n     *             specified radix.\n     * @throws     NumberFormatException if the {@code String}\n     *             does not contain a parsable {@code int}.\n     * @since 1.8\n     */\n    public static int parseUnsignedInt(String s, int radix)\n                throws NumberFormatException {\n        if (s == null)  {\n            throw new NumberFormatException(\"null\");\n        }\n\n        int len = s.length();\n        if (len > 0) {\n            char firstChar = s.charAt(0);\n            if (firstChar == '-') {\n                throw new\n                    NumberFormatException(String.format(\"Illegal leading minus sign \" +\n                                                       \"on unsigned string %s.\", s));\n            } else {\n                if (len <= 5 || // Integer.MAX_VALUE in Character.MAX_RADIX is 6 digits\n                    (radix == 10 && len <= 9) ) { // Integer.MAX_VALUE in base 10 is 10 digits\n                    return parseInt(s, radix);\n                } else {\n                    long ell = Long.parseLong(s, radix);\n                    if ((ell & 0xffff_ffff_0000_0000L) == 0) {\n                        return (int) ell;\n                    } else {\n                        throw new\n                            NumberFormatException(String.format(\"String value %s exceeds \" +\n                                                                \"range of unsigned int.\", s));\n                    }\n                }\n            }\n        } else {\n            throw NumberFormatException.forInputString(s);\n        }\n    }"}
{"Number":"150","API Relative Path":"java.lang.Integer.java-parseUnsignedInt(String-int)","Corresponding Source":"/**\n     * Parses the string argument as an unsigned integer in the radix\n     * specified by the second argument.  An unsigned integer maps the\n     * values usually associated with negative numbers to positive\n     * numbers larger than {@code MAX_VALUE}.\n     *\n     * The characters in the string must all be digits of the\n     * specified radix (as determined by whether {@link\n     * java.lang.Character#digit(char, int)} returns a nonnegative\n     * value), except that the first character may be an ASCII plus\n     * sign {@code '+'} ({@code '\\u005Cu002B'}). The resulting\n     * integer value is returned.\n     *\n     * <p>An exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * <ul>\n     * <li>The first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * <li>The radix is either smaller than\n     * {@link java.lang.Character#MIN_RADIX} or\n     * larger than {@link java.lang.Character#MAX_RADIX}.\n     *\n     * <li>Any character of the string is not a digit of the specified\n     * radix, except that the first character may be a plus sign\n     * {@code '+'} ({@code '\\u005Cu002B'}) provided that the\n     * string is longer than length 1.\n     *\n     * <li>The value represented by the string is larger than the\n     * largest unsigned {@code int}, 2<sup>32<\/sup>-1.\n     *\n     * <\/ul>\n     *\n     *\n     * @param      s   the {@code String} containing the unsigned integer\n     *                  representation to be parsed\n     * @param      radix   the radix to be used while parsing {@code s}.\n     * @return     the integer represented by the string argument in the\n     *             specified radix.\n     * @throws     NumberFormatException if the {@code String}\n     *             does not contain a parsable {@code int}.\n     * @since 1.8\n     */\n    public static int parseUnsignedInt(String s, int radix)\n                throws NumberFormatException {\n        if (s == null)  {\n            throw new NumberFormatException(\"null\");\n        }\n\n        int len = s.length();\n        if (len > 0) {\n            char firstChar = s.charAt(0);\n            if (firstChar == '-') {\n                throw new\n                    NumberFormatException(String.format(\"Illegal leading minus sign \" +\n                                                       \"on unsigned string %s.\", s));\n            } else {\n                if (len <= 5 || // Integer.MAX_VALUE in Character.MAX_RADIX is 6 digits\n                    (radix == 10 && len <= 9) ) { // Integer.MAX_VALUE in base 10 is 10 digits\n                    return parseInt(s, radix);\n                } else {\n                    long ell = Long.parseLong(s, radix);\n                    if ((ell & 0xffff_ffff_0000_0000L) == 0) {\n                        return (int) ell;\n                    } else {\n                        throw new\n                            NumberFormatException(String.format(\"String value %s exceeds \" +\n                                                                \"range of unsigned int.\", s));\n                    }\n                }\n            }\n        } else {\n            throw NumberFormatException.forInputString(s);\n        }\n    }"}
{"Number":"151","API Relative Path":"java.lang.Integer.java-parseUnsignedInt(String-int)","Corresponding Source":"/**\n     * Parses the string argument as an unsigned integer in the radix\n     * specified by the second argument.  An unsigned integer maps the\n     * values usually associated with negative numbers to positive\n     * numbers larger than {@code MAX_VALUE}.\n     *\n     * The characters in the string must all be digits of the\n     * specified radix (as determined by whether {@link\n     * java.lang.Character#digit(char, int)} returns a nonnegative\n     * value), except that the first character may be an ASCII plus\n     * sign {@code '+'} ({@code '\\u005Cu002B'}). The resulting\n     * integer value is returned.\n     *\n     * <p>An exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * <ul>\n     * <li>The first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * <li>The radix is either smaller than\n     * {@link java.lang.Character#MIN_RADIX} or\n     * larger than {@link java.lang.Character#MAX_RADIX}.\n     *\n     * <li>Any character of the string is not a digit of the specified\n     * radix, except that the first character may be a plus sign\n     * {@code '+'} ({@code '\\u005Cu002B'}) provided that the\n     * string is longer than length 1.\n     *\n     * <li>The value represented by the string is larger than the\n     * largest unsigned {@code int}, 2<sup>32<\/sup>-1.\n     *\n     * <\/ul>\n     *\n     *\n     * @param      s   the {@code String} containing the unsigned integer\n     *                  representation to be parsed\n     * @param      radix   the radix to be used while parsing {@code s}.\n     * @return     the integer represented by the string argument in the\n     *             specified radix.\n     * @throws     NumberFormatException if the {@code String}\n     *             does not contain a parsable {@code int}.\n     * @since 1.8\n     */\n    public static int parseUnsignedInt(String s, int radix)\n                throws NumberFormatException {\n        if (s == null)  {\n            throw new NumberFormatException(\"null\");\n        }\n\n        int len = s.length();\n        if (len > 0) {\n            char firstChar = s.charAt(0);\n            if (firstChar == '-') {\n                throw new\n                    NumberFormatException(String.format(\"Illegal leading minus sign \" +\n                                                       \"on unsigned string %s.\", s));\n            } else {\n                if (len <= 5 || // Integer.MAX_VALUE in Character.MAX_RADIX is 6 digits\n                    (radix == 10 && len <= 9) ) { // Integer.MAX_VALUE in base 10 is 10 digits\n                    return parseInt(s, radix);\n                } else {\n                    long ell = Long.parseLong(s, radix);\n                    if ((ell & 0xffff_ffff_0000_0000L) == 0) {\n                        return (int) ell;\n                    } else {\n                        throw new\n                            NumberFormatException(String.format(\"String value %s exceeds \" +\n                                                                \"range of unsigned int.\", s));\n                    }\n                }\n            }\n        } else {\n            throw NumberFormatException.forInputString(s);\n        }\n    }"}
{"Number":"152","API Relative Path":"java.lang.Integer.java-parseUnsignedInt(String-int)","Corresponding Source":"/**\n     * Parses the string argument as an unsigned integer in the radix\n     * specified by the second argument.  An unsigned integer maps the\n     * values usually associated with negative numbers to positive\n     * numbers larger than {@code MAX_VALUE}.\n     *\n     * The characters in the string must all be digits of the\n     * specified radix (as determined by whether {@link\n     * java.lang.Character#digit(char, int)} returns a nonnegative\n     * value), except that the first character may be an ASCII plus\n     * sign {@code '+'} ({@code '\\u005Cu002B'}). The resulting\n     * integer value is returned.\n     *\n     * <p>An exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * <ul>\n     * <li>The first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * <li>The radix is either smaller than\n     * {@link java.lang.Character#MIN_RADIX} or\n     * larger than {@link java.lang.Character#MAX_RADIX}.\n     *\n     * <li>Any character of the string is not a digit of the specified\n     * radix, except that the first character may be a plus sign\n     * {@code '+'} ({@code '\\u005Cu002B'}) provided that the\n     * string is longer than length 1.\n     *\n     * <li>The value represented by the string is larger than the\n     * largest unsigned {@code int}, 2<sup>32<\/sup>-1.\n     *\n     * <\/ul>\n     *\n     *\n     * @param      s   the {@code String} containing the unsigned integer\n     *                  representation to be parsed\n     * @param      radix   the radix to be used while parsing {@code s}.\n     * @return     the integer represented by the string argument in the\n     *             specified radix.\n     * @throws     NumberFormatException if the {@code String}\n     *             does not contain a parsable {@code int}.\n     * @since 1.8\n     */\n    public static int parseUnsignedInt(String s, int radix)\n                throws NumberFormatException {\n        if (s == null)  {\n            throw new NumberFormatException(\"null\");\n        }\n\n        int len = s.length();\n        if (len > 0) {\n            char firstChar = s.charAt(0);\n            if (firstChar == '-') {\n                throw new\n                    NumberFormatException(String.format(\"Illegal leading minus sign \" +\n                                                       \"on unsigned string %s.\", s));\n            } else {\n                if (len <= 5 || // Integer.MAX_VALUE in Character.MAX_RADIX is 6 digits\n                    (radix == 10 && len <= 9) ) { // Integer.MAX_VALUE in base 10 is 10 digits\n                    return parseInt(s, radix);\n                } else {\n                    long ell = Long.parseLong(s, radix);\n                    if ((ell & 0xffff_ffff_0000_0000L) == 0) {\n                        return (int) ell;\n                    } else {\n                        throw new\n                            NumberFormatException(String.format(\"String value %s exceeds \" +\n                                                                \"range of unsigned int.\", s));\n                    }\n                }\n            }\n        } else {\n            throw NumberFormatException.forInputString(s);\n        }\n    }"}
{"Number":"153","API Relative Path":"java.lang.Integer.java-valueOf(String)","Corresponding Source":"/**\n     * Returns an {@code Integer} object holding the\n     * value of the specified {@code String}. The argument is\n     * interpreted as representing a signed decimal integer, exactly\n     * as if the argument were given to the {@link\n     * #parseInt(java.lang.String)} method. The result is an\n     * {@code Integer} object that represents the integer value\n     * specified by the string.\n     *\n     * <p>In other words, this method returns an {@code Integer}\n     * object equal to the value of:\n     *\n     * <blockquote>\n     *  {@code new Integer(Integer.parseInt(s))}\n     * <\/blockquote>\n     *\n     * @param      s   the string to be parsed.\n     * @return     an {@code Integer} object holding the value\n     *             represented by the string argument.\n     * @exception  NumberFormatException  if the string cannot be parsed\n     *             as an integer.\n     */\n    public static Integer valueOf(String s) throws NumberFormatException {\n        return Integer.valueOf(parseInt(s, 10));\n    }"}
{"Number":"154","API Relative Path":"java.lang.Integer.java-valueOf(String-int)","Corresponding Source":"/**\n     * Returns an {@code Integer} object holding the value\n     * extracted from the specified {@code String} when parsed\n     * with the radix given by the second argument. The first argument\n     * is interpreted as representing a signed integer in the radix\n     * specified by the second argument, exactly as if the arguments\n     * were given to the {@link #parseInt(java.lang.String, int)}\n     * method. The result is an {@code Integer} object that\n     * represents the integer value specified by the string.\n     *\n     * <p>In other words, this method returns an {@code Integer}\n     * object equal to the value of:\n     *\n     * <blockquote>\n     *  {@code new Integer(Integer.parseInt(s, radix))}\n     * <\/blockquote>\n     *\n     * @param      s   the string to be parsed.\n     * @param      radix the radix to be used in interpreting {@code s}\n     * @return     an {@code Integer} object holding the value\n     *             represented by the string argument in the specified\n     *             radix.\n     * @exception NumberFormatException if the {@code String}\n     *            does not contain a parsable {@code int}.\n     */\n    public static Integer valueOf(String s, int radix) throws NumberFormatException {\n        return Integer.valueOf(parseInt(s,radix));\n    }"}
{"Number":"155","API Relative Path":"java.lang.Integer.java-valueOf(String-int)","Corresponding Source":"/**\n     * Returns an {@code Integer} object holding the value\n     * extracted from the specified {@code String} when parsed\n     * with the radix given by the second argument. The first argument\n     * is interpreted as representing a signed integer in the radix\n     * specified by the second argument, exactly as if the arguments\n     * were given to the {@link #parseInt(java.lang.String, int)}\n     * method. The result is an {@code Integer} object that\n     * represents the integer value specified by the string.\n     *\n     * <p>In other words, this method returns an {@code Integer}\n     * object equal to the value of:\n     *\n     * <blockquote>\n     *  {@code new Integer(Integer.parseInt(s, radix))}\n     * <\/blockquote>\n     *\n     * @param      s   the string to be parsed.\n     * @param      radix the radix to be used in interpreting {@code s}\n     * @return     an {@code Integer} object holding the value\n     *             represented by the string argument in the specified\n     *             radix.\n     * @exception NumberFormatException if the {@code String}\n     *            does not contain a parsable {@code int}.\n     */\n    public static Integer valueOf(String s, int radix) throws NumberFormatException {\n        return Integer.valueOf(parseInt(s,radix));\n    }"}
{"Number":"156","API Relative Path":"java.lang.Integer.java-valueOf(String-int)","Corresponding Source":"/**\n     * Returns an {@code Integer} object holding the value\n     * extracted from the specified {@code String} when parsed\n     * with the radix given by the second argument. The first argument\n     * is interpreted as representing a signed integer in the radix\n     * specified by the second argument, exactly as if the arguments\n     * were given to the {@link #parseInt(java.lang.String, int)}\n     * method. The result is an {@code Integer} object that\n     * represents the integer value specified by the string.\n     *\n     * <p>In other words, this method returns an {@code Integer}\n     * object equal to the value of:\n     *\n     * <blockquote>\n     *  {@code new Integer(Integer.parseInt(s, radix))}\n     * <\/blockquote>\n     *\n     * @param      s   the string to be parsed.\n     * @param      radix the radix to be used in interpreting {@code s}\n     * @return     an {@code Integer} object holding the value\n     *             represented by the string argument in the specified\n     *             radix.\n     * @exception NumberFormatException if the {@code String}\n     *            does not contain a parsable {@code int}.\n     */\n    public static Integer valueOf(String s, int radix) throws NumberFormatException {\n        return Integer.valueOf(parseInt(s,radix));\n    }"}
{"Number":"157","API Relative Path":"java.lang.invoke.MethodHandle.java-bindTo(Object)","Corresponding Source":"/**\n     * Binds a value {@code x} to the first argument of a method handle, without invoking it.\n     * The new method handle adapts, as its <i>target<\/i>,\n     * the current method handle by binding it to the given argument.\n     * The type of the bound handle will be\n     * the same as the type of the target, except that a single leading\n     * reference parameter will be omitted.\n     * <p>\n     * When called, the bound handle inserts the given value {@code x}\n     * as a new leading argument to the target.  The other arguments are\n     * also passed unchanged.\n     * What the target eventually returns is returned unchanged by the bound handle.\n     * <p>\n     * The reference {@code x} must be convertible to the first parameter\n     * type of the target.\n     * <p>\n     * (<em>Note:<\/em>  Because method handles are immutable, the target method handle\n     * retains its original type and behavior.)\n     * @param x  the value to bind to the first argument of the target\n     * @return a new method handle which prepends the given value to the incoming\n     *         argument list, before calling the original method handle\n     * @throws IllegalArgumentException if the target does not have a\n     *         leading parameter type that is a reference type\n     * @throws ClassCastException if {@code x} cannot be converted\n     *         to the leading parameter type of the target\n     * @see MethodHandles#insertArguments\n     */\n    public MethodHandle bindTo(Object x) {\n        Class<?> ptype;\n        @SuppressWarnings(\"LocalVariableHidesMemberVariable\")\n        MethodType type = type();\n        if (type.parameterCount() == 0 ||\n            (ptype = type.parameterType(0)).isPrimitive())\n            throw newIllegalArgumentException(\"no leading reference parameter\", x);\n        x = ptype.cast(x);  // throw CCE if needed\n        return bindReceiver(x);\n    }"}
{"Number":"158","API Relative Path":"java.lang.invoke.MethodHandleInfo.java-toString(int-Class-String-MethodType)","Corresponding Source":"/**\n     * Returns a string representation for a {@code MethodHandleInfo},\n     * given the four parts of its symbolic reference.\n     * This is defined to be of the form {@code \"RK C.N:MT\"}, where {@code RK} is the\n     * {@linkplain #referenceKindToString reference kind string} for {@code kind},\n     * {@code C} is the {@linkplain java.lang.Class#getName name} of {@code defc}\n     * {@code N} is the {@code name}, and\n     * {@code MT} is the {@code type}.\n     * These four values may be obtained from the\n     * {@linkplain #getReferenceKind reference kind},\n     * {@linkplain #getDeclaringClass declaring class},\n     * {@linkplain #getName member name},\n     * and {@linkplain #getMethodType method type}\n     * of a {@code MethodHandleInfo} object.\n     *\n     * @implSpec\n     * This produces a result equivalent to:\n     * <pre>{@code\n     *     String.format(\"%s %s.%s:%s\", referenceKindToString(kind), defc.getName(), name, type)\n     * }<\/pre>\n     *\n     * @param kind the {@linkplain #getReferenceKind reference kind} part of the symbolic reference\n     * @param defc the {@linkplain #getDeclaringClass declaring class} part of the symbolic reference\n     * @param name the {@linkplain #getName member name} part of the symbolic reference\n     * @param type the {@linkplain #getMethodType method type} part of the symbolic reference\n     * @return a string of the form {@code \"RK C.N:MT\"}\n     * @exception IllegalArgumentException if the first argument is not a valid\n     *            <a href=\"MethodHandleInfo.html#refkinds\">reference kind number<\/a>\n     * @exception NullPointerException if any reference argument is {@code null}\n     */\n    public static String toString(int kind, Class<?> defc, String name, MethodType type) {\n        Objects.requireNonNull(name); Objects.requireNonNull(type);\n        return String.format(\"%s %s.%s:%s\", referenceKindToString(kind), defc.getName(), name, type);\n    }"}
{"Number":"159","API Relative Path":"java.lang.invoke.MethodHandles.java-arrayElementGetter(Class)","Corresponding Source":"/**\n     * Produces a method handle giving read access to elements of an array.\n     * The type of the method handle will have a return type of the array's\n     * element type.  Its first argument will be the array type,\n     * and the second will be {@code int}.\n     * @param arrayClass an array type\n     * @return a method handle which can load values from the given array type\n     * @throws NullPointerException if the argument is null\n     * @throws  IllegalArgumentException if arrayClass is not an array type\n     */\n    public static\n    MethodHandle arrayElementGetter(Class<?> arrayClass) throws IllegalArgumentException {\n        return MethodHandleImpl.makeArrayElementAccessor(arrayClass, false);\n    }"}
{"Number":"160","API Relative Path":"java.lang.invoke.MethodHandles.java-arrayElementSetter(Class)","Corresponding Source":"/**\n     * Produces a method handle giving write access to elements of an array.\n     * The type of the method handle will have a void return type.\n     * Its last argument will be the array's element type.\n     * The first and second arguments will be the array type and int.\n     * @param arrayClass the class of an array\n     * @return a method handle which can store values into the array type\n     * @throws NullPointerException if the argument is null\n     * @throws IllegalArgumentException if arrayClass is not an array type\n     */\n    public static\n    MethodHandle arrayElementSetter(Class<?> arrayClass) throws IllegalArgumentException {\n        return MethodHandleImpl.makeArrayElementAccessor(arrayClass, true);\n    }"}
{"Number":"161","API Relative Path":"java.lang.invoke.MethodHandles.java-constant(Class-Object)","Corresponding Source":"/**\n     * Produces a method handle of the requested return type which returns the given\n     * constant value every time it is invoked.\n     * <p>\n     * Before the method handle is returned, the passed-in value is converted to the requested type.\n     * If the requested type is primitive, widening primitive conversions are attempted,\n     * else reference conversions are attempted.\n     * <p>The returned method handle is equivalent to {@code identity(type).bindTo(value)}.\n     * @param type the return type of the desired method handle\n     * @param value the value to return\n     * @return a method handle of the given return type and no arguments, which always returns the given value\n     * @throws NullPointerException if the {@code type} argument is null\n     * @throws ClassCastException if the value cannot be converted to the required return type\n     * @throws IllegalArgumentException if the given type is {@code void.class}\n     */\n    public static\n    MethodHandle constant(Class<?> type, Object value) {\n        if (type.isPrimitive()) {\n            if (type == void.class)\n                throw newIllegalArgumentException(\"void type\");\n            Wrapper w = Wrapper.forPrimitiveType(type);\n            return insertArguments(identity(type), 0, w.convert(value, type));\n        } else {\n            return identity(type).bindTo(type.cast(value));\n        }\n    }"}
{"Number":"162","API Relative Path":"java.lang.invoke.MethodHandles.java-dropArguments(MethodHandle-int-List)","Corresponding Source":"/**\n     * Produces a method handle which will discard some dummy arguments\n     * before calling some other specified <i>target<\/i> method handle.\n     * The type of the new method handle will be the same as the target's type,\n     * except it will also include the dummy argument types,\n     * at some given position.\n     * <p>\n     * The {@code pos} argument may range between zero and <i>N<\/i>,\n     * where <i>N<\/i> is the arity of the target.\n     * If {@code pos} is zero, the dummy arguments will precede\n     * the target's real arguments; if {@code pos} is <i>N<\/i>\n     * they will come after.\n     * <p>\n     * <b>Example:<\/b>\n     * <blockquote><pre>{@code\nimport static java.lang.invoke.MethodHandles.*;\nimport static java.lang.invoke.MethodType.*;\n...\nMethodHandle cat = lookup().findVirtual(String.class,\n  \"concat\", methodType(String.class, String.class));\nassertEquals(\"xy\", (String) cat.invokeExact(\"x\", \"y\"));\nMethodType bigType = cat.type().insertParameterTypes(0, int.class, String.class);\nMethodHandle d0 = dropArguments(cat, 0, bigType.parameterList().subList(0,2));\nassertEquals(bigType, d0.type());\nassertEquals(\"yz\", (String) d0.invokeExact(123, \"x\", \"y\", \"z\"));\n     * }<\/pre><\/blockquote>\n     * <p>\n     * This method is also equivalent to the following code:\n     * <blockquote><pre>\n     * {@link #dropArguments(MethodHandle,int,Class...) dropArguments}{@code (target, pos, valueTypes.toArray(new Class[0]))}\n     * <\/pre><\/blockquote>\n     * @param target the method handle to invoke after the arguments are dropped\n     * @param valueTypes the type(s) of the argument(s) to drop\n     * @param pos position of first argument to drop (zero for the leftmost)\n     * @return a method handle which drops arguments of the given types,\n     *         before calling the original method handle\n     * @throws NullPointerException if the target is null,\n     *                              or if the {@code valueTypes} list or any of its elements is null\n     * @throws IllegalArgumentException if any element of {@code valueTypes} is {@code void.class},\n     *                  or if {@code pos} is negative or greater than the arity of the target,\n     *                  or if the new method handle's type would have too many parameters\n     */\n    public static\n    MethodHandle dropArguments(MethodHandle target, int pos, List<Class<?>> valueTypes) {\n        MethodType oldType = target.type();  // get NPE\n        int dropped = valueTypes.size();\n        MethodType.checkSlotCount(dropped);\n        if (dropped == 0)  return target;\n        int outargs = oldType.parameterCount();\n        int inargs  = outargs + dropped;\n        if (pos < 0 || pos >= inargs)\n            throw newIllegalArgumentException(\"no argument type to remove\");\n        ArrayList<Class<?>> ptypes = new ArrayList<>(oldType.parameterList());\n        ptypes.addAll(pos, valueTypes);\n        if (ptypes.size() != inargs)  throw newIllegalArgumentException(\"valueTypes\");\n        MethodType newType = MethodType.methodType(oldType.returnType(), ptypes);\n        return target.dropArguments(newType, pos, dropped);\n    }"}
{"Number":"163","API Relative Path":"java.lang.invoke.MethodHandles.java-spreadInvoker(MethodType-int)","Corresponding Source":"/// method handle invocation (reflective style)\n\n    /**\n     * Produces a method handle which will invoke any method handle of the\n     * given {@code type}, with a given number of trailing arguments replaced by\n     * a single trailing {@code Object[]} array.\n     * The resulting invoker will be a method handle with the following\n     * arguments:\n     * <ul>\n     * <li>a single {@code MethodHandle} target\n     * <li>zero or more leading values (counted by {@code leadingArgCount})\n     * <li>an {@code Object[]} array containing trailing arguments\n     * <\/ul>\n     * <p>\n     * The invoker will invoke its target like a call to {@link MethodHandle#invoke invoke} with\n     * the indicated {@code type}.\n     * That is, if the target is exactly of the given {@code type}, it will behave\n     * like {@code invokeExact}; otherwise it behave as if {@link MethodHandle#asType asType}\n     * is used to convert the target to the required {@code type}.\n     * <p>\n     * The type of the returned invoker will not be the given {@code type}, but rather\n     * will have all parameters except the first {@code leadingArgCount}\n     * replaced by a single array of type {@code Object[]}, which will be\n     * the final parameter.\n     * <p>\n     * Before invoking its target, the invoker will spread the final array, apply\n     * reference casts as necessary, and unbox and widen primitive arguments.\n     * If, when the invoker is called, the supplied array argument does\n     * not have the correct number of elements, the invoker will throw\n     * an {@link IllegalArgumentException} instead of invoking the target.\n     * <p>\n     * This method is equivalent to the following code (though it may be more efficient):\n     * <blockquote><pre>{@code\nMethodHandle invoker = MethodHandles.invoker(type);\nint spreadArgCount = type.parameterCount() - leadingArgCount;\ninvoker = invoker.asSpreader(Object[].class, spreadArgCount);\nreturn invoker;\n     * }<\/pre><\/blockquote>\n     * This method throws no reflective or security exceptions.\n     * @param type the desired target type\n     * @param leadingArgCount number of fixed arguments, to be passed unchanged to the target\n     * @return a method handle suitable for invoking any method handle of the given type\n     * @throws NullPointerException if {@code type} is null\n     * @throws IllegalArgumentException if {@code leadingArgCount} is not in\n     *                  the range from 0 to {@code type.parameterCount()} inclusive,\n     *                  or if the resulting method handle's type would have\n     *          <a href=\"MethodHandle.html#maxarity\">too many parameters<\/a>\n     */\n    static public\n    MethodHandle spreadInvoker(MethodType type, int leadingArgCount) {\n        if (leadingArgCount < 0 || leadingArgCount > type.parameterCount())\n            throw new IllegalArgumentException(\"bad argument count \"+leadingArgCount);\n        return type.invokers().spreadInvoker(leadingArgCount);\n    }"}
{"Number":"164","API Relative Path":"java.lang.invoke.SerializedLambda.java-SerializedLambda(Class-String-String-String-int-String-String-String-String-Object[])","Corresponding Source":"/**\n     * Create a {@code SerializedLambda} from the low-level information present\n     * at the lambda factory site.\n     *\n     * @param capturingClass The class in which the lambda expression appears\n     * @param functionalInterfaceClass Name, in slash-delimited form, of static\n     *                                 type of the returned lambda object\n     * @param functionalInterfaceMethodName Name of the functional interface\n     *                                      method for the present at the\n     *                                      lambda factory site\n     * @param functionalInterfaceMethodSignature Signature of the functional\n     *                                           interface method present at\n     *                                           the lambda factory site\n     * @param implMethodKind Method handle kind for the implementation method\n     * @param implClass Name, in slash-delimited form, for the class holding\n     *                  the implementation method\n     * @param implMethodName Name of the implementation method\n     * @param implMethodSignature Signature of the implementation method\n     * @param instantiatedMethodType The signature of the primary functional\n     *                               interface method after type variables\n     *                               are substituted with their instantiation\n     *                               from the capture site\n     * @param capturedArgs The dynamic arguments to the lambda factory site,\n     *                     which represent variables captured by\n     *                     the lambda\n     */\n    public SerializedLambda(Class<?> capturingClass,\n                            String functionalInterfaceClass,\n                            String functionalInterfaceMethodName,\n                            String functionalInterfaceMethodSignature,\n                            int implMethodKind,\n                            String implClass,\n                            String implMethodName,\n                            String implMethodSignature,\n                            String instantiatedMethodType,\n                            Object[] capturedArgs) {\n        this.capturingClass = capturingClass;\n        this.functionalInterfaceClass = functionalInterfaceClass;\n        this.functionalInterfaceMethodName = functionalInterfaceMethodName;\n        this.functionalInterfaceMethodSignature = functionalInterfaceMethodSignature;\n        this.implMethodKind = implMethodKind;\n        this.implClass = implClass;\n        this.implMethodName = implMethodName;\n        this.implMethodSignature = implMethodSignature;\n        this.instantiatedMethodType = instantiatedMethodType;\n        this.capturedArgs = Objects.requireNonNull(capturedArgs).clone();\n    }"}
{"Number":"165","API Relative Path":"java.lang.Long.java-Long(String)","Corresponding Source":"/**\n     * Determines the {@code long} value of the system property\n     * with the specified name.\n     *\n     * <p>The first argument is treated as the name of a system\n     * property.  System properties are accessible through the {@link\n     * java.lang.System#getProperty(java.lang.String)} method. The\n     * string value of this property is then interpreted as a {@code\n     * long} value using the grammar supported by {@link Long#decode decode}\n     * and a {@code Long} object representing this value is returned.\n     *\n     * <p>If there is no property with the specified name, if the\n     * specified name is empty or {@code null}, or if the property\n     * does not have the correct numeric format, then {@code null} is\n     * returned.\n     *\n     * <p>In other words, this method returns a {@code Long} object\n     * equal to the value of:\n     *\n     * <blockquote>\n     *  {@code getLong(nm, null)}\n     * <\/blockquote>\n     *\n     * @param   nm   property name.\n     * @return  the {@code Long} value of the property.\n     * @throws  SecurityException for the same reasons as\n     *          {@link System#getProperty(String) System.getProperty}\n     * @see     java.lang.System#getProperty(java.lang.String)\n     * @see     java.lang.System#getProperty(java.lang.String, java.lang.String)\n     */\n    public static Long getLong(String nm) {\n        return getLong(nm, null);\n    }"}
{"Number":"166","API Relative Path":"java.lang.Long.java-parseLong(String-int)","Corresponding Source":"/**\n     * Parses the string argument as a signed {@code long} in the\n     * radix specified by the second argument. The characters in the\n     * string must all be digits of the specified radix (as determined\n     * by whether {@link java.lang.Character#digit(char, int)} returns\n     * a nonnegative value), except that the first character may be an\n     * ASCII minus sign {@code '-'} ({@code '\\u005Cu002D'}) to\n     * indicate a negative value or an ASCII plus sign {@code '+'}\n     * ({@code '\\u005Cu002B'}) to indicate a positive value. The\n     * resulting {@code long} value is returned.\n     *\n     * <p>Note that neither the character {@code L}\n     * ({@code '\\u005Cu004C'}) nor {@code l}\n     * ({@code '\\u005Cu006C'}) is permitted to appear at the end\n     * of the string as a type indicator, as would be permitted in\n     * Java programming language source code - except that either\n     * {@code L} or {@code l} may appear as a digit for a\n     * radix greater than or equal to 22.\n     *\n     * <p>An exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * <ul>\n     *\n     * <li>The first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * <li>The {@code radix} is either smaller than {@link\n     * java.lang.Character#MIN_RADIX} or larger than {@link\n     * java.lang.Character#MAX_RADIX}.\n     *\n     * <li>Any character of the string is not a digit of the specified\n     * radix, except that the first character may be a minus sign\n     * {@code '-'} ({@code '\\u005Cu002d'}) or plus sign {@code\n     * '+'} ({@code '\\u005Cu002B'}) provided that the string is\n     * longer than length 1.\n     *\n     * <li>The value represented by the string is not a value of type\n     *      {@code long}.\n     * <\/ul>\n     *\n     * <p>Examples:\n     * <blockquote><pre>\n     * parseLong(\"0\", 10) returns 0L\n     * parseLong(\"473\", 10) returns 473L\n     * parseLong(\"+42\", 10) returns 42L\n     * parseLong(\"-0\", 10) returns 0L\n     * parseLong(\"-FF\", 16) returns -255L\n     * parseLong(\"1100110\", 2) returns 102L\n     * parseLong(\"99\", 8) throws a NumberFormatException\n     * parseLong(\"Hazelnut\", 10) throws a NumberFormatException\n     * parseLong(\"Hazelnut\", 36) returns 1356099454469L\n     * <\/pre><\/blockquote>\n     *\n     * @param      s       the {@code String} containing the\n     *                     {@code long} representation to be parsed.\n     * @param      radix   the radix to be used while parsing {@code s}.\n     * @return     the {@code long} represented by the string argument in\n     *             the specified radix.\n     * @throws     NumberFormatException  if the string does not contain a\n     *             parsable {@code long}.\n     */\n    public static long parseLong(String s, int radix)\n              throws NumberFormatException\n    {\n        if (s == null) {\n            throw new NumberFormatException(\"null\");\n        }\n\n        if (radix < Character.MIN_RADIX) {\n            throw new NumberFormatException(\"radix \" + radix +\n                                            \" less than Character.MIN_RADIX\");\n        }\n        if (radix > Character.MAX_RADIX) {\n            throw new NumberFormatException(\"radix \" + radix +\n                                            \" greater than Character.MAX_RADIX\");\n        }\n\n        long result = 0;\n        boolean negative = false;\n        int i = 0, len = s.length();\n        long limit = -Long.MAX_VALUE;\n        long multmin;\n        int digit;\n\n        if (len > 0) {\n            char firstChar = s.charAt(0);\n            if (firstChar < '0') { // Possible leading \"+\" or \"-\"\n                if (firstChar == '-') {\n                    negative = true;\n                    limit = Long.MIN_VALUE;\n                } else if (firstChar != '+')\n                    throw NumberFormatException.forInputString(s);\n\n                if (len == 1) // Cannot have lone \"+\" or \"-\"\n                    throw NumberFormatException.forInputString(s);\n                i++;\n            }\n            multmin = limit / radix;\n            while (i < len) {\n                // Accumulating negatively avoids surprises near MAX_VALUE\n                digit = Character.digit(s.charAt(i++),radix);\n                if (digit < 0) {\n                    throw NumberFormatException.forInputString(s);\n                }\n                if (result < multmin) {\n                    throw NumberFormatException.forInputString(s);\n                }\n                result *= radix;\n                if (result < limit + digit) {\n                    throw NumberFormatException.forInputString(s);\n                }\n                result -= digit;\n            }\n        } else {\n            throw NumberFormatException.forInputString(s);\n        }\n        return negative ? result : -result;\n    }"}
{"Number":"167","API Relative Path":"java.lang.Long.java-parseLong(String-int)","Corresponding Source":"/**\n     * Parses the string argument as a signed {@code long} in the\n     * radix specified by the second argument. The characters in the\n     * string must all be digits of the specified radix (as determined\n     * by whether {@link java.lang.Character#digit(char, int)} returns\n     * a nonnegative value), except that the first character may be an\n     * ASCII minus sign {@code '-'} ({@code '\\u005Cu002D'}) to\n     * indicate a negative value or an ASCII plus sign {@code '+'}\n     * ({@code '\\u005Cu002B'}) to indicate a positive value. The\n     * resulting {@code long} value is returned.\n     *\n     * <p>Note that neither the character {@code L}\n     * ({@code '\\u005Cu004C'}) nor {@code l}\n     * ({@code '\\u005Cu006C'}) is permitted to appear at the end\n     * of the string as a type indicator, as would be permitted in\n     * Java programming language source code - except that either\n     * {@code L} or {@code l} may appear as a digit for a\n     * radix greater than or equal to 22.\n     *\n     * <p>An exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * <ul>\n     *\n     * <li>The first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * <li>The {@code radix} is either smaller than {@link\n     * java.lang.Character#MIN_RADIX} or larger than {@link\n     * java.lang.Character#MAX_RADIX}.\n     *\n     * <li>Any character of the string is not a digit of the specified\n     * radix, except that the first character may be a minus sign\n     * {@code '-'} ({@code '\\u005Cu002d'}) or plus sign {@code\n     * '+'} ({@code '\\u005Cu002B'}) provided that the string is\n     * longer than length 1.\n     *\n     * <li>The value represented by the string is not a value of type\n     *      {@code long}.\n     * <\/ul>\n     *\n     * <p>Examples:\n     * <blockquote><pre>\n     * parseLong(\"0\", 10) returns 0L\n     * parseLong(\"473\", 10) returns 473L\n     * parseLong(\"+42\", 10) returns 42L\n     * parseLong(\"-0\", 10) returns 0L\n     * parseLong(\"-FF\", 16) returns -255L\n     * parseLong(\"1100110\", 2) returns 102L\n     * parseLong(\"99\", 8) throws a NumberFormatException\n     * parseLong(\"Hazelnut\", 10) throws a NumberFormatException\n     * parseLong(\"Hazelnut\", 36) returns 1356099454469L\n     * <\/pre><\/blockquote>\n     *\n     * @param      s       the {@code String} containing the\n     *                     {@code long} representation to be parsed.\n     * @param      radix   the radix to be used while parsing {@code s}.\n     * @return     the {@code long} represented by the string argument in\n     *             the specified radix.\n     * @throws     NumberFormatException  if the string does not contain a\n     *             parsable {@code long}.\n     */\n    public static long parseLong(String s, int radix)\n              throws NumberFormatException\n    {\n        if (s == null) {\n            throw new NumberFormatException(\"null\");\n        }\n\n        if (radix < Character.MIN_RADIX) {\n            throw new NumberFormatException(\"radix \" + radix +\n                                            \" less than Character.MIN_RADIX\");\n        }\n        if (radix > Character.MAX_RADIX) {\n            throw new NumberFormatException(\"radix \" + radix +\n                                            \" greater than Character.MAX_RADIX\");\n        }\n\n        long result = 0;\n        boolean negative = false;\n        int i = 0, len = s.length();\n        long limit = -Long.MAX_VALUE;\n        long multmin;\n        int digit;\n\n        if (len > 0) {\n            char firstChar = s.charAt(0);\n            if (firstChar < '0') { // Possible leading \"+\" or \"-\"\n                if (firstChar == '-') {\n                    negative = true;\n                    limit = Long.MIN_VALUE;\n                } else if (firstChar != '+')\n                    throw NumberFormatException.forInputString(s);\n\n                if (len == 1) // Cannot have lone \"+\" or \"-\"\n                    throw NumberFormatException.forInputString(s);\n                i++;\n            }\n            multmin = limit / radix;\n            while (i < len) {\n                // Accumulating negatively avoids surprises near MAX_VALUE\n                digit = Character.digit(s.charAt(i++),radix);\n                if (digit < 0) {\n                    throw NumberFormatException.forInputString(s);\n                }\n                if (result < multmin) {\n                    throw NumberFormatException.forInputString(s);\n                }\n                result *= radix;\n                if (result < limit + digit) {\n                    throw NumberFormatException.forInputString(s);\n                }\n                result -= digit;\n            }\n        } else {\n            throw NumberFormatException.forInputString(s);\n        }\n        return negative ? result : -result;\n    }"}
{"Number":"168","API Relative Path":"java.lang.Long.java-parseLong(String-int)","Corresponding Source":"/**\n     * Parses the string argument as a signed {@code long} in the\n     * radix specified by the second argument. The characters in the\n     * string must all be digits of the specified radix (as determined\n     * by whether {@link java.lang.Character#digit(char, int)} returns\n     * a nonnegative value), except that the first character may be an\n     * ASCII minus sign {@code '-'} ({@code '\\u005Cu002D'}) to\n     * indicate a negative value or an ASCII plus sign {@code '+'}\n     * ({@code '\\u005Cu002B'}) to indicate a positive value. The\n     * resulting {@code long} value is returned.\n     *\n     * <p>Note that neither the character {@code L}\n     * ({@code '\\u005Cu004C'}) nor {@code l}\n     * ({@code '\\u005Cu006C'}) is permitted to appear at the end\n     * of the string as a type indicator, as would be permitted in\n     * Java programming language source code - except that either\n     * {@code L} or {@code l} may appear as a digit for a\n     * radix greater than or equal to 22.\n     *\n     * <p>An exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * <ul>\n     *\n     * <li>The first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * <li>The {@code radix} is either smaller than {@link\n     * java.lang.Character#MIN_RADIX} or larger than {@link\n     * java.lang.Character#MAX_RADIX}.\n     *\n     * <li>Any character of the string is not a digit of the specified\n     * radix, except that the first character may be a minus sign\n     * {@code '-'} ({@code '\\u005Cu002d'}) or plus sign {@code\n     * '+'} ({@code '\\u005Cu002B'}) provided that the string is\n     * longer than length 1.\n     *\n     * <li>The value represented by the string is not a value of type\n     *      {@code long}.\n     * <\/ul>\n     *\n     * <p>Examples:\n     * <blockquote><pre>\n     * parseLong(\"0\", 10) returns 0L\n     * parseLong(\"473\", 10) returns 473L\n     * parseLong(\"+42\", 10) returns 42L\n     * parseLong(\"-0\", 10) returns 0L\n     * parseLong(\"-FF\", 16) returns -255L\n     * parseLong(\"1100110\", 2) returns 102L\n     * parseLong(\"99\", 8) throws a NumberFormatException\n     * parseLong(\"Hazelnut\", 10) throws a NumberFormatException\n     * parseLong(\"Hazelnut\", 36) returns 1356099454469L\n     * <\/pre><\/blockquote>\n     *\n     * @param      s       the {@code String} containing the\n     *                     {@code long} representation to be parsed.\n     * @param      radix   the radix to be used while parsing {@code s}.\n     * @return     the {@code long} represented by the string argument in\n     *             the specified radix.\n     * @throws     NumberFormatException  if the string does not contain a\n     *             parsable {@code long}.\n     */\n    public static long parseLong(String s, int radix)\n              throws NumberFormatException\n    {\n        if (s == null) {\n            throw new NumberFormatException(\"null\");\n        }\n\n        if (radix < Character.MIN_RADIX) {\n            throw new NumberFormatException(\"radix \" + radix +\n                                            \" less than Character.MIN_RADIX\");\n        }\n        if (radix > Character.MAX_RADIX) {\n            throw new NumberFormatException(\"radix \" + radix +\n                                            \" greater than Character.MAX_RADIX\");\n        }\n\n        long result = 0;\n        boolean negative = false;\n        int i = 0, len = s.length();\n        long limit = -Long.MAX_VALUE;\n        long multmin;\n        int digit;\n\n        if (len > 0) {\n            char firstChar = s.charAt(0);\n            if (firstChar < '0') { // Possible leading \"+\" or \"-\"\n                if (firstChar == '-') {\n                    negative = true;\n                    limit = Long.MIN_VALUE;\n                } else if (firstChar != '+')\n                    throw NumberFormatException.forInputString(s);\n\n                if (len == 1) // Cannot have lone \"+\" or \"-\"\n                    throw NumberFormatException.forInputString(s);\n                i++;\n            }\n            multmin = limit / radix;\n            while (i < len) {\n                // Accumulating negatively avoids surprises near MAX_VALUE\n                digit = Character.digit(s.charAt(i++),radix);\n                if (digit < 0) {\n                    throw NumberFormatException.forInputString(s);\n                }\n                if (result < multmin) {\n                    throw NumberFormatException.forInputString(s);\n                }\n                result *= radix;\n                if (result < limit + digit) {\n                    throw NumberFormatException.forInputString(s);\n                }\n                result -= digit;\n            }\n        } else {\n            throw NumberFormatException.forInputString(s);\n        }\n        return negative ? result : -result;\n    }"}
{"Number":"169","API Relative Path":"java.lang.Long.java-parseUnsignedLong(String-int)","Corresponding Source":"/**\n     * Parses the string argument as an unsigned {@code long} in the\n     * radix specified by the second argument.  An unsigned integer\n     * maps the values usually associated with negative numbers to\n     * positive numbers larger than {@code MAX_VALUE}.\n     *\n     * The characters in the string must all be digits of the\n     * specified radix (as determined by whether {@link\n     * java.lang.Character#digit(char, int)} returns a nonnegative\n     * value), except that the first character may be an ASCII plus\n     * sign {@code '+'} ({@code '\\u005Cu002B'}). The resulting\n     * integer value is returned.\n     *\n     * <p>An exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * <ul>\n     * <li>The first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * <li>The radix is either smaller than\n     * {@link java.lang.Character#MIN_RADIX} or\n     * larger than {@link java.lang.Character#MAX_RADIX}.\n     *\n     * <li>Any character of the string is not a digit of the specified\n     * radix, except that the first character may be a plus sign\n     * {@code '+'} ({@code '\\u005Cu002B'}) provided that the\n     * string is longer than length 1.\n     *\n     * <li>The value represented by the string is larger than the\n     * largest unsigned {@code long}, 2<sup>64<\/sup>-1.\n     *\n     * <\/ul>\n     *\n     *\n     * @param      s   the {@code String} containing the unsigned integer\n     *                  representation to be parsed\n     * @param      radix   the radix to be used while parsing {@code s}.\n     * @return     the unsigned {@code long} represented by the string\n     *             argument in the specified radix.\n     * @throws     NumberFormatException if the {@code String}\n     *             does not contain a parsable {@code long}.\n     * @since 1.8\n     */\n    public static long parseUnsignedLong(String s, int radix)\n                throws NumberFormatException {\n        if (s == null)  {\n            throw new NumberFormatException(\"null\");\n        }\n\n        int len = s.length();\n        if (len > 0) {\n            char firstChar = s.charAt(0);\n            if (firstChar == '-') {\n                throw new\n                    NumberFormatException(String.format(\"Illegal leading minus sign \" +\n                                                       \"on unsigned string %s.\", s));\n            } else {\n                if (len <= 12 || // Long.MAX_VALUE in Character.MAX_RADIX is 13 digits\n                    (radix == 10 && len <= 18) ) { // Long.MAX_VALUE in base 10 is 19 digits\n                    return parseLong(s, radix);\n                }\n\n                // No need for range checks on len due to testing above.\n                long first = parseLong(s.substring(0, len - 1), radix);\n                int second = Character.digit(s.charAt(len - 1), radix);\n                if (second < 0) {\n                    throw new NumberFormatException(\"Bad digit at end of \" + s);\n                }\n                long result = first * radix + second;\n                if (compareUnsigned(result, first) < 0) {\n                    /*\n                     * The maximum unsigned value, (2^64)-1, takes at\n                     * most one more digit to represent than the\n                     * maximum signed value, (2^63)-1.  Therefore,\n                     * parsing (len - 1) digits will be appropriately\n                     * in-range of the signed parsing.  In other\n                     * words, if parsing (len -1) digits overflows\n                     * signed parsing, parsing len digits will\n                     * certainly overflow unsigned parsing.\n                     *\n                     * The compareUnsigned check above catches\n                     * situations where an unsigned overflow occurs\n                     * incorporating the contribution of the final\n                     * digit.\n                     */\n                    throw new NumberFormatException(String.format(\"String value %s exceeds \" +\n                                                                  \"range of unsigned long.\", s));\n                }\n                return result;\n            }\n        } else {\n            throw NumberFormatException.forInputString(s);\n        }\n    }"}
{"Number":"170","API Relative Path":"java.lang.Long.java-parseUnsignedLong(String-int)","Corresponding Source":"/**\n     * Parses the string argument as an unsigned {@code long} in the\n     * radix specified by the second argument.  An unsigned integer\n     * maps the values usually associated with negative numbers to\n     * positive numbers larger than {@code MAX_VALUE}.\n     *\n     * The characters in the string must all be digits of the\n     * specified radix (as determined by whether {@link\n     * java.lang.Character#digit(char, int)} returns a nonnegative\n     * value), except that the first character may be an ASCII plus\n     * sign {@code '+'} ({@code '\\u005Cu002B'}). The resulting\n     * integer value is returned.\n     *\n     * <p>An exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * <ul>\n     * <li>The first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * <li>The radix is either smaller than\n     * {@link java.lang.Character#MIN_RADIX} or\n     * larger than {@link java.lang.Character#MAX_RADIX}.\n     *\n     * <li>Any character of the string is not a digit of the specified\n     * radix, except that the first character may be a plus sign\n     * {@code '+'} ({@code '\\u005Cu002B'}) provided that the\n     * string is longer than length 1.\n     *\n     * <li>The value represented by the string is larger than the\n     * largest unsigned {@code long}, 2<sup>64<\/sup>-1.\n     *\n     * <\/ul>\n     *\n     *\n     * @param      s   the {@code String} containing the unsigned integer\n     *                  representation to be parsed\n     * @param      radix   the radix to be used while parsing {@code s}.\n     * @return     the unsigned {@code long} represented by the string\n     *             argument in the specified radix.\n     * @throws     NumberFormatException if the {@code String}\n     *             does not contain a parsable {@code long}.\n     * @since 1.8\n     */\n    public static long parseUnsignedLong(String s, int radix)\n                throws NumberFormatException {\n        if (s == null)  {\n            throw new NumberFormatException(\"null\");\n        }\n\n        int len = s.length();\n        if (len > 0) {\n            char firstChar = s.charAt(0);\n            if (firstChar == '-') {\n                throw new\n                    NumberFormatException(String.format(\"Illegal leading minus sign \" +\n                                                       \"on unsigned string %s.\", s));\n            } else {\n                if (len <= 12 || // Long.MAX_VALUE in Character.MAX_RADIX is 13 digits\n                    (radix == 10 && len <= 18) ) { // Long.MAX_VALUE in base 10 is 19 digits\n                    return parseLong(s, radix);\n                }\n\n                // No need for range checks on len due to testing above.\n                long first = parseLong(s.substring(0, len - 1), radix);\n                int second = Character.digit(s.charAt(len - 1), radix);\n                if (second < 0) {\n                    throw new NumberFormatException(\"Bad digit at end of \" + s);\n                }\n                long result = first * radix + second;\n                if (compareUnsigned(result, first) < 0) {\n                    /*\n                     * The maximum unsigned value, (2^64)-1, takes at\n                     * most one more digit to represent than the\n                     * maximum signed value, (2^63)-1.  Therefore,\n                     * parsing (len - 1) digits will be appropriately\n                     * in-range of the signed parsing.  In other\n                     * words, if parsing (len -1) digits overflows\n                     * signed parsing, parsing len digits will\n                     * certainly overflow unsigned parsing.\n                     *\n                     * The compareUnsigned check above catches\n                     * situations where an unsigned overflow occurs\n                     * incorporating the contribution of the final\n                     * digit.\n                     */\n                    throw new NumberFormatException(String.format(\"String value %s exceeds \" +\n                                                                  \"range of unsigned long.\", s));\n                }\n                return result;\n            }\n        } else {\n            throw NumberFormatException.forInputString(s);\n        }\n    }"}
{"Number":"171","API Relative Path":"java.lang.Long.java-parseUnsignedLong(String-int)","Corresponding Source":"/**\n     * Parses the string argument as an unsigned {@code long} in the\n     * radix specified by the second argument.  An unsigned integer\n     * maps the values usually associated with negative numbers to\n     * positive numbers larger than {@code MAX_VALUE}.\n     *\n     * The characters in the string must all be digits of the\n     * specified radix (as determined by whether {@link\n     * java.lang.Character#digit(char, int)} returns a nonnegative\n     * value), except that the first character may be an ASCII plus\n     * sign {@code '+'} ({@code '\\u005Cu002B'}). The resulting\n     * integer value is returned.\n     *\n     * <p>An exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * <ul>\n     * <li>The first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * <li>The radix is either smaller than\n     * {@link java.lang.Character#MIN_RADIX} or\n     * larger than {@link java.lang.Character#MAX_RADIX}.\n     *\n     * <li>Any character of the string is not a digit of the specified\n     * radix, except that the first character may be a plus sign\n     * {@code '+'} ({@code '\\u005Cu002B'}) provided that the\n     * string is longer than length 1.\n     *\n     * <li>The value represented by the string is larger than the\n     * largest unsigned {@code long}, 2<sup>64<\/sup>-1.\n     *\n     * <\/ul>\n     *\n     *\n     * @param      s   the {@code String} containing the unsigned integer\n     *                  representation to be parsed\n     * @param      radix   the radix to be used while parsing {@code s}.\n     * @return     the unsigned {@code long} represented by the string\n     *             argument in the specified radix.\n     * @throws     NumberFormatException if the {@code String}\n     *             does not contain a parsable {@code long}.\n     * @since 1.8\n     */\n    public static long parseUnsignedLong(String s, int radix)\n                throws NumberFormatException {\n        if (s == null)  {\n            throw new NumberFormatException(\"null\");\n        }\n\n        int len = s.length();\n        if (len > 0) {\n            char firstChar = s.charAt(0);\n            if (firstChar == '-') {\n                throw new\n                    NumberFormatException(String.format(\"Illegal leading minus sign \" +\n                                                       \"on unsigned string %s.\", s));\n            } else {\n                if (len <= 12 || // Long.MAX_VALUE in Character.MAX_RADIX is 13 digits\n                    (radix == 10 && len <= 18) ) { // Long.MAX_VALUE in base 10 is 19 digits\n                    return parseLong(s, radix);\n                }\n\n                // No need for range checks on len due to testing above.\n                long first = parseLong(s.substring(0, len - 1), radix);\n                int second = Character.digit(s.charAt(len - 1), radix);\n                if (second < 0) {\n                    throw new NumberFormatException(\"Bad digit at end of \" + s);\n                }\n                long result = first * radix + second;\n                if (compareUnsigned(result, first) < 0) {\n                    /*\n                     * The maximum unsigned value, (2^64)-1, takes at\n                     * most one more digit to represent than the\n                     * maximum signed value, (2^63)-1.  Therefore,\n                     * parsing (len - 1) digits will be appropriately\n                     * in-range of the signed parsing.  In other\n                     * words, if parsing (len -1) digits overflows\n                     * signed parsing, parsing len digits will\n                     * certainly overflow unsigned parsing.\n                     *\n                     * The compareUnsigned check above catches\n                     * situations where an unsigned overflow occurs\n                     * incorporating the contribution of the final\n                     * digit.\n                     */\n                    throw new NumberFormatException(String.format(\"String value %s exceeds \" +\n                                                                  \"range of unsigned long.\", s));\n                }\n                return result;\n            }\n        } else {\n            throw NumberFormatException.forInputString(s);\n        }\n    }"}
{"Number":"172","API Relative Path":"java.lang.Long.java-parseUnsignedLong(String-int)","Corresponding Source":"/**\n     * Parses the string argument as an unsigned {@code long} in the\n     * radix specified by the second argument.  An unsigned integer\n     * maps the values usually associated with negative numbers to\n     * positive numbers larger than {@code MAX_VALUE}.\n     *\n     * The characters in the string must all be digits of the\n     * specified radix (as determined by whether {@link\n     * java.lang.Character#digit(char, int)} returns a nonnegative\n     * value), except that the first character may be an ASCII plus\n     * sign {@code '+'} ({@code '\\u005Cu002B'}). The resulting\n     * integer value is returned.\n     *\n     * <p>An exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * <ul>\n     * <li>The first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * <li>The radix is either smaller than\n     * {@link java.lang.Character#MIN_RADIX} or\n     * larger than {@link java.lang.Character#MAX_RADIX}.\n     *\n     * <li>Any character of the string is not a digit of the specified\n     * radix, except that the first character may be a plus sign\n     * {@code '+'} ({@code '\\u005Cu002B'}) provided that the\n     * string is longer than length 1.\n     *\n     * <li>The value represented by the string is larger than the\n     * largest unsigned {@code long}, 2<sup>64<\/sup>-1.\n     *\n     * <\/ul>\n     *\n     *\n     * @param      s   the {@code String} containing the unsigned integer\n     *                  representation to be parsed\n     * @param      radix   the radix to be used while parsing {@code s}.\n     * @return     the unsigned {@code long} represented by the string\n     *             argument in the specified radix.\n     * @throws     NumberFormatException if the {@code String}\n     *             does not contain a parsable {@code long}.\n     * @since 1.8\n     */\n    public static long parseUnsignedLong(String s, int radix)\n                throws NumberFormatException {\n        if (s == null)  {\n            throw new NumberFormatException(\"null\");\n        }\n\n        int len = s.length();\n        if (len > 0) {\n            char firstChar = s.charAt(0);\n            if (firstChar == '-') {\n                throw new\n                    NumberFormatException(String.format(\"Illegal leading minus sign \" +\n                                                       \"on unsigned string %s.\", s));\n            } else {\n                if (len <= 12 || // Long.MAX_VALUE in Character.MAX_RADIX is 13 digits\n                    (radix == 10 && len <= 18) ) { // Long.MAX_VALUE in base 10 is 19 digits\n                    return parseLong(s, radix);\n                }\n\n                // No need for range checks on len due to testing above.\n                long first = parseLong(s.substring(0, len - 1), radix);\n                int second = Character.digit(s.charAt(len - 1), radix);\n                if (second < 0) {\n                    throw new NumberFormatException(\"Bad digit at end of \" + s);\n                }\n                long result = first * radix + second;\n                if (compareUnsigned(result, first) < 0) {\n                    /*\n                     * The maximum unsigned value, (2^64)-1, takes at\n                     * most one more digit to represent than the\n                     * maximum signed value, (2^63)-1.  Therefore,\n                     * parsing (len - 1) digits will be appropriately\n                     * in-range of the signed parsing.  In other\n                     * words, if parsing (len -1) digits overflows\n                     * signed parsing, parsing len digits will\n                     * certainly overflow unsigned parsing.\n                     *\n                     * The compareUnsigned check above catches\n                     * situations where an unsigned overflow occurs\n                     * incorporating the contribution of the final\n                     * digit.\n                     */\n                    throw new NumberFormatException(String.format(\"String value %s exceeds \" +\n                                                                  \"range of unsigned long.\", s));\n                }\n                return result;\n            }\n        } else {\n            throw NumberFormatException.forInputString(s);\n        }\n    }"}
{"Number":"173","API Relative Path":"java.lang.Long.java-valueOf(String)","Corresponding Source":"/**\n     * Returns a {@code Long} object holding the value\n     * of the specified {@code String}. The argument is\n     * interpreted as representing a signed decimal {@code long},\n     * exactly as if the argument were given to the {@link\n     * #parseLong(java.lang.String)} method. The result is a\n     * {@code Long} object that represents the integer value\n     * specified by the string.\n     *\n     * <p>In other words, this method returns a {@code Long} object\n     * equal to the value of:\n     *\n     * <blockquote>\n     *  {@code new Long(Long.parseLong(s))}\n     * <\/blockquote>\n     *\n     * @param      s   the string to be parsed.\n     * @return     a {@code Long} object holding the value\n     *             represented by the string argument.\n     * @throws     NumberFormatException  If the string cannot be parsed\n     *             as a {@code long}.\n     */\n    public static Long valueOf(String s) throws NumberFormatException\n    {\n        return Long.valueOf(parseLong(s, 10));\n    }"}
{"Number":"174","API Relative Path":"java.lang.Long.java-valueOf(String-int)","Corresponding Source":"/**\n     * Returns a {@code Long} object holding the value\n     * extracted from the specified {@code String} when parsed\n     * with the radix given by the second argument.  The first\n     * argument is interpreted as representing a signed\n     * {@code long} in the radix specified by the second\n     * argument, exactly as if the arguments were given to the {@link\n     * #parseLong(java.lang.String, int)} method. The result is a\n     * {@code Long} object that represents the {@code long}\n     * value specified by the string.\n     *\n     * <p>In other words, this method returns a {@code Long} object equal\n     * to the value of:\n     *\n     * <blockquote>\n     *  {@code new Long(Long.parseLong(s, radix))}\n     * <\/blockquote>\n     *\n     * @param      s       the string to be parsed\n     * @param      radix   the radix to be used in interpreting {@code s}\n     * @return     a {@code Long} object holding the value\n     *             represented by the string argument in the specified\n     *             radix.\n     * @throws     NumberFormatException  If the {@code String} does not\n     *             contain a parsable {@code long}.\n     */\n    public static Long valueOf(String s, int radix) throws NumberFormatException {\n        return Long.valueOf(parseLong(s, radix));\n    }"}
{"Number":"175","API Relative Path":"java.lang.Long.java-valueOf(String-int)","Corresponding Source":"/**\n     * Returns a {@code Long} object holding the value\n     * extracted from the specified {@code String} when parsed\n     * with the radix given by the second argument.  The first\n     * argument is interpreted as representing a signed\n     * {@code long} in the radix specified by the second\n     * argument, exactly as if the arguments were given to the {@link\n     * #parseLong(java.lang.String, int)} method. The result is a\n     * {@code Long} object that represents the {@code long}\n     * value specified by the string.\n     *\n     * <p>In other words, this method returns a {@code Long} object equal\n     * to the value of:\n     *\n     * <blockquote>\n     *  {@code new Long(Long.parseLong(s, radix))}\n     * <\/blockquote>\n     *\n     * @param      s       the string to be parsed\n     * @param      radix   the radix to be used in interpreting {@code s}\n     * @return     a {@code Long} object holding the value\n     *             represented by the string argument in the specified\n     *             radix.\n     * @throws     NumberFormatException  If the {@code String} does not\n     *             contain a parsable {@code long}.\n     */\n    public static Long valueOf(String s, int radix) throws NumberFormatException {\n        return Long.valueOf(parseLong(s, radix));\n    }"}
{"Number":"176","API Relative Path":"java.lang.Long.java-valueOf(String-int)","Corresponding Source":"/**\n     * Returns a {@code Long} object holding the value\n     * extracted from the specified {@code String} when parsed\n     * with the radix given by the second argument.  The first\n     * argument is interpreted as representing a signed\n     * {@code long} in the radix specified by the second\n     * argument, exactly as if the arguments were given to the {@link\n     * #parseLong(java.lang.String, int)} method. The result is a\n     * {@code Long} object that represents the {@code long}\n     * value specified by the string.\n     *\n     * <p>In other words, this method returns a {@code Long} object equal\n     * to the value of:\n     *\n     * <blockquote>\n     *  {@code new Long(Long.parseLong(s, radix))}\n     * <\/blockquote>\n     *\n     * @param      s       the string to be parsed\n     * @param      radix   the radix to be used in interpreting {@code s}\n     * @return     a {@code Long} object holding the value\n     *             represented by the string argument in the specified\n     *             radix.\n     * @throws     NumberFormatException  If the {@code String} does not\n     *             contain a parsable {@code long}.\n     */\n    public static Long valueOf(String s, int radix) throws NumberFormatException {\n        return Long.valueOf(parseLong(s, radix));\n    }"}
{"Number":"177","API Relative Path":"java.lang.management.LockInfo.java-from(CompositeData)","Corresponding Source":"/**\n     * Returns a {@code LockInfo} object represented by the\n     * given {@code CompositeData}.\n     * The given {@code CompositeData} must contain the following attributes:\n     * <blockquote>\n     * <table border summary=\"The attributes and the types the given CompositeData contains\">\n     * <tr>\n     *   <th align=left>Attribute Name<\/th>\n     *   <th align=left>Type<\/th>\n     * <\/tr>\n     * <tr>\n     *   <td>className<\/td>\n     *   <td><tt>java.lang.String<\/tt><\/td>\n     * <\/tr>\n     * <tr>\n     *   <td>identityHashCode<\/td>\n     *   <td><tt>java.lang.Integer<\/tt><\/td>\n     * <\/tr>\n     * <\/table>\n     * <\/blockquote>\n     *\n     * @param cd {@code CompositeData} representing a {@code LockInfo}\n     *\n     * @throws IllegalArgumentException if {@code cd} does not\n     *   represent a {@code LockInfo} with the attributes described\n     *   above.\n     * @return a {@code LockInfo} object represented\n     *         by {@code cd} if {@code cd} is not {@code null};\n     *         {@code null} otherwise.\n     *\n     * @since 1.8\n     */\n    public static LockInfo from(CompositeData cd) {\n        if (cd == null) {\n            return null;\n        }\n\n        if (cd instanceof LockInfoCompositeData) {\n            return ((LockInfoCompositeData) cd).getLockInfo();\n        } else {\n            return LockInfoCompositeData.toLockInfo(cd);\n        }\n    }"}
{"Number":"178","API Relative Path":"java.lang.management.LockInfo.java-LockInfo(String-int)","Corresponding Source":"/**\n     * Constructs a <tt>LockInfo<\/tt> object.\n     *\n     * @param className the fully qualified name of the class of the lock object.\n     * @param identityHashCode the {@link System#identityHashCode\n     *                         identity hash code} of the lock object.\n     */\n    public LockInfo(String className, int identityHashCode) {\n        if (className == null) {\n            throw new NullPointerException(\"Parameter className cannot be null\");\n        }\n        this.className = className;\n        this.identityHashCode = identityHashCode;\n    }"}
{"Number":"179","API Relative Path":"java.lang.management.MemoryNotificationInfo.java-from(CompositeData)","Corresponding Source":"/**\n     * Returns a <tt>MemoryNotificationInfo<\/tt> object represented by the\n     * given <tt>CompositeData<\/tt>.\n     * The given <tt>CompositeData<\/tt> must contain\n     * the following attributes:\n     * <blockquote>\n     * <table border summary=\"The attributes and the types the given CompositeData contains\">\n     * <tr>\n     *   <th align=left>Attribute Name<\/th>\n     *   <th align=left>Type<\/th>\n     * <\/tr>\n     * <tr>\n     *   <td>poolName<\/td>\n     *   <td><tt>java.lang.String<\/tt><\/td>\n     * <\/tr>\n     * <tr>\n     *   <td>usage<\/td>\n     *   <td><tt>javax.management.openmbean.CompositeData<\/tt><\/td>\n     * <\/tr>\n     * <tr>\n     *   <td>count<\/td>\n     *   <td><tt>java.lang.Long<\/tt><\/td>\n     * <\/tr>\n     * <\/table>\n     * <\/blockquote>\n     *\n     * @param cd <tt>CompositeData<\/tt> representing a\n     *           <tt>MemoryNotificationInfo<\/tt>\n     *\n     * @throws IllegalArgumentException if <tt>cd<\/tt> does not\n     *   represent a <tt>MemoryNotificationInfo<\/tt> object.\n     *\n     * @return a <tt>MemoryNotificationInfo<\/tt> object represented\n     *         by <tt>cd<\/tt> if <tt>cd<\/tt> is not <tt>null<\/tt>;\n     *         <tt>null<\/tt> otherwise.\n     */\n    public static MemoryNotificationInfo from(CompositeData cd) {\n        if (cd == null) {\n            return null;\n        }\n\n        if (cd instanceof MemoryNotifInfoCompositeData) {\n            return ((MemoryNotifInfoCompositeData) cd).getMemoryNotifInfo();\n        } else {\n            return new MemoryNotificationInfo(cd);\n        }\n    }"}
{"Number":"180","API Relative Path":"java.lang.management.MemoryNotificationInfo.java-MemoryNotificationInfo(String-MemoryUsage-long)","Corresponding Source":"/**\n     * Constructs a <tt>MemoryNotificationInfo<\/tt> object.\n     *\n     * @param poolName The name of the memory pool which triggers this notification.\n     * @param usage Memory usage of the memory pool.\n     * @param count The threshold crossing count.\n     */\n    public MemoryNotificationInfo(String poolName,\n                                  MemoryUsage usage,\n                                  long count) {\n        if (poolName == null) {\n            throw new NullPointerException(\"Null poolName\");\n        }\n        if (usage == null) {\n            throw new NullPointerException(\"Null usage\");\n        }\n\n        this.poolName = poolName;\n        this.usage = usage;\n        this.count = count;\n    }"}
{"Number":"181","API Relative Path":"java.lang.management.MemoryNotificationInfo.java-MemoryNotificationInfo(String-MemoryUsage-long)","Corresponding Source":"/**\n     * Constructs a <tt>MemoryNotificationInfo<\/tt> object.\n     *\n     * @param poolName The name of the memory pool which triggers this notification.\n     * @param usage Memory usage of the memory pool.\n     * @param count The threshold crossing count.\n     */\n    public MemoryNotificationInfo(String poolName,\n                                  MemoryUsage usage,\n                                  long count) {\n        if (poolName == null) {\n            throw new NullPointerException(\"Null poolName\");\n        }\n        if (usage == null) {\n            throw new NullPointerException(\"Null usage\");\n        }\n\n        this.poolName = poolName;\n        this.usage = usage;\n        this.count = count;\n    }"}
{"Number":"182","API Relative Path":"java.lang.management.MemoryUsage.java-from(CompositeData)","Corresponding Source":"/**\n     * Returns a <tt>MemoryUsage<\/tt> object represented by the\n     * given <tt>CompositeData<\/tt>. The given <tt>CompositeData<\/tt>\n     * must contain the following attributes:\n     *\n     * <blockquote>\n     * <table border summary=\"The attributes and the types the given CompositeData contains\">\n     * <tr>\n     *   <th align=left>Attribute Name<\/th>\n     *   <th align=left>Type<\/th>\n     * <\/tr>\n     * <tr>\n     *   <td>init<\/td>\n     *   <td><tt>java.lang.Long<\/tt><\/td>\n     * <\/tr>\n     * <tr>\n     *   <td>used<\/td>\n     *   <td><tt>java.lang.Long<\/tt><\/td>\n     * <\/tr>\n     * <tr>\n     *   <td>committed<\/td>\n     *   <td><tt>java.lang.Long<\/tt><\/td>\n     * <\/tr>\n     * <tr>\n     *   <td>max<\/td>\n     *   <td><tt>java.lang.Long<\/tt><\/td>\n     * <\/tr>\n     * <\/table>\n     * <\/blockquote>\n     *\n     * @param cd <tt>CompositeData<\/tt> representing a <tt>MemoryUsage<\/tt>\n     *\n     * @throws IllegalArgumentException if <tt>cd<\/tt> does not\n     *   represent a <tt>MemoryUsage<\/tt> with the attributes described\n     *   above.\n     *\n     * @return a <tt>MemoryUsage<\/tt> object represented by <tt>cd<\/tt>\n     *         if <tt>cd<\/tt> is not <tt>null<\/tt>;\n     *         <tt>null<\/tt> otherwise.\n     */\n    public static MemoryUsage from(CompositeData cd) {\n        if (cd == null) {\n            return null;\n        }\n\n        if (cd instanceof MemoryUsageCompositeData) {\n            return ((MemoryUsageCompositeData) cd).getMemoryUsage();\n        } else {\n            return new MemoryUsage(cd);\n        }\n\n    }"}
{"Number":"183","API Relative Path":"java.lang.management.MemoryUsage.java-MemoryUsage(long-long-long-long)","Corresponding Source":"/**\n     * Constructs a <tt>MemoryUsage<\/tt> object.\n     *\n     * @param init      the initial amount of memory in bytes that\n     *                  the Java virtual machine allocates;\n     *                  or <tt>-1<\/tt> if undefined.\n     * @param used      the amount of used memory in bytes.\n     * @param committed the amount of committed memory in bytes.\n     * @param max       the maximum amount of memory in bytes that\n     *                  can be used; or <tt>-1<\/tt> if undefined.\n     *\n     * @throws IllegalArgumentException if\n     * <ul>\n     * <li> the value of <tt>init<\/tt> or <tt>max<\/tt> is negative\n     *      but not <tt>-1<\/tt>; or<\/li>\n     * <li> the value of <tt>used<\/tt> or <tt>committed<\/tt> is negative;\n     *      or<\/li>\n     * <li> <tt>used<\/tt> is greater than the value of <tt>committed<\/tt>;\n     *      or<\/li>\n     * <li> <tt>committed<\/tt> is greater than the value of <tt>max<\/tt>\n     *      <tt>max<\/tt> if defined.<\/li>\n     * <\/ul>\n     */\n    public MemoryUsage(long init,\n                       long used,\n                       long committed,\n                       long max) {\n        if (init < -1) {\n            throw new IllegalArgumentException( \"init parameter = \" +\n                init + \" is negative but not -1.\");\n        }\n        if (max < -1) {\n            throw new IllegalArgumentException( \"max parameter = \" +\n                max + \" is negative but not -1.\");\n        }\n        if (used < 0) {\n            throw new IllegalArgumentException( \"used parameter = \" +\n                used + \" is negative.\");\n        }\n        if (committed < 0) {\n            throw new IllegalArgumentException( \"committed parameter = \" +\n                committed + \" is negative.\");\n        }\n        if (used > committed) {\n            throw new IllegalArgumentException( \"used = \" + used +\n                \" should be <= committed = \" + committed);\n        }\n        if (max >= 0 && committed > max) {\n            throw new IllegalArgumentException( \"committed = \" + committed +\n                \" should be < max = \" + max);\n        }\n\n        this.init = init;\n        this.used = used;\n        this.committed = committed;\n        this.max = max;\n    }"}
{"Number":"184","API Relative Path":"java.lang.management.MemoryUsage.java-MemoryUsage(long-long-long-long)","Corresponding Source":"/**\n     * Constructs a <tt>MemoryUsage<\/tt> object.\n     *\n     * @param init      the initial amount of memory in bytes that\n     *                  the Java virtual machine allocates;\n     *                  or <tt>-1<\/tt> if undefined.\n     * @param used      the amount of used memory in bytes.\n     * @param committed the amount of committed memory in bytes.\n     * @param max       the maximum amount of memory in bytes that\n     *                  can be used; or <tt>-1<\/tt> if undefined.\n     *\n     * @throws IllegalArgumentException if\n     * <ul>\n     * <li> the value of <tt>init<\/tt> or <tt>max<\/tt> is negative\n     *      but not <tt>-1<\/tt>; or<\/li>\n     * <li> the value of <tt>used<\/tt> or <tt>committed<\/tt> is negative;\n     *      or<\/li>\n     * <li> <tt>used<\/tt> is greater than the value of <tt>committed<\/tt>;\n     *      or<\/li>\n     * <li> <tt>committed<\/tt> is greater than the value of <tt>max<\/tt>\n     *      <tt>max<\/tt> if defined.<\/li>\n     * <\/ul>\n     */\n    public MemoryUsage(long init,\n                       long used,\n                       long committed,\n                       long max) {\n        if (init < -1) {\n            throw new IllegalArgumentException( \"init parameter = \" +\n                init + \" is negative but not -1.\");\n        }\n        if (max < -1) {\n            throw new IllegalArgumentException( \"max parameter = \" +\n                max + \" is negative but not -1.\");\n        }\n        if (used < 0) {\n            throw new IllegalArgumentException( \"used parameter = \" +\n                used + \" is negative.\");\n        }\n        if (committed < 0) {\n            throw new IllegalArgumentException( \"committed parameter = \" +\n                committed + \" is negative.\");\n        }\n        if (used > committed) {\n            throw new IllegalArgumentException( \"used = \" + used +\n                \" should be <= committed = \" + committed);\n        }\n        if (max >= 0 && committed > max) {\n            throw new IllegalArgumentException( \"committed = \" + committed +\n                \" should be < max = \" + max);\n        }\n\n        this.init = init;\n        this.used = used;\n        this.committed = committed;\n        this.max = max;\n    }"}
{"Number":"185","API Relative Path":"java.lang.management.MemoryUsage.java-MemoryUsage(long-long-long-long)","Corresponding Source":"/**\n     * Constructs a <tt>MemoryUsage<\/tt> object.\n     *\n     * @param init      the initial amount of memory in bytes that\n     *                  the Java virtual machine allocates;\n     *                  or <tt>-1<\/tt> if undefined.\n     * @param used      the amount of used memory in bytes.\n     * @param committed the amount of committed memory in bytes.\n     * @param max       the maximum amount of memory in bytes that\n     *                  can be used; or <tt>-1<\/tt> if undefined.\n     *\n     * @throws IllegalArgumentException if\n     * <ul>\n     * <li> the value of <tt>init<\/tt> or <tt>max<\/tt> is negative\n     *      but not <tt>-1<\/tt>; or<\/li>\n     * <li> the value of <tt>used<\/tt> or <tt>committed<\/tt> is negative;\n     *      or<\/li>\n     * <li> <tt>used<\/tt> is greater than the value of <tt>committed<\/tt>;\n     *      or<\/li>\n     * <li> <tt>committed<\/tt> is greater than the value of <tt>max<\/tt>\n     *      <tt>max<\/tt> if defined.<\/li>\n     * <\/ul>\n     */\n    public MemoryUsage(long init,\n                       long used,\n                       long committed,\n                       long max) {\n        if (init < -1) {\n            throw new IllegalArgumentException( \"init parameter = \" +\n                init + \" is negative but not -1.\");\n        }\n        if (max < -1) {\n            throw new IllegalArgumentException( \"max parameter = \" +\n                max + \" is negative but not -1.\");\n        }\n        if (used < 0) {\n            throw new IllegalArgumentException( \"used parameter = \" +\n                used + \" is negative.\");\n        }\n        if (committed < 0) {\n            throw new IllegalArgumentException( \"committed parameter = \" +\n                committed + \" is negative.\");\n        }\n        if (used > committed) {\n            throw new IllegalArgumentException( \"used = \" + used +\n                \" should be <= committed = \" + committed);\n        }\n        if (max >= 0 && committed > max) {\n            throw new IllegalArgumentException( \"committed = \" + committed +\n                \" should be < max = \" + max);\n        }\n\n        this.init = init;\n        this.used = used;\n        this.committed = committed;\n        this.max = max;\n    }"}
{"Number":"186","API Relative Path":"java.lang.management.MemoryUsage.java-MemoryUsage(long-long-long-long)","Corresponding Source":"/**\n     * Constructs a <tt>MemoryUsage<\/tt> object.\n     *\n     * @param init      the initial amount of memory in bytes that\n     *                  the Java virtual machine allocates;\n     *                  or <tt>-1<\/tt> if undefined.\n     * @param used      the amount of used memory in bytes.\n     * @param committed the amount of committed memory in bytes.\n     * @param max       the maximum amount of memory in bytes that\n     *                  can be used; or <tt>-1<\/tt> if undefined.\n     *\n     * @throws IllegalArgumentException if\n     * <ul>\n     * <li> the value of <tt>init<\/tt> or <tt>max<\/tt> is negative\n     *      but not <tt>-1<\/tt>; or<\/li>\n     * <li> the value of <tt>used<\/tt> or <tt>committed<\/tt> is negative;\n     *      or<\/li>\n     * <li> <tt>used<\/tt> is greater than the value of <tt>committed<\/tt>;\n     *      or<\/li>\n     * <li> <tt>committed<\/tt> is greater than the value of <tt>max<\/tt>\n     *      <tt>max<\/tt> if defined.<\/li>\n     * <\/ul>\n     */\n    public MemoryUsage(long init,\n                       long used,\n                       long committed,\n                       long max) {\n        if (init < -1) {\n            throw new IllegalArgumentException( \"init parameter = \" +\n                init + \" is negative but not -1.\");\n        }\n        if (max < -1) {\n            throw new IllegalArgumentException( \"max parameter = \" +\n                max + \" is negative but not -1.\");\n        }\n        if (used < 0) {\n            throw new IllegalArgumentException( \"used parameter = \" +\n                used + \" is negative.\");\n        }\n        if (committed < 0) {\n            throw new IllegalArgumentException( \"committed parameter = \" +\n                committed + \" is negative.\");\n        }\n        if (used > committed) {\n            throw new IllegalArgumentException( \"used = \" + used +\n                \" should be <= committed = \" + committed);\n        }\n        if (max >= 0 && committed > max) {\n            throw new IllegalArgumentException( \"committed = \" + committed +\n                \" should be < max = \" + max);\n        }\n\n        this.init = init;\n        this.used = used;\n        this.committed = committed;\n        this.max = max;\n    }"}
{"Number":"187","API Relative Path":"java.lang.management.MonitorInfo.java-from(CompositeData)","Corresponding Source":"/**\n     * Returns a <tt>MonitorInfo<\/tt> object represented by the\n     * given <tt>CompositeData<\/tt>.\n     * The given <tt>CompositeData<\/tt> must contain the following attributes\n     * as well as the attributes specified in the\n     * <a href=\"LockInfo.html#MappedType\">\n     * mapped type<\/a> for the {@link LockInfo} class:\n     * <blockquote>\n     * <table border summary=\"The attributes and their types the given CompositeData contains\">\n     * <tr>\n     *   <th align=left>Attribute Name<\/th>\n     *   <th align=left>Type<\/th>\n     * <\/tr>\n     * <tr>\n     *   <td>lockedStackFrame<\/td>\n     *   <td><tt>CompositeData as specified in the\n     *       <a href=\"ThreadInfo.html#StackTrace\">stackTrace<\/a>\n     *       attribute defined in the {@link ThreadInfo#from\n     *       ThreadInfo.from} method.\n     *       <\/tt><\/td>\n     * <\/tr>\n     * <tr>\n     *   <td>lockedStackDepth<\/td>\n     *   <td><tt>java.lang.Integer<\/tt><\/td>\n     * <\/tr>\n     * <\/table>\n     * <\/blockquote>\n     *\n     * @param cd <tt>CompositeData<\/tt> representing a <tt>MonitorInfo<\/tt>\n     *\n     * @throws IllegalArgumentException if <tt>cd<\/tt> does not\n     *   represent a <tt>MonitorInfo<\/tt> with the attributes described\n     *   above.\n\n     * @return a <tt>MonitorInfo<\/tt> object represented\n     *         by <tt>cd<\/tt> if <tt>cd<\/tt> is not <tt>null<\/tt>;\n     *         <tt>null<\/tt> otherwise.\n     */\n    public static MonitorInfo from(CompositeData cd) {\n        if (cd == null) {\n            return null;\n        }\n\n        if (cd instanceof MonitorInfoCompositeData) {\n            return ((MonitorInfoCompositeData) cd).getMonitorInfo();\n        } else {\n            MonitorInfoCompositeData.validateCompositeData(cd);\n            String className = MonitorInfoCompositeData.getClassName(cd);\n            int identityHashCode = MonitorInfoCompositeData.getIdentityHashCode(cd);\n            int stackDepth = MonitorInfoCompositeData.getLockedStackDepth(cd);\n            StackTraceElement stackFrame = MonitorInfoCompositeData.getLockedStackFrame(cd);\n            return new MonitorInfo(className,\n                                   identityHashCode,\n                                   stackDepth,\n                                   stackFrame);\n        }\n    }"}
{"Number":"188","API Relative Path":"java.lang.management.MonitorInfo.java-MonitorInfo(String-int-int-StackTraceElement)","Corresponding Source":"/**\n     * Construct a <tt>MonitorInfo<\/tt> object.\n     *\n     * @param className the fully qualified name of the class of the lock object.\n     * @param identityHashCode the {@link System#identityHashCode\n     *                         identity hash code} of the lock object.\n     * @param stackDepth the depth in the stack trace where the object monitor\n     *                   was locked.\n     * @param stackFrame the stack frame that locked the object monitor.\n     * @throws IllegalArgumentException if\n     *    <tt>stackDepth<\/tt> &ge; 0 but <tt>stackFrame<\/tt> is <tt>null<\/tt>,\n     *    or <tt>stackDepth<\/tt> &lt; 0 but <tt>stackFrame<\/tt> is not\n     *       <tt>null<\/tt>.\n     */\n    public MonitorInfo(String className,\n                       int identityHashCode,\n                       int stackDepth,\n                       StackTraceElement stackFrame) {\n        super(className, identityHashCode);\n        if (stackDepth >= 0 && stackFrame == null) {\n            throw new IllegalArgumentException(\"Parameter stackDepth is \" +\n                stackDepth + \" but stackFrame is null\");\n        }\n        if (stackDepth < 0 && stackFrame != null) {\n            throw new IllegalArgumentException(\"Parameter stackDepth is \" +\n                stackDepth + \" but stackFrame is not null\");\n        }\n        this.stackDepth = stackDepth;\n        this.stackFrame = stackFrame;\n    }"}
{"Number":"189","API Relative Path":"java.lang.management.MonitorInfo.java-MonitorInfo(String-int-int-StackTraceElement)","Corresponding Source":"/**\n     * Construct a <tt>MonitorInfo<\/tt> object.\n     *\n     * @param className the fully qualified name of the class of the lock object.\n     * @param identityHashCode the {@link System#identityHashCode\n     *                         identity hash code} of the lock object.\n     * @param stackDepth the depth in the stack trace where the object monitor\n     *                   was locked.\n     * @param stackFrame the stack frame that locked the object monitor.\n     * @throws IllegalArgumentException if\n     *    <tt>stackDepth<\/tt> &ge; 0 but <tt>stackFrame<\/tt> is <tt>null<\/tt>,\n     *    or <tt>stackDepth<\/tt> &lt; 0 but <tt>stackFrame<\/tt> is not\n     *       <tt>null<\/tt>.\n     */\n    public MonitorInfo(String className,\n                       int identityHashCode,\n                       int stackDepth,\n                       StackTraceElement stackFrame) {\n        super(className, identityHashCode);\n        if (stackDepth >= 0 && stackFrame == null) {\n            throw new IllegalArgumentException(\"Parameter stackDepth is \" +\n                stackDepth + \" but stackFrame is null\");\n        }\n        if (stackDepth < 0 && stackFrame != null) {\n            throw new IllegalArgumentException(\"Parameter stackDepth is \" +\n                stackDepth + \" but stackFrame is not null\");\n        }\n        this.stackDepth = stackDepth;\n        this.stackFrame = stackFrame;\n    }"}
{"Number":"190","API Relative Path":"java.lang.management.ThreadInfo.java-from(CompositeData)","Corresponding Source":"/**\n     * Returns a <tt>ThreadInfo<\/tt> object represented by the\n     * given <tt>CompositeData<\/tt>.\n     * The given <tt>CompositeData<\/tt> must contain the following attributes\n     * unless otherwise specified below:\n     * <blockquote>\n     * <table border summary=\"The attributes and their types the given CompositeData contains\">\n     * <tr>\n     *   <th align=left>Attribute Name<\/th>\n     *   <th align=left>Type<\/th>\n     * <\/tr>\n     * <tr>\n     *   <td>threadId<\/td>\n     *   <td><tt>java.lang.Long<\/tt><\/td>\n     * <\/tr>\n     * <tr>\n     *   <td>threadName<\/td>\n     *   <td><tt>java.lang.String<\/tt><\/td>\n     * <\/tr>\n     * <tr>\n     *   <td>threadState<\/td>\n     *   <td><tt>java.lang.String<\/tt><\/td>\n     * <\/tr>\n     * <tr>\n     *   <td>suspended<\/td>\n     *   <td><tt>java.lang.Boolean<\/tt><\/td>\n     * <\/tr>\n     * <tr>\n     *   <td>inNative<\/td>\n     *   <td><tt>java.lang.Boolean<\/tt><\/td>\n     * <\/tr>\n     * <tr>\n     *   <td>blockedCount<\/td>\n     *   <td><tt>java.lang.Long<\/tt><\/td>\n     * <\/tr>\n     * <tr>\n     *   <td>blockedTime<\/td>\n     *   <td><tt>java.lang.Long<\/tt><\/td>\n     * <\/tr>\n     * <tr>\n     *   <td>waitedCount<\/td>\n     *   <td><tt>java.lang.Long<\/tt><\/td>\n     * <\/tr>\n     * <tr>\n     *   <td>waitedTime<\/td>\n     *   <td><tt>java.lang.Long<\/tt><\/td>\n     * <\/tr>\n     * <tr>\n     *   <td>lockInfo<\/td>\n     *   <td><tt>javax.management.openmbean.CompositeData<\/tt>\n     *       - the mapped type for {@link LockInfo} as specified in the\n     *         {@link LockInfo#from} method.\n     *       <p>\n     *       If <tt>cd<\/tt> does not contain this attribute,\n     *       the <tt>LockInfo<\/tt> object will be constructed from\n     *       the value of the <tt>lockName<\/tt> attribute. <\/td>\n     * <\/tr>\n     * <tr>\n     *   <td>lockName<\/td>\n     *   <td><tt>java.lang.String<\/tt><\/td>\n     * <\/tr>\n     * <tr>\n     *   <td>lockOwnerId<\/td>\n     *   <td><tt>java.lang.Long<\/tt><\/td>\n     * <\/tr>\n     * <tr>\n     *   <td>lockOwnerName<\/td>\n     *   <td><tt>java.lang.String<\/tt><\/td>\n     * <\/tr>\n     * <tr>\n     *   <td><a name=\"StackTrace\">stackTrace<\/a><\/td>\n     *   <td><tt>javax.management.openmbean.CompositeData[]<\/tt>\n     *       <p>\n     *       Each element is a <tt>CompositeData<\/tt> representing\n     *       StackTraceElement containing the following attributes:\n     *       <blockquote>\n     *       <table cellspacing=1 cellpadding=0 summary=\"The attributes and their types the given CompositeData contains\">\n     *       <tr>\n     *         <th align=left>Attribute Name<\/th>\n     *         <th align=left>Type<\/th>\n     *       <\/tr>\n     *       <tr>\n     *         <td>className<\/td>\n     *         <td><tt>java.lang.String<\/tt><\/td>\n     *       <\/tr>\n     *       <tr>\n     *         <td>methodName<\/td>\n     *         <td><tt>java.lang.String<\/tt><\/td>\n     *       <\/tr>\n     *       <tr>\n     *         <td>fileName<\/td>\n     *         <td><tt>java.lang.String<\/tt><\/td>\n     *       <\/tr>\n     *       <tr>\n     *         <td>lineNumber<\/td>\n     *         <td><tt>java.lang.Integer<\/tt><\/td>\n     *       <\/tr>\n     *       <tr>\n     *         <td>nativeMethod<\/td>\n     *         <td><tt>java.lang.Boolean<\/tt><\/td>\n     *       <\/tr>\n     *       <\/table>\n     *       <\/blockquote>\n     *   <\/td>\n     * <\/tr>\n     * <tr>\n     *   <td>lockedMonitors<\/td>\n     *   <td><tt>javax.management.openmbean.CompositeData[]<\/tt>\n     *       whose element type is the mapped type for\n     *       {@link MonitorInfo} as specified in the\n     *       {@link MonitorInfo#from Monitor.from} method.\n     *       <p>\n     *       If <tt>cd<\/tt> does not contain this attribute,\n     *       this attribute will be set to an empty array. <\/td>\n     * <\/tr>\n     * <tr>\n     *   <td>lockedSynchronizers<\/td>\n     *   <td><tt>javax.management.openmbean.CompositeData[]<\/tt>\n     *       whose element type is the mapped type for\n     *       {@link LockInfo} as specified in the {@link LockInfo#from} method.\n     *       <p>\n     *       If <tt>cd<\/tt> does not contain this attribute,\n     *       this attribute will be set to an empty array. <\/td>\n     * <\/tr>\n     * <\/table>\n     * <\/blockquote>\n     *\n     * @param cd <tt>CompositeData<\/tt> representing a <tt>ThreadInfo<\/tt>\n     *\n     * @throws IllegalArgumentException if <tt>cd<\/tt> does not\n     *   represent a <tt>ThreadInfo<\/tt> with the attributes described\n     *   above.\n     *\n     * @return a <tt>ThreadInfo<\/tt> object represented\n     *         by <tt>cd<\/tt> if <tt>cd<\/tt> is not <tt>null<\/tt>;\n     *         <tt>null<\/tt> otherwise.\n     */\n    public static ThreadInfo from(CompositeData cd) {\n        if (cd == null) {\n            return null;\n        }\n\n        if (cd instanceof ThreadInfoCompositeData) {\n            return ((ThreadInfoCompositeData) cd).getThreadInfo();\n        } else {\n            return new ThreadInfo(cd);\n        }\n    }"}
{"Number":"191","API Relative Path":"java.lang.Math.java-addExact(int-int)","Corresponding Source":"/**\n     * Returns the sum of its arguments,\n     * throwing an exception if the result overflows an {@code int}.\n     *\n     * @param x the first value\n     * @param y the second value\n     * @return the result\n     * @throws ArithmeticException if the result overflows an int\n     * @since 1.8\n     */\n    public static int addExact(int x, int y) {\n        int r = x + y;\n        // HD 2-12 Overflow iff both arguments have the opposite sign of the result\n        if (((x ^ r) & (y ^ r)) < 0) {\n            throw new ArithmeticException(\"integer overflow\");\n        }\n        return r;\n    }"}
{"Number":"192","API Relative Path":"java.lang.Math.java-addExact(long-long)","Corresponding Source":"/**\n     * Returns the sum of its arguments,\n     * throwing an exception if the result overflows a {@code long}.\n     *\n     * @param x the first value\n     * @param y the second value\n     * @return the result\n     * @throws ArithmeticException if the result overflows a long\n     * @since 1.8\n     */\n    public static long addExact(long x, long y) {\n        long r = x + y;\n        // HD 2-12 Overflow iff both arguments have the opposite sign of the result\n        if (((x ^ r) & (y ^ r)) < 0) {\n            throw new ArithmeticException(\"long overflow\");\n        }\n        return r;\n    }"}
{"Number":"193","API Relative Path":"java.lang.Math.java-decrementExact(int)","Corresponding Source":"/**\n     * Returns the argument decremented by one, throwing an exception if the\n     * result overflows an {@code int}.\n     *\n     * @param a the value to decrement\n     * @return the result\n     * @throws ArithmeticException if the result overflows an int\n     * @since 1.8\n     */\n    public static int decrementExact(int a) {\n        if (a == Integer.MIN_VALUE) {\n            throw new ArithmeticException(\"integer overflow\");\n        }\n\n        return a - 1;\n    }"}
{"Number":"194","API Relative Path":"java.lang.Math.java-decrementExact(long)","Corresponding Source":"/**\n     * Returns the argument decremented by one, throwing an exception if the\n     * result overflows a {@code long}.\n     *\n     * @param a the value to decrement\n     * @return the result\n     * @throws ArithmeticException if the result overflows a long\n     * @since 1.8\n     */\n    public static long decrementExact(long a) {\n        if (a == Long.MIN_VALUE) {\n            throw new ArithmeticException(\"long overflow\");\n        }\n\n        return a - 1L;\n    }"}
{"Number":"195","API Relative Path":"java.lang.Math.java-incrementExact(int)","Corresponding Source":"/**\n     * Returns the argument incremented by one, throwing an exception if the\n     * result overflows an {@code int}.\n     *\n     * @param a the value to increment\n     * @return the result\n     * @throws ArithmeticException if the result overflows an int\n     * @since 1.8\n     */\n    public static int incrementExact(int a) {\n        if (a == Integer.MAX_VALUE) {\n            throw new ArithmeticException(\"integer overflow\");\n        }\n\n        return a + 1;\n    }"}
{"Number":"196","API Relative Path":"java.lang.Math.java-incrementExact(long)","Corresponding Source":"/**\n     * Returns the argument incremented by one, throwing an exception if the\n     * result overflows a {@code long}.\n     *\n     * @param a the value to increment\n     * @return the result\n     * @throws ArithmeticException if the result overflows a long\n     * @since 1.8\n     */\n    public static long incrementExact(long a) {\n        if (a == Long.MAX_VALUE) {\n            throw new ArithmeticException(\"long overflow\");\n        }\n\n        return a + 1L;\n    }"}
{"Number":"197","API Relative Path":"java.lang.Math.java-multiplyExact(long-long)","Corresponding Source":"/**\n     * Returns the product of the arguments,\n     * throwing an exception if the result overflows a {@code long}.\n     *\n     * @param x the first value\n     * @param y the second value\n     * @return the result\n     * @throws ArithmeticException if the result overflows a long\n     * @since 1.8\n     */\n    public static long multiplyExact(long x, long y) {\n        long r = x * y;\n        long ax = Math.abs(x);\n        long ay = Math.abs(y);\n        if (((ax | ay) >>> 31 != 0)) {\n            // Some bits greater than 2^31 that might cause overflow\n            // Check the result using the divide operator\n            // and check for the special case of Long.MIN_VALUE * -1\n           if (((y != 0) && (r / y != x)) ||\n               (x == Long.MIN_VALUE && y == -1)) {\n                throw new ArithmeticException(\"long overflow\");\n            }\n        }\n        return r;\n    }"}
{"Number":"198","API Relative Path":"java.lang.Math.java-negateExact(int)","Corresponding Source":"/**\n     * Returns the negation of the argument, throwing an exception if the\n     * result overflows an {@code int}.\n     *\n     * @param a the value to negate\n     * @return the result\n     * @throws ArithmeticException if the result overflows an int\n     * @since 1.8\n     */\n    public static int negateExact(int a) {\n        if (a == Integer.MIN_VALUE) {\n            throw new ArithmeticException(\"integer overflow\");\n        }\n\n        return -a;\n    }"}
{"Number":"199","API Relative Path":"java.lang.Math.java-negateExact(long)","Corresponding Source":"/**\n     * Returns the negation of the argument, throwing an exception if the\n     * result overflows a {@code long}.\n     *\n     * @param a the value to negate\n     * @return the result\n     * @throws ArithmeticException if the result overflows a long\n     * @since 1.8\n     */\n    public static long negateExact(long a) {\n        if (a == Long.MIN_VALUE) {\n            throw new ArithmeticException(\"long overflow\");\n        }\n\n        return -a;\n    }"}
{"Number":"200","API Relative Path":"java.lang.Math.java-subtractExact(int-int)","Corresponding Source":"/**\n     * Returns the difference of the arguments,\n     * throwing an exception if the result overflows an {@code int}.\n     *\n     * @param x the first value\n     * @param y the second value to subtract from the first\n     * @return the result\n     * @throws ArithmeticException if the result overflows an int\n     * @since 1.8\n     */\n    public static int subtractExact(int x, int y) {\n        int r = x - y;\n        // HD 2-12 Overflow iff the arguments have different signs and\n        // the sign of the result is different than the sign of x\n        if (((x ^ y) & (x ^ r)) < 0) {\n            throw new ArithmeticException(\"integer overflow\");\n        }\n        return r;\n    }"}
{"Number":"201","API Relative Path":"java.lang.Math.java-subtractExact(long-long)","Corresponding Source":"/**\n     * Returns the difference of the arguments,\n     * throwing an exception if the result overflows a {@code long}.\n     *\n     * @param x the first value\n     * @param y the second value to subtract from the first\n     * @return the result\n     * @throws ArithmeticException if the result overflows a long\n     * @since 1.8\n     */\n    public static long subtractExact(long x, long y) {\n        long r = x - y;\n        // HD 2-12 Overflow iff the arguments have different signs and\n        // the sign of the result is different than the sign of x\n        if (((x ^ y) & (x ^ r)) < 0) {\n            throw new ArithmeticException(\"long overflow\");\n        }\n        return r;\n    }"}
{"Number":"202","API Relative Path":"java.lang.Math.java-toIntExact(long)","Corresponding Source":"/**\n     * Returns the value of the {@code long} argument;\n     * throwing an exception if the value overflows an {@code int}.\n     *\n     * @param value the long value\n     * @return the argument as an int\n     * @throws ArithmeticException if the {@code argument} overflows an int\n     * @since 1.8\n     */\n    public static int toIntExact(long value) {\n        if ((int)value != value) {\n            throw new ArithmeticException(\"integer overflow\");\n        }\n        return (int)value;\n    }"}
{"Number":"203","API Relative Path":"java.lang.Object.java-wait(long-int)","Corresponding Source":"/**\n     * Causes the current thread to wait until another thread invokes the\n     * {@link java.lang.Object#notify()} method or the\n     * {@link java.lang.Object#notifyAll()} method for this object, or\n     * some other thread interrupts the current thread, or a certain\n     * amount of real time has elapsed.\n     * <p>\n     * This method is similar to the {@code wait} method of one\n     * argument, but it allows finer control over the amount of time to\n     * wait for a notification before giving up. The amount of real time,\n     * measured in nanoseconds, is given by:\n     * <blockquote>\n     * <pre>\n     * 1000000*timeout+nanos<\/pre><\/blockquote>\n     * <p>\n     * In all other respects, this method does the same thing as the\n     * method {@link #wait(long)} of one argument. In particular,\n     * {@code wait(0, 0)} means the same thing as {@code wait(0)}.\n     * <p>\n     * The current thread must own this object's monitor. The thread\n     * releases ownership of this monitor and waits until either of the\n     * following two conditions has occurred:\n     * <ul>\n     * <li>Another thread notifies threads waiting on this object's monitor\n     *     to wake up either through a call to the {@code notify} method\n     *     or the {@code notifyAll} method.\n     * <li>The timeout period, specified by {@code timeout}\n     *     milliseconds plus {@code nanos} nanoseconds arguments, has\n     *     elapsed.\n     * <\/ul>\n     * <p>\n     * The thread then waits until it can re-obtain ownership of the\n     * monitor and resumes execution.\n     * <p>\n     * As in the one argument version, interrupts and spurious wakeups are\n     * possible, and this method should always be used in a loop:\n     * <pre>\n     *     synchronized (obj) {\n     *         while (&lt;condition does not hold&gt;)\n     *             obj.wait(timeout, nanos);\n     *         ... // Perform action appropriate to condition\n     *     }\n     * <\/pre>\n     * This method should only be called by a thread that is the owner\n     * of this object's monitor. See the {@code notify} method for a\n     * description of the ways in which a thread can become the owner of\n     * a monitor.\n     *\n     * @param      timeout   the maximum time to wait in milliseconds.\n     * @param      nanos      additional time, in nanoseconds range\n     *                       0-999999.\n     * @throws  IllegalArgumentException      if the value of timeout is\n     *                      negative or the value of nanos is\n     *                      not in the range 0-999999.\n     * @throws  IllegalMonitorStateException  if the current thread is not\n     *               the owner of this object's monitor.\n     * @throws  InterruptedException if any thread interrupted the\n     *             current thread before or while the current thread\n     *             was waiting for a notification.  The <i>interrupted\n     *             status<\/i> of the current thread is cleared when\n     *             this exception is thrown.\n     */\n    public final void wait(long timeout, int nanos) throws InterruptedException {\n        if (timeout < 0) {\n            throw new IllegalArgumentException(\"timeout value is negative\");\n        }\n\n        if (nanos < 0 || nanos > 999999) {\n            throw new IllegalArgumentException(\n                                \"nanosecond timeout value out of range\");\n        }\n\n        if (nanos >= 500000 || (nanos != 0 && timeout == 0)) {\n            timeout++;\n        }\n\n        wait(timeout);\n    }"}
{"Number":"204","API Relative Path":"java.lang.Object.java-wait(long-int)","Corresponding Source":"/**\n     * Causes the current thread to wait until another thread invokes the\n     * {@link java.lang.Object#notify()} method or the\n     * {@link java.lang.Object#notifyAll()} method for this object, or\n     * some other thread interrupts the current thread, or a certain\n     * amount of real time has elapsed.\n     * <p>\n     * This method is similar to the {@code wait} method of one\n     * argument, but it allows finer control over the amount of time to\n     * wait for a notification before giving up. The amount of real time,\n     * measured in nanoseconds, is given by:\n     * <blockquote>\n     * <pre>\n     * 1000000*timeout+nanos<\/pre><\/blockquote>\n     * <p>\n     * In all other respects, this method does the same thing as the\n     * method {@link #wait(long)} of one argument. In particular,\n     * {@code wait(0, 0)} means the same thing as {@code wait(0)}.\n     * <p>\n     * The current thread must own this object's monitor. The thread\n     * releases ownership of this monitor and waits until either of the\n     * following two conditions has occurred:\n     * <ul>\n     * <li>Another thread notifies threads waiting on this object's monitor\n     *     to wake up either through a call to the {@code notify} method\n     *     or the {@code notifyAll} method.\n     * <li>The timeout period, specified by {@code timeout}\n     *     milliseconds plus {@code nanos} nanoseconds arguments, has\n     *     elapsed.\n     * <\/ul>\n     * <p>\n     * The thread then waits until it can re-obtain ownership of the\n     * monitor and resumes execution.\n     * <p>\n     * As in the one argument version, interrupts and spurious wakeups are\n     * possible, and this method should always be used in a loop:\n     * <pre>\n     *     synchronized (obj) {\n     *         while (&lt;condition does not hold&gt;)\n     *             obj.wait(timeout, nanos);\n     *         ... // Perform action appropriate to condition\n     *     }\n     * <\/pre>\n     * This method should only be called by a thread that is the owner\n     * of this object's monitor. See the {@code notify} method for a\n     * description of the ways in which a thread can become the owner of\n     * a monitor.\n     *\n     * @param      timeout   the maximum time to wait in milliseconds.\n     * @param      nanos      additional time, in nanoseconds range\n     *                       0-999999.\n     * @throws  IllegalArgumentException      if the value of timeout is\n     *                      negative or the value of nanos is\n     *                      not in the range 0-999999.\n     * @throws  IllegalMonitorStateException  if the current thread is not\n     *               the owner of this object's monitor.\n     * @throws  InterruptedException if any thread interrupted the\n     *             current thread before or while the current thread\n     *             was waiting for a notification.  The <i>interrupted\n     *             status<\/i> of the current thread is cleared when\n     *             this exception is thrown.\n     */\n    public final void wait(long timeout, int nanos) throws InterruptedException {\n        if (timeout < 0) {\n            throw new IllegalArgumentException(\"timeout value is negative\");\n        }\n\n        if (nanos < 0 || nanos > 999999) {\n            throw new IllegalArgumentException(\n                                \"nanosecond timeout value out of range\");\n        }\n\n        if (nanos >= 500000 || (nanos != 0 && timeout == 0)) {\n            timeout++;\n        }\n\n        wait(timeout);\n    }"}
{"Number":"205","API Relative Path":"java.lang.ProcessBuilder.java-command(List)","Corresponding Source":"/**\n     * Sets this process builder's operating system program and\n     * arguments.  This method does <i>not<\/i> make a copy of the\n     * {@code command} list.  Subsequent updates to the list will\n     * be reflected in the state of the process builder.  It is not\n     * checked whether {@code command} corresponds to a valid\n     * operating system command.\n     *\n     * @param  command the list containing the program and its arguments\n     * @return this process builder\n     *\n     * @throws NullPointerException if the argument is null\n     */\n    public ProcessBuilder command(List<String> command) {\n        if (command == null)\n            throw new NullPointerException();\n        this.command = command;\n        return this;\n    }"}
{"Number":"206","API Relative Path":"java.lang.ProcessBuilder.java-ProcessBuilder(List)","Corresponding Source":"/**\n     * Constructs a process builder with the specified operating\n     * system program and arguments.  This constructor does <i>not<\/i>\n     * make a copy of the {@code command} list.  Subsequent\n     * updates to the list will be reflected in the state of the\n     * process builder.  It is not checked whether\n     * {@code command} corresponds to a valid operating system\n     * command.\n     *\n     * @param  command the list containing the program and its arguments\n     * @throws NullPointerException if the argument is null\n     */\n    public ProcessBuilder(List<String> command) {\n        if (command == null)\n            throw new NullPointerException();\n        this.command = command;\n    }"}
{"Number":"207","API Relative Path":"java.lang.ref.ReferenceQueue.java-remove(long)","Corresponding Source":"/**\n     * Removes the next reference object in this queue, blocking until either\n     * one becomes available or the given timeout period expires.\n     *\n     * <p> This method does not offer real-time guarantees: It schedules the\n     * timeout as if by invoking the {@link Object#wait(long)} method.\n     *\n     * @param  timeout  If positive, block for up to <code>timeout<\/code>\n     *                  milliseconds while waiting for a reference to be\n     *                  added to this queue.  If zero, block indefinitely.\n     *\n     * @return  A reference object, if one was available within the specified\n     *          timeout period, otherwise <code>null<\/code>\n     *\n     * @throws  IllegalArgumentException\n     *          If the value of the timeout argument is negative\n     *\n     * @throws  InterruptedException\n     *          If the timeout wait is interrupted\n     */\n    public Reference<? extends T> remove(long timeout)\n        throws IllegalArgumentException, InterruptedException\n    {\n        if (timeout < 0) {\n            throw new IllegalArgumentException(\"Negative timeout value\");\n        }\n        synchronized (lock) {\n            Reference<? extends T> r = reallyPoll();\n            if (r != null) return r;\n            for (;;) {\n                lock.wait(timeout);\n                r = reallyPoll();\n                if (r != null) return r;\n                if (timeout != 0) return null;\n            }\n        }\n    }"}
{"Number":"208","API Relative Path":"java.lang.reflect.AccessibleObject.java-setAccessible(AccessibleObject[]-boolean)","Corresponding Source":"/**\n     * Convenience method to set the {@code accessible} flag for an\n     * array of objects with a single security check (for efficiency).\n     *\n     * <p>First, if there is a security manager, its\n     * {@code checkPermission} method is called with a\n     * {@code ReflectPermission(\"suppressAccessChecks\")} permission.\n     *\n     * <p>A {@code SecurityException} is raised if {@code flag} is\n     * {@code true} but accessibility of any of the elements of the input\n     * {@code array} may not be changed (for example, if the element\n     * object is a {@link Constructor} object for the class {@link\n     * java.lang.Class}).  In the event of such a SecurityException, the\n     * accessibility of objects is set to {@code flag} for array elements\n     * upto (and excluding) the element for which the exception occurred; the\n     * accessibility of elements beyond (and including) the element for which\n     * the exception occurred is unchanged.\n     *\n     * @param array the array of AccessibleObjects\n     * @param flag  the new value for the {@code accessible} flag\n     *              in each object\n     * @throws SecurityException if the request is denied.\n     * @see SecurityManager#checkPermission\n     * @see java.lang.RuntimePermission\n     */\n    public static void setAccessible(AccessibleObject[] array, boolean flag)\n        throws SecurityException {\n        SecurityManager sm = System.getSecurityManager();\n        if (sm != null) sm.checkPermission(ACCESS_PERMISSION);\n        for (int i = 0; i < array.length; i++) {\n            setAccessible0(array[i], flag);\n        }\n    }"}
{"Number":"209","API Relative Path":"java.lang.reflect.AccessibleObject.java-setAccessible(boolean)","Corresponding Source":"/**\n     * Set the {@code accessible} flag for this object to\n     * the indicated boolean value.  A value of {@code true} indicates that\n     * the reflected object should suppress Java language access\n     * checking when it is used.  A value of {@code false} indicates\n     * that the reflected object should enforce Java language access checks.\n     *\n     * <p>First, if there is a security manager, its\n     * {@code checkPermission} method is called with a\n     * {@code ReflectPermission(\"suppressAccessChecks\")} permission.\n     *\n     * <p>A {@code SecurityException} is raised if {@code flag} is\n     * {@code true} but accessibility of this object may not be changed\n     * (for example, if this element object is a {@link Constructor} object for\n     * the class {@link java.lang.Class}).\n     *\n     * <p>A {@code SecurityException} is raised if this object is a {@link\n     * java.lang.reflect.Constructor} object for the class\n     * {@code java.lang.Class}, and {@code flag} is true.\n     *\n     * @param flag the new value for the {@code accessible} flag\n     * @throws SecurityException if the request is denied.\n     * @see SecurityManager#checkPermission\n     * @see java.lang.RuntimePermission\n     */\n    public void setAccessible(boolean flag) throws SecurityException {\n        SecurityManager sm = System.getSecurityManager();\n        if (sm != null) sm.checkPermission(ACCESS_PERMISSION);\n        setAccessible0(this, flag);\n    }"}
{"Number":"210","API Relative Path":"java.lang.reflect.Executable.java-getAnnotation(Class)","Corresponding Source":"/**\n     * {@inheritDoc}\n     * @throws NullPointerException  {@inheritDoc}\n     */\n    public <T extends Annotation> T getAnnotation(Class<T> annotationClass) {\n        Objects.requireNonNull(annotationClass);\n        return annotationClass.cast(declaredAnnotations().get(annotationClass));\n    }"}
{"Number":"211","API Relative Path":"java.lang.reflect.Executable.java-getAnnotationsByType(Class)","Corresponding Source":"/**\n     * {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.8\n     */\n    @Override\n    public <T extends Annotation> T[] getAnnotationsByType(Class<T> annotationClass) {\n        Objects.requireNonNull(annotationClass);\n\n        return AnnotationSupport.getDirectlyAndIndirectlyPresent(declaredAnnotations(), annotationClass);\n    }"}
{"Number":"212","API Relative Path":"java.lang.reflect.Field.java-get(Object)","Corresponding Source":"/**\n     * Returns the value of the field represented by this {@code Field}, on\n     * the specified object. The value is automatically wrapped in an\n     * object if it has a primitive type.\n     *\n     * <p>The underlying field's value is obtained as follows:\n     *\n     * <p>If the underlying field is a static field, the {@code obj} argument\n     * is ignored; it may be null.\n     *\n     * <p>Otherwise, the underlying field is an instance field.  If the\n     * specified {@code obj} argument is null, the method throws a\n     * {@code NullPointerException}. If the specified object is not an\n     * instance of the class or interface declaring the underlying\n     * field, the method throws an {@code IllegalArgumentException}.\n     *\n     * <p>If this {@code Field} object is enforcing Java language access control, and\n     * the underlying field is inaccessible, the method throws an\n     * {@code IllegalAccessException}.\n     * If the underlying field is static, the class that declared the\n     * field is initialized if it has not already been initialized.\n     *\n     * <p>Otherwise, the value is retrieved from the underlying instance\n     * or static field.  If the field has a primitive type, the value\n     * is wrapped in an object before being returned, otherwise it is\n     * returned as is.\n     *\n     * <p>If the field is hidden in the type of {@code obj},\n     * the field's value is obtained according to the preceding rules.\n     *\n     * @param obj object from which the represented field's value is\n     * to be extracted\n     * @return the value of the represented field in object\n     * {@code obj}; primitive values are wrapped in an appropriate\n     * object before being returned\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is inaccessible.\n     * @exception IllegalArgumentException  if the specified object is not an\n     *              instance of the class or interface declaring the underlying\n     *              field (or a subclass or implementor thereof).\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     */\n    @CallerSensitive\n    public Object get(Object obj)\n        throws IllegalArgumentException, IllegalAccessException\n    {\n        if (!override) {\n            if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {\n                Class<?> caller = Reflection.getCallerClass();\n                checkAccess(caller, clazz, obj, modifiers);\n            }\n        }\n        return getFieldAccessor(obj).get(obj);\n    }"}
{"Number":"213","API Relative Path":"java.lang.reflect.Field.java-getAnnotation(Class)","Corresponding Source":"/**\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.5\n     */\n    public <T extends Annotation> T getAnnotation(Class<T> annotationClass) {\n        Objects.requireNonNull(annotationClass);\n        return annotationClass.cast(declaredAnnotations().get(annotationClass));\n    }"}
{"Number":"214","API Relative Path":"java.lang.reflect.Field.java-getAnnotationsByType(Class)","Corresponding Source":"/**\n     * {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.8\n     */\n    @Override\n    public <T extends Annotation> T[] getAnnotationsByType(Class<T> annotationClass) {\n        Objects.requireNonNull(annotationClass);\n\n        return AnnotationSupport.getDirectlyAndIndirectlyPresent(declaredAnnotations(), annotationClass);\n    }"}
{"Number":"215","API Relative Path":"java.lang.reflect.Field.java-getBoolean(Object)","Corresponding Source":"/**\n     * Gets the value of a static or instance {@code boolean} field.\n     *\n     * @param obj the object to extract the {@code boolean} value\n     * from\n     * @return the value of the {@code boolean} field\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is inaccessible.\n     * @exception IllegalArgumentException  if the specified object is not\n     *              an instance of the class or interface declaring the\n     *              underlying field (or a subclass or implementor\n     *              thereof), or if the field value cannot be\n     *              converted to the type {@code boolean} by a\n     *              widening conversion.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see       Field#get\n     */\n    @CallerSensitive\n    public boolean getBoolean(Object obj)\n        throws IllegalArgumentException, IllegalAccessException\n    {\n        if (!override) {\n            if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {\n                Class<?> caller = Reflection.getCallerClass();\n                checkAccess(caller, clazz, obj, modifiers);\n            }\n        }\n        return getFieldAccessor(obj).getBoolean(obj);\n    }"}
{"Number":"216","API Relative Path":"java.lang.reflect.Field.java-getByte(Object)","Corresponding Source":"/**\n     * Gets the value of a static or instance {@code byte} field.\n     *\n     * @param obj the object to extract the {@code byte} value\n     * from\n     * @return the value of the {@code byte} field\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is inaccessible.\n     * @exception IllegalArgumentException  if the specified object is not\n     *              an instance of the class or interface declaring the\n     *              underlying field (or a subclass or implementor\n     *              thereof), or if the field value cannot be\n     *              converted to the type {@code byte} by a\n     *              widening conversion.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see       Field#get\n     */\n    @CallerSensitive\n    public byte getByte(Object obj)\n        throws IllegalArgumentException, IllegalAccessException\n    {\n        if (!override) {\n            if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {\n                Class<?> caller = Reflection.getCallerClass();\n                checkAccess(caller, clazz, obj, modifiers);\n            }\n        }\n        return getFieldAccessor(obj).getByte(obj);\n    }"}
{"Number":"217","API Relative Path":"java.lang.reflect.Field.java-getChar(Object)","Corresponding Source":"/**\n     * Gets the value of a static or instance field of type\n     * {@code char} or of another primitive type convertible to\n     * type {@code char} via a widening conversion.\n     *\n     * @param obj the object to extract the {@code char} value\n     * from\n     * @return the value of the field converted to type {@code char}\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is inaccessible.\n     * @exception IllegalArgumentException  if the specified object is not\n     *              an instance of the class or interface declaring the\n     *              underlying field (or a subclass or implementor\n     *              thereof), or if the field value cannot be\n     *              converted to the type {@code char} by a\n     *              widening conversion.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see Field#get\n     */\n    @CallerSensitive\n    public char getChar(Object obj)\n        throws IllegalArgumentException, IllegalAccessException\n    {\n        if (!override) {\n            if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {\n                Class<?> caller = Reflection.getCallerClass();\n                checkAccess(caller, clazz, obj, modifiers);\n            }\n        }\n        return getFieldAccessor(obj).getChar(obj);\n    }"}
{"Number":"218","API Relative Path":"java.lang.reflect.Field.java-getDouble(Object)","Corresponding Source":"/**\n     * Gets the value of a static or instance field of type\n     * {@code double} or of another primitive type convertible to\n     * type {@code double} via a widening conversion.\n     *\n     * @param obj the object to extract the {@code double} value\n     * from\n     * @return the value of the field converted to type {@code double}\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is inaccessible.\n     * @exception IllegalArgumentException  if the specified object is not\n     *              an instance of the class or interface declaring the\n     *              underlying field (or a subclass or implementor\n     *              thereof), or if the field value cannot be\n     *              converted to the type {@code double} by a\n     *              widening conversion.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see       Field#get\n     */\n    @CallerSensitive\n    public double getDouble(Object obj)\n        throws IllegalArgumentException, IllegalAccessException\n    {\n        if (!override) {\n            if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {\n                Class<?> caller = Reflection.getCallerClass();\n                checkAccess(caller, clazz, obj, modifiers);\n            }\n        }\n        return getFieldAccessor(obj).getDouble(obj);\n    }"}
{"Number":"219","API Relative Path":"java.lang.reflect.Field.java-getFloat(Object)","Corresponding Source":"/**\n     * Gets the value of a static or instance field of type\n     * {@code float} or of another primitive type convertible to\n     * type {@code float} via a widening conversion.\n     *\n     * @param obj the object to extract the {@code float} value\n     * from\n     * @return the value of the field converted to type {@code float}\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is inaccessible.\n     * @exception IllegalArgumentException  if the specified object is not\n     *              an instance of the class or interface declaring the\n     *              underlying field (or a subclass or implementor\n     *              thereof), or if the field value cannot be\n     *              converted to the type {@code float} by a\n     *              widening conversion.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see Field#get\n     */\n    @CallerSensitive\n    public float getFloat(Object obj)\n        throws IllegalArgumentException, IllegalAccessException\n    {\n        if (!override) {\n            if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {\n                Class<?> caller = Reflection.getCallerClass();\n                checkAccess(caller, clazz, obj, modifiers);\n            }\n        }\n        return getFieldAccessor(obj).getFloat(obj);\n    }"}
{"Number":"220","API Relative Path":"java.lang.reflect.Field.java-getInt(Object)","Corresponding Source":"/**\n     * Gets the value of a static or instance field of type\n     * {@code int} or of another primitive type convertible to\n     * type {@code int} via a widening conversion.\n     *\n     * @param obj the object to extract the {@code int} value\n     * from\n     * @return the value of the field converted to type {@code int}\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is inaccessible.\n     * @exception IllegalArgumentException  if the specified object is not\n     *              an instance of the class or interface declaring the\n     *              underlying field (or a subclass or implementor\n     *              thereof), or if the field value cannot be\n     *              converted to the type {@code int} by a\n     *              widening conversion.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see       Field#get\n     */\n    @CallerSensitive\n    public int getInt(Object obj)\n        throws IllegalArgumentException, IllegalAccessException\n    {\n        if (!override) {\n            if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {\n                Class<?> caller = Reflection.getCallerClass();\n                checkAccess(caller, clazz, obj, modifiers);\n            }\n        }\n        return getFieldAccessor(obj).getInt(obj);\n    }"}
{"Number":"221","API Relative Path":"java.lang.reflect.Field.java-getLong(Object)","Corresponding Source":"/**\n     * Gets the value of a static or instance field of type\n     * {@code long} or of another primitive type convertible to\n     * type {@code long} via a widening conversion.\n     *\n     * @param obj the object to extract the {@code long} value\n     * from\n     * @return the value of the field converted to type {@code long}\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is inaccessible.\n     * @exception IllegalArgumentException  if the specified object is not\n     *              an instance of the class or interface declaring the\n     *              underlying field (or a subclass or implementor\n     *              thereof), or if the field value cannot be\n     *              converted to the type {@code long} by a\n     *              widening conversion.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see       Field#get\n     */\n    @CallerSensitive\n    public long getLong(Object obj)\n        throws IllegalArgumentException, IllegalAccessException\n    {\n        if (!override) {\n            if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {\n                Class<?> caller = Reflection.getCallerClass();\n                checkAccess(caller, clazz, obj, modifiers);\n            }\n        }\n        return getFieldAccessor(obj).getLong(obj);\n    }"}
{"Number":"222","API Relative Path":"java.lang.reflect.Field.java-getShort(Object)","Corresponding Source":"/**\n     * Gets the value of a static or instance field of type\n     * {@code short} or of another primitive type convertible to\n     * type {@code short} via a widening conversion.\n     *\n     * @param obj the object to extract the {@code short} value\n     * from\n     * @return the value of the field converted to type {@code short}\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is inaccessible.\n     * @exception IllegalArgumentException  if the specified object is not\n     *              an instance of the class or interface declaring the\n     *              underlying field (or a subclass or implementor\n     *              thereof), or if the field value cannot be\n     *              converted to the type {@code short} by a\n     *              widening conversion.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see       Field#get\n     */\n    @CallerSensitive\n    public short getShort(Object obj)\n        throws IllegalArgumentException, IllegalAccessException\n    {\n        if (!override) {\n            if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {\n                Class<?> caller = Reflection.getCallerClass();\n                checkAccess(caller, clazz, obj, modifiers);\n            }\n        }\n        return getFieldAccessor(obj).getShort(obj);\n    }"}
{"Number":"223","API Relative Path":"java.lang.reflect.Field.java-set(Object-Object)","Corresponding Source":"/**\n     * Sets the field represented by this {@code Field} object on the\n     * specified object argument to the specified new value. The new\n     * value is automatically unwrapped if the underlying field has a\n     * primitive type.\n     *\n     * <p>The operation proceeds as follows:\n     *\n     * <p>If the underlying field is static, the {@code obj} argument is\n     * ignored; it may be null.\n     *\n     * <p>Otherwise the underlying field is an instance field.  If the\n     * specified object argument is null, the method throws a\n     * {@code NullPointerException}.  If the specified object argument is not\n     * an instance of the class or interface declaring the underlying\n     * field, the method throws an {@code IllegalArgumentException}.\n     *\n     * <p>If this {@code Field} object is enforcing Java language access control, and\n     * the underlying field is inaccessible, the method throws an\n     * {@code IllegalAccessException}.\n     *\n     * <p>If the underlying field is final, the method throws an\n     * {@code IllegalAccessException} unless {@code setAccessible(true)}\n     * has succeeded for this {@code Field} object\n     * and the field is non-static. Setting a final field in this way\n     * is meaningful only during deserialization or reconstruction of\n     * instances of classes with blank final fields, before they are\n     * made available for access by other parts of a program. Use in\n     * any other context may have unpredictable effects, including cases\n     * in which other parts of a program continue to use the original\n     * value of this field.\n     *\n     * <p>If the underlying field is of a primitive type, an unwrapping\n     * conversion is attempted to convert the new value to a value of\n     * a primitive type.  If this attempt fails, the method throws an\n     * {@code IllegalArgumentException}.\n     *\n     * <p>If, after possible unwrapping, the new value cannot be\n     * converted to the type of the underlying field by an identity or\n     * widening conversion, the method throws an\n     * {@code IllegalArgumentException}.\n     *\n     * <p>If the underlying field is static, the class that declared the\n     * field is initialized if it has not already been initialized.\n     *\n     * <p>The field is set to the possibly unwrapped and widened new value.\n     *\n     * <p>If the field is hidden in the type of {@code obj},\n     * the field's value is set according to the preceding rules.\n     *\n     * @param obj the object whose field should be modified\n     * @param value the new value for the field of {@code obj}\n     * being modified\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is either inaccessible or final.\n     * @exception IllegalArgumentException  if the specified object is not an\n     *              instance of the class or interface declaring the underlying\n     *              field (or a subclass or implementor thereof),\n     *              or if an unwrapping conversion fails.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     */\n    @CallerSensitive\n    public void set(Object obj, Object value)\n        throws IllegalArgumentException, IllegalAccessException\n    {\n        if (!override) {\n            if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {\n                Class<?> caller = Reflection.getCallerClass();\n                checkAccess(caller, clazz, obj, modifiers);\n            }\n        }\n        getFieldAccessor(obj).set(obj, value);\n    }"}
{"Number":"224","API Relative Path":"java.lang.reflect.Field.java-setBoolean(Object-boolean)","Corresponding Source":"/**\n     * Sets the value of a field as a {@code boolean} on the specified object.\n     * This method is equivalent to\n     * {@code set(obj, zObj)},\n     * where {@code zObj} is a {@code Boolean} object and\n     * {@code zObj.booleanValue() == z}.\n     *\n     * @param obj the object whose field should be modified\n     * @param z   the new value for the field of {@code obj}\n     * being modified\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is either inaccessible or final.\n     * @exception IllegalArgumentException  if the specified object is not an\n     *              instance of the class or interface declaring the underlying\n     *              field (or a subclass or implementor thereof),\n     *              or if an unwrapping conversion fails.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see       Field#set\n     */\n    @CallerSensitive\n    public void setBoolean(Object obj, boolean z)\n        throws IllegalArgumentException, IllegalAccessException\n    {\n        if (!override) {\n            if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {\n                Class<?> caller = Reflection.getCallerClass();\n                checkAccess(caller, clazz, obj, modifiers);\n            }\n        }\n        getFieldAccessor(obj).setBoolean(obj, z);\n    }"}
{"Number":"225","API Relative Path":"java.lang.reflect.Field.java-setByte(Object-byte)","Corresponding Source":"/**\n     * Sets the value of a field as a {@code byte} on the specified object.\n     * This method is equivalent to\n     * {@code set(obj, bObj)},\n     * where {@code bObj} is a {@code Byte} object and\n     * {@code bObj.byteValue() == b}.\n     *\n     * @param obj the object whose field should be modified\n     * @param b   the new value for the field of {@code obj}\n     * being modified\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is either inaccessible or final.\n     * @exception IllegalArgumentException  if the specified object is not an\n     *              instance of the class or interface declaring the underlying\n     *              field (or a subclass or implementor thereof),\n     *              or if an unwrapping conversion fails.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see       Field#set\n     */\n    @CallerSensitive\n    public void setByte(Object obj, byte b)\n        throws IllegalArgumentException, IllegalAccessException\n    {\n        if (!override) {\n            if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {\n                Class<?> caller = Reflection.getCallerClass();\n                checkAccess(caller, clazz, obj, modifiers);\n            }\n        }\n        getFieldAccessor(obj).setByte(obj, b);\n    }"}
{"Number":"226","API Relative Path":"java.lang.reflect.Field.java-setChar(Object-char)","Corresponding Source":"/**\n     * Sets the value of a field as a {@code char} on the specified object.\n     * This method is equivalent to\n     * {@code set(obj, cObj)},\n     * where {@code cObj} is a {@code Character} object and\n     * {@code cObj.charValue() == c}.\n     *\n     * @param obj the object whose field should be modified\n     * @param c   the new value for the field of {@code obj}\n     * being modified\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is either inaccessible or final.\n     * @exception IllegalArgumentException  if the specified object is not an\n     *              instance of the class or interface declaring the underlying\n     *              field (or a subclass or implementor thereof),\n     *              or if an unwrapping conversion fails.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see       Field#set\n     */\n    @CallerSensitive\n    public void setChar(Object obj, char c)\n        throws IllegalArgumentException, IllegalAccessException\n    {\n        if (!override) {\n            if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {\n                Class<?> caller = Reflection.getCallerClass();\n                checkAccess(caller, clazz, obj, modifiers);\n            }\n        }\n        getFieldAccessor(obj).setChar(obj, c);\n    }"}
{"Number":"227","API Relative Path":"java.lang.reflect.Field.java-setDouble(Object-double)","Corresponding Source":"/**\n     * Sets the value of a field as a {@code double} on the specified object.\n     * This method is equivalent to\n     * {@code set(obj, dObj)},\n     * where {@code dObj} is a {@code Double} object and\n     * {@code dObj.doubleValue() == d}.\n     *\n     * @param obj the object whose field should be modified\n     * @param d   the new value for the field of {@code obj}\n     * being modified\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is either inaccessible or final.\n     * @exception IllegalArgumentException  if the specified object is not an\n     *              instance of the class or interface declaring the underlying\n     *              field (or a subclass or implementor thereof),\n     *              or if an unwrapping conversion fails.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see       Field#set\n     */\n    @CallerSensitive\n    public void setDouble(Object obj, double d)\n        throws IllegalArgumentException, IllegalAccessException\n    {\n        if (!override) {\n            if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {\n                Class<?> caller = Reflection.getCallerClass();\n                checkAccess(caller, clazz, obj, modifiers);\n            }\n        }\n        getFieldAccessor(obj).setDouble(obj, d);\n    }"}
{"Number":"228","API Relative Path":"java.lang.reflect.Field.java-setFloat(Object-float)","Corresponding Source":"/**\n     * Sets the value of a field as a {@code float} on the specified object.\n     * This method is equivalent to\n     * {@code set(obj, fObj)},\n     * where {@code fObj} is a {@code Float} object and\n     * {@code fObj.floatValue() == f}.\n     *\n     * @param obj the object whose field should be modified\n     * @param f   the new value for the field of {@code obj}\n     * being modified\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is either inaccessible or final.\n     * @exception IllegalArgumentException  if the specified object is not an\n     *              instance of the class or interface declaring the underlying\n     *              field (or a subclass or implementor thereof),\n     *              or if an unwrapping conversion fails.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see       Field#set\n     */\n    @CallerSensitive\n    public void setFloat(Object obj, float f)\n        throws IllegalArgumentException, IllegalAccessException\n    {\n        if (!override) {\n            if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {\n                Class<?> caller = Reflection.getCallerClass();\n                checkAccess(caller, clazz, obj, modifiers);\n            }\n        }\n        getFieldAccessor(obj).setFloat(obj, f);\n    }"}
{"Number":"229","API Relative Path":"java.lang.reflect.Field.java-setInt(Object-int)","Corresponding Source":"/**\n     * Sets the value of a field as an {@code int} on the specified object.\n     * This method is equivalent to\n     * {@code set(obj, iObj)},\n     * where {@code iObj} is a {@code Integer} object and\n     * {@code iObj.intValue() == i}.\n     *\n     * @param obj the object whose field should be modified\n     * @param i   the new value for the field of {@code obj}\n     * being modified\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is either inaccessible or final.\n     * @exception IllegalArgumentException  if the specified object is not an\n     *              instance of the class or interface declaring the underlying\n     *              field (or a subclass or implementor thereof),\n     *              or if an unwrapping conversion fails.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see       Field#set\n     */\n    @CallerSensitive\n    public void setInt(Object obj, int i)\n        throws IllegalArgumentException, IllegalAccessException\n    {\n        if (!override) {\n            if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {\n                Class<?> caller = Reflection.getCallerClass();\n                checkAccess(caller, clazz, obj, modifiers);\n            }\n        }\n        getFieldAccessor(obj).setInt(obj, i);\n    }"}
{"Number":"230","API Relative Path":"java.lang.reflect.Field.java-setLong(Object-long)","Corresponding Source":"/**\n     * Sets the value of a field as a {@code long} on the specified object.\n     * This method is equivalent to\n     * {@code set(obj, lObj)},\n     * where {@code lObj} is a {@code Long} object and\n     * {@code lObj.longValue() == l}.\n     *\n     * @param obj the object whose field should be modified\n     * @param l   the new value for the field of {@code obj}\n     * being modified\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is either inaccessible or final.\n     * @exception IllegalArgumentException  if the specified object is not an\n     *              instance of the class or interface declaring the underlying\n     *              field (or a subclass or implementor thereof),\n     *              or if an unwrapping conversion fails.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see       Field#set\n     */\n    @CallerSensitive\n    public void setLong(Object obj, long l)\n        throws IllegalArgumentException, IllegalAccessException\n    {\n        if (!override) {\n            if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {\n                Class<?> caller = Reflection.getCallerClass();\n                checkAccess(caller, clazz, obj, modifiers);\n            }\n        }\n        getFieldAccessor(obj).setLong(obj, l);\n    }"}
{"Number":"231","API Relative Path":"java.lang.reflect.Field.java-setShort(Object-short)","Corresponding Source":"/**\n     * Sets the value of a field as a {@code short} on the specified object.\n     * This method is equivalent to\n     * {@code set(obj, sObj)},\n     * where {@code sObj} is a {@code Short} object and\n     * {@code sObj.shortValue() == s}.\n     *\n     * @param obj the object whose field should be modified\n     * @param s   the new value for the field of {@code obj}\n     * being modified\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is either inaccessible or final.\n     * @exception IllegalArgumentException  if the specified object is not an\n     *              instance of the class or interface declaring the underlying\n     *              field (or a subclass or implementor thereof),\n     *              or if an unwrapping conversion fails.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see       Field#set\n     */\n    @CallerSensitive\n    public void setShort(Object obj, short s)\n        throws IllegalArgumentException, IllegalAccessException\n    {\n        if (!override) {\n            if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) {\n                Class<?> caller = Reflection.getCallerClass();\n                checkAccess(caller, clazz, obj, modifiers);\n            }\n        }\n        getFieldAccessor(obj).setShort(obj, s);\n    }"}
{"Number":"232","API Relative Path":"java.lang.reflect.Parameter.java-getAnnotation(Class)","Corresponding Source":"/**\n     * {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     */\n    public <T extends Annotation> T getAnnotation(Class<T> annotationClass) {\n        Objects.requireNonNull(annotationClass);\n        return annotationClass.cast(declaredAnnotations().get(annotationClass));\n    }"}
{"Number":"233","API Relative Path":"java.lang.reflect.Parameter.java-getAnnotationsByType(Class)","Corresponding Source":"/**\n     * {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     */\n    @Override\n    public <T extends Annotation> T[] getAnnotationsByType(Class<T> annotationClass) {\n        Objects.requireNonNull(annotationClass);\n\n        return AnnotationSupport.getDirectlyAndIndirectlyPresent(declaredAnnotations(), annotationClass);\n    }"}
{"Number":"234","API Relative Path":"java.lang.reflect.Parameter.java-getDeclaredAnnotation(Class)","Corresponding Source":"/**\n     * @throws NullPointerException {@inheritDoc}\n     */\n    public <T extends Annotation> T getDeclaredAnnotation(Class<T> annotationClass) {\n        // Only annotations on classes are inherited, for all other\n        // objects getDeclaredAnnotation is the same as\n        // getAnnotation.\n        return getAnnotation(annotationClass);\n    }"}
{"Number":"235","API Relative Path":"java.lang.reflect.Parameter.java-getDeclaredAnnotationsByType(Class)","Corresponding Source":"/**\n     * @throws NullPointerException {@inheritDoc}\n     */\n    @Override\n    public <T extends Annotation> T[] getDeclaredAnnotationsByType(Class<T> annotationClass) {\n        // Only annotations on classes are inherited, for all other\n        // objects getDeclaredAnnotations is the same as\n        // getAnnotations.\n        return getAnnotationsByType(annotationClass);\n    }"}
{"Number":"236","API Relative Path":"java.lang.Runtime.java-removeShutdownHook(Thread)","Corresponding Source":"/**\n     * De-registers a previously-registered virtual-machine shutdown hook. <p>\n     *\n     * @param hook the hook to remove\n     * @return <tt>true<\/tt> if the specified hook had previously been\n     * registered and was successfully de-registered, <tt>false<\/tt>\n     * otherwise.\n     *\n     * @throws  IllegalStateException\n     *          If the virtual machine is already in the process of shutting\n     *          down\n     *\n     * @throws  SecurityException\n     *          If a security manager is present and it denies\n     *          <tt>{@link RuntimePermission}(\"shutdownHooks\")<\/tt>\n     *\n     * @see #addShutdownHook\n     * @see #exit(int)\n     * @since 1.3\n     */\n    public boolean removeShutdownHook(Thread hook) {\n        SecurityManager sm = System.getSecurityManager();\n        if (sm != null) {\n            sm.checkPermission(new RuntimePermission(\"shutdownHooks\"));\n        }\n        return ApplicationShutdownHooks.remove(hook);\n    }"}
{"Number":"237","API Relative Path":"java.lang.SecurityManager.java-checkAccess(ThreadGroup)","Corresponding Source":"/**\n     * Throws a <code>SecurityException<\/code> if the\n     * calling thread is not allowed to modify the thread group argument.\n     * <p>\n     * This method is invoked for the current security manager when a\n     * new child thread or child thread group is created, and by the\n     * <code>setDaemon<\/code>, <code>setMaxPriority<\/code>,\n     * <code>stop<\/code>, <code>suspend<\/code>, <code>resume<\/code>, and\n     * <code>destroy<\/code> methods of class <code>ThreadGroup<\/code>.\n     * <p>\n     * If the thread group argument is the system thread group (\n     * has a <code>null<\/code> parent) then\n     * this method calls <code>checkPermission<\/code> with the\n     * <code>RuntimePermission(\"modifyThreadGroup\")<\/code> permission.\n     * If the thread group argument is <i>not<\/i> the system thread group,\n     * this method just returns silently.\n     * <p>\n     * Applications that want a stricter policy should override this\n     * method. If this method is overridden, the method that overrides\n     * it should additionally check to see if the calling thread has the\n     * <code>RuntimePermission(\"modifyThreadGroup\")<\/code> permission, and\n     * if so, return silently. This is to ensure that code granted\n     * that permission (such as the JDK itself) is allowed to\n     * manipulate any thread.\n     * <p>\n     * If this method is overridden, then\n     * <code>super.checkAccess<\/code> should\n     * be called by the first statement in the overridden method, or the\n     * equivalent security check should be placed in the overridden method.\n     *\n     * @param      g   the thread group to be checked.\n     * @exception  SecurityException  if the calling thread does not have\n     *             permission to modify the thread group.\n     * @exception  NullPointerException if the thread group argument is\n     *             <code>null<\/code>.\n     * @see        java.lang.ThreadGroup#destroy() destroy\n     * @see        java.lang.ThreadGroup#resume() resume\n     * @see        java.lang.ThreadGroup#setDaemon(boolean) setDaemon\n     * @see        java.lang.ThreadGroup#setMaxPriority(int) setMaxPriority\n     * @see        java.lang.ThreadGroup#stop() stop\n     * @see        java.lang.ThreadGroup#suspend() suspend\n     * @see        #checkPermission(java.security.Permission) checkPermission\n     */\n    public void checkAccess(ThreadGroup g) {\n        if (g == null) {\n            throw new NullPointerException(\"thread group can't be null\");\n        }\n        if (g == rootGroup) {\n            checkPermission(SecurityConstants.MODIFY_THREADGROUP_PERMISSION);\n        } else {\n            // just return\n        }\n    }"}
{"Number":"238","API Relative Path":"java.lang.SecurityManager.java-checkConnect(String-int)","Corresponding Source":"/**\n     * Throws a <code>SecurityException<\/code> if the\n     * calling thread is not allowed to open a socket connection to the\n     * specified host and port number.\n     * <p>\n     * A port number of <code>-1<\/code> indicates that the calling\n     * method is attempting to determine the IP address of the specified\n     * host name.\n     * <p>\n     * This method calls <code>checkPermission<\/code> with the\n     * <code>SocketPermission(host+\":\"+port,\"connect\")<\/code> permission if\n     * the port is not equal to -1. If the port is equal to -1, then\n     * it calls <code>checkPermission<\/code> with the\n     * <code>SocketPermission(host,\"resolve\")<\/code> permission.\n     * <p>\n     * If you override this method, then you should make a call to\n     * <code>super.checkConnect<\/code>\n     * at the point the overridden method would normally throw an\n     * exception.\n     *\n     * @param      host   the host name port to connect to.\n     * @param      port   the protocol port to connect to.\n     * @exception  SecurityException  if the calling thread does not have\n     *             permission to open a socket connection to the specified\n     *               <code>host<\/code> and <code>port<\/code>.\n     * @exception  NullPointerException if the <code>host<\/code> argument is\n     *             <code>null<\/code>.\n     * @see        #checkPermission(java.security.Permission) checkPermission\n     */\n    public void checkConnect(String host, int port) {\n        if (host == null) {\n            throw new NullPointerException(\"host can't be null\");\n        }\n        if (!host.startsWith(\"[\") && host.indexOf(':') != -1) {\n            host = \"[\" + host + \"]\";\n        }\n        if (port == -1) {\n            checkPermission(new SocketPermission(host,\n                SecurityConstants.SOCKET_RESOLVE_ACTION));\n        } else {\n            checkPermission(new SocketPermission(host+\":\"+port,\n                SecurityConstants.SOCKET_CONNECT_ACTION));\n        }\n    }"}
{"Number":"239","API Relative Path":"java.lang.SecurityManager.java-checkConnect(String-int-Object)","Corresponding Source":"/**\n     * Throws a <code>SecurityException<\/code> if the\n     * specified security context is not allowed to open a socket\n     * connection to the specified host and port number.\n     * <p>\n     * A port number of <code>-1<\/code> indicates that the calling\n     * method is attempting to determine the IP address of the specified\n     * host name.\n     * <p> If <code>context<\/code> is not an instance of\n     * <code>AccessControlContext<\/code> then a\n     * <code>SecurityException<\/code> is thrown.\n     * <p>\n     * Otherwise, the port number is checked. If it is not equal\n     * to -1, the <code>context<\/code>'s <code>checkPermission<\/code>\n     * method is called with a\n     * <code>SocketPermission(host+\":\"+port,\"connect\")<\/code> permission.\n     * If the port is equal to -1, then\n     * the <code>context<\/code>'s <code>checkPermission<\/code> method\n     * is called with a\n     * <code>SocketPermission(host,\"resolve\")<\/code> permission.\n     * <p>\n     * If you override this method, then you should make a call to\n     * <code>super.checkConnect<\/code>\n     * at the point the overridden method would normally throw an\n     * exception.\n     *\n     * @param      host      the host name port to connect to.\n     * @param      port      the protocol port to connect to.\n     * @param      context   a system-dependent security context.\n     * @exception  SecurityException if the specified security context\n     *             is not an instance of <code>AccessControlContext<\/code>\n     *             (e.g., is <code>null<\/code>), or does not have permission\n     *             to open a socket connection to the specified\n     *             <code>host<\/code> and <code>port<\/code>.\n     * @exception  NullPointerException if the <code>host<\/code> argument is\n     *             <code>null<\/code>.\n     * @see        java.lang.SecurityManager#getSecurityContext()\n     * @see        java.security.AccessControlContext#checkPermission(java.security.Permission)\n     */\n    public void checkConnect(String host, int port, Object context) {\n        if (host == null) {\n            throw new NullPointerException(\"host can't be null\");\n        }\n        if (!host.startsWith(\"[\") && host.indexOf(':') != -1) {\n            host = \"[\" + host + \"]\";\n        }\n        if (port == -1)\n            checkPermission(new SocketPermission(host,\n                SecurityConstants.SOCKET_RESOLVE_ACTION),\n                context);\n        else\n            checkPermission(new SocketPermission(host+\":\"+port,\n                SecurityConstants.SOCKET_CONNECT_ACTION),\n                context);\n    }"}
{"Number":"240","API Relative Path":"java.lang.SecurityManager.java-checkConnect(String-int-Object)","Corresponding Source":"/**\n     * Throws a <code>SecurityException<\/code> if the\n     * specified security context is not allowed to open a socket\n     * connection to the specified host and port number.\n     * <p>\n     * A port number of <code>-1<\/code> indicates that the calling\n     * method is attempting to determine the IP address of the specified\n     * host name.\n     * <p> If <code>context<\/code> is not an instance of\n     * <code>AccessControlContext<\/code> then a\n     * <code>SecurityException<\/code> is thrown.\n     * <p>\n     * Otherwise, the port number is checked. If it is not equal\n     * to -1, the <code>context<\/code>'s <code>checkPermission<\/code>\n     * method is called with a\n     * <code>SocketPermission(host+\":\"+port,\"connect\")<\/code> permission.\n     * If the port is equal to -1, then\n     * the <code>context<\/code>'s <code>checkPermission<\/code> method\n     * is called with a\n     * <code>SocketPermission(host,\"resolve\")<\/code> permission.\n     * <p>\n     * If you override this method, then you should make a call to\n     * <code>super.checkConnect<\/code>\n     * at the point the overridden method would normally throw an\n     * exception.\n     *\n     * @param      host      the host name port to connect to.\n     * @param      port      the protocol port to connect to.\n     * @param      context   a system-dependent security context.\n     * @exception  SecurityException if the specified security context\n     *             is not an instance of <code>AccessControlContext<\/code>\n     *             (e.g., is <code>null<\/code>), or does not have permission\n     *             to open a socket connection to the specified\n     *             <code>host<\/code> and <code>port<\/code>.\n     * @exception  NullPointerException if the <code>host<\/code> argument is\n     *             <code>null<\/code>.\n     * @see        java.lang.SecurityManager#getSecurityContext()\n     * @see        java.security.AccessControlContext#checkPermission(java.security.Permission)\n     */\n    public void checkConnect(String host, int port, Object context) {\n        if (host == null) {\n            throw new NullPointerException(\"host can't be null\");\n        }\n        if (!host.startsWith(\"[\") && host.indexOf(':') != -1) {\n            host = \"[\" + host + \"]\";\n        }\n        if (port == -1)\n            checkPermission(new SocketPermission(host,\n                SecurityConstants.SOCKET_RESOLVE_ACTION),\n                context);\n        else\n            checkPermission(new SocketPermission(host+\":\"+port,\n                SecurityConstants.SOCKET_CONNECT_ACTION),\n                context);\n    }"}
{"Number":"241","API Relative Path":"java.lang.SecurityManager.java-checkPackageAccess(String)","Corresponding Source":"/**\n     * Throws a <code>SecurityException<\/code> if the\n     * calling thread is not allowed to access the package specified by\n     * the argument.\n     * <p>\n     * This method is used by the <code>loadClass<\/code> method of class\n     * loaders.\n     * <p>\n     * This method first gets a list of\n     * restricted packages by obtaining a comma-separated list from\n     * a call to\n     * <code>java.security.Security.getProperty(\"package.access\")<\/code>,\n     * and checks to see if <code>pkg<\/code> starts with or equals\n     * any of the restricted packages. If it does, then\n     * <code>checkPermission<\/code> gets called with the\n     * <code>RuntimePermission(\"accessClassInPackage.\"+pkg)<\/code>\n     * permission.\n     * <p>\n     * If this method is overridden, then\n     * <code>super.checkPackageAccess<\/code> should be called\n     * as the first line in the overridden method.\n     *\n     * @param      pkg   the package name.\n     * @exception  SecurityException  if the calling thread does not have\n     *             permission to access the specified package.\n     * @exception  NullPointerException if the package name argument is\n     *             <code>null<\/code>.\n     * @see        java.lang.ClassLoader#loadClass(java.lang.String, boolean)\n     *  loadClass\n     * @see        java.security.Security#getProperty getProperty\n     * @see        #checkPermission(java.security.Permission) checkPermission\n     */\n    public void checkPackageAccess(String pkg) {\n        if (pkg == null) {\n            throw new NullPointerException(\"package name can't be null\");\n        }\n\n        String[] pkgs;\n        synchronized (packageAccessLock) {\n            /*\n             * Do we need to update our property array?\n             */\n            if (!packageAccessValid) {\n                String tmpPropertyStr =\n                    AccessController.doPrivileged(\n                        new PrivilegedAction<String>() {\n                            public String run() {\n                                return java.security.Security.getProperty(\n                                    \"package.access\");\n                            }\n                        }\n                    );\n                packageAccess = getPackages(tmpPropertyStr);\n                packageAccessValid = true;\n            }\n\n            // Using a snapshot of packageAccess -- don't care if static field\n            // changes afterwards; array contents won't change.\n            pkgs = packageAccess;\n        }\n\n        /*\n         * Traverse the list of packages, check for any matches.\n         */\n        for (int i = 0; i < pkgs.length; i++) {\n            if (pkg.startsWith(pkgs[i]) || pkgs[i].equals(pkg + \".\")) {\n                checkPermission(\n                    new RuntimePermission(\"accessClassInPackage.\"+pkg));\n                break;  // No need to continue; only need to check this once\n            }\n        }\n    }"}
{"Number":"242","API Relative Path":"java.lang.SecurityManager.java-checkPackageDefinition(String)","Corresponding Source":"/**\n     * Throws a <code>SecurityException<\/code> if the\n     * calling thread is not allowed to define classes in the package\n     * specified by the argument.\n     * <p>\n     * This method is used by the <code>loadClass<\/code> method of some\n     * class loaders.\n     * <p>\n     * This method first gets a list of restricted packages by\n     * obtaining a comma-separated list from a call to\n     * <code>java.security.Security.getProperty(\"package.definition\")<\/code>,\n     * and checks to see if <code>pkg<\/code> starts with or equals\n     * any of the restricted packages. If it does, then\n     * <code>checkPermission<\/code> gets called with the\n     * <code>RuntimePermission(\"defineClassInPackage.\"+pkg)<\/code>\n     * permission.\n     * <p>\n     * If this method is overridden, then\n     * <code>super.checkPackageDefinition<\/code> should be called\n     * as the first line in the overridden method.\n     *\n     * @param      pkg   the package name.\n     * @exception  SecurityException  if the calling thread does not have\n     *             permission to define classes in the specified package.\n     * @see        java.lang.ClassLoader#loadClass(java.lang.String, boolean)\n     * @see        java.security.Security#getProperty getProperty\n     * @see        #checkPermission(java.security.Permission) checkPermission\n     */\n    public void checkPackageDefinition(String pkg) {\n        if (pkg == null) {\n            throw new NullPointerException(\"package name can't be null\");\n        }\n\n        String[] pkgs;\n        synchronized (packageDefinitionLock) {\n            /*\n             * Do we need to update our property array?\n             */\n            if (!packageDefinitionValid) {\n                String tmpPropertyStr =\n                    AccessController.doPrivileged(\n                        new PrivilegedAction<String>() {\n                            public String run() {\n                                return java.security.Security.getProperty(\n                                    \"package.definition\");\n                            }\n                        }\n                    );\n                packageDefinition = getPackages(tmpPropertyStr);\n                packageDefinitionValid = true;\n            }\n            // Using a snapshot of packageDefinition -- don't care if static\n            // field changes afterwards; array contents won't change.\n            pkgs = packageDefinition;\n        }\n\n        /*\n         * Traverse the list of packages, check for any matches.\n         */\n        for (int i = 0; i < pkgs.length; i++) {\n            if (pkg.startsWith(pkgs[i]) || pkgs[i].equals(pkg + \".\")) {\n                checkPermission(\n                    new RuntimePermission(\"defineClassInPackage.\"+pkg));\n                break; // No need to continue; only need to check this once\n            }\n        }\n    }"}
{"Number":"243","API Relative Path":"java.lang.SecurityManager.java-checkPermission(Permission-Object)","Corresponding Source":"/**\n     * Throws a <code>SecurityException<\/code> if the\n     * specified security context is denied access to the resource\n     * specified by the given permission.\n     * The context must be a security\n     * context returned by a previous call to\n     * <code>getSecurityContext<\/code> and the access control\n     * decision is based upon the configured security policy for\n     * that security context.\n     * <p>\n     * If <code>context<\/code> is an instance of\n     * <code>AccessControlContext<\/code> then the\n     * <code>AccessControlContext.checkPermission<\/code> method is\n     * invoked with the specified permission.\n     * <p>\n     * If <code>context<\/code> is not an instance of\n     * <code>AccessControlContext<\/code> then a\n     * <code>SecurityException<\/code> is thrown.\n     *\n     * @param      perm      the specified permission\n     * @param      context   a system-dependent security context.\n     * @exception  SecurityException  if the specified security context\n     *             is not an instance of <code>AccessControlContext<\/code>\n     *             (e.g., is <code>null<\/code>), or is denied access to the\n     *             resource specified by the given permission.\n     * @exception  NullPointerException if the permission argument is\n     *             <code>null<\/code>.\n     * @see        java.lang.SecurityManager#getSecurityContext()\n     * @see java.security.AccessControlContext#checkPermission(java.security.Permission)\n     * @since      1.2\n     */\n    public void checkPermission(Permission perm, Object context) {\n        if (context instanceof AccessControlContext) {\n            ((AccessControlContext)context).checkPermission(perm);\n        } else {\n            throw new SecurityException();\n        }\n    }"}
{"Number":"244","API Relative Path":"java.lang.SecurityManager.java-checkRead(FileDescriptor)","Corresponding Source":"/**\n     * Throws a <code>SecurityException<\/code> if the\n     * calling thread is not allowed to read from the specified file\n     * descriptor.\n     * <p>\n     * This method calls <code>checkPermission<\/code> with the\n     * <code>RuntimePermission(\"readFileDescriptor\")<\/code>\n     * permission.\n     * <p>\n     * If you override this method, then you should make a call to\n     * <code>super.checkRead<\/code>\n     * at the point the overridden method would normally throw an\n     * exception.\n     *\n     * @param      fd   the system-dependent file descriptor.\n     * @exception  SecurityException  if the calling thread does not have\n     *             permission to access the specified file descriptor.\n     * @exception  NullPointerException if the file descriptor argument is\n     *             <code>null<\/code>.\n     * @see        java.io.FileDescriptor\n     * @see        #checkPermission(java.security.Permission) checkPermission\n     */\n    public void checkRead(FileDescriptor fd) {\n        if (fd == null) {\n            throw new NullPointerException(\"file descriptor can't be null\");\n        }\n        checkPermission(new RuntimePermission(\"readFileDescriptor\"));\n    }"}
{"Number":"245","API Relative Path":"java.lang.SecurityManager.java-checkRead(String-Object)","Corresponding Source":"/**\n     * Throws a <code>SecurityException<\/code> if the\n     * specified security context is not allowed to read the file\n     * specified by the string argument. The context must be a security\n     * context returned by a previous call to\n     * <code>getSecurityContext<\/code>.\n     * <p> If <code>context<\/code> is an instance of\n     * <code>AccessControlContext<\/code> then the\n     * <code>AccessControlContext.checkPermission<\/code> method will\n     * be invoked with the <code>FilePermission(file,\"read\")<\/code> permission.\n     * <p> If <code>context<\/code> is not an instance of\n     * <code>AccessControlContext<\/code> then a\n     * <code>SecurityException<\/code> is thrown.\n     * <p>\n     * If you override this method, then you should make a call to\n     * <code>super.checkRead<\/code>\n     * at the point the overridden method would normally throw an\n     * exception.\n     *\n     * @param      file      the system-dependent filename.\n     * @param      context   a system-dependent security context.\n     * @exception  SecurityException  if the specified security context\n     *             is not an instance of <code>AccessControlContext<\/code>\n     *             (e.g., is <code>null<\/code>), or does not have permission\n     *             to read the specified file.\n     * @exception  NullPointerException if the <code>file<\/code> argument is\n     *             <code>null<\/code>.\n     * @see        java.lang.SecurityManager#getSecurityContext()\n     * @see        java.security.AccessControlContext#checkPermission(java.security.Permission)\n     */\n    public void checkRead(String file, Object context) {\n        checkPermission(\n            new FilePermission(file, SecurityConstants.FILE_READ_ACTION),\n            context);\n    }"}
{"Number":"246","API Relative Path":"java.lang.SecurityManager.java-checkWrite(FileDescriptor)","Corresponding Source":"/**\n     * Throws a <code>SecurityException<\/code> if the\n     * calling thread is not allowed to write to the specified file\n     * descriptor.\n     * <p>\n     * This method calls <code>checkPermission<\/code> with the\n     * <code>RuntimePermission(\"writeFileDescriptor\")<\/code>\n     * permission.\n     * <p>\n     * If you override this method, then you should make a call to\n     * <code>super.checkWrite<\/code>\n     * at the point the overridden method would normally throw an\n     * exception.\n     *\n     * @param      fd   the system-dependent file descriptor.\n     * @exception SecurityException  if the calling thread does not have\n     *             permission to access the specified file descriptor.\n     * @exception  NullPointerException if the file descriptor argument is\n     *             <code>null<\/code>.\n     * @see        java.io.FileDescriptor\n     * @see        #checkPermission(java.security.Permission) checkPermission\n     */\n    public void checkWrite(FileDescriptor fd) {\n        if (fd == null) {\n            throw new NullPointerException(\"file descriptor can't be null\");\n        }\n        checkPermission(new RuntimePermission(\"writeFileDescriptor\"));\n\n    }"}
{"Number":"247","API Relative Path":"java.lang.Short.java-parseShort(String-int)","Corresponding Source":"/**\n     * Parses the string argument as a signed {@code short} in the\n     * radix specified by the second argument. The characters in the\n     * string must all be digits, of the specified radix (as\n     * determined by whether {@link java.lang.Character#digit(char,\n     * int)} returns a nonnegative value) except that the first\n     * character may be an ASCII minus sign {@code '-'}\n     * ({@code '\\u005Cu002D'}) to indicate a negative value or an\n     * ASCII plus sign {@code '+'} ({@code '\\u005Cu002B'}) to\n     * indicate a positive value.  The resulting {@code short} value\n     * is returned.\n     *\n     * <p>An exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * <ul>\n     * <li> The first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * <li> The radix is either smaller than {@link\n     * java.lang.Character#MIN_RADIX} or larger than {@link\n     * java.lang.Character#MAX_RADIX}.\n     *\n     * <li> Any character of the string is not a digit of the\n     * specified radix, except that the first character may be a minus\n     * sign {@code '-'} ({@code '\\u005Cu002D'}) or plus sign\n     * {@code '+'} ({@code '\\u005Cu002B'}) provided that the\n     * string is longer than length 1.\n     *\n     * <li> The value represented by the string is not a value of type\n     * {@code short}.\n     * <\/ul>\n     *\n     * @param s         the {@code String} containing the\n     *                  {@code short} representation to be parsed\n     * @param radix     the radix to be used while parsing {@code s}\n     * @return          the {@code short} represented by the string\n     *                  argument in the specified radix.\n     * @throws          NumberFormatException If the {@code String}\n     *                  does not contain a parsable {@code short}.\n     */\n    public static short parseShort(String s, int radix)\n        throws NumberFormatException {\n        int i = Integer.parseInt(s, radix);\n        if (i < MIN_VALUE || i > MAX_VALUE)\n            throw new NumberFormatException(\n                \"Value out of range. Value:\\\"\" + s + \"\\\" Radix:\" + radix);\n        return (short)i;\n    }"}
{"Number":"248","API Relative Path":"java.lang.Short.java-parseShort(String-int)","Corresponding Source":"/**\n     * Parses the string argument as a signed {@code short} in the\n     * radix specified by the second argument. The characters in the\n     * string must all be digits, of the specified radix (as\n     * determined by whether {@link java.lang.Character#digit(char,\n     * int)} returns a nonnegative value) except that the first\n     * character may be an ASCII minus sign {@code '-'}\n     * ({@code '\\u005Cu002D'}) to indicate a negative value or an\n     * ASCII plus sign {@code '+'} ({@code '\\u005Cu002B'}) to\n     * indicate a positive value.  The resulting {@code short} value\n     * is returned.\n     *\n     * <p>An exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * <ul>\n     * <li> The first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * <li> The radix is either smaller than {@link\n     * java.lang.Character#MIN_RADIX} or larger than {@link\n     * java.lang.Character#MAX_RADIX}.\n     *\n     * <li> Any character of the string is not a digit of the\n     * specified radix, except that the first character may be a minus\n     * sign {@code '-'} ({@code '\\u005Cu002D'}) or plus sign\n     * {@code '+'} ({@code '\\u005Cu002B'}) provided that the\n     * string is longer than length 1.\n     *\n     * <li> The value represented by the string is not a value of type\n     * {@code short}.\n     * <\/ul>\n     *\n     * @param s         the {@code String} containing the\n     *                  {@code short} representation to be parsed\n     * @param radix     the radix to be used while parsing {@code s}\n     * @return          the {@code short} represented by the string\n     *                  argument in the specified radix.\n     * @throws          NumberFormatException If the {@code String}\n     *                  does not contain a parsable {@code short}.\n     */\n    public static short parseShort(String s, int radix)\n        throws NumberFormatException {\n        int i = Integer.parseInt(s, radix);\n        if (i < MIN_VALUE || i > MAX_VALUE)\n            throw new NumberFormatException(\n                \"Value out of range. Value:\\\"\" + s + \"\\\" Radix:\" + radix);\n        return (short)i;\n    }"}
{"Number":"249","API Relative Path":"java.lang.Short.java-parseShort(String-int)","Corresponding Source":"/**\n     * Parses the string argument as a signed {@code short} in the\n     * radix specified by the second argument. The characters in the\n     * string must all be digits, of the specified radix (as\n     * determined by whether {@link java.lang.Character#digit(char,\n     * int)} returns a nonnegative value) except that the first\n     * character may be an ASCII minus sign {@code '-'}\n     * ({@code '\\u005Cu002D'}) to indicate a negative value or an\n     * ASCII plus sign {@code '+'} ({@code '\\u005Cu002B'}) to\n     * indicate a positive value.  The resulting {@code short} value\n     * is returned.\n     *\n     * <p>An exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * <ul>\n     * <li> The first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * <li> The radix is either smaller than {@link\n     * java.lang.Character#MIN_RADIX} or larger than {@link\n     * java.lang.Character#MAX_RADIX}.\n     *\n     * <li> Any character of the string is not a digit of the\n     * specified radix, except that the first character may be a minus\n     * sign {@code '-'} ({@code '\\u005Cu002D'}) or plus sign\n     * {@code '+'} ({@code '\\u005Cu002B'}) provided that the\n     * string is longer than length 1.\n     *\n     * <li> The value represented by the string is not a value of type\n     * {@code short}.\n     * <\/ul>\n     *\n     * @param s         the {@code String} containing the\n     *                  {@code short} representation to be parsed\n     * @param radix     the radix to be used while parsing {@code s}\n     * @return          the {@code short} represented by the string\n     *                  argument in the specified radix.\n     * @throws          NumberFormatException If the {@code String}\n     *                  does not contain a parsable {@code short}.\n     */\n    public static short parseShort(String s, int radix)\n        throws NumberFormatException {\n        int i = Integer.parseInt(s, radix);\n        if (i < MIN_VALUE || i > MAX_VALUE)\n            throw new NumberFormatException(\n                \"Value out of range. Value:\\\"\" + s + \"\\\" Radix:\" + radix);\n        return (short)i;\n    }"}
{"Number":"250","API Relative Path":"java.lang.Short.java-Short(String)","Corresponding Source":"/**\n     * Constructs a newly allocated {@code Short} object that\n     * represents the {@code short} value indicated by the\n     * {@code String} parameter. The string is converted to a\n     * {@code short} value in exactly the manner used by the\n     * {@code parseShort} method for radix 10.\n     *\n     * @param s the {@code String} to be converted to a\n     *          {@code Short}\n     * @throws  NumberFormatException If the {@code String}\n     *          does not contain a parsable {@code short}.\n     * @see     java.lang.Short#parseShort(java.lang.String, int)\n     */\n    public Short(String s) throws NumberFormatException {\n        this.value = parseShort(s, 10);\n    }"}
{"Number":"251","API Relative Path":"java.lang.Short.java-valueOf(String-int)","Corresponding Source":"/**\n     * Returns a {@code Short} object holding the value\n     * extracted from the specified {@code String} when parsed\n     * with the radix given by the second argument. The first argument\n     * is interpreted as representing a signed {@code short} in\n     * the radix specified by the second argument, exactly as if the\n     * argument were given to the {@link #parseShort(java.lang.String,\n     * int)} method. The result is a {@code Short} object that\n     * represents the {@code short} value specified by the string.\n     *\n     * <p>In other words, this method returns a {@code Short} object\n     * equal to the value of:\n     *\n     * <blockquote>\n     *  {@code new Short(Short.parseShort(s, radix))}\n     * <\/blockquote>\n     *\n     * @param s         the string to be parsed\n     * @param radix     the radix to be used in interpreting {@code s}\n     * @return          a {@code Short} object holding the value\n     *                  represented by the string argument in the\n     *                  specified radix.\n     * @throws          NumberFormatException If the {@code String} does\n     *                  not contain a parsable {@code short}.\n     */\n    public static Short valueOf(String s, int radix)\n        throws NumberFormatException {\n        return valueOf(parseShort(s, radix));\n    }"}
{"Number":"252","API Relative Path":"java.lang.Short.java-valueOf(String-int)","Corresponding Source":"/**\n     * Returns a {@code Short} object holding the value\n     * extracted from the specified {@code String} when parsed\n     * with the radix given by the second argument. The first argument\n     * is interpreted as representing a signed {@code short} in\n     * the radix specified by the second argument, exactly as if the\n     * argument were given to the {@link #parseShort(java.lang.String,\n     * int)} method. The result is a {@code Short} object that\n     * represents the {@code short} value specified by the string.\n     *\n     * <p>In other words, this method returns a {@code Short} object\n     * equal to the value of:\n     *\n     * <blockquote>\n     *  {@code new Short(Short.parseShort(s, radix))}\n     * <\/blockquote>\n     *\n     * @param s         the string to be parsed\n     * @param radix     the radix to be used in interpreting {@code s}\n     * @return          a {@code Short} object holding the value\n     *                  represented by the string argument in the\n     *                  specified radix.\n     * @throws          NumberFormatException If the {@code String} does\n     *                  not contain a parsable {@code short}.\n     */\n    public static Short valueOf(String s, int radix)\n        throws NumberFormatException {\n        return valueOf(parseShort(s, radix));\n    }"}
{"Number":"253","API Relative Path":"java.lang.Short.java-valueOf(String-int)","Corresponding Source":"/**\n     * Returns a {@code Short} object holding the value\n     * extracted from the specified {@code String} when parsed\n     * with the radix given by the second argument. The first argument\n     * is interpreted as representing a signed {@code short} in\n     * the radix specified by the second argument, exactly as if the\n     * argument were given to the {@link #parseShort(java.lang.String,\n     * int)} method. The result is a {@code Short} object that\n     * represents the {@code short} value specified by the string.\n     *\n     * <p>In other words, this method returns a {@code Short} object\n     * equal to the value of:\n     *\n     * <blockquote>\n     *  {@code new Short(Short.parseShort(s, radix))}\n     * <\/blockquote>\n     *\n     * @param s         the string to be parsed\n     * @param radix     the radix to be used in interpreting {@code s}\n     * @return          a {@code Short} object holding the value\n     *                  represented by the string argument in the\n     *                  specified radix.\n     * @throws          NumberFormatException If the {@code String} does\n     *                  not contain a parsable {@code short}.\n     */\n    public static Short valueOf(String s, int radix)\n        throws NumberFormatException {\n        return valueOf(parseShort(s, radix));\n    }"}
{"Number":"254","API Relative Path":"java.lang.Shutdown.java-add(int-boolean-Runnable)","Corresponding Source":"/**\n     * Add a new shutdown hook.  Checks the shutdown state and the hook itself,\n     * but does not do any security checks.\n     *\n     * The registerShutdownInProgress parameter should be false except\n     * registering the DeleteOnExitHook since the first file may\n     * be added to the delete on exit list by the application shutdown\n     * hooks.\n     *\n     * @params slot  the slot in the shutdown hook array, whose element\n     *               will be invoked in order during shutdown\n     * @params registerShutdownInProgress true to allow the hook\n     *               to be registered even if the shutdown is in progress.\n     * @params hook  the hook to be registered\n     *\n     * @throw IllegalStateException\n     *        if registerShutdownInProgress is false and shutdown is in progress; or\n     *        if registerShutdownInProgress is true and the shutdown process\n     *           already passes the given slot\n     */\n    static void add(int slot, boolean registerShutdownInProgress, Runnable hook) {\n        synchronized (lock) {\n            if (hooks[slot] != null)\n                throw new InternalError(\"Shutdown hook at slot \" + slot + \" already registered\");\n\n            if (!registerShutdownInProgress) {\n                if (state > RUNNING)\n                    throw new IllegalStateException(\"Shutdown in progress\");\n            } else {\n                if (state > HOOKS || (state == HOOKS && slot <= currentRunningHook))\n                    throw new IllegalStateException(\"Shutdown in progress\");\n            }\n\n            hooks[slot] = hook;\n        }\n    }"}
{"Number":"255","API Relative Path":"java.lang.String.java-charAt(int)","Corresponding Source":"/**\n     * Returns the {@code char} value at the\n     * specified index. An index ranges from {@code 0} to\n     * {@code length() - 1}. The first {@code char} value of the sequence\n     * is at index {@code 0}, the next at index {@code 1},\n     * and so on, as for array indexing.\n     *\n     * <p>If the {@code char} value specified by the index is a\n     * <a href=\"Character.html#unicode\">surrogate<\/a>, the surrogate\n     * value is returned.\n     *\n     * @param      index   the index of the {@code char} value.\n     * @return     the {@code char} value at the specified index of this string.\n     *             The first {@code char} value is at index {@code 0}.\n     * @exception  IndexOutOfBoundsException  if the {@code index}\n     *             argument is negative or not less than the length of this\n     *             string.\n     */\n    public char charAt(int index) {\n        if ((index < 0) || (index >= value.length)) {\n            throw new StringIndexOutOfBoundsException(index);\n        }\n        return value[index];\n    }"}
{"Number":"256","API Relative Path":"java.lang.String.java-codePointAt(int)","Corresponding Source":"/**\n     * Returns the character (Unicode code point) at the specified\n     * index. The index refers to {@code char} values\n     * (Unicode code units) and ranges from {@code 0} to\n     * {@link #length()}{@code  - 1}.\n     *\n     * <p> If the {@code char} value specified at the given index\n     * is in the high-surrogate range, the following index is less\n     * than the length of this {@code String}, and the\n     * {@code char} value at the following index is in the\n     * low-surrogate range, then the supplementary code point\n     * corresponding to this surrogate pair is returned. Otherwise,\n     * the {@code char} value at the given index is returned.\n     *\n     * @param      index the index to the {@code char} values\n     * @return     the code point value of the character at the\n     *             {@code index}\n     * @exception  IndexOutOfBoundsException  if the {@code index}\n     *             argument is negative or not less than the length of this\n     *             string.\n     * @since      1.5\n     */\n    public int codePointAt(int index) {\n        if ((index < 0) || (index >= value.length)) {\n            throw new StringIndexOutOfBoundsException(index);\n        }\n        return Character.codePointAtImpl(value, index, value.length);\n    }"}
{"Number":"257","API Relative Path":"java.lang.String.java-codePointCount(int-int)","Corresponding Source":"/**\n     * Returns the number of Unicode code points in the specified text\n     * range of this {@code String}. The text range begins at the\n     * specified {@code beginIndex} and extends to the\n     * {@code char} at index {@code endIndex - 1}. Thus the\n     * length (in {@code char}s) of the text range is\n     * {@code endIndex-beginIndex}. Unpaired surrogates within\n     * the text range count as one code point each.\n     *\n     * @param beginIndex the index to the first {@code char} of\n     * the text range.\n     * @param endIndex the index after the last {@code char} of\n     * the text range.\n     * @return the number of Unicode code points in the specified text\n     * range\n     * @exception IndexOutOfBoundsException if the\n     * {@code beginIndex} is negative, or {@code endIndex}\n     * is larger than the length of this {@code String}, or\n     * {@code beginIndex} is larger than {@code endIndex}.\n     * @since  1.5\n     */\n    public int codePointCount(int beginIndex, int endIndex) {\n        if (beginIndex < 0 || endIndex > value.length || beginIndex > endIndex) {\n            throw new IndexOutOfBoundsException();\n        }\n        return Character.codePointCountImpl(value, beginIndex, endIndex - beginIndex);\n    }"}
{"Number":"258","API Relative Path":"java.lang.String.java-getBytes(Charset)","Corresponding Source":"/**\n     * Encodes this {@code String} into a sequence of bytes using the given\n     * {@linkplain java.nio.charset.Charset charset}, storing the result into a\n     * new byte array.\n     *\n     * <p> This method always replaces malformed-input and unmappable-character\n     * sequences with this charset's default replacement byte array.  The\n     * {@link java.nio.charset.CharsetEncoder} class should be used when more\n     * control over the encoding process is required.\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset} to be used to encode\n     *         the {@code String}\n     *\n     * @return  The resultant byte array\n     *\n     * @since  1.6\n     */\n    public byte[] getBytes(Charset charset) {\n        if (charset == null) throw new NullPointerException();\n        return StringCoding.encode(charset, value, 0, value.length);\n    }"}
{"Number":"259","API Relative Path":"java.lang.String.java-getBytes(int-int-byte-int)","Corresponding Source":"/**\n     * Copies characters from this string into the destination byte array. Each\n     * byte receives the 8 low-order bits of the corresponding character. The\n     * eight high-order bits of each character are not copied and do not\n     * participate in the transfer in any way.\n     *\n     * <p> The first character to be copied is at index {@code srcBegin}; the\n     * last character to be copied is at index {@code srcEnd-1}.  The total\n     * number of characters to be copied is {@code srcEnd-srcBegin}. The\n     * characters, converted to bytes, are copied into the subarray of {@code\n     * dst} starting at index {@code dstBegin} and ending at index:\n     *\n     * <blockquote><pre>\n     *     dstbegin + (srcEnd-srcBegin) - 1\n     * <\/pre><\/blockquote>\n     *\n     * @deprecated  This method does not properly convert characters into\n     * bytes.  As of JDK&nbsp;1.1, the preferred way to do this is via the\n     * {@link #getBytes()} method, which uses the platform's default charset.\n     *\n     * @param  srcBegin\n     *         Index of the first character in the string to copy\n     *\n     * @param  srcEnd\n     *         Index after the last character in the string to copy\n     *\n     * @param  dst\n     *         The destination array\n     *\n     * @param  dstBegin\n     *         The start offset in the destination array\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If any of the following is true:\n     *          <ul>\n     *            <li> {@code srcBegin} is negative\n     *            <li> {@code srcBegin} is greater than {@code srcEnd}\n     *            <li> {@code srcEnd} is greater than the length of this String\n     *            <li> {@code dstBegin} is negative\n     *            <li> {@code dstBegin+(srcEnd-srcBegin)} is larger than {@code\n     *                 dst.length}\n     *          <\/ul>\n     */\n    @Deprecated\n    public void getBytes(int srcBegin, int srcEnd, byte dst[], int dstBegin) {\n        if (srcBegin < 0) {\n            throw new StringIndexOutOfBoundsException(srcBegin);\n        }\n        if (srcEnd > value.length) {\n            throw new StringIndexOutOfBoundsException(srcEnd);\n        }\n        if (srcBegin > srcEnd) {\n            throw new StringIndexOutOfBoundsException(srcEnd - srcBegin);\n        }\n        Objects.requireNonNull(dst);\n\n        int j = dstBegin;\n        int n = srcEnd;\n        int i = srcBegin;\n        char[] val = value;   /* avoid getfield opcode */\n\n        while (i < n) {\n            dst[j++] = (byte)val[i++];\n        }\n    }"}
{"Number":"260","API Relative Path":"java.lang.String.java-getBytes(int-int-byte-int)","Corresponding Source":"/**\n     * Copies characters from this string into the destination byte array. Each\n     * byte receives the 8 low-order bits of the corresponding character. The\n     * eight high-order bits of each character are not copied and do not\n     * participate in the transfer in any way.\n     *\n     * <p> The first character to be copied is at index {@code srcBegin}; the\n     * last character to be copied is at index {@code srcEnd-1}.  The total\n     * number of characters to be copied is {@code srcEnd-srcBegin}. The\n     * characters, converted to bytes, are copied into the subarray of {@code\n     * dst} starting at index {@code dstBegin} and ending at index:\n     *\n     * <blockquote><pre>\n     *     dstbegin + (srcEnd-srcBegin) - 1\n     * <\/pre><\/blockquote>\n     *\n     * @deprecated  This method does not properly convert characters into\n     * bytes.  As of JDK&nbsp;1.1, the preferred way to do this is via the\n     * {@link #getBytes()} method, which uses the platform's default charset.\n     *\n     * @param  srcBegin\n     *         Index of the first character in the string to copy\n     *\n     * @param  srcEnd\n     *         Index after the last character in the string to copy\n     *\n     * @param  dst\n     *         The destination array\n     *\n     * @param  dstBegin\n     *         The start offset in the destination array\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If any of the following is true:\n     *          <ul>\n     *            <li> {@code srcBegin} is negative\n     *            <li> {@code srcBegin} is greater than {@code srcEnd}\n     *            <li> {@code srcEnd} is greater than the length of this String\n     *            <li> {@code dstBegin} is negative\n     *            <li> {@code dstBegin+(srcEnd-srcBegin)} is larger than {@code\n     *                 dst.length}\n     *          <\/ul>\n     */\n    @Deprecated\n    public void getBytes(int srcBegin, int srcEnd, byte dst[], int dstBegin) {\n        if (srcBegin < 0) {\n            throw new StringIndexOutOfBoundsException(srcBegin);\n        }\n        if (srcEnd > value.length) {\n            throw new StringIndexOutOfBoundsException(srcEnd);\n        }\n        if (srcBegin > srcEnd) {\n            throw new StringIndexOutOfBoundsException(srcEnd - srcBegin);\n        }\n        Objects.requireNonNull(dst);\n\n        int j = dstBegin;\n        int n = srcEnd;\n        int i = srcBegin;\n        char[] val = value;   /* avoid getfield opcode */\n\n        while (i < n) {\n            dst[j++] = (byte)val[i++];\n        }\n    }"}
{"Number":"261","API Relative Path":"java.lang.String.java-getBytes(int-int-byte-int)","Corresponding Source":"/**\n     * Copies characters from this string into the destination byte array. Each\n     * byte receives the 8 low-order bits of the corresponding character. The\n     * eight high-order bits of each character are not copied and do not\n     * participate in the transfer in any way.\n     *\n     * <p> The first character to be copied is at index {@code srcBegin}; the\n     * last character to be copied is at index {@code srcEnd-1}.  The total\n     * number of characters to be copied is {@code srcEnd-srcBegin}. The\n     * characters, converted to bytes, are copied into the subarray of {@code\n     * dst} starting at index {@code dstBegin} and ending at index:\n     *\n     * <blockquote><pre>\n     *     dstbegin + (srcEnd-srcBegin) - 1\n     * <\/pre><\/blockquote>\n     *\n     * @deprecated  This method does not properly convert characters into\n     * bytes.  As of JDK&nbsp;1.1, the preferred way to do this is via the\n     * {@link #getBytes()} method, which uses the platform's default charset.\n     *\n     * @param  srcBegin\n     *         Index of the first character in the string to copy\n     *\n     * @param  srcEnd\n     *         Index after the last character in the string to copy\n     *\n     * @param  dst\n     *         The destination array\n     *\n     * @param  dstBegin\n     *         The start offset in the destination array\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If any of the following is true:\n     *          <ul>\n     *            <li> {@code srcBegin} is negative\n     *            <li> {@code srcBegin} is greater than {@code srcEnd}\n     *            <li> {@code srcEnd} is greater than the length of this String\n     *            <li> {@code dstBegin} is negative\n     *            <li> {@code dstBegin+(srcEnd-srcBegin)} is larger than {@code\n     *                 dst.length}\n     *          <\/ul>\n     */\n    @Deprecated\n    public void getBytes(int srcBegin, int srcEnd, byte dst[], int dstBegin) {\n        if (srcBegin < 0) {\n            throw new StringIndexOutOfBoundsException(srcBegin);\n        }\n        if (srcEnd > value.length) {\n            throw new StringIndexOutOfBoundsException(srcEnd);\n        }\n        if (srcBegin > srcEnd) {\n            throw new StringIndexOutOfBoundsException(srcEnd - srcBegin);\n        }\n        Objects.requireNonNull(dst);\n\n        int j = dstBegin;\n        int n = srcEnd;\n        int i = srcBegin;\n        char[] val = value;   /* avoid getfield opcode */\n\n        while (i < n) {\n            dst[j++] = (byte)val[i++];\n        }\n    }"}
{"Number":"262","API Relative Path":"java.lang.String.java-getBytes(String)","Corresponding Source":"/**\n     * Encodes this {@code String} into a sequence of bytes using the named\n     * charset, storing the result into a new byte array.\n     *\n     * <p> The behavior of this method when this string cannot be encoded in\n     * the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetEncoder} class should be used when more control\n     * over the encoding process is required.\n     *\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @return  The resultant byte array\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  JDK1.1\n     */\n    public byte[] getBytes(String charsetName)\n            throws UnsupportedEncodingException {\n        if (charsetName == null) throw new NullPointerException();\n        return StringCoding.encode(charsetName, value, 0, value.length);\n    }"}
{"Number":"263","API Relative Path":"java.lang.String.java-getBytes(String)","Corresponding Source":"/**\n     * Encodes this {@code String} into a sequence of bytes using the named\n     * charset, storing the result into a new byte array.\n     *\n     * <p> The behavior of this method when this string cannot be encoded in\n     * the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetEncoder} class should be used when more control\n     * over the encoding process is required.\n     *\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @return  The resultant byte array\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  JDK1.1\n     */\n    public byte[] getBytes(String charsetName)\n            throws UnsupportedEncodingException {\n        if (charsetName == null) throw new NullPointerException();\n        return StringCoding.encode(charsetName, value, 0, value.length);\n    }"}
{"Number":"264","API Relative Path":"java.lang.String.java-getChars(int-int-char-int)","Corresponding Source":"/**\n     * Copies characters from this string into the destination character\n     * array.\n     * <p>\n     * The first character to be copied is at index {@code srcBegin};\n     * the last character to be copied is at index {@code srcEnd-1}\n     * (thus the total number of characters to be copied is\n     * {@code srcEnd-srcBegin}). The characters are copied into the\n     * subarray of {@code dst} starting at index {@code dstBegin}\n     * and ending at index:\n     * <blockquote><pre>\n     *     dstbegin + (srcEnd-srcBegin) - 1\n     * <\/pre><\/blockquote>\n     *\n     * @param      srcBegin   index of the first character in the string\n     *                        to copy.\n     * @param      srcEnd     index after the last character in the string\n     *                        to copy.\n     * @param      dst        the destination array.\n     * @param      dstBegin   the start offset in the destination array.\n     * @exception IndexOutOfBoundsException If any of the following\n     *            is true:\n     *            <ul><li>{@code srcBegin} is negative.\n     *            <li>{@code srcBegin} is greater than {@code srcEnd}\n     *            <li>{@code srcEnd} is greater than the length of this\n     *                string\n     *            <li>{@code dstBegin} is negative\n     *            <li>{@code dstBegin+(srcEnd-srcBegin)} is larger than\n     *                {@code dst.length}<\/ul>\n     */\n    public void getChars(int srcBegin, int srcEnd, char dst[], int dstBegin) {\n        if (srcBegin < 0) {\n            throw new StringIndexOutOfBoundsException(srcBegin);\n        }\n        if (srcEnd > value.length) {\n            throw new StringIndexOutOfBoundsException(srcEnd);\n        }\n        if (srcBegin > srcEnd) {\n            throw new StringIndexOutOfBoundsException(srcEnd - srcBegin);\n        }\n        System.arraycopy(value, srcBegin, dst, dstBegin, srcEnd - srcBegin);\n    }"}
{"Number":"265","API Relative Path":"java.lang.String.java-getChars(int-int-char-int)","Corresponding Source":"/**\n     * Copies characters from this string into the destination character\n     * array.\n     * <p>\n     * The first character to be copied is at index {@code srcBegin};\n     * the last character to be copied is at index {@code srcEnd-1}\n     * (thus the total number of characters to be copied is\n     * {@code srcEnd-srcBegin}). The characters are copied into the\n     * subarray of {@code dst} starting at index {@code dstBegin}\n     * and ending at index:\n     * <blockquote><pre>\n     *     dstbegin + (srcEnd-srcBegin) - 1\n     * <\/pre><\/blockquote>\n     *\n     * @param      srcBegin   index of the first character in the string\n     *                        to copy.\n     * @param      srcEnd     index after the last character in the string\n     *                        to copy.\n     * @param      dst        the destination array.\n     * @param      dstBegin   the start offset in the destination array.\n     * @exception IndexOutOfBoundsException If any of the following\n     *            is true:\n     *            <ul><li>{@code srcBegin} is negative.\n     *            <li>{@code srcBegin} is greater than {@code srcEnd}\n     *            <li>{@code srcEnd} is greater than the length of this\n     *                string\n     *            <li>{@code dstBegin} is negative\n     *            <li>{@code dstBegin+(srcEnd-srcBegin)} is larger than\n     *                {@code dst.length}<\/ul>\n     */\n    public void getChars(int srcBegin, int srcEnd, char dst[], int dstBegin) {\n        if (srcBegin < 0) {\n            throw new StringIndexOutOfBoundsException(srcBegin);\n        }\n        if (srcEnd > value.length) {\n            throw new StringIndexOutOfBoundsException(srcEnd);\n        }\n        if (srcBegin > srcEnd) {\n            throw new StringIndexOutOfBoundsException(srcEnd - srcBegin);\n        }\n        System.arraycopy(value, srcBegin, dst, dstBegin, srcEnd - srcBegin);\n    }"}
{"Number":"266","API Relative Path":"java.lang.String.java-getChars(int-int-char-int)","Corresponding Source":"/**\n     * Copies characters from this string into the destination character\n     * array.\n     * <p>\n     * The first character to be copied is at index {@code srcBegin};\n     * the last character to be copied is at index {@code srcEnd-1}\n     * (thus the total number of characters to be copied is\n     * {@code srcEnd-srcBegin}). The characters are copied into the\n     * subarray of {@code dst} starting at index {@code dstBegin}\n     * and ending at index:\n     * <blockquote><pre>\n     *     dstbegin + (srcEnd-srcBegin) - 1\n     * <\/pre><\/blockquote>\n     *\n     * @param      srcBegin   index of the first character in the string\n     *                        to copy.\n     * @param      srcEnd     index after the last character in the string\n     *                        to copy.\n     * @param      dst        the destination array.\n     * @param      dstBegin   the start offset in the destination array.\n     * @exception IndexOutOfBoundsException If any of the following\n     *            is true:\n     *            <ul><li>{@code srcBegin} is negative.\n     *            <li>{@code srcBegin} is greater than {@code srcEnd}\n     *            <li>{@code srcEnd} is greater than the length of this\n     *                string\n     *            <li>{@code dstBegin} is negative\n     *            <li>{@code dstBegin+(srcEnd-srcBegin)} is larger than\n     *                {@code dst.length}<\/ul>\n     */\n    public void getChars(int srcBegin, int srcEnd, char dst[], int dstBegin) {\n        if (srcBegin < 0) {\n            throw new StringIndexOutOfBoundsException(srcBegin);\n        }\n        if (srcEnd > value.length) {\n            throw new StringIndexOutOfBoundsException(srcEnd);\n        }\n        if (srcBegin > srcEnd) {\n            throw new StringIndexOutOfBoundsException(srcEnd - srcBegin);\n        }\n        System.arraycopy(value, srcBegin, dst, dstBegin, srcEnd - srcBegin);\n    }"}
{"Number":"267","API Relative Path":"java.lang.String.java-join(CharSequence-Iterable)","Corresponding Source":"/**\n     * Returns a new {@code String} composed of copies of the\n     * {@code CharSequence elements} joined together with a copy of the\n     * specified {@code delimiter}.\n     *\n     * <blockquote>For example,\n     * <pre>{@code\n     *     List<String> strings = new LinkedList<>();\n     *     strings.add(\"Java\");strings.add(\"is\");\n     *     strings.add(\"cool\");\n     *     String message = String.join(\" \", strings);\n     *     //message returned is: \"Java is cool\"\n     *\n     *     Set<String> strings = new LinkedHashSet<>();\n     *     strings.add(\"Java\"); strings.add(\"is\");\n     *     strings.add(\"very\"); strings.add(\"cool\");\n     *     String message = String.join(\"-\", strings);\n     *     //message returned is: \"Java-is-very-cool\"\n     * }<\/pre><\/blockquote>\n     *\n     * Note that if an individual element is {@code null}, then {@code \"null\"} is added.\n     *\n     * @param  delimiter a sequence of characters that is used to separate each\n     *         of the {@code elements} in the resulting {@code String}\n     * @param  elements an {@code Iterable} that will have its {@code elements}\n     *         joined together.\n     *\n     * @return a new {@code String} that is composed from the {@code elements}\n     *         argument\n     *\n     * @throws NullPointerException If {@code delimiter} or {@code elements}\n     *         is {@code null}\n     *\n     * @see    #join(CharSequence,CharSequence...)\n     * @see    java.util.StringJoiner\n     * @since 1.8\n     */\n    public static String join(CharSequence delimiter,\n            Iterable<? extends CharSequence> elements) {\n        Objects.requireNonNull(delimiter);\n        Objects.requireNonNull(elements);\n        StringJoiner joiner = new StringJoiner(delimiter);\n        for (CharSequence cs: elements) {\n            joiner.add(cs);\n        }\n        return joiner.toString();\n    }"}
{"Number":"268","API Relative Path":"java.lang.String.java-offsetByCodePoints(int-int)","Corresponding Source":"/**\n     * Returns the index within this {@code String} that is\n     * offset from the given {@code index} by\n     * {@code codePointOffset} code points. Unpaired surrogates\n     * within the text range given by {@code index} and\n     * {@code codePointOffset} count as one code point each.\n     *\n     * @param index the index to be offset\n     * @param codePointOffset the offset in code points\n     * @return the index within this {@code String}\n     * @exception IndexOutOfBoundsException if {@code index}\n     *   is negative or larger then the length of this\n     *   {@code String}, or if {@code codePointOffset} is positive\n     *   and the substring starting with {@code index} has fewer\n     *   than {@code codePointOffset} code points,\n     *   or if {@code codePointOffset} is negative and the substring\n     *   before {@code index} has fewer than the absolute value\n     *   of {@code codePointOffset} code points.\n     * @since 1.5\n     */\n    public int offsetByCodePoints(int index, int codePointOffset) {\n        if (index < 0 || index > value.length) {\n            throw new IndexOutOfBoundsException();\n        }\n        return Character.offsetByCodePointsImpl(value, 0, value.length,\n                index, codePointOffset);\n    }"}
{"Number":"269","API Relative Path":"java.lang.String.java-offsetByCodePoints(int-int)","Corresponding Source":"/**\n     * Returns the index within this {@code String} that is\n     * offset from the given {@code index} by\n     * {@code codePointOffset} code points. Unpaired surrogates\n     * within the text range given by {@code index} and\n     * {@code codePointOffset} count as one code point each.\n     *\n     * @param index the index to be offset\n     * @param codePointOffset the offset in code points\n     * @return the index within this {@code String}\n     * @exception IndexOutOfBoundsException if {@code index}\n     *   is negative or larger then the length of this\n     *   {@code String}, or if {@code codePointOffset} is positive\n     *   and the substring starting with {@code index} has fewer\n     *   than {@code codePointOffset} code points,\n     *   or if {@code codePointOffset} is negative and the substring\n     *   before {@code index} has fewer than the absolute value\n     *   of {@code codePointOffset} code points.\n     * @since 1.5\n     */\n    public int offsetByCodePoints(int index, int codePointOffset) {\n        if (index < 0 || index > value.length) {\n            throw new IndexOutOfBoundsException();\n        }\n        return Character.offsetByCodePointsImpl(value, 0, value.length,\n                index, codePointOffset);\n    }"}
{"Number":"270","API Relative Path":"java.lang.String.java-String(byte-int-int-Charset)","Corresponding Source":"/**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the specified {@linkplain java.nio.charset.Charset charset}.\n     * The length of the new {@code String} is a function of the charset, and\n     * hence may not be equal to the length of the subarray.\n     *\n     * <p> This method always replaces malformed-input and unmappable-character\n     * sequences with this charset's default replacement string.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset charset} to be used to\n     *         decode the {@code bytes}\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the {@code offset} and {@code length} arguments index\n     *          characters outside the bounds of the {@code bytes} array\n     *\n     * @since  1.6\n     */\n    public String(byte bytes[], int offset, int length, Charset charset) {\n        if (charset == null)\n            throw new NullPointerException(\"charset\");\n        checkBounds(bytes, offset, length);\n        this.value =  StringCoding.decode(charset, bytes, offset, length);\n    }"}
{"Number":"271","API Relative Path":"java.lang.String.java-String(byte-int-int-String)","Corresponding Source":"/**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the specified charset.  The length of the new {@code String}\n     * is a function of the charset, and hence may not be equal to the length\n     * of the subarray.\n     *\n     * <p> The behavior of this constructor when the given bytes are not valid\n     * in the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the {@code offset} and {@code length} arguments index\n     *          characters outside the bounds of the {@code bytes} array\n     *\n     * @since  JDK1.1\n     */\n    public String(byte bytes[], int offset, int length, String charsetName)\n            throws UnsupportedEncodingException {\n        if (charsetName == null)\n            throw new NullPointerException(\"charsetName\");\n        checkBounds(bytes, offset, length);\n        this.value = StringCoding.decode(charsetName, bytes, offset, length);\n    }"}
{"Number":"272","API Relative Path":"java.lang.String.java-String(char-int-int)","Corresponding Source":"/**\n     * Allocates a new {@code String} that contains characters from a subarray\n     * of the character array argument. The {@code offset} argument is the\n     * index of the first character of the subarray and the {@code count}\n     * argument specifies the length of the subarray. The contents of the\n     * subarray are copied; subsequent modification of the character array does\n     * not affect the newly created string.\n     *\n     * @param  value\n     *         Array that is the source of characters\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the {@code offset} and {@code count} arguments index\n     *          characters outside the bounds of the {@code value} array\n     */\n    public String(char value[], int offset, int count) {\n        if (offset < 0) {\n            throw new StringIndexOutOfBoundsException(offset);\n        }\n        if (count < 0) {\n            throw new StringIndexOutOfBoundsException(count);\n        }\n        // Note: offset or count might be near -1>>>1.\n        if (offset > value.length - count) {\n            throw new StringIndexOutOfBoundsException(offset + count);\n        }\n        this.value = Arrays.copyOfRange(value, offset, offset+count);\n    }"}
{"Number":"273","API Relative Path":"java.lang.String.java-String(char-int-int)","Corresponding Source":"/**\n     * Allocates a new {@code String} that contains characters from a subarray\n     * of the character array argument. The {@code offset} argument is the\n     * index of the first character of the subarray and the {@code count}\n     * argument specifies the length of the subarray. The contents of the\n     * subarray are copied; subsequent modification of the character array does\n     * not affect the newly created string.\n     *\n     * @param  value\n     *         Array that is the source of characters\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the {@code offset} and {@code count} arguments index\n     *          characters outside the bounds of the {@code value} array\n     */\n    public String(char value[], int offset, int count) {\n        if (offset < 0) {\n            throw new StringIndexOutOfBoundsException(offset);\n        }\n        if (count < 0) {\n            throw new StringIndexOutOfBoundsException(count);\n        }\n        // Note: offset or count might be near -1>>>1.\n        if (offset > value.length - count) {\n            throw new StringIndexOutOfBoundsException(offset + count);\n        }\n        this.value = Arrays.copyOfRange(value, offset, offset+count);\n    }"}
{"Number":"274","API Relative Path":"java.lang.String.java-String(char-int-int)","Corresponding Source":"/**\n     * Allocates a new {@code String} that contains characters from a subarray\n     * of the character array argument. The {@code offset} argument is the\n     * index of the first character of the subarray and the {@code count}\n     * argument specifies the length of the subarray. The contents of the\n     * subarray are copied; subsequent modification of the character array does\n     * not affect the newly created string.\n     *\n     * @param  value\n     *         Array that is the source of characters\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the {@code offset} and {@code count} arguments index\n     *          characters outside the bounds of the {@code value} array\n     */\n    public String(char value[], int offset, int count) {\n        if (offset < 0) {\n            throw new StringIndexOutOfBoundsException(offset);\n        }\n        if (count < 0) {\n            throw new StringIndexOutOfBoundsException(count);\n        }\n        // Note: offset or count might be near -1>>>1.\n        if (offset > value.length - count) {\n            throw new StringIndexOutOfBoundsException(offset + count);\n        }\n        this.value = Arrays.copyOfRange(value, offset, offset+count);\n    }"}
{"Number":"275","API Relative Path":"java.lang.String.java-String(int[]-int-int)","Corresponding Source":"/**\n     * Allocates a new {@code String} that contains characters from a subarray\n     * of the <a href=\"Character.html#unicode\">Unicode code point<\/a> array\n     * argument.  The {@code offset} argument is the index of the first code\n     * point of the subarray and the {@code count} argument specifies the\n     * length of the subarray.  The contents of the subarray are converted to\n     * {@code char}s; subsequent modification of the {@code int} array does not\n     * affect the newly created string.\n     *\n     * @param  codePoints\n     *         Array that is the source of Unicode code points\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IllegalArgumentException\n     *          If any invalid Unicode code point is found in {@code\n     *          codePoints}\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the {@code offset} and {@code count} arguments index\n     *          characters outside the bounds of the {@code codePoints} array\n     *\n     * @since  1.5\n     */\n    public String(int[] codePoints, int offset, int count) {\n        if (offset < 0) {\n            throw new StringIndexOutOfBoundsException(offset);\n        }\n        if (count < 0) {\n            throw new StringIndexOutOfBoundsException(count);\n        }\n        // Note: offset or count might be near -1>>>1.\n        if (offset > codePoints.length - count) {\n            throw new StringIndexOutOfBoundsException(offset + count);\n        }\n\n        final int end = offset + count;\n\n        // Pass 1: Compute precise size of char[]\n        int n = count;\n        for (int i = offset; i < end; i++) {\n            int c = codePoints[i];\n            if (Character.isBmpCodePoint(c))\n                continue;\n            else if (Character.isValidCodePoint(c))\n                n++;\n            else throw new IllegalArgumentException(Integer.toString(c));\n        }\n\n        // Pass 2: Allocate and fill in char[]\n        final char[] v = new char[n];\n\n        for (int i = offset, j = 0; i < end; i++, j++) {\n            int c = codePoints[i];\n            if (Character.isBmpCodePoint(c))\n                v[j] = (char)c;\n            else\n                Character.toSurrogates(c, v, j++);\n        }\n\n        this.value = v;\n    }"}
{"Number":"276","API Relative Path":"java.lang.String.java-String(int[]-int-int)","Corresponding Source":"/**\n     * Allocates a new {@code String} that contains characters from a subarray\n     * of the <a href=\"Character.html#unicode\">Unicode code point<\/a> array\n     * argument.  The {@code offset} argument is the index of the first code\n     * point of the subarray and the {@code count} argument specifies the\n     * length of the subarray.  The contents of the subarray are converted to\n     * {@code char}s; subsequent modification of the {@code int} array does not\n     * affect the newly created string.\n     *\n     * @param  codePoints\n     *         Array that is the source of Unicode code points\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IllegalArgumentException\n     *          If any invalid Unicode code point is found in {@code\n     *          codePoints}\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the {@code offset} and {@code count} arguments index\n     *          characters outside the bounds of the {@code codePoints} array\n     *\n     * @since  1.5\n     */\n    public String(int[] codePoints, int offset, int count) {\n        if (offset < 0) {\n            throw new StringIndexOutOfBoundsException(offset);\n        }\n        if (count < 0) {\n            throw new StringIndexOutOfBoundsException(count);\n        }\n        // Note: offset or count might be near -1>>>1.\n        if (offset > codePoints.length - count) {\n            throw new StringIndexOutOfBoundsException(offset + count);\n        }\n\n        final int end = offset + count;\n\n        // Pass 1: Compute precise size of char[]\n        int n = count;\n        for (int i = offset; i < end; i++) {\n            int c = codePoints[i];\n            if (Character.isBmpCodePoint(c))\n                continue;\n            else if (Character.isValidCodePoint(c))\n                n++;\n            else throw new IllegalArgumentException(Integer.toString(c));\n        }\n\n        // Pass 2: Allocate and fill in char[]\n        final char[] v = new char[n];\n\n        for (int i = offset, j = 0; i < end; i++, j++) {\n            int c = codePoints[i];\n            if (Character.isBmpCodePoint(c))\n                v[j] = (char)c;\n            else\n                Character.toSurrogates(c, v, j++);\n        }\n\n        this.value = v;\n    }"}
{"Number":"277","API Relative Path":"java.lang.String.java-String(int[]-int-int)","Corresponding Source":"/**\n     * Allocates a new {@code String} that contains characters from a subarray\n     * of the <a href=\"Character.html#unicode\">Unicode code point<\/a> array\n     * argument.  The {@code offset} argument is the index of the first code\n     * point of the subarray and the {@code count} argument specifies the\n     * length of the subarray.  The contents of the subarray are converted to\n     * {@code char}s; subsequent modification of the {@code int} array does not\n     * affect the newly created string.\n     *\n     * @param  codePoints\n     *         Array that is the source of Unicode code points\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IllegalArgumentException\n     *          If any invalid Unicode code point is found in {@code\n     *          codePoints}\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the {@code offset} and {@code count} arguments index\n     *          characters outside the bounds of the {@code codePoints} array\n     *\n     * @since  1.5\n     */\n    public String(int[] codePoints, int offset, int count) {\n        if (offset < 0) {\n            throw new StringIndexOutOfBoundsException(offset);\n        }\n        if (count < 0) {\n            throw new StringIndexOutOfBoundsException(count);\n        }\n        // Note: offset or count might be near -1>>>1.\n        if (offset > codePoints.length - count) {\n            throw new StringIndexOutOfBoundsException(offset + count);\n        }\n\n        final int end = offset + count;\n\n        // Pass 1: Compute precise size of char[]\n        int n = count;\n        for (int i = offset; i < end; i++) {\n            int c = codePoints[i];\n            if (Character.isBmpCodePoint(c))\n                continue;\n            else if (Character.isValidCodePoint(c))\n                n++;\n            else throw new IllegalArgumentException(Integer.toString(c));\n        }\n\n        // Pass 2: Allocate and fill in char[]\n        final char[] v = new char[n];\n\n        for (int i = offset, j = 0; i < end; i++, j++) {\n            int c = codePoints[i];\n            if (Character.isBmpCodePoint(c))\n                v[j] = (char)c;\n            else\n                Character.toSurrogates(c, v, j++);\n        }\n\n        this.value = v;\n    }"}
{"Number":"278","API Relative Path":"java.lang.String.java-subSequence(int-int)","Corresponding Source":"/**\n     * Returns a character sequence that is a subsequence of this sequence.\n     *\n     * <p> An invocation of this method of the form\n     *\n     * <blockquote><pre>\n     * str.subSequence(begin,&nbsp;end)<\/pre><\/blockquote>\n     *\n     * behaves in exactly the same way as the invocation\n     *\n     * <blockquote><pre>\n     * str.substring(begin,&nbsp;end)<\/pre><\/blockquote>\n     *\n     * @apiNote\n     * This method is defined so that the {@code String} class can implement\n     * the {@link CharSequence} interface.\n     *\n     * @param   beginIndex   the begin index, inclusive.\n     * @param   endIndex     the end index, exclusive.\n     * @return  the specified subsequence.\n     *\n     * @throws  IndexOutOfBoundsException\n     *          if {@code beginIndex} or {@code endIndex} is negative,\n     *          if {@code endIndex} is greater than {@code length()},\n     *          or if {@code beginIndex} is greater than {@code endIndex}\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public CharSequence subSequence(int beginIndex, int endIndex) {\n        return this.substring(beginIndex, endIndex);\n    }"}
{"Number":"279","API Relative Path":"java.lang.String.java-subSequence(int-int)","Corresponding Source":"/**\n     * Returns a character sequence that is a subsequence of this sequence.\n     *\n     * <p> An invocation of this method of the form\n     *\n     * <blockquote><pre>\n     * str.subSequence(begin,&nbsp;end)<\/pre><\/blockquote>\n     *\n     * behaves in exactly the same way as the invocation\n     *\n     * <blockquote><pre>\n     * str.substring(begin,&nbsp;end)<\/pre><\/blockquote>\n     *\n     * @apiNote\n     * This method is defined so that the {@code String} class can implement\n     * the {@link CharSequence} interface.\n     *\n     * @param   beginIndex   the begin index, inclusive.\n     * @param   endIndex     the end index, exclusive.\n     * @return  the specified subsequence.\n     *\n     * @throws  IndexOutOfBoundsException\n     *          if {@code beginIndex} or {@code endIndex} is negative,\n     *          if {@code endIndex} is greater than {@code length()},\n     *          or if {@code beginIndex} is greater than {@code endIndex}\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public CharSequence subSequence(int beginIndex, int endIndex) {\n        return this.substring(beginIndex, endIndex);\n    }"}
{"Number":"280","API Relative Path":"java.lang.String.java-substring(int)","Corresponding Source":"/**\n     * Returns a string that is a substring of this string. The\n     * substring begins with the character at the specified index and\n     * extends to the end of this string. <p>\n     * Examples:\n     * <blockquote><pre>\n     * \"unhappy\".substring(2) returns \"happy\"\n     * \"Harbison\".substring(3) returns \"bison\"\n     * \"emptiness\".substring(9) returns \"\" (an empty string)\n     * <\/pre><\/blockquote>\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @return     the specified substring.\n     * @exception  IndexOutOfBoundsException  if\n     *             {@code beginIndex} is negative or larger than the\n     *             length of this {@code String} object.\n     */\n    public String substring(int beginIndex) {\n        if (beginIndex < 0) {\n            throw new StringIndexOutOfBoundsException(beginIndex);\n        }\n        int subLen = value.length - beginIndex;\n        if (subLen < 0) {\n            throw new StringIndexOutOfBoundsException(subLen);\n        }\n        return (beginIndex == 0) ? this : new String(value, beginIndex, subLen);\n    }"}
{"Number":"281","API Relative Path":"java.lang.String.java-substring(int-int)","Corresponding Source":"/**\n     * Returns a string that is a substring of this string. The\n     * substring begins at the specified {@code beginIndex} and\n     * extends to the character at index {@code endIndex - 1}.\n     * Thus the length of the substring is {@code endIndex-beginIndex}.\n     * <p>\n     * Examples:\n     * <blockquote><pre>\n     * \"hamburger\".substring(4, 8) returns \"urge\"\n     * \"smiles\".substring(1, 5) returns \"mile\"\n     * <\/pre><\/blockquote>\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @param      endIndex     the ending index, exclusive.\n     * @return     the specified substring.\n     * @exception  IndexOutOfBoundsException  if the\n     *             {@code beginIndex} is negative, or\n     *             {@code endIndex} is larger than the length of\n     *             this {@code String} object, or\n     *             {@code beginIndex} is larger than\n     *             {@code endIndex}.\n     */\n    public String substring(int beginIndex, int endIndex) {\n        if (beginIndex < 0) {\n            throw new StringIndexOutOfBoundsException(beginIndex);\n        }\n        if (endIndex > value.length) {\n            throw new StringIndexOutOfBoundsException(endIndex);\n        }\n        int subLen = endIndex - beginIndex;\n        if (subLen < 0) {\n            throw new StringIndexOutOfBoundsException(subLen);\n        }\n        return ((beginIndex == 0) && (endIndex == value.length)) ? this\n                : new String(value, beginIndex, subLen);\n    }"}
{"Number":"282","API Relative Path":"java.lang.String.java-substring(int-int)","Corresponding Source":"/**\n     * Returns a string that is a substring of this string. The\n     * substring begins at the specified {@code beginIndex} and\n     * extends to the character at index {@code endIndex - 1}.\n     * Thus the length of the substring is {@code endIndex-beginIndex}.\n     * <p>\n     * Examples:\n     * <blockquote><pre>\n     * \"hamburger\".substring(4, 8) returns \"urge\"\n     * \"smiles\".substring(1, 5) returns \"mile\"\n     * <\/pre><\/blockquote>\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @param      endIndex     the ending index, exclusive.\n     * @return     the specified substring.\n     * @exception  IndexOutOfBoundsException  if the\n     *             {@code beginIndex} is negative, or\n     *             {@code endIndex} is larger than the length of\n     *             this {@code String} object, or\n     *             {@code beginIndex} is larger than\n     *             {@code endIndex}.\n     */\n    public String substring(int beginIndex, int endIndex) {\n        if (beginIndex < 0) {\n            throw new StringIndexOutOfBoundsException(beginIndex);\n        }\n        if (endIndex > value.length) {\n            throw new StringIndexOutOfBoundsException(endIndex);\n        }\n        int subLen = endIndex - beginIndex;\n        if (subLen < 0) {\n            throw new StringIndexOutOfBoundsException(subLen);\n        }\n        return ((beginIndex == 0) && (endIndex == value.length)) ? this\n                : new String(value, beginIndex, subLen);\n    }"}
{"Number":"283","API Relative Path":"java.lang.String.java-toLowerCase(Locale)","Corresponding Source":"/**\n     * Converts all of the characters in this {@code String} to lower\n     * case using the rules of the given {@code Locale}.  Case mapping is based\n     * on the Unicode Standard version specified by the {@link java.lang.Character Character}\n     * class. Since case mappings are not always 1:1 char mappings, the resulting\n     * {@code String} may be a different length than the original {@code String}.\n     * <p>\n     * Examples of lowercase  mappings are in the following table:\n     * <table border=\"1\" summary=\"Lowercase mapping examples showing language code of locale, upper case, lower case, and description\">\n     * <tr>\n     *   <th>Language Code of Locale<\/th>\n     *   <th>Upper Case<\/th>\n     *   <th>Lower Case<\/th>\n     *   <th>Description<\/th>\n     * <\/tr>\n     * <tr>\n     *   <td>tr (Turkish)<\/td>\n     *   <td>&#92;u0130<\/td>\n     *   <td>&#92;u0069<\/td>\n     *   <td>capital letter I with dot above -&gt; small letter i<\/td>\n     * <\/tr>\n     * <tr>\n     *   <td>tr (Turkish)<\/td>\n     *   <td>&#92;u0049<\/td>\n     *   <td>&#92;u0131<\/td>\n     *   <td>capital letter I -&gt; small letter dotless i <\/td>\n     * <\/tr>\n     * <tr>\n     *   <td>(all)<\/td>\n     *   <td>French Fries<\/td>\n     *   <td>french fries<\/td>\n     *   <td>lowercased all chars in String<\/td>\n     * <\/tr>\n     * <tr>\n     *   <td>(all)<\/td>\n     *   <td><img src=\"doc-files/capiota.gif\" alt=\"capiota\"><img src=\"doc-files/capchi.gif\" alt=\"capchi\">\n     *       <img src=\"doc-files/captheta.gif\" alt=\"captheta\"><img src=\"doc-files/capupsil.gif\" alt=\"capupsil\">\n     *       <img src=\"doc-files/capsigma.gif\" alt=\"capsigma\"><\/td>\n     *   <td><img src=\"doc-files/iota.gif\" alt=\"iota\"><img src=\"doc-files/chi.gif\" alt=\"chi\">\n     *       <img src=\"doc-files/theta.gif\" alt=\"theta\"><img src=\"doc-files/upsilon.gif\" alt=\"upsilon\">\n     *       <img src=\"doc-files/sigma1.gif\" alt=\"sigma\"><\/td>\n     *   <td>lowercased all chars in String<\/td>\n     * <\/tr>\n     * <\/table>\n     *\n     * @param locale use the case transformation rules for this locale\n     * @return the {@code String}, converted to lowercase.\n     * @see     java.lang.String#toLowerCase()\n     * @see     java.lang.String#toUpperCase()\n     * @see     java.lang.String#toUpperCase(Locale)\n     * @since   1.1\n     */\n    public String toLowerCase(Locale locale) {\n        if (locale == null) {\n            throw new NullPointerException();\n        }\n\n        int firstUpper;\n        final int len = value.length;\n\n        /* Now check if there are any characters that need to be changed. */\n        scan: {\n            for (firstUpper = 0 ; firstUpper < len; ) {\n                char c = value[firstUpper];\n                if ((c >= Character.MIN_HIGH_SURROGATE)\n                        && (c <= Character.MAX_HIGH_SURROGATE)) {\n                    int supplChar = codePointAt(firstUpper);\n                    if (supplChar != Character.toLowerCase(supplChar)) {\n                        break scan;\n                    }\n                    firstUpper += Character.charCount(supplChar);\n                } else {\n                    if (c != Character.toLowerCase(c)) {\n                        break scan;\n                    }\n                    firstUpper++;\n                }\n            }\n            return this;\n        }\n\n        char[] result = new char[len];\n        int resultOffset = 0;  /* result may grow, so i+resultOffset\n                                * is the write location in result */\n\n        /* Just copy the first few lowerCase characters. */\n        System.arraycopy(value, 0, result, 0, firstUpper);\n\n        String lang = locale.getLanguage();\n        boolean localeDependent =\n                (lang == \"tr\" || lang == \"az\" || lang == \"lt\");\n        char[] lowerCharArray;\n        int lowerChar;\n        int srcChar;\n        int srcCount;\n        for (int i = firstUpper; i < len; i += srcCount) {\n            srcChar = (int)value[i];\n            if ((char)srcChar >= Character.MIN_HIGH_SURROGATE\n                    && (char)srcChar <= Character.MAX_HIGH_SURROGATE) {\n                srcChar = codePointAt(i);\n                srcCount = Character.charCount(srcChar);\n            } else {\n                srcCount = 1;\n            }\n            if (localeDependent ||\n                srcChar == '\\u03A3' || // GREEK CAPITAL LETTER SIGMA\n                srcChar == '\\u0130') { // LATIN CAPITAL LETTER I WITH DOT ABOVE\n                lowerChar = ConditionalSpecialCasing.toLowerCaseEx(this, i, locale);\n            } else {\n                lowerChar = Character.toLowerCase(srcChar);\n            }\n            if ((lowerChar == Character.ERROR)\n                    || (lowerChar >= Character.MIN_SUPPLEMENTARY_CODE_POINT)) {\n                if (lowerChar == Character.ERROR) {\n                    lowerCharArray =\n                            ConditionalSpecialCasing.toLowerCaseCharArray(this, i, locale);\n                } else if (srcCount == 2) {\n                    resultOffset += Character.toChars(lowerChar, result, i + resultOffset) - srcCount;\n                    continue;\n                } else {\n                    lowerCharArray = Character.toChars(lowerChar);\n                }\n\n                /* Grow result if needed */\n                int mapLen = lowerCharArray.length;\n                if (mapLen > srcCount) {\n                    char[] result2 = new char[result.length + mapLen - srcCount];\n                    System.arraycopy(result, 0, result2, 0, i + resultOffset);\n                    result = result2;\n                }\n                for (int x = 0; x < mapLen; ++x) {\n                    result[i + resultOffset + x] = lowerCharArray[x];\n                }\n                resultOffset += (mapLen - srcCount);\n            } else {\n                result[i + resultOffset] = (char)lowerChar;\n            }\n        }\n        return new String(result, 0, len + resultOffset);\n    }"}
{"Number":"284","API Relative Path":"java.lang.String.java-toUpperCase(Locale)","Corresponding Source":"/**\n     * Converts all of the characters in this {@code String} to upper\n     * case using the rules of the given {@code Locale}. Case mapping is based\n     * on the Unicode Standard version specified by the {@link java.lang.Character Character}\n     * class. Since case mappings are not always 1:1 char mappings, the resulting\n     * {@code String} may be a different length than the original {@code String}.\n     * <p>\n     * Examples of locale-sensitive and 1:M case mappings are in the following table.\n     *\n     * <table border=\"1\" summary=\"Examples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description.\">\n     * <tr>\n     *   <th>Language Code of Locale<\/th>\n     *   <th>Lower Case<\/th>\n     *   <th>Upper Case<\/th>\n     *   <th>Description<\/th>\n     * <\/tr>\n     * <tr>\n     *   <td>tr (Turkish)<\/td>\n     *   <td>&#92;u0069<\/td>\n     *   <td>&#92;u0130<\/td>\n     *   <td>small letter i -&gt; capital letter I with dot above<\/td>\n     * <\/tr>\n     * <tr>\n     *   <td>tr (Turkish)<\/td>\n     *   <td>&#92;u0131<\/td>\n     *   <td>&#92;u0049<\/td>\n     *   <td>small letter dotless i -&gt; capital letter I<\/td>\n     * <\/tr>\n     * <tr>\n     *   <td>(all)<\/td>\n     *   <td>&#92;u00df<\/td>\n     *   <td>&#92;u0053 &#92;u0053<\/td>\n     *   <td>small letter sharp s -&gt; two letters: SS<\/td>\n     * <\/tr>\n     * <tr>\n     *   <td>(all)<\/td>\n     *   <td>Fahrvergn&uuml;gen<\/td>\n     *   <td>FAHRVERGN&Uuml;GEN<\/td>\n     *   <td><\/td>\n     * <\/tr>\n     * <\/table>\n     * @param locale use the case transformation rules for this locale\n     * @return the {@code String}, converted to uppercase.\n     * @see     java.lang.String#toUpperCase()\n     * @see     java.lang.String#toLowerCase()\n     * @see     java.lang.String#toLowerCase(Locale)\n     * @since   1.1\n     */\n    public String toUpperCase(Locale locale) {\n        if (locale == null) {\n            throw new NullPointerException();\n        }\n\n        int firstLower;\n        final int len = value.length;\n\n        /* Now check if there are any characters that need to be changed. */\n        scan: {\n            for (firstLower = 0 ; firstLower < len; ) {\n                int c = (int)value[firstLower];\n                int srcCount;\n                if ((c >= Character.MIN_HIGH_SURROGATE)\n                        && (c <= Character.MAX_HIGH_SURROGATE)) {\n                    c = codePointAt(firstLower);\n                    srcCount = Character.charCount(c);\n                } else {\n                    srcCount = 1;\n                }\n                int upperCaseChar = Character.toUpperCaseEx(c);\n                if ((upperCaseChar == Character.ERROR)\n                        || (c != upperCaseChar)) {\n                    break scan;\n                }\n                firstLower += srcCount;\n            }\n            return this;\n        }\n\n        /* result may grow, so i+resultOffset is the write location in result */\n        int resultOffset = 0;\n        char[] result = new char[len]; /* may grow */\n\n        /* Just copy the first few upperCase characters. */\n        System.arraycopy(value, 0, result, 0, firstLower);\n\n        String lang = locale.getLanguage();\n        boolean localeDependent =\n                (lang == \"tr\" || lang == \"az\" || lang == \"lt\");\n        char[] upperCharArray;\n        int upperChar;\n        int srcChar;\n        int srcCount;\n        for (int i = firstLower; i < len; i += srcCount) {\n            srcChar = (int)value[i];\n            if ((char)srcChar >= Character.MIN_HIGH_SURROGATE &&\n                (char)srcChar <= Character.MAX_HIGH_SURROGATE) {\n                srcChar = codePointAt(i);\n                srcCount = Character.charCount(srcChar);\n            } else {\n                srcCount = 1;\n            }\n            if (localeDependent) {\n                upperChar = ConditionalSpecialCasing.toUpperCaseEx(this, i, locale);\n            } else {\n                upperChar = Character.toUpperCaseEx(srcChar);\n            }\n            if ((upperChar == Character.ERROR)\n                    || (upperChar >= Character.MIN_SUPPLEMENTARY_CODE_POINT)) {\n                if (upperChar == Character.ERROR) {\n                    if (localeDependent) {\n                        upperCharArray =\n                                ConditionalSpecialCasing.toUpperCaseCharArray(this, i, locale);\n                    } else {\n                        upperCharArray = Character.toUpperCaseCharArray(srcChar);\n                    }\n                } else if (srcCount == 2) {\n                    resultOffset += Character.toChars(upperChar, result, i + resultOffset) - srcCount;\n                    continue;\n                } else {\n                    upperCharArray = Character.toChars(upperChar);\n                }\n\n                /* Grow result if needed */\n                int mapLen = upperCharArray.length;\n                if (mapLen > srcCount) {\n                    char[] result2 = new char[result.length + mapLen - srcCount];\n                    System.arraycopy(result, 0, result2, 0, i + resultOffset);\n                    result = result2;\n                }\n                for (int x = 0; x < mapLen; ++x) {\n                    result[i + resultOffset + x] = upperCharArray[x];\n                }\n                resultOffset += (mapLen - srcCount);\n            } else {\n                result[i + resultOffset] = (char)upperChar;\n            }\n        }\n        return new String(result, 0, len + resultOffset);\n    }"}
{"Number":"285","API Relative Path":"java.lang.StringBuffer.java-charAt(int)","Corresponding Source":"/**\n     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n     * @since      1.2\n     */\n    @Override\n    public synchronized StringBuffer deleteCharAt(int index) {\n        toStringCache = null;\n        super.deleteCharAt(index);\n        return this;\n    }"}
{"Number":"286","API Relative Path":"java.lang.StringBuffer.java-setCharAt(int-char)","Corresponding Source":"/**\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     * @see        #length()\n     */\n    @Override\n    public synchronized void setCharAt(int index, char ch) {\n        if ((index < 0) || (index >= count))\n            throw new StringIndexOutOfBoundsException(index);\n        toStringCache = null;\n        value[index] = ch;\n    }"}
{"Number":"287","API Relative Path":"java.lang.StringBuffer.java-subSequence(int-int)","Corresponding Source":"/**\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     * @since      1.4\n     */\n    @Override\n    public synchronized CharSequence subSequence(int start, int end) {\n        return super.substring(start, end);\n    }"}
{"Number":"288","API Relative Path":"java.lang.StringBuffer.java-subSequence(int-int)","Corresponding Source":"/**\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     * @since      1.4\n     */\n    @Override\n    public synchronized CharSequence subSequence(int start, int end) {\n        return super.substring(start, end);\n    }"}
{"Number":"289","API Relative Path":"java.lang.StringBuffer.java-subSequence(int-int)","Corresponding Source":"/**\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     * @since      1.4\n     */\n    @Override\n    public synchronized CharSequence subSequence(int start, int end) {\n        return super.substring(start, end);\n    }"}
{"Number":"290","API Relative Path":"java.lang.System.java-setProperty(String-String)","Corresponding Source":"/**\n     * Sets the system property indicated by the specified key.\n     * <p>\n     * First, if a security manager exists, its\n     * <code>SecurityManager.checkPermission<\/code> method\n     * is called with a <code>PropertyPermission(key, \"write\")<\/code>\n     * permission. This may result in a SecurityException being thrown.\n     * If no exception is thrown, the specified property is set to the given\n     * value.\n     * <p>\n     *\n     * @param      key   the name of the system property.\n     * @param      value the value of the system property.\n     * @return     the previous value of the system property,\n     *             or <code>null<\/code> if it did not have one.\n     *\n     * @exception  SecurityException  if a security manager exists and its\n     *             <code>checkPermission<\/code> method doesn't allow\n     *             setting of the specified property.\n     * @exception  NullPointerException if <code>key<\/code> or\n     *             <code>value<\/code> is <code>null<\/code>.\n     * @exception  IllegalArgumentException if <code>key<\/code> is empty.\n     * @see        #getProperty\n     * @see        java.lang.System#getProperty(java.lang.String)\n     * @see        java.lang.System#getProperty(java.lang.String, java.lang.String)\n     * @see        java.util.PropertyPermission\n     * @see        SecurityManager#checkPermission\n     * @since      1.2\n     */\n    public static String setProperty(String key, String value) {\n        checkKey(key);\n        SecurityManager sm = getSecurityManager();\n        if (sm != null) {\n            sm.checkPermission(new PropertyPermission(key,\n                SecurityConstants.PROPERTY_WRITE_ACTION));\n        }\n\n        return (String) props.setProperty(key, value);\n    }"}
{"Number":"291","API Relative Path":"java.lang.Thread.java-join(long)","Corresponding Source":"/**\n     * Waits at most {@code millis} milliseconds for this thread to\n     * die. A timeout of {@code 0} means to wait forever.\n     *\n     * <p> This implementation uses a loop of {@code this.wait} calls\n     * conditioned on {@code this.isAlive}. As a thread terminates the\n     * {@code this.notifyAll} method is invoked. It is recommended that\n     * applications not use {@code wait}, {@code notify}, or\n     * {@code notifyAll} on {@code Thread} instances.\n     *\n     * @param  millis\n     *         the time to wait in milliseconds\n     *\n     * @throws  IllegalArgumentException\n     *          if the value of {@code millis} is negative\n     *\n     * @throws  InterruptedException\n     *          if any thread has interrupted the current thread. The\n     *          <i>interrupted status<\/i> of the current thread is\n     *          cleared when this exception is thrown.\n     */\n    public final synchronized void join(long millis)\n    throws InterruptedException {\n        long base = System.currentTimeMillis();\n        long now = 0;\n\n        if (millis < 0) {\n            throw new IllegalArgumentException(\"timeout value is negative\");\n        }\n\n        if (millis == 0) {\n            while (isAlive()) {\n                wait(0);\n            }\n        } else {\n            while (isAlive()) {\n                long delay = millis - now;\n                if (delay <= 0) {\n                    break;\n                }\n                wait(delay);\n                now = System.currentTimeMillis() - base;\n            }\n        }\n    }"}
{"Number":"292","API Relative Path":"java.lang.Thread.java-join(long-int)","Corresponding Source":"/**\n     * Waits at most {@code millis} milliseconds plus\n     * {@code nanos} nanoseconds for this thread to die.\n     *\n     * <p> This implementation uses a loop of {@code this.wait} calls\n     * conditioned on {@code this.isAlive}. As a thread terminates the\n     * {@code this.notifyAll} method is invoked. It is recommended that\n     * applications not use {@code wait}, {@code notify}, or\n     * {@code notifyAll} on {@code Thread} instances.\n     *\n     * @param  millis\n     *         the time to wait in milliseconds\n     *\n     * @param  nanos\n     *         {@code 0-999999} additional nanoseconds to wait\n     *\n     * @throws  IllegalArgumentException\n     *          if the value of {@code millis} is negative, or the value\n     *          of {@code nanos} is not in the range {@code 0-999999}\n     *\n     * @throws  InterruptedException\n     *          if any thread has interrupted the current thread. The\n     *          <i>interrupted status<\/i> of the current thread is\n     *          cleared when this exception is thrown.\n     */\n    public final synchronized void join(long millis, int nanos)\n    throws InterruptedException {\n\n        if (millis < 0) {\n            throw new IllegalArgumentException(\"timeout value is negative\");\n        }\n\n        if (nanos < 0 || nanos > 999999) {\n            throw new IllegalArgumentException(\n                                \"nanosecond timeout value out of range\");\n        }\n\n        if (nanos >= 500000 || (nanos != 0 && millis == 0)) {\n            millis++;\n        }\n\n        join(millis);\n    }"}
{"Number":"293","API Relative Path":"java.lang.Thread.java-join(long-int)","Corresponding Source":"/**\n     * Waits at most {@code millis} milliseconds plus\n     * {@code nanos} nanoseconds for this thread to die.\n     *\n     * <p> This implementation uses a loop of {@code this.wait} calls\n     * conditioned on {@code this.isAlive}. As a thread terminates the\n     * {@code this.notifyAll} method is invoked. It is recommended that\n     * applications not use {@code wait}, {@code notify}, or\n     * {@code notifyAll} on {@code Thread} instances.\n     *\n     * @param  millis\n     *         the time to wait in milliseconds\n     *\n     * @param  nanos\n     *         {@code 0-999999} additional nanoseconds to wait\n     *\n     * @throws  IllegalArgumentException\n     *          if the value of {@code millis} is negative, or the value\n     *          of {@code nanos} is not in the range {@code 0-999999}\n     *\n     * @throws  InterruptedException\n     *          if any thread has interrupted the current thread. The\n     *          <i>interrupted status<\/i> of the current thread is\n     *          cleared when this exception is thrown.\n     */\n    public final synchronized void join(long millis, int nanos)\n    throws InterruptedException {\n\n        if (millis < 0) {\n            throw new IllegalArgumentException(\"timeout value is negative\");\n        }\n\n        if (nanos < 0 || nanos > 999999) {\n            throw new IllegalArgumentException(\n                                \"nanosecond timeout value out of range\");\n        }\n\n        if (nanos >= 500000 || (nanos != 0 && millis == 0)) {\n            millis++;\n        }\n\n        join(millis);\n    }"}
{"Number":"294","API Relative Path":"java.lang.Thread.java-setPriority(int)","Corresponding Source":"/**\n     * Changes the priority of this thread.\n     * <p>\n     * First the <code>checkAccess<\/code> method of this thread is called\n     * with no arguments. This may result in throwing a\n     * <code>SecurityException<\/code>.\n     * <p>\n     * Otherwise, the priority of this thread is set to the smaller of\n     * the specified <code>newPriority<\/code> and the maximum permitted\n     * priority of the thread's thread group.\n     *\n     * @param newPriority priority to set this thread to\n     * @exception  IllegalArgumentException  If the priority is not in the\n     *               range <code>MIN_PRIORITY<\/code> to\n     *               <code>MAX_PRIORITY<\/code>.\n     * @exception  SecurityException  if the current thread cannot modify\n     *               this thread.\n     * @see        #getPriority\n     * @see        #checkAccess()\n     * @see        #getThreadGroup()\n     * @see        #MAX_PRIORITY\n     * @see        #MIN_PRIORITY\n     * @see        ThreadGroup#getMaxPriority()\n     */\n    public final void setPriority(int newPriority) {\n        ThreadGroup g;\n        checkAccess();\n        if (newPriority > MAX_PRIORITY || newPriority < MIN_PRIORITY) {\n            throw new IllegalArgumentException();\n        }\n        if((g = getThreadGroup()) != null) {\n            if (newPriority > g.getMaxPriority()) {\n                newPriority = g.getMaxPriority();\n            }\n            setPriority0(priority = newPriority);\n        }\n    }"}
{"Number":"295","API Relative Path":"java.lang.Thread.java-sleep(long-int)","Corresponding Source":"/**\n     * Causes the currently executing thread to sleep (temporarily cease\n     * execution) for the specified number of milliseconds plus the specified\n     * number of nanoseconds, subject to the precision and accuracy of system\n     * timers and schedulers. The thread does not lose ownership of any\n     * monitors.\n     *\n     * @param  millis\n     *         the length of time to sleep in milliseconds\n     *\n     * @param  nanos\n     *         {@code 0-999999} additional nanoseconds to sleep\n     *\n     * @throws  IllegalArgumentException\n     *          if the value of {@code millis} is negative, or the value of\n     *          {@code nanos} is not in the range {@code 0-999999}\n     *\n     * @throws  InterruptedException\n     *          if any thread has interrupted the current thread. The\n     *          <i>interrupted status<\/i> of the current thread is\n     *          cleared when this exception is thrown.\n     */\n    public static void sleep(long millis, int nanos)\n    throws InterruptedException {\n        if (millis < 0) {\n            throw new IllegalArgumentException(\"timeout value is negative\");\n        }\n\n        if (nanos < 0 || nanos > 999999) {\n            throw new IllegalArgumentException(\n                                \"nanosecond timeout value out of range\");\n        }\n\n        if (nanos >= 500000 || (nanos != 0 && millis == 0)) {\n            millis++;\n        }\n\n        sleep(millis);\n    }"}
{"Number":"296","API Relative Path":"java.lang.Thread.java-sleep(long-int)","Corresponding Source":"/**\n     * Causes the currently executing thread to sleep (temporarily cease\n     * execution) for the specified number of milliseconds plus the specified\n     * number of nanoseconds, subject to the precision and accuracy of system\n     * timers and schedulers. The thread does not lose ownership of any\n     * monitors.\n     *\n     * @param  millis\n     *         the length of time to sleep in milliseconds\n     *\n     * @param  nanos\n     *         {@code 0-999999} additional nanoseconds to sleep\n     *\n     * @throws  IllegalArgumentException\n     *          if the value of {@code millis} is negative, or the value of\n     *          {@code nanos} is not in the range {@code 0-999999}\n     *\n     * @throws  InterruptedException\n     *          if any thread has interrupted the current thread. The\n     *          <i>interrupted status<\/i> of the current thread is\n     *          cleared when this exception is thrown.\n     */\n    public static void sleep(long millis, int nanos)\n    throws InterruptedException {\n        if (millis < 0) {\n            throw new IllegalArgumentException(\"timeout value is negative\");\n        }\n\n        if (nanos < 0 || nanos > 999999) {\n            throw new IllegalArgumentException(\n                                \"nanosecond timeout value out of range\");\n        }\n\n        if (nanos >= 500000 || (nanos != 0 && millis == 0)) {\n            millis++;\n        }\n\n        sleep(millis);\n    }"}
{"Number":"297","API Relative Path":"java.lang.Throwable.java-addSuppressed(Throwable)","Corresponding Source":"/**\n     * Appends the specified exception to the exceptions that were\n     * suppressed in order to deliver this exception. This method is\n     * thread-safe and typically called (automatically and implicitly)\n     * by the {@code try}-with-resources statement.\n     *\n     * <p>The suppression behavior is enabled <em>unless<\/em> disabled\n     * {@linkplain #Throwable(String, Throwable, boolean, boolean) via\n     * a constructor}.  When suppression is disabled, this method does\n     * nothing other than to validate its argument.\n     *\n     * <p>Note that when one exception {@linkplain\n     * #initCause(Throwable) causes} another exception, the first\n     * exception is usually caught and then the second exception is\n     * thrown in response.  In other words, there is a causal\n     * connection between the two exceptions.\n     *\n     * In contrast, there are situations where two independent\n     * exceptions can be thrown in sibling code blocks, in particular\n     * in the {@code try} block of a {@code try}-with-resources\n     * statement and the compiler-generated {@code finally} block\n     * which closes the resource.\n     *\n     * In these situations, only one of the thrown exceptions can be\n     * propagated.  In the {@code try}-with-resources statement, when\n     * there are two such exceptions, the exception originating from\n     * the {@code try} block is propagated and the exception from the\n     * {@code finally} block is added to the list of exceptions\n     * suppressed by the exception from the {@code try} block.  As an\n     * exception unwinds the stack, it can accumulate multiple\n     * suppressed exceptions.\n     *\n     * <p>An exception may have suppressed exceptions while also being\n     * caused by another exception.  Whether or not an exception has a\n     * cause is semantically known at the time of its creation, unlike\n     * whether or not an exception will suppress other exceptions\n     * which is typically only determined after an exception is\n     * thrown.\n     *\n     * <p>Note that programmer written code is also able to take\n     * advantage of calling this method in situations where there are\n     * multiple sibling exceptions and only one can be propagated.\n     *\n     * @param exception the exception to be added to the list of\n     *        suppressed exceptions\n     * @throws IllegalArgumentException if {@code exception} is this\n     *         throwable; a throwable cannot suppress itself.\n     * @throws NullPointerException if {@code exception} is {@code null}\n     * @since 1.7\n     */\n    public final synchronized void addSuppressed(Throwable exception) {\n        if (exception == this)\n            throw new IllegalArgumentException(SELF_SUPPRESSION_MESSAGE, exception);\n\n        if (exception == null)\n            throw new NullPointerException(NULL_CAUSE_MESSAGE);\n\n        if (suppressedExceptions == null) // Suppressed exceptions not recorded\n            return;\n\n        if (suppressedExceptions == SUPPRESSED_SENTINEL)\n            suppressedExceptions = new ArrayList<>(1);\n\n        suppressedExceptions.add(exception);\n    }"}
{"Number":"298","API Relative Path":"java.lang.Throwable.java-initCause(Throwable)","Corresponding Source":"/**\n     * Initializes the <i>cause<\/i> of this throwable to the specified value.\n     * (The cause is the throwable that caused this throwable to get thrown.)\n     *\n     * <p>This method can be called at most once.  It is generally called from\n     * within the constructor, or immediately after creating the\n     * throwable.  If this throwable was created\n     * with {@link #Throwable(Throwable)} or\n     * {@link #Throwable(String,Throwable)}, this method cannot be called\n     * even once.\n     *\n     * <p>An example of using this method on a legacy throwable type\n     * without other support for setting the cause is:\n     *\n     * <pre>\n     * try {\n     *     lowLevelOp();\n     * } catch (LowLevelException le) {\n     *     throw (HighLevelException)\n     *           new HighLevelException().initCause(le); // Legacy constructor\n     * }\n     * <\/pre>\n     *\n     * @param  cause the cause (which is saved for later retrieval by the\n     *         {@link #getCause()} method).  (A {@code null} value is\n     *         permitted, and indicates that the cause is nonexistent or\n     *         unknown.)\n     * @return  a reference to this {@code Throwable} instance.\n     * @throws IllegalArgumentException if {@code cause} is this\n     *         throwable.  (A throwable cannot be its own cause.)\n     * @throws IllegalStateException if this throwable was\n     *         created with {@link #Throwable(Throwable)} or\n     *         {@link #Throwable(String,Throwable)}, or this method has already\n     *         been called on this throwable.\n     * @since  1.4\n     */\n    public synchronized Throwable initCause(Throwable cause) {\n        if (this.cause != this)\n            throw new IllegalStateException(\"Can't overwrite cause with \" +\n                                            Objects.toString(cause, \"a null\"), this);\n        if (cause == this)\n            throw new IllegalArgumentException(\"Self-causation not permitted\", this);\n        this.cause = cause;\n        return this;\n    }"}
{"Number":"299","API Relative Path":"java.lang.Throwable.java-initCause(Throwable)","Corresponding Source":"/**\n     * Initializes the <i>cause<\/i> of this throwable to the specified value.\n     * (The cause is the throwable that caused this throwable to get thrown.)\n     *\n     * <p>This method can be called at most once.  It is generally called from\n     * within the constructor, or immediately after creating the\n     * throwable.  If this throwable was created\n     * with {@link #Throwable(Throwable)} or\n     * {@link #Throwable(String,Throwable)}, this method cannot be called\n     * even once.\n     *\n     * <p>An example of using this method on a legacy throwable type\n     * without other support for setting the cause is:\n     *\n     * <pre>\n     * try {\n     *     lowLevelOp();\n     * } catch (LowLevelException le) {\n     *     throw (HighLevelException)\n     *           new HighLevelException().initCause(le); // Legacy constructor\n     * }\n     * <\/pre>\n     *\n     * @param  cause the cause (which is saved for later retrieval by the\n     *         {@link #getCause()} method).  (A {@code null} value is\n     *         permitted, and indicates that the cause is nonexistent or\n     *         unknown.)\n     * @return  a reference to this {@code Throwable} instance.\n     * @throws IllegalArgumentException if {@code cause} is this\n     *         throwable.  (A throwable cannot be its own cause.)\n     * @throws IllegalStateException if this throwable was\n     *         created with {@link #Throwable(Throwable)} or\n     *         {@link #Throwable(String,Throwable)}, or this method has already\n     *         been called on this throwable.\n     * @since  1.4\n     */\n    public synchronized Throwable initCause(Throwable cause) {\n        if (this.cause != this)\n            throw new IllegalStateException(\"Can't overwrite cause with \" +\n                                            Objects.toString(cause, \"a null\"), this);\n        if (cause == this)\n            throw new IllegalArgumentException(\"Self-causation not permitted\", this);\n        this.cause = cause;\n        return this;\n    }"}
{"Number":"300","API Relative Path":"java.net.AbstractPlainDatagramSocketImpl.java-joinGroup(SocketAddress-NetworkInterface)","Corresponding Source":"/**\n     * Join the multicast group.\n     * @param mcastaddr multicast address to join.\n     * @param netIf specifies the local interface to receive multicast\n     *        datagram packets\n     * @throws  IllegalArgumentException if mcastaddr is null or is a\n     *          SocketAddress subclass not supported by this socket\n     * @since 1.4\n     */\n\n    protected void joinGroup(SocketAddress mcastaddr, NetworkInterface netIf)\n        throws IOException {\n        if (mcastaddr == null || !(mcastaddr instanceof InetSocketAddress))\n            throw new IllegalArgumentException(\"Unsupported address type\");\n        join(((InetSocketAddress)mcastaddr).getAddress(), netIf);\n    }"}
{"Number":"301","API Relative Path":"java.net.AbstractPlainDatagramSocketImpl.java-leaveGroup(SocketAddress-NetworkInterface)","Corresponding Source":"/**\n     * Leave the multicast group.\n     * @param mcastaddr  multicast address to leave.\n     * @param netIf specified the local interface to leave the group at\n     * @throws  IllegalArgumentException if mcastaddr is null or is a\n     *          SocketAddress subclass not supported by this socket\n     * @since 1.4\n     */\n    protected void leaveGroup(SocketAddress mcastaddr, NetworkInterface netIf)\n        throws IOException {\n        if (mcastaddr == null || !(mcastaddr instanceof InetSocketAddress))\n            throw new IllegalArgumentException(\"Unsupported address type\");\n        leave(((InetSocketAddress)mcastaddr).getAddress(), netIf);\n    }"}
{"Number":"302","API Relative Path":"java.net.CookieManager.java-setCookiePolicy(CookiePolicy)","Corresponding Source":"/* ---------------- Public operations -------------- */\n\n    /**\n     * To set the cookie policy of this cookie manager.\n     *\n     * <p> A instance of {@code CookieManager} will have\n     * cookie policy ACCEPT_ORIGINAL_SERVER by default. Users always\n     * can call this method to set another cookie policy.\n     *\n     * @param cookiePolicy      the cookie policy. Can be {@code null}, which\n     *                          has no effects on current cookie policy.\n     */\n    public void setCookiePolicy(CookiePolicy cookiePolicy) {\n        if (cookiePolicy != null) policyCallback = cookiePolicy;\n    }"}
{"Number":"303","API Relative Path":"java.net.DatagramPacket.java-setData(byte[])","Corresponding Source":"/**\n     * Set the data buffer for this packet. With the offset of\n     * this DatagramPacket set to 0, and the length set to\n     * the length of {@code buf}.\n     *\n     * @param buf the buffer to set for this packet.\n     *\n     * @exception NullPointerException if the argument is null.\n     *\n     * @see #getLength\n     * @see #getData\n     *\n     * @since JDK1.1\n     */\n    public synchronized void setData(byte[] buf) {\n        if (buf == null) {\n            throw new NullPointerException(\"null packet buffer\");\n        }\n        this.buf = buf;\n        this.offset = 0;\n        this.length = buf.length;\n        this.bufLength = buf.length;\n    }"}
{"Number":"304","API Relative Path":"java.net.DatagramPacket.java-setData(byte[]-int-int)","Corresponding Source":"/**\n     * Set the data buffer for this packet. This sets the\n     * data, length and offset of the packet.\n     *\n     * @param buf the buffer to set for this packet\n     *\n     * @param offset the offset into the data\n     *\n     * @param length the length of the data\n     *       and/or the length of the buffer used to receive data\n     *\n     * @exception NullPointerException if the argument is null\n     *\n     * @see #getData\n     * @see #getOffset\n     * @see #getLength\n     *\n     * @since 1.2\n     */\n    public synchronized void setData(byte[] buf, int offset, int length) {\n        /* this will check to see if buf is null */\n        if (length < 0 || offset < 0 ||\n            (length + offset) < 0 ||\n            ((length + offset) > buf.length)) {\n            throw new IllegalArgumentException(\"illegal length or offset\");\n        }\n        this.buf = buf;\n        this.length = length;\n        this.bufLength = length;\n        this.offset = offset;\n    }"}
{"Number":"305","API Relative Path":"java.net.DatagramPacket.java-setLength(int)","Corresponding Source":"/**\n     * Set the length for this packet. The length of the packet is\n     * the number of bytes from the packet's data buffer that will be\n     * sent, or the number of bytes of the packet's data buffer that\n     * will be used for receiving data. The length must be lesser or\n     * equal to the offset plus the length of the packet's buffer.\n     *\n     * @param length the length to set for this packet.\n     *\n     * @exception IllegalArgumentException if the length is negative\n     * of if the length is greater than the packet's data buffer\n     * length.\n     *\n     * @see #getLength\n     * @see #setData\n     *\n     * @since JDK1.1\n     */\n    public synchronized void setLength(int length) {\n        if ((length + offset) > buf.length || length < 0 ||\n            (length + offset) < 0) {\n            throw new IllegalArgumentException(\"illegal length\");\n        }\n        this.length = length;\n        this.bufLength = this.length;\n    }"}
{"Number":"306","API Relative Path":"java.net.DatagramPacket.java-setPort(int)","Corresponding Source":"/**\n     * Sets the port number on the remote host to which this datagram\n     * is being sent.\n     * @param iport the port number\n     * @since   JDK1.1\n     * @see #getPort()\n     */\n    public synchronized void setPort(int iport) {\n        if (iport < 0 || iport > 0xFFFF) {\n            throw new IllegalArgumentException(\"Port out of range:\"+ iport);\n        }\n        port = iport;\n    }"}
{"Number":"307","API Relative Path":"java.net.DatagramPacket.java-setSocketAddress(SocketAddress)","Corresponding Source":"/**\n     * Sets the SocketAddress (usually IP address + port number) of the remote\n     * host to which this datagram is being sent.\n     *\n     * @param address the {@code SocketAddress}\n     * @throws  IllegalArgumentException if address is null or is a\n     *          SocketAddress subclass not supported by this socket\n     *\n     * @since 1.4\n     * @see #getSocketAddress\n     */\n    public synchronized void setSocketAddress(SocketAddress address) {\n        if (address == null || !(address instanceof InetSocketAddress))\n            throw new IllegalArgumentException(\"unsupported address type\");\n        InetSocketAddress addr = (InetSocketAddress) address;\n        if (addr.isUnresolved())\n            throw new IllegalArgumentException(\"unresolved address\");\n        setAddress(addr.getAddress());\n        setPort(addr.getPort());\n    }"}
{"Number":"308","API Relative Path":"java.net.DatagramSocket.java-bind(SocketAddress)","Corresponding Source":"/**\n     * Binds this DatagramSocket to a specific address and port.\n     * <p>\n     * If the address is {@code null}, then the system will pick up\n     * an ephemeral port and a valid local address to bind the socket.\n     *<p>\n     * @param   addr The address and port to bind to.\n     * @throws  SocketException if any error happens during the bind, or if the\n     *          socket is already bound.\n     * @throws  SecurityException  if a security manager exists and its\n     *             {@code checkListen} method doesn't allow the operation.\n     * @throws IllegalArgumentException if addr is a SocketAddress subclass\n     *         not supported by this socket.\n     * @since 1.4\n     */\n    public synchronized void bind(SocketAddress addr) throws SocketException {\n        if (isClosed())\n            throw new SocketException(\"Socket is closed\");\n        if (isBound())\n            throw new SocketException(\"already bound\");\n        if (addr == null)\n            addr = new InetSocketAddress(0);\n        if (!(addr instanceof InetSocketAddress))\n            throw new IllegalArgumentException(\"Unsupported address type!\");\n        InetSocketAddress epoint = (InetSocketAddress) addr;\n        if (epoint.isUnresolved())\n            throw new SocketException(\"Unresolved address\");\n        InetAddress iaddr = epoint.getAddress();\n        int port = epoint.getPort();\n        checkAddress(iaddr, \"bind\");\n        SecurityManager sec = System.getSecurityManager();\n        if (sec != null) {\n            sec.checkListen(port);\n        }\n        try {\n            getImpl().bind(port, iaddr);\n        } catch (SocketException e) {\n            getImpl().close();\n            throw e;\n        }\n        bound = true;\n    }"}
{"Number":"309","API Relative Path":"java.net.DatagramSocket.java-connect(SocketAddress)","Corresponding Source":"/**\n     * Connects this socket to a remote socket address (IP address + port number).\n     *\n     * <p> If given an {@link InetSocketAddress InetSocketAddress}, this method\n     * behaves as if invoking {@link #connect(InetAddress,int) connect(InetAddress,int)}\n     * with the the given socket addresses IP address and port number.\n     *\n     * @param   addr    The remote address.\n     *\n     * @throws  SocketException\n     *          if the connect fails\n     *\n     * @throws IllegalArgumentException\n     *         if {@code addr} is {@code null}, or {@code addr} is a SocketAddress\n     *         subclass not supported by this socket\n     *\n     * @throws SecurityException\n     *         if a security manager has been installed and it does\n     *         not permit access to the given remote address\n     *\n     * @since 1.4\n     */\n    public void connect(SocketAddress addr) throws SocketException {\n        if (addr == null)\n            throw new IllegalArgumentException(\"Address can't be null\");\n        if (!(addr instanceof InetSocketAddress))\n            throw new IllegalArgumentException(\"Unsupported address type\");\n        InetSocketAddress epoint = (InetSocketAddress) addr;\n        if (epoint.isUnresolved())\n            throw new SocketException(\"Unresolved address\");\n        connectInternal(epoint.getAddress(), epoint.getPort());\n    }"}
{"Number":"310","API Relative Path":"java.net.DatagramSocket.java-DatagramSocket(DatagramSocketImpl)","Corresponding Source":"/**\n     * Creates an unbound datagram socket with the specified\n     * DatagramSocketImpl.\n     *\n     * @param impl an instance of a <B>DatagramSocketImpl<\/B>\n     *        the subclass wishes to use on the DatagramSocket.\n     * @since   1.4\n     */\n    protected DatagramSocket(DatagramSocketImpl impl) {\n        if (impl == null)\n            throw new NullPointerException();\n        this.impl = impl;\n        checkOldImpl();\n    }"}
{"Number":"311","API Relative Path":"java.net.DatagramSocket.java-DatagramSocket(int-InetAddress)","Corresponding Source":"/**\n     * Creates a datagram socket, bound to the specified local\n     * address.  The local port must be between 0 and 65535 inclusive.\n     * If the IP address is 0.0.0.0, the socket will be bound to the\n     * {@link InetAddress#isAnyLocalAddress wildcard} address,\n     * an IP address chosen by the kernel.\n     *\n     * <p>If there is a security manager,\n     * its {@code checkListen} method is first called\n     * with the {@code port} argument\n     * as its argument to ensure the operation is allowed.\n     * This could result in a SecurityException.\n     *\n     * @param port local port to use\n     * @param laddr local address to bind\n     *\n     * @exception  SocketException  if the socket could not be opened,\n     *               or the socket could not bind to the specified local port.\n     * @exception  SecurityException  if a security manager exists and its\n     *             {@code checkListen} method doesn't allow the operation.\n     *\n     * @see SecurityManager#checkListen\n     * @since   JDK1.1\n     */\n    public DatagramSocket(int port, InetAddress laddr) throws SocketException {\n        this(new InetSocketAddress(laddr, port));\n    }"}
{"Number":"312","API Relative Path":"java.net.DatagramSocket.java-DatagramSocket(SocketAddress)","Corresponding Source":"/**\n     * Creates a datagram socket, bound to the specified local\n     * socket address.\n     * <p>\n     * If, if the address is {@code null}, creates an unbound socket.\n     *\n     * <p>If there is a security manager,\n     * its {@code checkListen} method is first called\n     * with the port from the socket address\n     * as its argument to ensure the operation is allowed.\n     * This could result in a SecurityException.\n     *\n     * @param bindaddr local socket address to bind, or {@code null}\n     *                 for an unbound socket.\n     *\n     * @exception  SocketException  if the socket could not be opened,\n     *               or the socket could not bind to the specified local port.\n     * @exception  SecurityException  if a security manager exists and its\n     *             {@code checkListen} method doesn't allow the operation.\n     *\n     * @see SecurityManager#checkListen\n     * @since   1.4\n     */\n    public DatagramSocket(SocketAddress bindaddr) throws SocketException {\n        // create a datagram socket.\n        createImpl();\n        if (bindaddr != null) {\n            try {\n                bind(bindaddr);\n            } finally {\n                if (!isBound())\n                    close();\n            }\n        }\n    }"}
{"Number":"313","API Relative Path":"java.net.DatagramSocket.java-setTrafficClass(int)","Corresponding Source":"/**\n     * Sets traffic class or type-of-service octet in the IP\n     * datagram header for datagrams sent from this DatagramSocket.\n     * As the underlying network implementation may ignore this\n     * value applications should consider it a hint.\n     *\n     * <P> The tc <B>must<\/B> be in the range {@code 0 <= tc <=\n     * 255} or an IllegalArgumentException will be thrown.\n     * <p>Notes:\n     * <p>For Internet Protocol v4 the value consists of an\n     * {@code integer}, the least significant 8 bits of which\n     * represent the value of the TOS octet in IP packets sent by\n     * the socket.\n     * RFC 1349 defines the TOS values as follows:\n     *\n     * <UL>\n     * <LI><CODE>IPTOS_LOWCOST (0x02)<\/CODE><\/LI>\n     * <LI><CODE>IPTOS_RELIABILITY (0x04)<\/CODE><\/LI>\n     * <LI><CODE>IPTOS_THROUGHPUT (0x08)<\/CODE><\/LI>\n     * <LI><CODE>IPTOS_LOWDELAY (0x10)<\/CODE><\/LI>\n     * <\/UL>\n     * The last low order bit is always ignored as this\n     * corresponds to the MBZ (must be zero) bit.\n     * <p>\n     * Setting bits in the precedence field may result in a\n     * SocketException indicating that the operation is not\n     * permitted.\n     * <p>\n     * for Internet Protocol v6 {@code tc} is the value that\n     * would be placed into the sin6_flowinfo field of the IP header.\n     *\n     * @param tc        an {@code int} value for the bitset.\n     * @throws SocketException if there is an error setting the\n     * traffic class or type-of-service\n     * @since 1.4\n     * @see #getTrafficClass\n     */\n    public synchronized void setTrafficClass(int tc) throws SocketException {\n        if (tc < 0 || tc > 255)\n            throw new IllegalArgumentException(\"tc is not in range 0 -- 255\");\n\n        if (isClosed())\n            throw new SocketException(\"Socket is closed\");\n        try {\n            getImpl().setOption(SocketOptions.IP_TOS, tc);\n        } catch (SocketException se) {\n            // not supported if socket already connected\n            // Solaris returns error in such cases\n            if(!isConnected())\n                throw se;\n        }\n    }"}
{"Number":"314","API Relative Path":"java.net.HttpCookie.java-setVersion(int)","Corresponding Source":"/**\n     * Sets the version of the cookie protocol this cookie complies\n     * with. Version 0 complies with the original Netscape cookie\n     * specification. Version 1 complies with RFC 2965/2109.\n     *\n     * @param  v\n     *         0 if the cookie should comply with the original Netscape\n     *         specification; 1 if the cookie should comply with RFC 2965/2109\n     *\n     * @throws  IllegalArgumentException\n     *          if {@code v} is neither 0 nor 1\n     *\n     * @see  #getVersion\n     */\n    public void setVersion(int v) {\n        if (v != 0 && v != 1) {\n            throw new IllegalArgumentException(\"cookie version should be 0 or 1\");\n        }\n\n        version = v;\n    }"}
{"Number":"315","API Relative Path":"java.net.HttpURLConnection.java-setFixedLengthStreamingMode(int)","Corresponding Source":"/**\n     * This method is used to enable streaming of a HTTP request body\n     * without internal buffering, when the content length is known in\n     * advance.\n     * <p>\n     * An exception will be thrown if the application\n     * attempts to write more data than the indicated\n     * content-length, or if the application closes the OutputStream\n     * before writing the indicated amount.\n     * <p>\n     * When output streaming is enabled, authentication\n     * and redirection cannot be handled automatically.\n     * A HttpRetryException will be thrown when reading\n     * the response if authentication or redirection are required.\n     * This exception can be queried for the details of the error.\n     * <p>\n     * This method must be called before the URLConnection is connected.\n     * <p>\n     * <B>NOTE:<\/B> {@link #setFixedLengthStreamingMode(long)} is recommended\n     * instead of this method as it allows larger content lengths to be set.\n     *\n     * @param   contentLength The number of bytes which will be written\n     *          to the OutputStream.\n     *\n     * @throws  IllegalStateException if URLConnection is already connected\n     *          or if a different streaming mode is already enabled.\n     *\n     * @throws  IllegalArgumentException if a content length less than\n     *          zero is specified.\n     *\n     * @see     #setChunkedStreamingMode(int)\n     * @since 1.5\n     */\n    public void setFixedLengthStreamingMode (int contentLength) {\n        if (connected) {\n            throw new IllegalStateException (\"Already connected\");\n        }\n        if (chunkLength != -1) {\n            throw new IllegalStateException (\"Chunked encoding streaming mode set\");\n        }\n        if (contentLength < 0) {\n            throw new IllegalArgumentException (\"invalid content length\");\n        }\n        fixedContentLength = contentLength;\n    }"}
{"Number":"316","API Relative Path":"java.net.HttpURLConnection.java-setFixedLengthStreamingMode(long)","Corresponding Source":"/**\n     * This method is used to enable streaming of a HTTP request body\n     * without internal buffering, when the content length is known in\n     * advance.\n     *\n     * <P> An exception will be thrown if the application attempts to write\n     * more data than the indicated content-length, or if the application\n     * closes the OutputStream before writing the indicated amount.\n     *\n     * <P> When output streaming is enabled, authentication and redirection\n     * cannot be handled automatically. A {@linkplain HttpRetryException} will\n     * be thrown when reading the response if authentication or redirection\n     * are required. This exception can be queried for the details of the\n     * error.\n     *\n     * <P> This method must be called before the URLConnection is connected.\n     *\n     * <P> The content length set by invoking this method takes precedence\n     * over any value set by {@link #setFixedLengthStreamingMode(int)}.\n     *\n     * @param  contentLength\n     *         The number of bytes which will be written to the OutputStream.\n     *\n     * @throws  IllegalStateException\n     *          if URLConnection is already connected or if a different\n     *          streaming mode is already enabled.\n     *\n     * @throws  IllegalArgumentException\n     *          if a content length less than zero is specified.\n     *\n     * @since 1.7\n     */\n    public void setFixedLengthStreamingMode(long contentLength) {\n        if (connected) {\n            throw new IllegalStateException(\"Already connected\");\n        }\n        if (chunkLength != -1) {\n            throw new IllegalStateException(\n                \"Chunked encoding streaming mode set\");\n        }\n        if (contentLength < 0) {\n            throw new IllegalArgumentException(\"invalid content length\");\n        }\n        fixedContentLengthLong = contentLength;\n    }"}
{"Number":"317","API Relative Path":"java.net.InetAddress.java-isReachable(NetworkInterface-int-int)","Corresponding Source":"/**\n     * Test whether that address is reachable. Best effort is made by the\n     * implementation to try to reach the host, but firewalls and server\n     * configuration may block requests resulting in a unreachable status\n     * while some specific ports may be accessible.\n     * A typical implementation will use ICMP ECHO REQUESTs if the\n     * privilege can be obtained, otherwise it will try to establish\n     * a TCP connection on port 7 (Echo) of the destination host.\n     * <p>\n     * The {@code network interface} and {@code ttl} parameters\n     * let the caller specify which network interface the test will go through\n     * and the maximum number of hops the packets should go through.\n     * A negative value for the {@code ttl} will result in an\n     * IllegalArgumentException being thrown.\n     * <p>\n     * The timeout value, in milliseconds, indicates the maximum amount of time\n     * the try should take. If the operation times out before getting an\n     * answer, the host is deemed unreachable. A negative value will result\n     * in an IllegalArgumentException being thrown.\n     *\n     * @param   netif   the NetworkInterface through which the\n     *                    test will be done, or null for any interface\n     * @param   ttl     the maximum numbers of hops to try or 0 for the\n     *                  default\n     * @param   timeout the time, in milliseconds, before the call aborts\n     * @throws  IllegalArgumentException if either {@code timeout}\n     *                          or {@code ttl} are negative.\n     * @return a {@code boolean}indicating if the address is reachable.\n     * @throws IOException if a network error occurs\n     * @since 1.5\n     */\n    public boolean isReachable(NetworkInterface netif, int ttl,\n                               int timeout) throws IOException {\n        if (ttl < 0)\n            throw new IllegalArgumentException(\"ttl can't be negative\");\n        if (timeout < 0)\n            throw new IllegalArgumentException(\"timeout can't be negative\");\n\n        return impl.isReachable(this, timeout, netif, ttl);\n    }"}
{"Number":"318","API Relative Path":"java.net.InetSocketAddress.java-createUnresolved(String-int)","Corresponding Source":"/**\n     *\n     * Creates an unresolved socket address from a hostname and a port number.\n     * <p>\n     * No attempt will be made to resolve the hostname into an InetAddress.\n     * The address will be flagged as <I>unresolved<\/I>.\n     * <p>\n     * A valid port value is between 0 and 65535.\n     * A port number of {@code zero} will let the system pick up an\n     * ephemeral port in a {@code bind} operation.\n     * <P>\n     * @param   host    the Host name\n     * @param   port    The port number\n     * @throws IllegalArgumentException if the port parameter is outside\n     *                  the range of valid port values, or if the hostname\n     *                  parameter is <TT>null<\/TT>.\n     * @see     #isUnresolved()\n     * @return  a {@code InetSocketAddress} representing the unresolved\n     *          socket address\n     * @since 1.5\n     */\n    public static InetSocketAddress createUnresolved(String host, int port) {\n        return new InetSocketAddress(checkPort(port), checkHost(host));\n    }"}
{"Number":"319","API Relative Path":"java.net.InetSocketAddress.java-createUnresolved(String-int)","Corresponding Source":"/**\n     *\n     * Creates an unresolved socket address from a hostname and a port number.\n     * <p>\n     * No attempt will be made to resolve the hostname into an InetAddress.\n     * The address will be flagged as <I>unresolved<\/I>.\n     * <p>\n     * A valid port value is between 0 and 65535.\n     * A port number of {@code zero} will let the system pick up an\n     * ephemeral port in a {@code bind} operation.\n     * <P>\n     * @param   host    the Host name\n     * @param   port    The port number\n     * @throws IllegalArgumentException if the port parameter is outside\n     *                  the range of valid port values, or if the hostname\n     *                  parameter is <TT>null<\/TT>.\n     * @see     #isUnresolved()\n     * @return  a {@code InetSocketAddress} representing the unresolved\n     *          socket address\n     * @since 1.5\n     */\n    public static InetSocketAddress createUnresolved(String host, int port) {\n        return new InetSocketAddress(checkPort(port), checkHost(host));\n    }"}
{"Number":"320","API Relative Path":"java.net.InetSocketAddress.java-InetSocketAddress(InetAddress-int)","Corresponding Source":"/**\n     *\n     * Creates a socket address from an IP address and a port number.\n     * <p>\n     * A valid port value is between 0 and 65535.\n     * A port number of {@code zero} will let the system pick up an\n     * ephemeral port in a {@code bind} operation.\n     * <P>\n     * A {@code null} address will assign the <i>wildcard<\/i> address.\n     * <p>\n     * @param   addr    The IP address\n     * @param   port    The port number\n     * @throws IllegalArgumentException if the port parameter is outside the specified\n     * range of valid port values.\n     */\n    public InetSocketAddress(InetAddress addr, int port) {\n        holder = new InetSocketAddressHolder(\n                        null,\n                        addr == null ? InetAddress.anyLocalAddress() : addr,\n                        checkPort(port));\n    }"}
{"Number":"321","API Relative Path":"java.net.InetSocketAddress.java-InetSocketAddress(String-int)","Corresponding Source":"/**\n     *\n     * Creates a socket address from a hostname and a port number.\n     * <p>\n     * An attempt will be made to resolve the hostname into an InetAddress.\n     * If that attempt fails, the address will be flagged as <I>unresolved<\/I>.\n     * <p>\n     * If there is a security manager, its {@code checkConnect} method\n     * is called with the host name as its argument to check the permission\n     * to resolve it. This could result in a SecurityException.\n     * <P>\n     * A valid port value is between 0 and 65535.\n     * A port number of {@code zero} will let the system pick up an\n     * ephemeral port in a {@code bind} operation.\n     * <P>\n     * @param   hostname the Host name\n     * @param   port    The port number\n     * @throws IllegalArgumentException if the port parameter is outside the range\n     * of valid port values, or if the hostname parameter is <TT>null<\/TT>.\n     * @throws SecurityException if a security manager is present and\n     *                           permission to resolve the host name is\n     *                           denied.\n     * @see     #isUnresolved()\n     */\n    public InetSocketAddress(String hostname, int port) {\n        checkHost(hostname);\n        InetAddress addr = null;\n        String host = null;\n        try {\n            addr = InetAddress.getByName(hostname);\n        } catch(UnknownHostException e) {\n            host = hostname;\n        }\n        holder = new InetSocketAddressHolder(host, addr, checkPort(port));\n    }"}
{"Number":"322","API Relative Path":"java.net.InMemoryCookieStore.java-add(URI-HttpCookie)","Corresponding Source":"/**\n     * Add one cookie into cookie store.\n     */\n    public void add(URI uri, HttpCookie cookie) {\n        // pre-condition : argument can't be null\n        if (cookie == null) {\n            throw new NullPointerException(\"cookie is null\");\n        }\n\n\n        lock.lock();\n        try {\n            // remove the ole cookie if there has had one\n            cookieJar.remove(cookie);\n\n            // add new cookie if it has a non-zero max-age\n            if (cookie.getMaxAge() != 0) {\n                cookieJar.add(cookie);\n                // and add it to domain index\n                if (cookie.getDomain() != null) {\n                    addIndex(domainIndex, cookie.getDomain(), cookie);\n                }\n                if (uri != null) {\n                    // add it to uri index, too\n                    addIndex(uriIndex, getEffectiveURI(uri), cookie);\n                }\n            }\n        } finally {\n            lock.unlock();\n        }\n    }"}
{"Number":"323","API Relative Path":"java.net.InMemoryCookieStore.java-get(URI)","Corresponding Source":"/**\n     * Get all cookies, which:\n     *  1) given uri domain-matches with, or, associated with\n     *     given uri when added to the cookie store.\n     *  3) not expired.\n     * See RFC 2965 sec. 3.3.4 for more detail.\n     */\n    public List<HttpCookie> get(URI uri) {\n        // argument can't be null\n        if (uri == null) {\n            throw new NullPointerException(\"uri is null\");\n        }\n\n        List<HttpCookie> cookies = new ArrayList<HttpCookie>();\n        boolean secureLink = \"https\".equalsIgnoreCase(uri.getScheme());\n        lock.lock();\n        try {\n            // check domainIndex first\n            getInternal1(cookies, domainIndex, uri.getHost(), secureLink);\n            // check uriIndex then\n            getInternal2(cookies, uriIndex, getEffectiveURI(uri), secureLink);\n        } finally {\n            lock.unlock();\n        }\n\n        return cookies;\n    }"}
{"Number":"324","API Relative Path":"java.net.InMemoryCookieStore.java-remove(URI-HttpCookie)","Corresponding Source":"/**\n     * Remove a cookie from store\n     */\n    public boolean remove(URI uri, HttpCookie ck) {\n        // argument can't be null\n        if (ck == null) {\n            throw new NullPointerException(\"cookie is null\");\n        }\n\n        boolean modified = false;\n        lock.lock();\n        try {\n            modified = cookieJar.remove(ck);\n        } finally {\n            lock.unlock();\n        }\n\n        return modified;\n    }"}
{"Number":"325","API Relative Path":"java.net.MulticastSocket.java-joinGroup(InetAddress)","Corresponding Source":"/**\n     * Joins a multicast group. Its behavior may be affected by\n     * {@code setInterface} or {@code setNetworkInterface}.\n     *\n     * <p>If there is a security manager, this method first\n     * calls its {@code checkMulticast} method\n     * with the {@code mcastaddr} argument\n     * as its argument.\n     *\n     * @param mcastaddr is the multicast address to join\n     *\n     * @exception IOException if there is an error joining\n     * or when the address is not a multicast address.\n     * @exception  SecurityException  if a security manager exists and its\n     * {@code checkMulticast} method doesn't allow the join.\n     *\n     * @see SecurityManager#checkMulticast(InetAddress)\n     */\n    public void joinGroup(InetAddress mcastaddr) throws IOException {\n        if (isClosed()) {\n            throw new SocketException(\"Socket is closed\");\n        }\n\n        checkAddress(mcastaddr, \"joinGroup\");\n        SecurityManager security = System.getSecurityManager();\n        if (security != null) {\n            security.checkMulticast(mcastaddr);\n        }\n\n        if (!mcastaddr.isMulticastAddress()) {\n            throw new SocketException(\"Not a multicast address\");\n        }\n\n        /**\n         * required for some platforms where it's not possible to join\n         * a group without setting the interface first.\n         */\n        NetworkInterface defaultInterface = NetworkInterface.getDefault();\n\n        if (!interfaceSet && defaultInterface != null) {\n            setNetworkInterface(defaultInterface);\n        }\n\n        getImpl().join(mcastaddr);\n    }"}
{"Number":"326","API Relative Path":"java.net.MulticastSocket.java-joinGroup(InetAddress)","Corresponding Source":"/**\n     * Joins a multicast group. Its behavior may be affected by\n     * {@code setInterface} or {@code setNetworkInterface}.\n     *\n     * <p>If there is a security manager, this method first\n     * calls its {@code checkMulticast} method\n     * with the {@code mcastaddr} argument\n     * as its argument.\n     *\n     * @param mcastaddr is the multicast address to join\n     *\n     * @exception IOException if there is an error joining\n     * or when the address is not a multicast address.\n     * @exception  SecurityException  if a security manager exists and its\n     * {@code checkMulticast} method doesn't allow the join.\n     *\n     * @see SecurityManager#checkMulticast(InetAddress)\n     */\n    public void joinGroup(InetAddress mcastaddr) throws IOException {\n        if (isClosed()) {\n            throw new SocketException(\"Socket is closed\");\n        }\n\n        checkAddress(mcastaddr, \"joinGroup\");\n        SecurityManager security = System.getSecurityManager();\n        if (security != null) {\n            security.checkMulticast(mcastaddr);\n        }\n\n        if (!mcastaddr.isMulticastAddress()) {\n            throw new SocketException(\"Not a multicast address\");\n        }\n\n        /**\n         * required for some platforms where it's not possible to join\n         * a group without setting the interface first.\n         */\n        NetworkInterface defaultInterface = NetworkInterface.getDefault();\n\n        if (!interfaceSet && defaultInterface != null) {\n            setNetworkInterface(defaultInterface);\n        }\n\n        getImpl().join(mcastaddr);\n    }"}
{"Number":"327","API Relative Path":"java.net.MulticastSocket.java-joinGroup(SocketAddress-NetworkInterface)","Corresponding Source":"/**\n     * Joins the specified multicast group at the specified interface.\n     *\n     * <p>If there is a security manager, this method first\n     * calls its {@code checkMulticast} method\n     * with the {@code mcastaddr} argument\n     * as its argument.\n     *\n     * @param mcastaddr is the multicast address to join\n     * @param netIf specifies the local interface to receive multicast\n     *        datagram packets, or <i>null<\/i> to defer to the interface set by\n     *       {@link MulticastSocket#setInterface(InetAddress)} or\n     *       {@link MulticastSocket#setNetworkInterface(NetworkInterface)}\n     *\n     * @exception IOException if there is an error joining\n     * or when the address is not a multicast address.\n     * @exception  SecurityException  if a security manager exists and its\n     * {@code checkMulticast} method doesn't allow the join.\n     * @throws  IllegalArgumentException if mcastaddr is null or is a\n     *          SocketAddress subclass not supported by this socket\n     *\n     * @see SecurityManager#checkMulticast(InetAddress)\n     * @since 1.4\n     */\n    public void joinGroup(SocketAddress mcastaddr, NetworkInterface netIf)\n        throws IOException {\n        if (isClosed())\n            throw new SocketException(\"Socket is closed\");\n\n        if (mcastaddr == null || !(mcastaddr instanceof InetSocketAddress))\n            throw new IllegalArgumentException(\"Unsupported address type\");\n\n        if (oldImpl)\n            throw new UnsupportedOperationException();\n\n        checkAddress(((InetSocketAddress)mcastaddr).getAddress(), \"joinGroup\");\n        SecurityManager security = System.getSecurityManager();\n        if (security != null) {\n            security.checkMulticast(((InetSocketAddress)mcastaddr).getAddress());\n        }\n\n        if (!((InetSocketAddress)mcastaddr).getAddress().isMulticastAddress()) {\n            throw new SocketException(\"Not a multicast address\");\n        }\n\n        getImpl().joinGroup(mcastaddr, netIf);\n    }"}
{"Number":"328","API Relative Path":"java.net.MulticastSocket.java-leaveGroup(InetAddress)","Corresponding Source":"/**\n     * Leave a multicast group. Its behavior may be affected by\n     * {@code setInterface} or {@code setNetworkInterface}.\n     *\n     * <p>If there is a security manager, this method first\n     * calls its {@code checkMulticast} method\n     * with the {@code mcastaddr} argument\n     * as its argument.\n     *\n     * @param mcastaddr is the multicast address to leave\n     * @exception IOException if there is an error leaving\n     * or when the address is not a multicast address.\n     * @exception  SecurityException  if a security manager exists and its\n     * {@code checkMulticast} method doesn't allow the operation.\n     *\n     * @see SecurityManager#checkMulticast(InetAddress)\n     */\n    public void leaveGroup(InetAddress mcastaddr) throws IOException {\n        if (isClosed()) {\n            throw new SocketException(\"Socket is closed\");\n        }\n\n        checkAddress(mcastaddr, \"leaveGroup\");\n        SecurityManager security = System.getSecurityManager();\n        if (security != null) {\n            security.checkMulticast(mcastaddr);\n        }\n\n        if (!mcastaddr.isMulticastAddress()) {\n            throw new SocketException(\"Not a multicast address\");\n        }\n\n        getImpl().leave(mcastaddr);\n    }"}
{"Number":"329","API Relative Path":"java.net.MulticastSocket.java-leaveGroup(InetAddress)","Corresponding Source":"/**\n     * Leave a multicast group. Its behavior may be affected by\n     * {@code setInterface} or {@code setNetworkInterface}.\n     *\n     * <p>If there is a security manager, this method first\n     * calls its {@code checkMulticast} method\n     * with the {@code mcastaddr} argument\n     * as its argument.\n     *\n     * @param mcastaddr is the multicast address to leave\n     * @exception IOException if there is an error leaving\n     * or when the address is not a multicast address.\n     * @exception  SecurityException  if a security manager exists and its\n     * {@code checkMulticast} method doesn't allow the operation.\n     *\n     * @see SecurityManager#checkMulticast(InetAddress)\n     */\n    public void leaveGroup(InetAddress mcastaddr) throws IOException {\n        if (isClosed()) {\n            throw new SocketException(\"Socket is closed\");\n        }\n\n        checkAddress(mcastaddr, \"leaveGroup\");\n        SecurityManager security = System.getSecurityManager();\n        if (security != null) {\n            security.checkMulticast(mcastaddr);\n        }\n\n        if (!mcastaddr.isMulticastAddress()) {\n            throw new SocketException(\"Not a multicast address\");\n        }\n\n        getImpl().leave(mcastaddr);\n    }"}
{"Number":"330","API Relative Path":"java.net.MulticastSocket.java-leaveGroup(SocketAddress-NetworkInterface)","Corresponding Source":"/**\n     * Leave a multicast group on a specified local interface.\n     *\n     * <p>If there is a security manager, this method first\n     * calls its {@code checkMulticast} method\n     * with the {@code mcastaddr} argument\n     * as its argument.\n     *\n     * @param mcastaddr is the multicast address to leave\n     * @param netIf specifies the local interface or <i>null<\/i> to defer\n     *             to the interface set by\n     *             {@link MulticastSocket#setInterface(InetAddress)} or\n     *             {@link MulticastSocket#setNetworkInterface(NetworkInterface)}\n     * @exception IOException if there is an error leaving\n     * or when the address is not a multicast address.\n     * @exception  SecurityException  if a security manager exists and its\n     * {@code checkMulticast} method doesn't allow the operation.\n     * @throws  IllegalArgumentException if mcastaddr is null or is a\n     *          SocketAddress subclass not supported by this socket\n     *\n     * @see SecurityManager#checkMulticast(InetAddress)\n     * @since 1.4\n     */\n    public void leaveGroup(SocketAddress mcastaddr, NetworkInterface netIf)\n        throws IOException {\n        if (isClosed())\n            throw new SocketException(\"Socket is closed\");\n\n        if (mcastaddr == null || !(mcastaddr instanceof InetSocketAddress))\n            throw new IllegalArgumentException(\"Unsupported address type\");\n\n        if (oldImpl)\n            throw new UnsupportedOperationException();\n\n        checkAddress(((InetSocketAddress)mcastaddr).getAddress(), \"leaveGroup\");\n        SecurityManager security = System.getSecurityManager();\n        if (security != null) {\n            security.checkMulticast(((InetSocketAddress)mcastaddr).getAddress());\n        }\n\n        if (!((InetSocketAddress)mcastaddr).getAddress().isMulticastAddress()) {\n            throw new SocketException(\"Not a multicast address\");\n        }\n\n        getImpl().leaveGroup(mcastaddr, netIf);\n     }"}
{"Number":"331","API Relative Path":"java.net.MulticastSocket.java-setInterface(InetAddress)","Corresponding Source":"/**\n     * Set the multicast network interface used by methods\n     * whose behavior would be affected by the value of the\n     * network interface. Useful for multihomed hosts.\n     * @param inf the InetAddress\n     * @exception SocketException if there is an error in\n     * the underlying protocol, such as a TCP error.\n     * @see #getInterface()\n     */\n    public void setInterface(InetAddress inf) throws SocketException {\n        if (isClosed()) {\n            throw new SocketException(\"Socket is closed\");\n        }\n        checkAddress(inf, \"setInterface\");\n        synchronized (infLock) {\n            getImpl().setOption(SocketOptions.IP_MULTICAST_IF, inf);\n            infAddress = inf;\n            interfaceSet = true;\n        }\n    }"}
{"Number":"332","API Relative Path":"java.net.MulticastSocket.java-setInterface(InetAddress)","Corresponding Source":"/**\n     * Set the multicast network interface used by methods\n     * whose behavior would be affected by the value of the\n     * network interface. Useful for multihomed hosts.\n     * @param inf the InetAddress\n     * @exception SocketException if there is an error in\n     * the underlying protocol, such as a TCP error.\n     * @see #getInterface()\n     */\n    public void setInterface(InetAddress inf) throws SocketException {\n        if (isClosed()) {\n            throw new SocketException(\"Socket is closed\");\n        }\n        checkAddress(inf, \"setInterface\");\n        synchronized (infLock) {\n            getImpl().setOption(SocketOptions.IP_MULTICAST_IF, inf);\n            infAddress = inf;\n            interfaceSet = true;\n        }\n    }"}
{"Number":"333","API Relative Path":"java.net.MulticastSocket.java-setTimeToLive(int)","Corresponding Source":"/**\n     * Set the default time-to-live for multicast packets sent out\n     * on this {@code MulticastSocket} in order to control the\n     * scope of the multicasts.\n     *\n     * <P> The ttl <B>must<\/B> be in the range {@code  0 <= ttl <=\n     * 255} or an {@code IllegalArgumentException} will be thrown.\n     * Multicast packets sent with a TTL of {@code 0} are not transmitted\n     * on the network but may be delivered locally.\n     *\n     * @param  ttl\n     *         the time-to-live\n     *\n     * @throws  IOException\n     *          if an I/O exception occurs while setting the\n     *          default time-to-live value\n     *\n     * @see #getTimeToLive()\n     */\n    public void setTimeToLive(int ttl) throws IOException {\n        if (ttl < 0 || ttl > 255) {\n            throw new IllegalArgumentException(\"ttl out of range\");\n        }\n        if (isClosed())\n            throw new SocketException(\"Socket is closed\");\n        getImpl().setTimeToLive(ttl);\n    }"}
{"Number":"334","API Relative Path":"java.net.NetworkInterface.java-getByIndex(int)","Corresponding Source":"/**\n     * Get a network interface given its index.\n     *\n     * @param index an integer, the index of the interface\n     * @return the NetworkInterface obtained from its index, or {@code null} if\n     *         there is no interface with such an index on the system\n     * @throws  SocketException  if an I/O error occurs.\n     * @throws  IllegalArgumentException if index has a negative value\n     * @see #getIndex()\n     * @since 1.7\n     */\n    public static NetworkInterface getByIndex(int index) throws SocketException {\n        if (index < 0)\n            throw new IllegalArgumentException(\"Interface index can't be negative\");\n        return getByIndex0(index);\n    }"}
{"Number":"335","API Relative Path":"java.net.NetworkInterface.java-getByInetAddress(InetAddress)","Corresponding Source":"/**\n     * Convenience method to search for a network interface that\n     * has the specified Internet Protocol (IP) address bound to\n     * it.\n     * <p>\n     * If the specified IP address is bound to multiple network\n     * interfaces it is not defined which network interface is\n     * returned.\n     *\n     * @param   addr\n     *          The {@code InetAddress} to search with.\n     *\n     * @return  A {@code NetworkInterface}\n     *          or {@code null} if there is no network interface\n     *          with the specified IP address.\n     *\n     * @throws  SocketException\n     *          If an I/O error occurs.\n     *\n     * @throws  NullPointerException\n     *          If the specified address is {@code null}.\n     */\n    public static NetworkInterface getByInetAddress(InetAddress addr) throws SocketException {\n        if (addr == null) {\n            throw new NullPointerException();\n        }\n        if (!(addr instanceof Inet4Address || addr instanceof Inet6Address)) {\n            throw new IllegalArgumentException (\"invalid address type\");\n        }\n        return getByInetAddress0(addr);\n    }"}
{"Number":"336","API Relative Path":"java.net.NetworkInterface.java-getByInetAddress(InetAddress)","Corresponding Source":"/**\n     * Convenience method to search for a network interface that\n     * has the specified Internet Protocol (IP) address bound to\n     * it.\n     * <p>\n     * If the specified IP address is bound to multiple network\n     * interfaces it is not defined which network interface is\n     * returned.\n     *\n     * @param   addr\n     *          The {@code InetAddress} to search with.\n     *\n     * @return  A {@code NetworkInterface}\n     *          or {@code null} if there is no network interface\n     *          with the specified IP address.\n     *\n     * @throws  SocketException\n     *          If an I/O error occurs.\n     *\n     * @throws  NullPointerException\n     *          If the specified address is {@code null}.\n     */\n    public static NetworkInterface getByInetAddress(InetAddress addr) throws SocketException {\n        if (addr == null) {\n            throw new NullPointerException();\n        }\n        if (!(addr instanceof Inet4Address || addr instanceof Inet6Address)) {\n            throw new IllegalArgumentException (\"invalid address type\");\n        }\n        return getByInetAddress0(addr);\n    }"}
{"Number":"337","API Relative Path":"java.net.Proxy.java-Proxy(Type-SocketAddress)","Corresponding Source":"/**\n     * Creates an entry representing a PROXY connection.\n     * Certain combinations are illegal. For instance, for types Http, and\n     * Socks, a SocketAddress <b>must<\/b> be provided.\n     * <P>\n     * Use the {@code Proxy.NO_PROXY} constant\n     * for representing a direct connection.\n     *\n     * @param type the {@code Type} of the proxy\n     * @param sa the {@code SocketAddress} for that proxy\n     * @throws IllegalArgumentException when the type and the address are\n     * incompatible\n     */\n    public Proxy(Type type, SocketAddress sa) {\n        if ((type == Type.DIRECT) || !(sa instanceof InetSocketAddress))\n            throw new IllegalArgumentException(\"type \" + type + \" is not compatible with address \" + sa);\n        this.type = type;\n        this.sa = sa;\n    }"}
{"Number":"338","API Relative Path":"java.net.ServerSocket.java-bind(SocketAddress-int)","Corresponding Source":"/**\n     *\n     * Binds the {@code ServerSocket} to a specific address\n     * (IP address and port number).\n     * <p>\n     * If the address is {@code null}, then the system will pick up\n     * an ephemeral port and a valid local address to bind the socket.\n     * <P>\n     * The {@code backlog} argument is the requested maximum number of\n     * pending connections on the socket. Its exact semantics are implementation\n     * specific. In particular, an implementation may impose a maximum length\n     * or may choose to ignore the parameter altogther. The value provided\n     * should be greater than {@code 0}. If it is less than or equal to\n     * {@code 0}, then an implementation specific default will be used.\n     * @param   endpoint        The IP address and port number to bind to.\n     * @param   backlog         requested maximum length of the queue of\n     *                          incoming connections.\n     * @throws  IOException if the bind operation fails, or if the socket\n     *                     is already bound.\n     * @throws  SecurityException       if a {@code SecurityManager} is present and\n     * its {@code checkListen} method doesn't allow the operation.\n     * @throws  IllegalArgumentException if endpoint is a\n     *          SocketAddress subclass not supported by this socket\n     * @since 1.4\n     */\n    public void bind(SocketAddress endpoint, int backlog) throws IOException {\n        if (isClosed())\n            throw new SocketException(\"Socket is closed\");\n        if (!oldImpl && isBound())\n            throw new SocketException(\"Already bound\");\n        if (endpoint == null)\n            endpoint = new InetSocketAddress(0);\n        if (!(endpoint instanceof InetSocketAddress))\n            throw new IllegalArgumentException(\"Unsupported address type\");\n        InetSocketAddress epoint = (InetSocketAddress) endpoint;\n        if (epoint.isUnresolved())\n            throw new SocketException(\"Unresolved address\");\n        if (backlog < 1)\n          backlog = 50;\n        try {\n            SecurityManager security = System.getSecurityManager();\n            if (security != null)\n                security.checkListen(epoint.getPort());\n            getImpl().bind(epoint.getAddress(), epoint.getPort());\n            getImpl().listen(backlog);\n            bound = true;\n        } catch(SecurityException e) {\n            bound = false;\n            throw e;\n        } catch(IOException e) {\n            bound = false;\n            throw e;\n        }\n    }"}
{"Number":"339","API Relative Path":"java.net.ServerSocket.java-ServerSocket(int-int-InetAddress)","Corresponding Source":"/**\n     * Create a server with the specified port, listen backlog, and\n     * local IP address to bind to.  The <i>bindAddr<\/i> argument\n     * can be used on a multi-homed host for a ServerSocket that\n     * will only accept connect requests to one of its addresses.\n     * If <i>bindAddr<\/i> is null, it will default accepting\n     * connections on any/all local addresses.\n     * The port must be between 0 and 65535, inclusive.\n     * A port number of {@code 0} means that the port number is\n     * automatically allocated, typically from an ephemeral port range.\n     * This port number can then be retrieved by calling\n     * {@link #getLocalPort getLocalPort}.\n     *\n     * <P>If there is a security manager, this method\n     * calls its {@code checkListen} method\n     * with the {@code port} argument\n     * as its argument to ensure the operation is allowed.\n     * This could result in a SecurityException.\n     *\n     * The {@code backlog} argument is the requested maximum number of\n     * pending connections on the socket. Its exact semantics are implementation\n     * specific. In particular, an implementation may impose a maximum length\n     * or may choose to ignore the parameter altogther. The value provided\n     * should be greater than {@code 0}. If it is less than or equal to\n     * {@code 0}, then an implementation specific default will be used.\n     * <P>\n     * @param port  the port number, or {@code 0} to use a port\n     *              number that is automatically allocated.\n     * @param backlog requested maximum length of the queue of incoming\n     *                connections.\n     * @param bindAddr the local InetAddress the server will bind to\n     *\n     * @throws  SecurityException if a security manager exists and\n     * its {@code checkListen} method doesn't allow the operation.\n     *\n     * @throws  IOException if an I/O error occurs when opening the socket.\n     * @exception  IllegalArgumentException if the port parameter is outside\n     *             the specified range of valid port values, which is between\n     *             0 and 65535, inclusive.\n     *\n     * @see SocketOptions\n     * @see SocketImpl\n     * @see SecurityManager#checkListen\n     * @since   JDK1.1\n     */\n    public ServerSocket(int port, int backlog, InetAddress bindAddr) throws IOException {\n        setImpl();\n        if (port < 0 || port > 0xFFFF)\n            throw new IllegalArgumentException(\n                       \"Port value out of range: \" + port);\n        if (backlog < 1)\n          backlog = 50;\n        try {\n            bind(new InetSocketAddress(bindAddr, port), backlog);\n        } catch(SecurityException e) {\n            close();\n            throw e;\n        } catch(IOException e) {\n            close();\n            throw e;\n        }\n    }"}
{"Number":"340","API Relative Path":"java.net.Socket.java-bind(SocketAddress)","Corresponding Source":"/**\n     * Binds the socket to a local address.\n     * <P>\n     * If the address is {@code null}, then the system will pick up\n     * an ephemeral port and a valid local address to bind the socket.\n     *\n     * @param   bindpoint the {@code SocketAddress} to bind to\n     * @throws  IOException if the bind operation fails, or if the socket\n     *                     is already bound.\n     * @throws  IllegalArgumentException if bindpoint is a\n     *          SocketAddress subclass not supported by this socket\n     * @throws  SecurityException  if a security manager exists and its\n     *          {@code checkListen} method doesn't allow the bind\n     *          to the local port.\n     *\n     * @since   1.4\n     * @see #isBound\n     */\n    public void bind(SocketAddress bindpoint) throws IOException {\n        if (isClosed())\n            throw new SocketException(\"Socket is closed\");\n        if (!oldImpl && isBound())\n            throw new SocketException(\"Already bound\");\n\n        if (bindpoint != null && (!(bindpoint instanceof InetSocketAddress)))\n            throw new IllegalArgumentException(\"Unsupported address type\");\n        InetSocketAddress epoint = (InetSocketAddress) bindpoint;\n        if (epoint != null && epoint.isUnresolved())\n            throw new SocketException(\"Unresolved address\");\n        if (epoint == null) {\n            epoint = new InetSocketAddress(0);\n        }\n        InetAddress addr = epoint.getAddress();\n        int port = epoint.getPort();\n        checkAddress (addr, \"bind\");\n        SecurityManager security = System.getSecurityManager();\n        if (security != null) {\n            security.checkListen(port);\n        }\n        getImpl().bind (addr, port);\n        bound = true;\n    }"}
{"Number":"341","API Relative Path":"java.net.Socket.java-connect(SocketAddress-int)","Corresponding Source":"/**\n     * Connects this socket to the server with a specified timeout value.\n     * A timeout of zero is interpreted as an infinite timeout. The connection\n     * will then block until established or an error occurs.\n     *\n     * @param   endpoint the {@code SocketAddress}\n     * @param   timeout  the timeout value to be used in milliseconds.\n     * @throws  IOException if an error occurs during the connection\n     * @throws  SocketTimeoutException if timeout expires before connecting\n     * @throws  java.nio.channels.IllegalBlockingModeException\n     *          if this socket has an associated channel,\n     *          and the channel is in non-blocking mode\n     * @throws  IllegalArgumentException if endpoint is null or is a\n     *          SocketAddress subclass not supported by this socket\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public void connect(SocketAddress endpoint, int timeout) throws IOException {\n        if (endpoint == null)\n            throw new IllegalArgumentException(\"connect: The address can't be null\");\n\n        if (timeout < 0)\n          throw new IllegalArgumentException(\"connect: timeout can't be negative\");\n\n        if (isClosed())\n            throw new SocketException(\"Socket is closed\");\n\n        if (!oldImpl && isConnected())\n            throw new SocketException(\"already connected\");\n\n        if (!(endpoint instanceof InetSocketAddress))\n            throw new IllegalArgumentException(\"Unsupported address type\");\n\n        InetSocketAddress epoint = (InetSocketAddress) endpoint;\n        InetAddress addr = epoint.getAddress ();\n        int port = epoint.getPort();\n        checkAddress(addr, \"connect\");\n\n        SecurityManager security = System.getSecurityManager();\n        if (security != null) {\n            if (epoint.isUnresolved())\n                security.checkConnect(epoint.getHostName(), port);\n            else\n                security.checkConnect(addr.getHostAddress(), port);\n        }\n        if (!created)\n            createImpl(true);\n        if (!oldImpl)\n            impl.connect(epoint, timeout);\n        else if (timeout == 0) {\n            if (epoint.isUnresolved())\n                impl.connect(addr.getHostName(), port);\n            else\n                impl.connect(addr, port);\n        } else\n            throw new UnsupportedOperationException(\"SocketImpl.connect(addr, timeout)\");\n        connected = true;\n        /*\n         * If the socket was not bound before the connect, it is now because\n         * the kernel will have picked an ephemeral port & a local address\n         */\n        bound = true;\n    }"}
{"Number":"342","API Relative Path":"java.net.Socket.java-connect(SocketAddress-int)","Corresponding Source":"/**\n     * Connects this socket to the server with a specified timeout value.\n     * A timeout of zero is interpreted as an infinite timeout. The connection\n     * will then block until established or an error occurs.\n     *\n     * @param   endpoint the {@code SocketAddress}\n     * @param   timeout  the timeout value to be used in milliseconds.\n     * @throws  IOException if an error occurs during the connection\n     * @throws  SocketTimeoutException if timeout expires before connecting\n     * @throws  java.nio.channels.IllegalBlockingModeException\n     *          if this socket has an associated channel,\n     *          and the channel is in non-blocking mode\n     * @throws  IllegalArgumentException if endpoint is null or is a\n     *          SocketAddress subclass not supported by this socket\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public void connect(SocketAddress endpoint, int timeout) throws IOException {\n        if (endpoint == null)\n            throw new IllegalArgumentException(\"connect: The address can't be null\");\n\n        if (timeout < 0)\n          throw new IllegalArgumentException(\"connect: timeout can't be negative\");\n\n        if (isClosed())\n            throw new SocketException(\"Socket is closed\");\n\n        if (!oldImpl && isConnected())\n            throw new SocketException(\"already connected\");\n\n        if (!(endpoint instanceof InetSocketAddress))\n            throw new IllegalArgumentException(\"Unsupported address type\");\n\n        InetSocketAddress epoint = (InetSocketAddress) endpoint;\n        InetAddress addr = epoint.getAddress ();\n        int port = epoint.getPort();\n        checkAddress(addr, \"connect\");\n\n        SecurityManager security = System.getSecurityManager();\n        if (security != null) {\n            if (epoint.isUnresolved())\n                security.checkConnect(epoint.getHostName(), port);\n            else\n                security.checkConnect(addr.getHostAddress(), port);\n        }\n        if (!created)\n            createImpl(true);\n        if (!oldImpl)\n            impl.connect(epoint, timeout);\n        else if (timeout == 0) {\n            if (epoint.isUnresolved())\n                impl.connect(addr.getHostName(), port);\n            else\n                impl.connect(addr, port);\n        } else\n            throw new UnsupportedOperationException(\"SocketImpl.connect(addr, timeout)\");\n        connected = true;\n        /*\n         * If the socket was not bound before the connect, it is now because\n         * the kernel will have picked an ephemeral port & a local address\n         */\n        bound = true;\n    }"}
{"Number":"343","API Relative Path":"java.net.Socket.java-connect(SocketAddress-int)","Corresponding Source":"/**\n     * Connects this socket to the server with a specified timeout value.\n     * A timeout of zero is interpreted as an infinite timeout. The connection\n     * will then block until established or an error occurs.\n     *\n     * @param   endpoint the {@code SocketAddress}\n     * @param   timeout  the timeout value to be used in milliseconds.\n     * @throws  IOException if an error occurs during the connection\n     * @throws  SocketTimeoutException if timeout expires before connecting\n     * @throws  java.nio.channels.IllegalBlockingModeException\n     *          if this socket has an associated channel,\n     *          and the channel is in non-blocking mode\n     * @throws  IllegalArgumentException if endpoint is null or is a\n     *          SocketAddress subclass not supported by this socket\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public void connect(SocketAddress endpoint, int timeout) throws IOException {\n        if (endpoint == null)\n            throw new IllegalArgumentException(\"connect: The address can't be null\");\n\n        if (timeout < 0)\n          throw new IllegalArgumentException(\"connect: timeout can't be negative\");\n\n        if (isClosed())\n            throw new SocketException(\"Socket is closed\");\n\n        if (!oldImpl && isConnected())\n            throw new SocketException(\"already connected\");\n\n        if (!(endpoint instanceof InetSocketAddress))\n            throw new IllegalArgumentException(\"Unsupported address type\");\n\n        InetSocketAddress epoint = (InetSocketAddress) endpoint;\n        InetAddress addr = epoint.getAddress ();\n        int port = epoint.getPort();\n        checkAddress(addr, \"connect\");\n\n        SecurityManager security = System.getSecurityManager();\n        if (security != null) {\n            if (epoint.isUnresolved())\n                security.checkConnect(epoint.getHostName(), port);\n            else\n                security.checkConnect(addr.getHostAddress(), port);\n        }\n        if (!created)\n            createImpl(true);\n        if (!oldImpl)\n            impl.connect(epoint, timeout);\n        else if (timeout == 0) {\n            if (epoint.isUnresolved())\n                impl.connect(addr.getHostName(), port);\n            else\n                impl.connect(addr, port);\n        } else\n            throw new UnsupportedOperationException(\"SocketImpl.connect(addr, timeout)\");\n        connected = true;\n        /*\n         * If the socket was not bound before the connect, it is now because\n         * the kernel will have picked an ephemeral port & a local address\n         */\n        bound = true;\n    }"}
{"Number":"344","API Relative Path":"java.net.Socket.java-setSoLinger(boolean-int)","Corresponding Source":"/**\n     * Enable/disable {@link SocketOptions#SO_LINGER SO_LINGER} with the\n     * specified linger time in seconds. The maximum timeout value is platform\n     * specific.\n     *\n     * The setting only affects socket close.\n     *\n     * @param on     whether or not to linger on.\n     * @param linger how long to linger for, if on is true.\n     * @exception SocketException if there is an error\n     * in the underlying protocol, such as a TCP error.\n     * @exception IllegalArgumentException if the linger value is negative.\n     * @since JDK1.1\n     * @see #getSoLinger()\n     */\n    public void setSoLinger(boolean on, int linger) throws SocketException {\n        if (isClosed())\n            throw new SocketException(\"Socket is closed\");\n        if (!on) {\n            getImpl().setOption(SocketOptions.SO_LINGER, new Boolean(on));\n        } else {\n            if (linger < 0) {\n                throw new IllegalArgumentException(\"invalid value for SO_LINGER\");\n            }\n            if (linger > 65535)\n                linger = 65535;\n            getImpl().setOption(SocketOptions.SO_LINGER, new Integer(linger));\n        }\n    }"}
{"Number":"345","API Relative Path":"java.net.Socket.java-setSoTimeout(int)","Corresponding Source":"/**\n     *  Enable/disable {@link SocketOptions#SO_TIMEOUT SO_TIMEOUT}\n     *  with the specified timeout, in milliseconds. With this option set\n     *  to a non-zero timeout, a read() call on the InputStream associated with\n     *  this Socket will block for only this amount of time.  If the timeout\n     *  expires, a <B>java.net.SocketTimeoutException<\/B> is raised, though the\n     *  Socket is still valid. The option <B>must<\/B> be enabled\n     *  prior to entering the blocking operation to have effect. The\n     *  timeout must be {@code > 0}.\n     *  A timeout of zero is interpreted as an infinite timeout.\n     *\n     * @param timeout the specified timeout, in milliseconds.\n     * @exception SocketException if there is an error\n     * in the underlying protocol, such as a TCP error.\n     * @since   JDK 1.1\n     * @see #getSoTimeout()\n     */\n    public synchronized void setSoTimeout(int timeout) throws SocketException {\n        if (isClosed())\n            throw new SocketException(\"Socket is closed\");\n        if (timeout < 0)\n          throw new IllegalArgumentException(\"timeout can't be negative\");\n\n        getImpl().setOption(SocketOptions.SO_TIMEOUT, new Integer(timeout));\n    }"}
{"Number":"346","API Relative Path":"java.net.Socket.java-setTrafficClass(int)","Corresponding Source":"/**\n     * Sets traffic class or type-of-service octet in the IP\n     * header for packets sent from this Socket.\n     * As the underlying network implementation may ignore this\n     * value applications should consider it a hint.\n     *\n     * <P> The tc <B>must<\/B> be in the range {@code 0 <= tc <=\n     * 255} or an IllegalArgumentException will be thrown.\n     * <p>Notes:\n     * <p>For Internet Protocol v4 the value consists of an\n     * {@code integer}, the least significant 8 bits of which\n     * represent the value of the TOS octet in IP packets sent by\n     * the socket.\n     * RFC 1349 defines the TOS values as follows:\n     *\n     * <UL>\n     * <LI><CODE>IPTOS_LOWCOST (0x02)<\/CODE><\/LI>\n     * <LI><CODE>IPTOS_RELIABILITY (0x04)<\/CODE><\/LI>\n     * <LI><CODE>IPTOS_THROUGHPUT (0x08)<\/CODE><\/LI>\n     * <LI><CODE>IPTOS_LOWDELAY (0x10)<\/CODE><\/LI>\n     * <\/UL>\n     * The last low order bit is always ignored as this\n     * corresponds to the MBZ (must be zero) bit.\n     * <p>\n     * Setting bits in the precedence field may result in a\n     * SocketException indicating that the operation is not\n     * permitted.\n     * <p>\n     * As RFC 1122 section 4.2.4.2 indicates, a compliant TCP\n     * implementation should, but is not required to, let application\n     * change the TOS field during the lifetime of a connection.\n     * So whether the type-of-service field can be changed after the\n     * TCP connection has been established depends on the implementation\n     * in the underlying platform. Applications should not assume that\n     * they can change the TOS field after the connection.\n     * <p>\n     * For Internet Protocol v6 {@code tc} is the value that\n     * would be placed into the sin6_flowinfo field of the IP header.\n     *\n     * @param tc        an {@code int} value for the bitset.\n     * @throws SocketException if there is an error setting the\n     * traffic class or type-of-service\n     * @since 1.4\n     * @see #getTrafficClass\n     * @see SocketOptions#IP_TOS\n     */\n    public void setTrafficClass(int tc) throws SocketException {\n        if (tc < 0 || tc > 255)\n            throw new IllegalArgumentException(\"tc is not in range 0 -- 255\");\n\n        if (isClosed())\n            throw new SocketException(\"Socket is closed\");\n        try {\n            getImpl().setOption(SocketOptions.IP_TOS, tc);\n        } catch (SocketException se) {\n            // not supported if socket already connected\n            // Solaris returns error in such cases\n            if(!isConnected())\n                throw se;\n        }\n    }"}
{"Number":"347","API Relative Path":"java.net.Socket.java-Socket(InetAddress-int)","Corresponding Source":"/**\n     * Creates a stream socket and connects it to the specified port\n     * number at the specified IP address.\n     * <p>\n     * If the application has specified a socket factory, that factory's\n     * {@code createSocketImpl} method is called to create the\n     * actual socket implementation. Otherwise a \"plain\" socket is created.\n     * <p>\n     * If there is a security manager, its\n     * {@code checkConnect} method is called\n     * with the host address and {@code port}\n     * as its arguments. This could result in a SecurityException.\n     *\n     * @param      address   the IP address.\n     * @param      port      the port number.\n     * @exception  IOException  if an I/O error occurs when creating the socket.\n     * @exception  SecurityException  if a security manager exists and its\n     *             {@code checkConnect} method doesn't allow the operation.\n     * @exception  IllegalArgumentException if the port parameter is outside\n     *             the specified range of valid port values, which is between\n     *             0 and 65535, inclusive.\n     * @exception  NullPointerException if {@code address} is null.\n     * @see        java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory)\n     * @see        java.net.SocketImpl\n     * @see        java.net.SocketImplFactory#createSocketImpl()\n     * @see        SecurityManager#checkConnect\n     */\n    public Socket(InetAddress address, int port) throws IOException {\n        this(address != null ? new InetSocketAddress(address, port) : null,\n             (SocketAddress) null, true);\n    }"}
{"Number":"348","API Relative Path":"java.net.Socket.java-Socket(InetAddress-int-boolean)","Corresponding Source":"/**\n     * Creates a socket and connects it to the specified port number at\n     * the specified IP address.\n     * <p>\n     * If the stream argument is {@code true}, this creates a\n     * stream socket. If the stream argument is {@code false}, it\n     * creates a datagram socket.\n     * <p>\n     * If the application has specified a server socket factory, that\n     * factory's {@code createSocketImpl} method is called to create\n     * the actual socket implementation. Otherwise a \"plain\" socket is created.\n     *\n     * <p>If there is a security manager, its\n     * {@code checkConnect} method is called\n     * with {@code host.getHostAddress()} and {@code port}\n     * as its arguments. This could result in a SecurityException.\n     * <p>\n     * If UDP socket is used, TCP/IP related socket options will not apply.\n     *\n     * @param      host     the IP address.\n     * @param      port      the port number.\n     * @param      stream    if {@code true}, create a stream socket;\n     *                       otherwise, create a datagram socket.\n     * @exception  IOException  if an I/O error occurs when creating the socket.\n     * @exception  SecurityException  if a security manager exists and its\n     *             {@code checkConnect} method doesn't allow the operation.\n     * @exception  IllegalArgumentException if the port parameter is outside\n     *             the specified range of valid port values, which is between\n     *             0 and 65535, inclusive.\n     * @exception  NullPointerException if {@code host} is null.\n     * @see        java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory)\n     * @see        java.net.SocketImpl\n     * @see        java.net.SocketImplFactory#createSocketImpl()\n     * @see        SecurityManager#checkConnect\n     * @deprecated Use DatagramSocket instead for UDP transport.\n     */\n    @Deprecated\n    public Socket(InetAddress host, int port, boolean stream) throws IOException {\n        this(host != null ? new InetSocketAddress(host, port) : null,\n             new InetSocketAddress(0), stream);\n    }"}
{"Number":"349","API Relative Path":"java.net.Socket.java-Socket(InetAddress-int-InetAddress-int)","Corresponding Source":"/**\n     * Creates a socket and connects it to the specified remote address on\n     * the specified remote port. The Socket will also bind() to the local\n     * address and port supplied.\n     * <p>\n     * If the specified local address is {@code null} it is the equivalent of\n     * specifying the address as the AnyLocal address\n     * (see {@link java.net.InetAddress#isAnyLocalAddress InetAddress.isAnyLocalAddress}{@code ()}).\n     * <p>\n     * A local port number of {@code zero} will let the system pick up a\n     * free port in the {@code bind} operation.<\/p>\n     * <p>\n     * If there is a security manager, its\n     * {@code checkConnect} method is called\n     * with the host address and {@code port}\n     * as its arguments. This could result in a SecurityException.\n     *\n     * @param address the remote address\n     * @param port the remote port\n     * @param localAddr the local address the socket is bound to, or\n     *        {@code null} for the {@code anyLocal} address.\n     * @param localPort the local port the socket is bound to or\n     *        {@code zero} for a system selected free port.\n     * @exception  IOException  if an I/O error occurs when creating the socket.\n     * @exception  SecurityException  if a security manager exists and its\n     *             {@code checkConnect} method doesn't allow the connection\n     *             to the destination, or if its {@code checkListen} method\n     *             doesn't allow the bind to the local port.\n     * @exception  IllegalArgumentException if the port parameter or localPort\n     *             parameter is outside the specified range of valid port values,\n     *             which is between 0 and 65535, inclusive.\n     * @exception  NullPointerException if {@code address} is null.\n     * @see        SecurityManager#checkConnect\n     * @since   JDK1.1\n     */\n    public Socket(InetAddress address, int port, InetAddress localAddr,\n                  int localPort) throws IOException {\n        this(address != null ? new InetSocketAddress(address, port) : null,\n             new InetSocketAddress(localAddr, localPort), true);\n    }"}
{"Number":"350","API Relative Path":"java.net.Socket.java-Socket(Proxy)","Corresponding Source":"/**\n     * Creates an unconnected socket, specifying the type of proxy, if any,\n     * that should be used regardless of any other settings.\n     * <P>\n     * If there is a security manager, its {@code checkConnect} method\n     * is called with the proxy host address and port number\n     * as its arguments. This could result in a SecurityException.\n     * <P>\n     * Examples:\n     * <UL> <LI>{@code Socket s = new Socket(Proxy.NO_PROXY);} will create\n     * a plain socket ignoring any other proxy configuration.<\/LI>\n     * <LI>{@code Socket s = new Socket(new Proxy(Proxy.Type.SOCKS, new InetSocketAddress(\"socks.mydom.com\", 1080)));}\n     * will create a socket connecting through the specified SOCKS proxy\n     * server.<\/LI>\n     * <\/UL>\n     *\n     * @param proxy a {@link java.net.Proxy Proxy} object specifying what kind\n     *              of proxying should be used.\n     * @throws IllegalArgumentException if the proxy is of an invalid type\n     *          or {@code null}.\n     * @throws SecurityException if a security manager is present and\n     *                           permission to connect to the proxy is\n     *                           denied.\n     * @see java.net.ProxySelector\n     * @see java.net.Proxy\n     *\n     * @since   1.5\n     */\n    public Socket(Proxy proxy) {\n        // Create a copy of Proxy as a security measure\n        if (proxy == null) {\n            throw new IllegalArgumentException(\"Invalid Proxy\");\n        }\n        Proxy p = proxy == Proxy.NO_PROXY ? Proxy.NO_PROXY\n                                          : sun.net.ApplicationProxy.create(proxy);\n        Proxy.Type type = p.type();\n        if (type == Proxy.Type.SOCKS || type == Proxy.Type.HTTP) {\n            SecurityManager security = System.getSecurityManager();\n            InetSocketAddress epoint = (InetSocketAddress) p.address();\n            if (epoint.getAddress() != null) {\n                checkAddress (epoint.getAddress(), \"Socket\");\n            }\n            if (security != null) {\n                if (epoint.isUnresolved())\n                    epoint = new InetSocketAddress(epoint.getHostName(), epoint.getPort());\n                if (epoint.isUnresolved())\n                    security.checkConnect(epoint.getHostName(), epoint.getPort());\n                else\n                    security.checkConnect(epoint.getAddress().getHostAddress(),\n                                  epoint.getPort());\n            }\n            impl = type == Proxy.Type.SOCKS ? new SocksSocketImpl(p)\n                                            : new HttpConnectSocketImpl(p);\n            impl.setSocket(this);\n        } else {\n            if (p == Proxy.NO_PROXY) {\n                if (factory == null) {\n                    impl = new PlainSocketImpl();\n                    impl.setSocket(this);\n                } else\n                    setImpl();\n            } else\n                throw new IllegalArgumentException(\"Invalid Proxy\");\n        }\n    }"}
{"Number":"351","API Relative Path":"java.net.Socket.java-Socket(SocketImpl)","Corresponding Source":"/**\n     * Creates an unconnected Socket with a user-specified\n     * SocketImpl.\n     * <P>\n     * @param impl an instance of a <B>SocketImpl<\/B>\n     * the subclass wishes to use on the Socket.\n     *\n     * @exception SocketException if there is an error in the underlying protocol,\n     * such as a TCP error.\n     * @since   JDK1.1\n     */\n    protected Socket(SocketImpl impl) throws SocketException {\n        this.impl = impl;\n        if (impl != null) {\n            checkOldImpl();\n            this.impl.setSocket(this);\n        }\n    }"}
{"Number":"352","API Relative Path":"java.net.Socket.java-Socket(String-int)","Corresponding Source":"/**\n     * Creates a stream socket and connects it to the specified port\n     * number on the named host.\n     * <p>\n     * If the specified host is {@code null} it is the equivalent of\n     * specifying the address as\n     * {@link java.net.InetAddress#getByName InetAddress.getByName}{@code (null)}.\n     * In other words, it is equivalent to specifying an address of the\n     * loopback interface. <\/p>\n     * <p>\n     * If the application has specified a server socket factory, that\n     * factory's {@code createSocketImpl} method is called to create\n     * the actual socket implementation. Otherwise a \"plain\" socket is created.\n     * <p>\n     * If there is a security manager, its\n     * {@code checkConnect} method is called\n     * with the host address and {@code port}\n     * as its arguments. This could result in a SecurityException.\n     *\n     * @param      host   the host name, or {@code null} for the loopback address.\n     * @param      port   the port number.\n     *\n     * @exception  UnknownHostException if the IP address of\n     * the host could not be determined.\n     *\n     * @exception  IOException  if an I/O error occurs when creating the socket.\n     * @exception  SecurityException  if a security manager exists and its\n     *             {@code checkConnect} method doesn't allow the operation.\n     * @exception  IllegalArgumentException if the port parameter is outside\n     *             the specified range of valid port values, which is between\n     *             0 and 65535, inclusive.\n     * @see        java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory)\n     * @see        java.net.SocketImpl\n     * @see        java.net.SocketImplFactory#createSocketImpl()\n     * @see        SecurityManager#checkConnect\n     */\n    public Socket(String host, int port)\n        throws UnknownHostException, IOException\n    {\n        this(host != null ? new InetSocketAddress(host, port) :\n             new InetSocketAddress(InetAddress.getByName(null), port),\n             (SocketAddress) null, true);\n    }"}
{"Number":"353","API Relative Path":"java.net.Socket.java-Socket(String-int)","Corresponding Source":"/**\n     * Creates a stream socket and connects it to the specified port\n     * number on the named host.\n     * <p>\n     * If the specified host is {@code null} it is the equivalent of\n     * specifying the address as\n     * {@link java.net.InetAddress#getByName InetAddress.getByName}{@code (null)}.\n     * In other words, it is equivalent to specifying an address of the\n     * loopback interface. <\/p>\n     * <p>\n     * If the application has specified a server socket factory, that\n     * factory's {@code createSocketImpl} method is called to create\n     * the actual socket implementation. Otherwise a \"plain\" socket is created.\n     * <p>\n     * If there is a security manager, its\n     * {@code checkConnect} method is called\n     * with the host address and {@code port}\n     * as its arguments. This could result in a SecurityException.\n     *\n     * @param      host   the host name, or {@code null} for the loopback address.\n     * @param      port   the port number.\n     *\n     * @exception  UnknownHostException if the IP address of\n     * the host could not be determined.\n     *\n     * @exception  IOException  if an I/O error occurs when creating the socket.\n     * @exception  SecurityException  if a security manager exists and its\n     *             {@code checkConnect} method doesn't allow the operation.\n     * @exception  IllegalArgumentException if the port parameter is outside\n     *             the specified range of valid port values, which is between\n     *             0 and 65535, inclusive.\n     * @see        java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory)\n     * @see        java.net.SocketImpl\n     * @see        java.net.SocketImplFactory#createSocketImpl()\n     * @see        SecurityManager#checkConnect\n     */\n    public Socket(String host, int port)\n        throws UnknownHostException, IOException\n    {\n        this(host != null ? new InetSocketAddress(host, port) :\n             new InetSocketAddress(InetAddress.getByName(null), port),\n             (SocketAddress) null, true);\n    }"}
{"Number":"354","API Relative Path":"java.net.Socket.java-Socket(String-int)","Corresponding Source":"/**\n     * Creates a stream socket and connects it to the specified port\n     * number on the named host.\n     * <p>\n     * If the specified host is {@code null} it is the equivalent of\n     * specifying the address as\n     * {@link java.net.InetAddress#getByName InetAddress.getByName}{@code (null)}.\n     * In other words, it is equivalent to specifying an address of the\n     * loopback interface. <\/p>\n     * <p>\n     * If the application has specified a server socket factory, that\n     * factory's {@code createSocketImpl} method is called to create\n     * the actual socket implementation. Otherwise a \"plain\" socket is created.\n     * <p>\n     * If there is a security manager, its\n     * {@code checkConnect} method is called\n     * with the host address and {@code port}\n     * as its arguments. This could result in a SecurityException.\n     *\n     * @param      host   the host name, or {@code null} for the loopback address.\n     * @param      port   the port number.\n     *\n     * @exception  UnknownHostException if the IP address of\n     * the host could not be determined.\n     *\n     * @exception  IOException  if an I/O error occurs when creating the socket.\n     * @exception  SecurityException  if a security manager exists and its\n     *             {@code checkConnect} method doesn't allow the operation.\n     * @exception  IllegalArgumentException if the port parameter is outside\n     *             the specified range of valid port values, which is between\n     *             0 and 65535, inclusive.\n     * @see        java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory)\n     * @see        java.net.SocketImpl\n     * @see        java.net.SocketImplFactory#createSocketImpl()\n     * @see        SecurityManager#checkConnect\n     */\n    public Socket(String host, int port)\n        throws UnknownHostException, IOException\n    {\n        this(host != null ? new InetSocketAddress(host, port) :\n             new InetSocketAddress(InetAddress.getByName(null), port),\n             (SocketAddress) null, true);\n    }"}
{"Number":"355","API Relative Path":"java.net.Socket.java-Socket(String-int-boolean)","Corresponding Source":"/**\n     * Creates a stream socket and connects it to the specified port\n     * number on the named host.\n     * <p>\n     * If the specified host is {@code null} it is the equivalent of\n     * specifying the address as\n     * {@link java.net.InetAddress#getByName InetAddress.getByName}{@code (null)}.\n     * In other words, it is equivalent to specifying an address of the\n     * loopback interface. <\/p>\n     * <p>\n     * If the stream argument is {@code true}, this creates a\n     * stream socket. If the stream argument is {@code false}, it\n     * creates a datagram socket.\n     * <p>\n     * If the application has specified a server socket factory, that\n     * factory's {@code createSocketImpl} method is called to create\n     * the actual socket implementation. Otherwise a \"plain\" socket is created.\n     * <p>\n     * If there is a security manager, its\n     * {@code checkConnect} method is called\n     * with the host address and {@code port}\n     * as its arguments. This could result in a SecurityException.\n     * <p>\n     * If a UDP socket is used, TCP/IP related socket options will not apply.\n     *\n     * @param      host     the host name, or {@code null} for the loopback address.\n     * @param      port     the port number.\n     * @param      stream   a {@code boolean} indicating whether this is\n     *                      a stream socket or a datagram socket.\n     * @exception  IOException  if an I/O error occurs when creating the socket.\n     * @exception  SecurityException  if a security manager exists and its\n     *             {@code checkConnect} method doesn't allow the operation.\n     * @exception  IllegalArgumentException if the port parameter is outside\n     *             the specified range of valid port values, which is between\n     *             0 and 65535, inclusive.\n     * @see        java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory)\n     * @see        java.net.SocketImpl\n     * @see        java.net.SocketImplFactory#createSocketImpl()\n     * @see        SecurityManager#checkConnect\n     * @deprecated Use DatagramSocket instead for UDP transport.\n     */\n    @Deprecated\n    public Socket(String host, int port, boolean stream) throws IOException {\n        this(host != null ? new InetSocketAddress(host, port) :\n               new InetSocketAddress(InetAddress.getByName(null), port),\n             (SocketAddress) null, stream);\n    }"}
{"Number":"356","API Relative Path":"java.net.Socket.java-Socket(String-int-boolean)","Corresponding Source":"/**\n     * Creates a stream socket and connects it to the specified port\n     * number on the named host.\n     * <p>\n     * If the specified host is {@code null} it is the equivalent of\n     * specifying the address as\n     * {@link java.net.InetAddress#getByName InetAddress.getByName}{@code (null)}.\n     * In other words, it is equivalent to specifying an address of the\n     * loopback interface. <\/p>\n     * <p>\n     * If the stream argument is {@code true}, this creates a\n     * stream socket. If the stream argument is {@code false}, it\n     * creates a datagram socket.\n     * <p>\n     * If the application has specified a server socket factory, that\n     * factory's {@code createSocketImpl} method is called to create\n     * the actual socket implementation. Otherwise a \"plain\" socket is created.\n     * <p>\n     * If there is a security manager, its\n     * {@code checkConnect} method is called\n     * with the host address and {@code port}\n     * as its arguments. This could result in a SecurityException.\n     * <p>\n     * If a UDP socket is used, TCP/IP related socket options will not apply.\n     *\n     * @param      host     the host name, or {@code null} for the loopback address.\n     * @param      port     the port number.\n     * @param      stream   a {@code boolean} indicating whether this is\n     *                      a stream socket or a datagram socket.\n     * @exception  IOException  if an I/O error occurs when creating the socket.\n     * @exception  SecurityException  if a security manager exists and its\n     *             {@code checkConnect} method doesn't allow the operation.\n     * @exception  IllegalArgumentException if the port parameter is outside\n     *             the specified range of valid port values, which is between\n     *             0 and 65535, inclusive.\n     * @see        java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory)\n     * @see        java.net.SocketImpl\n     * @see        java.net.SocketImplFactory#createSocketImpl()\n     * @see        SecurityManager#checkConnect\n     * @deprecated Use DatagramSocket instead for UDP transport.\n     */\n    @Deprecated\n    public Socket(String host, int port, boolean stream) throws IOException {\n        this(host != null ? new InetSocketAddress(host, port) :\n               new InetSocketAddress(InetAddress.getByName(null), port),\n             (SocketAddress) null, stream);\n    }"}
{"Number":"357","API Relative Path":"java.net.Socket.java-Socket(String-int-boolean)","Corresponding Source":"/**\n     * Creates a stream socket and connects it to the specified port\n     * number on the named host.\n     * <p>\n     * If the specified host is {@code null} it is the equivalent of\n     * specifying the address as\n     * {@link java.net.InetAddress#getByName InetAddress.getByName}{@code (null)}.\n     * In other words, it is equivalent to specifying an address of the\n     * loopback interface. <\/p>\n     * <p>\n     * If the stream argument is {@code true}, this creates a\n     * stream socket. If the stream argument is {@code false}, it\n     * creates a datagram socket.\n     * <p>\n     * If the application has specified a server socket factory, that\n     * factory's {@code createSocketImpl} method is called to create\n     * the actual socket implementation. Otherwise a \"plain\" socket is created.\n     * <p>\n     * If there is a security manager, its\n     * {@code checkConnect} method is called\n     * with the host address and {@code port}\n     * as its arguments. This could result in a SecurityException.\n     * <p>\n     * If a UDP socket is used, TCP/IP related socket options will not apply.\n     *\n     * @param      host     the host name, or {@code null} for the loopback address.\n     * @param      port     the port number.\n     * @param      stream   a {@code boolean} indicating whether this is\n     *                      a stream socket or a datagram socket.\n     * @exception  IOException  if an I/O error occurs when creating the socket.\n     * @exception  SecurityException  if a security manager exists and its\n     *             {@code checkConnect} method doesn't allow the operation.\n     * @exception  IllegalArgumentException if the port parameter is outside\n     *             the specified range of valid port values, which is between\n     *             0 and 65535, inclusive.\n     * @see        java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory)\n     * @see        java.net.SocketImpl\n     * @see        java.net.SocketImplFactory#createSocketImpl()\n     * @see        SecurityManager#checkConnect\n     * @deprecated Use DatagramSocket instead for UDP transport.\n     */\n    @Deprecated\n    public Socket(String host, int port, boolean stream) throws IOException {\n        this(host != null ? new InetSocketAddress(host, port) :\n               new InetSocketAddress(InetAddress.getByName(null), port),\n             (SocketAddress) null, stream);\n    }"}
{"Number":"358","API Relative Path":"java.net.Socket.java-Socket(String-int-InetAddress-int)","Corresponding Source":"/**\n     * Creates a socket and connects it to the specified remote host on\n     * the specified remote port. The Socket will also bind() to the local\n     * address and port supplied.\n     * <p>\n     * If the specified host is {@code null} it is the equivalent of\n     * specifying the address as\n     * {@link java.net.InetAddress#getByName InetAddress.getByName}{@code (null)}.\n     * In other words, it is equivalent to specifying an address of the\n     * loopback interface. <\/p>\n     * <p>\n     * A local port number of {@code zero} will let the system pick up a\n     * free port in the {@code bind} operation.<\/p>\n     * <p>\n     * If there is a security manager, its\n     * {@code checkConnect} method is called\n     * with the host address and {@code port}\n     * as its arguments. This could result in a SecurityException.\n     *\n     * @param host the name of the remote host, or {@code null} for the loopback address.\n     * @param port the remote port\n     * @param localAddr the local address the socket is bound to, or\n     *        {@code null} for the {@code anyLocal} address.\n     * @param localPort the local port the socket is bound to, or\n     *        {@code zero} for a system selected free port.\n     * @exception  IOException  if an I/O error occurs when creating the socket.\n     * @exception  SecurityException  if a security manager exists and its\n     *             {@code checkConnect} method doesn't allow the connection\n     *             to the destination, or if its {@code checkListen} method\n     *             doesn't allow the bind to the local port.\n     * @exception  IllegalArgumentException if the port parameter or localPort\n     *             parameter is outside the specified range of valid port values,\n     *             which is between 0 and 65535, inclusive.\n     * @see        SecurityManager#checkConnect\n     * @since   JDK1.1\n     */\n    public Socket(String host, int port, InetAddress localAddr,\n                  int localPort) throws IOException {\n        this(host != null ? new InetSocketAddress(host, port) :\n               new InetSocketAddress(InetAddress.getByName(null), port),\n             new InetSocketAddress(localAddr, localPort), true);\n    }"}
{"Number":"359","API Relative Path":"java.net.Socket.java-Socket(String-int-InetAddress-int)","Corresponding Source":"/**\n     * Creates a socket and connects it to the specified remote host on\n     * the specified remote port. The Socket will also bind() to the local\n     * address and port supplied.\n     * <p>\n     * If the specified host is {@code null} it is the equivalent of\n     * specifying the address as\n     * {@link java.net.InetAddress#getByName InetAddress.getByName}{@code (null)}.\n     * In other words, it is equivalent to specifying an address of the\n     * loopback interface. <\/p>\n     * <p>\n     * A local port number of {@code zero} will let the system pick up a\n     * free port in the {@code bind} operation.<\/p>\n     * <p>\n     * If there is a security manager, its\n     * {@code checkConnect} method is called\n     * with the host address and {@code port}\n     * as its arguments. This could result in a SecurityException.\n     *\n     * @param host the name of the remote host, or {@code null} for the loopback address.\n     * @param port the remote port\n     * @param localAddr the local address the socket is bound to, or\n     *        {@code null} for the {@code anyLocal} address.\n     * @param localPort the local port the socket is bound to, or\n     *        {@code zero} for a system selected free port.\n     * @exception  IOException  if an I/O error occurs when creating the socket.\n     * @exception  SecurityException  if a security manager exists and its\n     *             {@code checkConnect} method doesn't allow the connection\n     *             to the destination, or if its {@code checkListen} method\n     *             doesn't allow the bind to the local port.\n     * @exception  IllegalArgumentException if the port parameter or localPort\n     *             parameter is outside the specified range of valid port values,\n     *             which is between 0 and 65535, inclusive.\n     * @see        SecurityManager#checkConnect\n     * @since   JDK1.1\n     */\n    public Socket(String host, int port, InetAddress localAddr,\n                  int localPort) throws IOException {\n        this(host != null ? new InetSocketAddress(host, port) :\n               new InetSocketAddress(InetAddress.getByName(null), port),\n             new InetSocketAddress(localAddr, localPort), true);\n    }"}
{"Number":"360","API Relative Path":"java.net.Socket.java-Socket(String-int-InetAddress-int)","Corresponding Source":"/**\n     * Creates a socket and connects it to the specified remote host on\n     * the specified remote port. The Socket will also bind() to the local\n     * address and port supplied.\n     * <p>\n     * If the specified host is {@code null} it is the equivalent of\n     * specifying the address as\n     * {@link java.net.InetAddress#getByName InetAddress.getByName}{@code (null)}.\n     * In other words, it is equivalent to specifying an address of the\n     * loopback interface. <\/p>\n     * <p>\n     * A local port number of {@code zero} will let the system pick up a\n     * free port in the {@code bind} operation.<\/p>\n     * <p>\n     * If there is a security manager, its\n     * {@code checkConnect} method is called\n     * with the host address and {@code port}\n     * as its arguments. This could result in a SecurityException.\n     *\n     * @param host the name of the remote host, or {@code null} for the loopback address.\n     * @param port the remote port\n     * @param localAddr the local address the socket is bound to, or\n     *        {@code null} for the {@code anyLocal} address.\n     * @param localPort the local port the socket is bound to, or\n     *        {@code zero} for a system selected free port.\n     * @exception  IOException  if an I/O error occurs when creating the socket.\n     * @exception  SecurityException  if a security manager exists and its\n     *             {@code checkConnect} method doesn't allow the connection\n     *             to the destination, or if its {@code checkListen} method\n     *             doesn't allow the bind to the local port.\n     * @exception  IllegalArgumentException if the port parameter or localPort\n     *             parameter is outside the specified range of valid port values,\n     *             which is between 0 and 65535, inclusive.\n     * @see        SecurityManager#checkConnect\n     * @since   JDK1.1\n     */\n    public Socket(String host, int port, InetAddress localAddr,\n                  int localPort) throws IOException {\n        this(host != null ? new InetSocketAddress(host, port) :\n               new InetSocketAddress(InetAddress.getByName(null), port),\n             new InetSocketAddress(localAddr, localPort), true);\n    }"}
{"Number":"361","API Relative Path":"java.net.SocketPermission.java-SocketPermission(String-String)","Corresponding Source":"/**\n     * Creates a new SocketPermission object with the specified actions.\n     * The host is expressed as a DNS name, or as a numerical IP address.\n     * Optionally, a port or a portrange may be supplied (separated\n     * from the DNS name or IP address by a colon).\n     * <p>\n     * To specify the local machine, use \"localhost\" as the <i>host<\/i>.\n     * Also note: An empty <i>host<\/i> String (\"\") is equivalent to \"localhost\".\n     * <p>\n     * The <i>actions<\/i> parameter contains a comma-separated list of the\n     * actions granted for the specified host (and port(s)). Possible actions are\n     * \"connect\", \"listen\", \"accept\", \"resolve\", or\n     * any combination of those. \"resolve\" is automatically added\n     * when any of the other three are specified.\n     * <p>\n     * Examples of SocketPermission instantiation are the following:\n     * <pre>\n     *    nr = new SocketPermission(\"www.catalog.com\", \"connect\");\n     *    nr = new SocketPermission(\"www.sun.com:80\", \"connect\");\n     *    nr = new SocketPermission(\"*.sun.com\", \"connect\");\n     *    nr = new SocketPermission(\"*.edu\", \"resolve\");\n     *    nr = new SocketPermission(\"204.160.241.0\", \"connect\");\n     *    nr = new SocketPermission(\"localhost:1024-65535\", \"listen\");\n     *    nr = new SocketPermission(\"204.160.241.0:1024-65535\", \"connect\");\n     * <\/pre>\n     *\n     * @param host the hostname or IPaddress of the computer, optionally\n     * including a colon followed by a port or port range.\n     * @param action the action string.\n     */\n    public SocketPermission(String host, String action) {\n        super(getHost(host));\n        // name initialized to getHost(host); NPE detected in getHost()\n        init(getName(), getMask(action));\n    }"}
{"Number":"362","API Relative Path":"java.net.SocketPermission.java-SocketPermission(String-String)","Corresponding Source":"/**\n     * Creates a new SocketPermission object with the specified actions.\n     * The host is expressed as a DNS name, or as a numerical IP address.\n     * Optionally, a port or a portrange may be supplied (separated\n     * from the DNS name or IP address by a colon).\n     * <p>\n     * To specify the local machine, use \"localhost\" as the <i>host<\/i>.\n     * Also note: An empty <i>host<\/i> String (\"\") is equivalent to \"localhost\".\n     * <p>\n     * The <i>actions<\/i> parameter contains a comma-separated list of the\n     * actions granted for the specified host (and port(s)). Possible actions are\n     * \"connect\", \"listen\", \"accept\", \"resolve\", or\n     * any combination of those. \"resolve\" is automatically added\n     * when any of the other three are specified.\n     * <p>\n     * Examples of SocketPermission instantiation are the following:\n     * <pre>\n     *    nr = new SocketPermission(\"www.catalog.com\", \"connect\");\n     *    nr = new SocketPermission(\"www.sun.com:80\", \"connect\");\n     *    nr = new SocketPermission(\"*.sun.com\", \"connect\");\n     *    nr = new SocketPermission(\"*.edu\", \"resolve\");\n     *    nr = new SocketPermission(\"204.160.241.0\", \"connect\");\n     *    nr = new SocketPermission(\"localhost:1024-65535\", \"listen\");\n     *    nr = new SocketPermission(\"204.160.241.0:1024-65535\", \"connect\");\n     * <\/pre>\n     *\n     * @param host the hostname or IPaddress of the computer, optionally\n     * including a colon followed by a port or port range.\n     * @param action the action string.\n     */\n    public SocketPermission(String host, String action) {\n        super(getHost(host));\n        // name initialized to getHost(host); NPE detected in getHost()\n        init(getName(), getMask(action));\n    }"}
{"Number":"363","API Relative Path":"java.net.SocksSocketImpl.java-connect(SocketAddress-int)","Corresponding Source":"/**\n     * Connects the Socks Socket to the specified endpoint. It will first\n     * connect to the SOCKS proxy and negotiate the access. If the proxy\n     * grants the connections, then the connect is successful and all\n     * further traffic will go to the \"real\" endpoint.\n     *\n     * @param   endpoint        the {@code SocketAddress} to connect to.\n     * @param   timeout         the timeout value in milliseconds\n     * @throws  IOException     if the connection can't be established.\n     * @throws  SecurityException if there is a security manager and it\n     *                          doesn't allow the connection\n     * @throws  IllegalArgumentException if endpoint is null or a\n     *          SocketAddress subclass not supported by this socket\n     */\n    @Override\n    protected void connect(SocketAddress endpoint, int timeout) throws IOException {\n        final long deadlineMillis;\n\n        if (timeout == 0) {\n            deadlineMillis = 0L;\n        } else {\n            long finish = System.currentTimeMillis() + timeout;\n            deadlineMillis = finish < 0 ? Long.MAX_VALUE : finish;\n        }\n\n        SecurityManager security = System.getSecurityManager();\n        if (endpoint == null || !(endpoint instanceof InetSocketAddress))\n            throw new IllegalArgumentException(\"Unsupported address type\");\n        InetSocketAddress epoint = (InetSocketAddress) endpoint;\n        if (security != null) {\n            if (epoint.isUnresolved())\n                security.checkConnect(epoint.getHostName(),\n                                      epoint.getPort());\n            else\n                security.checkConnect(epoint.getAddress().getHostAddress(),\n                                      epoint.getPort());\n        }\n        if (server == null) {\n            // This is the general case\n            // server is not null only when the socket was created with a\n            // specified proxy in which case it does bypass the ProxySelector\n            ProxySelector sel = java.security.AccessController.doPrivileged(\n                new java.security.PrivilegedAction<ProxySelector>() {\n                    public ProxySelector run() {\n                            return ProxySelector.getDefault();\n                        }\n                    });\n            if (sel == null) {\n                /*\n                 * No default proxySelector --> direct connection\n                 */\n                super.connect(epoint, remainingMillis(deadlineMillis));\n                return;\n            }\n            URI uri;\n            // Use getHostString() to avoid reverse lookups\n            String host = epoint.getHostString();\n            // IPv6 litteral?\n            if (epoint.getAddress() instanceof Inet6Address &&\n                (!host.startsWith(\"[\")) && (host.indexOf(\":\") >= 0)) {\n                host = \"[\" + host + \"]\";\n            }\n            try {\n                uri = new URI(\"socket://\" + ParseUtil.encodePath(host) + \":\"+ epoint.getPort());\n            } catch (URISyntaxException e) {\n                // This shouldn't happen\n                assert false : e;\n                uri = null;\n            }\n            Proxy p = null;\n            IOException savedExc = null;\n            java.util.Iterator<Proxy> iProxy = null;\n            iProxy = sel.select(uri).iterator();\n            if (iProxy == null || !(iProxy.hasNext())) {\n                super.connect(epoint, remainingMillis(deadlineMillis));\n                return;\n            }\n            while (iProxy.hasNext()) {\n                p = iProxy.next();\n                if (p == null || p.type() != Proxy.Type.SOCKS) {\n                    super.connect(epoint, remainingMillis(deadlineMillis));\n                    return;\n                }\n\n                if (!(p.address() instanceof InetSocketAddress))\n                    throw new SocketException(\"Unknown address type for proxy: \" + p);\n                // Use getHostString() to avoid reverse lookups\n                server = ((InetSocketAddress) p.address()).getHostString();\n                serverPort = ((InetSocketAddress) p.address()).getPort();\n                if (p instanceof SocksProxy) {\n                    if (((SocksProxy)p).protocolVersion() == 4) {\n                        useV4 = true;\n                    }\n                }\n\n                // Connects to the SOCKS server\n                try {\n                    privilegedConnect(server, serverPort, remainingMillis(deadlineMillis));\n                    // Worked, let's get outta here\n                    break;\n                } catch (IOException e) {\n                    // Ooops, let's notify the ProxySelector\n                    sel.connectFailed(uri,p.address(),e);\n                    server = null;\n                    serverPort = -1;\n                    savedExc = e;\n                    // Will continue the while loop and try the next proxy\n                }\n            }\n\n            /*\n             * If server is still null at this point, none of the proxy\n             * worked\n             */\n            if (server == null) {\n                throw new SocketException(\"Can't connect to SOCKS proxy:\"\n                                          + savedExc.getMessage());\n            }\n        } else {\n            // Connects to the SOCKS server\n            try {\n                privilegedConnect(server, serverPort, remainingMillis(deadlineMillis));\n            } catch (IOException e) {\n                throw new SocketException(e.getMessage());\n            }\n        }\n\n        // cmdIn & cmdOut were initialized during the privilegedConnect() call\n        BufferedOutputStream out = new BufferedOutputStream(cmdOut, 512);\n        InputStream in = cmdIn;\n\n        if (useV4) {\n            // SOCKS Protocol version 4 doesn't know how to deal with\n            // DOMAIN type of addresses (unresolved addresses here)\n            if (epoint.isUnresolved())\n                throw new UnknownHostException(epoint.toString());\n            connectV4(in, out, epoint, deadlineMillis);\n            return;\n        }\n\n        // This is SOCKS V5\n        out.write(PROTO_VERS);\n        out.write(2);\n        out.write(NO_AUTH);\n        out.write(USER_PASSW);\n        out.flush();\n        byte[] data = new byte[2];\n        int i = readSocksReply(in, data, deadlineMillis);\n        if (i != 2 || ((int)data[0]) != PROTO_VERS) {\n            // Maybe it's not a V5 sever after all\n            // Let's try V4 before we give up\n            // SOCKS Protocol version 4 doesn't know how to deal with\n            // DOMAIN type of addresses (unresolved addresses here)\n            if (epoint.isUnresolved())\n                throw new UnknownHostException(epoint.toString());\n            connectV4(in, out, epoint, deadlineMillis);\n            return;\n        }\n        if (((int)data[1]) == NO_METHODS)\n            throw new SocketException(\"SOCKS : No acceptable methods\");\n        if (!authenticate(data[1], in, out, deadlineMillis)) {\n            throw new SocketException(\"SOCKS : authentication failed\");\n        }\n        out.write(PROTO_VERS);\n        out.write(CONNECT);\n        out.write(0);\n        /* Test for IPV4/IPV6/Unresolved */\n        if (epoint.isUnresolved()) {\n            out.write(DOMAIN_NAME);\n            out.write(epoint.getHostName().length());\n            try {\n                out.write(epoint.getHostName().getBytes(\"ISO-8859-1\"));\n            } catch (java.io.UnsupportedEncodingException uee) {\n                assert false;\n            }\n            out.write((epoint.getPort() >> 8) & 0xff);\n            out.write((epoint.getPort() >> 0) & 0xff);\n        } else if (epoint.getAddress() instanceof Inet6Address) {\n            out.write(IPV6);\n            out.write(epoint.getAddress().getAddress());\n            out.write((epoint.getPort() >> 8) & 0xff);\n            out.write((epoint.getPort() >> 0) & 0xff);\n        } else {\n            out.write(IPV4);\n            out.write(epoint.getAddress().getAddress());\n            out.write((epoint.getPort() >> 8) & 0xff);\n            out.write((epoint.getPort() >> 0) & 0xff);\n        }\n        out.flush();\n        data = new byte[4];\n        i = readSocksReply(in, data, deadlineMillis);\n        if (i != 4)\n            throw new SocketException(\"Reply from SOCKS server has bad length\");\n        SocketException ex = null;\n        int len;\n        byte[] addr;\n        switch (data[1]) {\n        case REQUEST_OK:\n            // success!\n            switch(data[3]) {\n            case IPV4:\n                addr = new byte[4];\n                i = readSocksReply(in, addr, deadlineMillis);\n                if (i != 4)\n                    throw new SocketException(\"Reply from SOCKS server badly formatted\");\n                data = new byte[2];\n                i = readSocksReply(in, data, deadlineMillis);\n                if (i != 2)\n                    throw new SocketException(\"Reply from SOCKS server badly formatted\");\n                break;\n            case DOMAIN_NAME:\n                len = data[1];\n                byte[] host = new byte[len];\n                i = readSocksReply(in, host, deadlineMillis);\n                if (i != len)\n                    throw new SocketException(\"Reply from SOCKS server badly formatted\");\n                data = new byte[2];\n                i = readSocksReply(in, data, deadlineMillis);\n                if (i != 2)\n                    throw new SocketException(\"Reply from SOCKS server badly formatted\");\n                break;\n            case IPV6:\n                len = data[1];\n                addr = new byte[len];\n                i = readSocksReply(in, addr, deadlineMillis);\n                if (i != len)\n                    throw new SocketException(\"Reply from SOCKS server badly formatted\");\n                data = new byte[2];\n                i = readSocksReply(in, data, deadlineMillis);\n                if (i != 2)\n                    throw new SocketException(\"Reply from SOCKS server badly formatted\");\n                break;\n            default:\n                ex = new SocketException(\"Reply from SOCKS server contains wrong code\");\n                break;\n            }\n            break;\n        case GENERAL_FAILURE:\n            ex = new SocketException(\"SOCKS server general failure\");\n            break;\n        case NOT_ALLOWED:\n            ex = new SocketException(\"SOCKS: Connection not allowed by ruleset\");\n            break;\n        case NET_UNREACHABLE:\n            ex = new SocketException(\"SOCKS: Network unreachable\");\n            break;\n        case HOST_UNREACHABLE:\n            ex = new SocketException(\"SOCKS: Host unreachable\");\n            break;\n        case CONN_REFUSED:\n            ex = new SocketException(\"SOCKS: Connection refused\");\n            break;\n        case TTL_EXPIRED:\n            ex =  new SocketException(\"SOCKS: TTL expired\");\n            break;\n        case CMD_NOT_SUPPORTED:\n            ex = new SocketException(\"SOCKS: Command not supported\");\n            break;\n        case ADDR_TYPE_NOT_SUP:\n            ex = new SocketException(\"SOCKS: address type not supported\");\n            break;\n        }\n        if (ex != null) {\n            in.close();\n            out.close();\n            throw ex;\n        }\n        external_address = epoint;\n    }"}
{"Number":"364","API Relative Path":"java.net.URI.java-URI(String-String-String)","Corresponding Source":"/**\n     * Constructs a URI from the given components.\n     *\n     * <p> A component may be left undefined by passing {@code null}.\n     *\n     * <p> This constructor first builds a URI in string form using the given\n     * components as follows:  <\/p>\n     *\n     * <ol>\n     *\n     *   <li><p> Initially, the result string is empty.  <\/p><\/li>\n     *\n     *   <li><p> If a scheme is given then it is appended to the result,\n     *   followed by a colon character ({@code ':'}).  <\/p><\/li>\n     *\n     *   <li><p> If a scheme-specific part is given then it is appended.  Any\n     *   character that is not a <a href=\"#legal-chars\">legal URI character<\/a>\n     *   is <a href=\"#quote\">quoted<\/a>.  <\/p><\/li>\n     *\n     *   <li><p> Finally, if a fragment is given then a hash character\n     *   ({@code '#'}) is appended to the string, followed by the fragment.\n     *   Any character that is not a legal URI character is quoted.  <\/p><\/li>\n     *\n     * <\/ol>\n     *\n     * <p> The resulting URI string is then parsed in order to create the new\n     * URI instance as if by invoking the {@link #URI(String)} constructor;\n     * this may cause a {@link URISyntaxException} to be thrown.  <\/p>\n     *\n     * @param   scheme    Scheme name\n     * @param   ssp       Scheme-specific part\n     * @param   fragment  Fragment\n     *\n     * @throws  URISyntaxException\n     *          If the URI string constructed from the given components\n     *          violates RFC&nbsp;2396\n     */\n    public URI(String scheme, String ssp, String fragment)\n        throws URISyntaxException\n    {\n        new Parser(toString(scheme, ssp,\n                            null, null, null, -1,\n                            null, null, fragment))\n            .parse(false);\n    }"}
{"Number":"365","API Relative Path":"java.net.URI.java-URI(String-String-String-int-String-String-String)","Corresponding Source":"/**\n     * Constructs a hierarchical URI from the given components.\n     *\n     * <p> If a scheme is given then the path, if also given, must either be\n     * empty or begin with a slash character ({@code '/'}).  Otherwise a\n     * component of the new URI may be left undefined by passing {@code null}\n     * for the corresponding parameter or, in the case of the {@code port}\n     * parameter, by passing {@code -1}.\n     *\n     * <p> This constructor first builds a URI string from the given components\n     * according to the rules specified in <a\n     * href=\"http://www.ietf.org/rfc/rfc2396.txt\">RFC&nbsp;2396<\/a>,\n     * section&nbsp;5.2, step&nbsp;7: <\/p>\n     *\n     * <ol>\n     *\n     *   <li><p> Initially, the result string is empty. <\/p><\/li>\n     *\n     *   <li><p> If a scheme is given then it is appended to the result,\n     *   followed by a colon character ({@code ':'}).  <\/p><\/li>\n     *\n     *   <li><p> If user information, a host, or a port are given then the\n     *   string {@code \"//\"} is appended.  <\/p><\/li>\n     *\n     *   <li><p> If user information is given then it is appended, followed by\n     *   a commercial-at character ({@code '@'}).  Any character not in the\n     *   <i>unreserved<\/i>, <i>punct<\/i>, <i>escaped<\/i>, or <i>other<\/i>\n     *   categories is <a href=\"#quote\">quoted<\/a>.  <\/p><\/li>\n     *\n     *   <li><p> If a host is given then it is appended.  If the host is a\n     *   literal IPv6 address but is not enclosed in square brackets\n     *   ({@code '['} and {@code ']'}) then the square brackets are added.\n     *   <\/p><\/li>\n     *\n     *   <li><p> If a port number is given then a colon character\n     *   ({@code ':'}) is appended, followed by the port number in decimal.\n     *   <\/p><\/li>\n     *\n     *   <li><p> If a path is given then it is appended.  Any character not in\n     *   the <i>unreserved<\/i>, <i>punct<\/i>, <i>escaped<\/i>, or <i>other<\/i>\n     *   categories, and not equal to the slash character ({@code '/'}) or the\n     *   commercial-at character ({@code '@'}), is quoted.  <\/p><\/li>\n     *\n     *   <li><p> If a query is given then a question-mark character\n     *   ({@code '?'}) is appended, followed by the query.  Any character that\n     *   is not a <a href=\"#legal-chars\">legal URI character<\/a> is quoted.\n     *   <\/p><\/li>\n     *\n     *   <li><p> Finally, if a fragment is given then a hash character\n     *   ({@code '#'}) is appended, followed by the fragment.  Any character\n     *   that is not a legal URI character is quoted.  <\/p><\/li>\n     *\n     * <\/ol>\n     *\n     * <p> The resulting URI string is then parsed as if by invoking the {@link\n     * #URI(String)} constructor and then invoking the {@link\n     * #parseServerAuthority()} method upon the result; this may cause a {@link\n     * URISyntaxException} to be thrown.  <\/p>\n     *\n     * @param   scheme    Scheme name\n     * @param   userInfo  User name and authorization information\n     * @param   host      Host name\n     * @param   port      Port number\n     * @param   path      Path\n     * @param   query     Query\n     * @param   fragment  Fragment\n     *\n     * @throws URISyntaxException\n     *         If both a scheme and a path are given but the path is relative,\n     *         if the URI string constructed from the given components violates\n     *         RFC&nbsp;2396, or if the authority component of the string is\n     *         present but cannot be parsed as a server-based authority\n     */\n    public URI(String scheme,\n               String userInfo, String host, int port,\n               String path, String query, String fragment)\n        throws URISyntaxException\n    {\n        String s = toString(scheme, null,\n                            null, userInfo, host, port,\n                            path, query, fragment);\n        checkPath(s, scheme, path);\n        new Parser(s).parse(true);\n    }"}
{"Number":"366","API Relative Path":"java.net.URI.java-URI(String-String-String-int-String-String-String)","Corresponding Source":"/**\n     * Constructs a hierarchical URI from the given components.\n     *\n     * <p> If a scheme is given then the path, if also given, must either be\n     * empty or begin with a slash character ({@code '/'}).  Otherwise a\n     * component of the new URI may be left undefined by passing {@code null}\n     * for the corresponding parameter or, in the case of the {@code port}\n     * parameter, by passing {@code -1}.\n     *\n     * <p> This constructor first builds a URI string from the given components\n     * according to the rules specified in <a\n     * href=\"http://www.ietf.org/rfc/rfc2396.txt\">RFC&nbsp;2396<\/a>,\n     * section&nbsp;5.2, step&nbsp;7: <\/p>\n     *\n     * <ol>\n     *\n     *   <li><p> Initially, the result string is empty. <\/p><\/li>\n     *\n     *   <li><p> If a scheme is given then it is appended to the result,\n     *   followed by a colon character ({@code ':'}).  <\/p><\/li>\n     *\n     *   <li><p> If user information, a host, or a port are given then the\n     *   string {@code \"//\"} is appended.  <\/p><\/li>\n     *\n     *   <li><p> If user information is given then it is appended, followed by\n     *   a commercial-at character ({@code '@'}).  Any character not in the\n     *   <i>unreserved<\/i>, <i>punct<\/i>, <i>escaped<\/i>, or <i>other<\/i>\n     *   categories is <a href=\"#quote\">quoted<\/a>.  <\/p><\/li>\n     *\n     *   <li><p> If a host is given then it is appended.  If the host is a\n     *   literal IPv6 address but is not enclosed in square brackets\n     *   ({@code '['} and {@code ']'}) then the square brackets are added.\n     *   <\/p><\/li>\n     *\n     *   <li><p> If a port number is given then a colon character\n     *   ({@code ':'}) is appended, followed by the port number in decimal.\n     *   <\/p><\/li>\n     *\n     *   <li><p> If a path is given then it is appended.  Any character not in\n     *   the <i>unreserved<\/i>, <i>punct<\/i>, <i>escaped<\/i>, or <i>other<\/i>\n     *   categories, and not equal to the slash character ({@code '/'}) or the\n     *   commercial-at character ({@code '@'}), is quoted.  <\/p><\/li>\n     *\n     *   <li><p> If a query is given then a question-mark character\n     *   ({@code '?'}) is appended, followed by the query.  Any character that\n     *   is not a <a href=\"#legal-chars\">legal URI character<\/a> is quoted.\n     *   <\/p><\/li>\n     *\n     *   <li><p> Finally, if a fragment is given then a hash character\n     *   ({@code '#'}) is appended, followed by the fragment.  Any character\n     *   that is not a legal URI character is quoted.  <\/p><\/li>\n     *\n     * <\/ol>\n     *\n     * <p> The resulting URI string is then parsed as if by invoking the {@link\n     * #URI(String)} constructor and then invoking the {@link\n     * #parseServerAuthority()} method upon the result; this may cause a {@link\n     * URISyntaxException} to be thrown.  <\/p>\n     *\n     * @param   scheme    Scheme name\n     * @param   userInfo  User name and authorization information\n     * @param   host      Host name\n     * @param   port      Port number\n     * @param   path      Path\n     * @param   query     Query\n     * @param   fragment  Fragment\n     *\n     * @throws URISyntaxException\n     *         If both a scheme and a path are given but the path is relative,\n     *         if the URI string constructed from the given components violates\n     *         RFC&nbsp;2396, or if the authority component of the string is\n     *         present but cannot be parsed as a server-based authority\n     */\n    public URI(String scheme,\n               String userInfo, String host, int port,\n               String path, String query, String fragment)\n        throws URISyntaxException\n    {\n        String s = toString(scheme, null,\n                            null, userInfo, host, port,\n                            path, query, fragment);\n        checkPath(s, scheme, path);\n        new Parser(s).parse(true);\n    }"}
{"Number":"367","API Relative Path":"java.net.URI.java-URI(String-String-String-int-String-String-String)","Corresponding Source":"/**\n     * Constructs a hierarchical URI from the given components.\n     *\n     * <p> If a scheme is given then the path, if also given, must either be\n     * empty or begin with a slash character ({@code '/'}).  Otherwise a\n     * component of the new URI may be left undefined by passing {@code null}\n     * for the corresponding parameter or, in the case of the {@code port}\n     * parameter, by passing {@code -1}.\n     *\n     * <p> This constructor first builds a URI string from the given components\n     * according to the rules specified in <a\n     * href=\"http://www.ietf.org/rfc/rfc2396.txt\">RFC&nbsp;2396<\/a>,\n     * section&nbsp;5.2, step&nbsp;7: <\/p>\n     *\n     * <ol>\n     *\n     *   <li><p> Initially, the result string is empty. <\/p><\/li>\n     *\n     *   <li><p> If a scheme is given then it is appended to the result,\n     *   followed by a colon character ({@code ':'}).  <\/p><\/li>\n     *\n     *   <li><p> If user information, a host, or a port are given then the\n     *   string {@code \"//\"} is appended.  <\/p><\/li>\n     *\n     *   <li><p> If user information is given then it is appended, followed by\n     *   a commercial-at character ({@code '@'}).  Any character not in the\n     *   <i>unreserved<\/i>, <i>punct<\/i>, <i>escaped<\/i>, or <i>other<\/i>\n     *   categories is <a href=\"#quote\">quoted<\/a>.  <\/p><\/li>\n     *\n     *   <li><p> If a host is given then it is appended.  If the host is a\n     *   literal IPv6 address but is not enclosed in square brackets\n     *   ({@code '['} and {@code ']'}) then the square brackets are added.\n     *   <\/p><\/li>\n     *\n     *   <li><p> If a port number is given then a colon character\n     *   ({@code ':'}) is appended, followed by the port number in decimal.\n     *   <\/p><\/li>\n     *\n     *   <li><p> If a path is given then it is appended.  Any character not in\n     *   the <i>unreserved<\/i>, <i>punct<\/i>, <i>escaped<\/i>, or <i>other<\/i>\n     *   categories, and not equal to the slash character ({@code '/'}) or the\n     *   commercial-at character ({@code '@'}), is quoted.  <\/p><\/li>\n     *\n     *   <li><p> If a query is given then a question-mark character\n     *   ({@code '?'}) is appended, followed by the query.  Any character that\n     *   is not a <a href=\"#legal-chars\">legal URI character<\/a> is quoted.\n     *   <\/p><\/li>\n     *\n     *   <li><p> Finally, if a fragment is given then a hash character\n     *   ({@code '#'}) is appended, followed by the fragment.  Any character\n     *   that is not a legal URI character is quoted.  <\/p><\/li>\n     *\n     * <\/ol>\n     *\n     * <p> The resulting URI string is then parsed as if by invoking the {@link\n     * #URI(String)} constructor and then invoking the {@link\n     * #parseServerAuthority()} method upon the result; this may cause a {@link\n     * URISyntaxException} to be thrown.  <\/p>\n     *\n     * @param   scheme    Scheme name\n     * @param   userInfo  User name and authorization information\n     * @param   host      Host name\n     * @param   port      Port number\n     * @param   path      Path\n     * @param   query     Query\n     * @param   fragment  Fragment\n     *\n     * @throws URISyntaxException\n     *         If both a scheme and a path are given but the path is relative,\n     *         if the URI string constructed from the given components violates\n     *         RFC&nbsp;2396, or if the authority component of the string is\n     *         present but cannot be parsed as a server-based authority\n     */\n    public URI(String scheme,\n               String userInfo, String host, int port,\n               String path, String query, String fragment)\n        throws URISyntaxException\n    {\n        String s = toString(scheme, null,\n                            null, userInfo, host, port,\n                            path, query, fragment);\n        checkPath(s, scheme, path);\n        new Parser(s).parse(true);\n    }"}
{"Number":"368","API Relative Path":"java.net.URI.java-URI(String-String-String-String-String)","Corresponding Source":"/**\n     * Constructs a hierarchical URI from the given components.\n     *\n     * <p> If a scheme is given then the path, if also given, must either be\n     * empty or begin with a slash character ({@code '/'}).  Otherwise a\n     * component of the new URI may be left undefined by passing {@code null}\n     * for the corresponding parameter.\n     *\n     * <p> This constructor first builds a URI string from the given components\n     * according to the rules specified in <a\n     * href=\"http://www.ietf.org/rfc/rfc2396.txt\">RFC&nbsp;2396<\/a>,\n     * section&nbsp;5.2, step&nbsp;7: <\/p>\n     *\n     * <ol>\n     *\n     *   <li><p> Initially, the result string is empty.  <\/p><\/li>\n     *\n     *   <li><p> If a scheme is given then it is appended to the result,\n     *   followed by a colon character ({@code ':'}).  <\/p><\/li>\n     *\n     *   <li><p> If an authority is given then the string {@code \"//\"} is\n     *   appended, followed by the authority.  If the authority contains a\n     *   literal IPv6 address then the address must be enclosed in square\n     *   brackets ({@code '['} and {@code ']'}).  Any character not in the\n     *   <i>unreserved<\/i>, <i>punct<\/i>, <i>escaped<\/i>, or <i>other<\/i>\n     *   categories, and not equal to the commercial-at character\n     *   ({@code '@'}), is <a href=\"#quote\">quoted<\/a>.  <\/p><\/li>\n     *\n     *   <li><p> If a path is given then it is appended.  Any character not in\n     *   the <i>unreserved<\/i>, <i>punct<\/i>, <i>escaped<\/i>, or <i>other<\/i>\n     *   categories, and not equal to the slash character ({@code '/'}) or the\n     *   commercial-at character ({@code '@'}), is quoted.  <\/p><\/li>\n     *\n     *   <li><p> If a query is given then a question-mark character\n     *   ({@code '?'}) is appended, followed by the query.  Any character that\n     *   is not a <a href=\"#legal-chars\">legal URI character<\/a> is quoted.\n     *   <\/p><\/li>\n     *\n     *   <li><p> Finally, if a fragment is given then a hash character\n     *   ({@code '#'}) is appended, followed by the fragment.  Any character\n     *   that is not a legal URI character is quoted.  <\/p><\/li>\n     *\n     * <\/ol>\n     *\n     * <p> The resulting URI string is then parsed as if by invoking the {@link\n     * #URI(String)} constructor and then invoking the {@link\n     * #parseServerAuthority()} method upon the result; this may cause a {@link\n     * URISyntaxException} to be thrown.  <\/p>\n     *\n     * @param   scheme     Scheme name\n     * @param   authority  Authority\n     * @param   path       Path\n     * @param   query      Query\n     * @param   fragment   Fragment\n     *\n     * @throws URISyntaxException\n     *         If both a scheme and a path are given but the path is relative,\n     *         if the URI string constructed from the given components violates\n     *         RFC&nbsp;2396, or if the authority component of the string is\n     *         present but cannot be parsed as a server-based authority\n     */\n    public URI(String scheme,\n               String authority,\n               String path, String query, String fragment)\n        throws URISyntaxException\n    {\n        String s = toString(scheme, null,\n                            authority, null, null, -1,\n                            path, query, fragment);\n        checkPath(s, scheme, path);\n        new Parser(s).parse(false);\n    }"}
{"Number":"369","API Relative Path":"java.net.URI.java-URI(String-String-String-String-String)","Corresponding Source":"/**\n     * Constructs a hierarchical URI from the given components.\n     *\n     * <p> If a scheme is given then the path, if also given, must either be\n     * empty or begin with a slash character ({@code '/'}).  Otherwise a\n     * component of the new URI may be left undefined by passing {@code null}\n     * for the corresponding parameter.\n     *\n     * <p> This constructor first builds a URI string from the given components\n     * according to the rules specified in <a\n     * href=\"http://www.ietf.org/rfc/rfc2396.txt\">RFC&nbsp;2396<\/a>,\n     * section&nbsp;5.2, step&nbsp;7: <\/p>\n     *\n     * <ol>\n     *\n     *   <li><p> Initially, the result string is empty.  <\/p><\/li>\n     *\n     *   <li><p> If a scheme is given then it is appended to the result,\n     *   followed by a colon character ({@code ':'}).  <\/p><\/li>\n     *\n     *   <li><p> If an authority is given then the string {@code \"//\"} is\n     *   appended, followed by the authority.  If the authority contains a\n     *   literal IPv6 address then the address must be enclosed in square\n     *   brackets ({@code '['} and {@code ']'}).  Any character not in the\n     *   <i>unreserved<\/i>, <i>punct<\/i>, <i>escaped<\/i>, or <i>other<\/i>\n     *   categories, and not equal to the commercial-at character\n     *   ({@code '@'}), is <a href=\"#quote\">quoted<\/a>.  <\/p><\/li>\n     *\n     *   <li><p> If a path is given then it is appended.  Any character not in\n     *   the <i>unreserved<\/i>, <i>punct<\/i>, <i>escaped<\/i>, or <i>other<\/i>\n     *   categories, and not equal to the slash character ({@code '/'}) or the\n     *   commercial-at character ({@code '@'}), is quoted.  <\/p><\/li>\n     *\n     *   <li><p> If a query is given then a question-mark character\n     *   ({@code '?'}) is appended, followed by the query.  Any character that\n     *   is not a <a href=\"#legal-chars\">legal URI character<\/a> is quoted.\n     *   <\/p><\/li>\n     *\n     *   <li><p> Finally, if a fragment is given then a hash character\n     *   ({@code '#'}) is appended, followed by the fragment.  Any character\n     *   that is not a legal URI character is quoted.  <\/p><\/li>\n     *\n     * <\/ol>\n     *\n     * <p> The resulting URI string is then parsed as if by invoking the {@link\n     * #URI(String)} constructor and then invoking the {@link\n     * #parseServerAuthority()} method upon the result; this may cause a {@link\n     * URISyntaxException} to be thrown.  <\/p>\n     *\n     * @param   scheme     Scheme name\n     * @param   authority  Authority\n     * @param   path       Path\n     * @param   query      Query\n     * @param   fragment   Fragment\n     *\n     * @throws URISyntaxException\n     *         If both a scheme and a path are given but the path is relative,\n     *         if the URI string constructed from the given components violates\n     *         RFC&nbsp;2396, or if the authority component of the string is\n     *         present but cannot be parsed as a server-based authority\n     */\n    public URI(String scheme,\n               String authority,\n               String path, String query, String fragment)\n        throws URISyntaxException\n    {\n        String s = toString(scheme, null,\n                            authority, null, null, -1,\n                            path, query, fragment);\n        checkPath(s, scheme, path);\n        new Parser(s).parse(false);\n    }"}
{"Number":"370","API Relative Path":"java.net.URI.java-URI(String-String-String-String-String)","Corresponding Source":"/**\n     * Constructs a hierarchical URI from the given components.\n     *\n     * <p> If a scheme is given then the path, if also given, must either be\n     * empty or begin with a slash character ({@code '/'}).  Otherwise a\n     * component of the new URI may be left undefined by passing {@code null}\n     * for the corresponding parameter.\n     *\n     * <p> This constructor first builds a URI string from the given components\n     * according to the rules specified in <a\n     * href=\"http://www.ietf.org/rfc/rfc2396.txt\">RFC&nbsp;2396<\/a>,\n     * section&nbsp;5.2, step&nbsp;7: <\/p>\n     *\n     * <ol>\n     *\n     *   <li><p> Initially, the result string is empty.  <\/p><\/li>\n     *\n     *   <li><p> If a scheme is given then it is appended to the result,\n     *   followed by a colon character ({@code ':'}).  <\/p><\/li>\n     *\n     *   <li><p> If an authority is given then the string {@code \"//\"} is\n     *   appended, followed by the authority.  If the authority contains a\n     *   literal IPv6 address then the address must be enclosed in square\n     *   brackets ({@code '['} and {@code ']'}).  Any character not in the\n     *   <i>unreserved<\/i>, <i>punct<\/i>, <i>escaped<\/i>, or <i>other<\/i>\n     *   categories, and not equal to the commercial-at character\n     *   ({@code '@'}), is <a href=\"#quote\">quoted<\/a>.  <\/p><\/li>\n     *\n     *   <li><p> If a path is given then it is appended.  Any character not in\n     *   the <i>unreserved<\/i>, <i>punct<\/i>, <i>escaped<\/i>, or <i>other<\/i>\n     *   categories, and not equal to the slash character ({@code '/'}) or the\n     *   commercial-at character ({@code '@'}), is quoted.  <\/p><\/li>\n     *\n     *   <li><p> If a query is given then a question-mark character\n     *   ({@code '?'}) is appended, followed by the query.  Any character that\n     *   is not a <a href=\"#legal-chars\">legal URI character<\/a> is quoted.\n     *   <\/p><\/li>\n     *\n     *   <li><p> Finally, if a fragment is given then a hash character\n     *   ({@code '#'}) is appended, followed by the fragment.  Any character\n     *   that is not a legal URI character is quoted.  <\/p><\/li>\n     *\n     * <\/ol>\n     *\n     * <p> The resulting URI string is then parsed as if by invoking the {@link\n     * #URI(String)} constructor and then invoking the {@link\n     * #parseServerAuthority()} method upon the result; this may cause a {@link\n     * URISyntaxException} to be thrown.  <\/p>\n     *\n     * @param   scheme     Scheme name\n     * @param   authority  Authority\n     * @param   path       Path\n     * @param   query      Query\n     * @param   fragment   Fragment\n     *\n     * @throws URISyntaxException\n     *         If both a scheme and a path are given but the path is relative,\n     *         if the URI string constructed from the given components violates\n     *         RFC&nbsp;2396, or if the authority component of the string is\n     *         present but cannot be parsed as a server-based authority\n     */\n    public URI(String scheme,\n               String authority,\n               String path, String query, String fragment)\n        throws URISyntaxException\n    {\n        String s = toString(scheme, null,\n                            authority, null, null, -1,\n                            path, query, fragment);\n        checkPath(s, scheme, path);\n        new Parser(s).parse(false);\n    }"}
{"Number":"371","API Relative Path":"java.net.URL.java-URL(String-String-int-String-URLStreamHandler)","Corresponding Source":"/**\n     * Creates a {@code URL} object from the specified\n     * {@code protocol}, {@code host}, {@code port}\n     * number, {@code file}, and {@code handler}. Specifying\n     * a {@code port} number of {@code -1} indicates that\n     * the URL should use the default port for the protocol. Specifying\n     * a {@code handler} of {@code null} indicates that the URL\n     * should use a default stream handler for the protocol, as outlined\n     * for:\n     *     java.net.URL#URL(java.lang.String, java.lang.String, int,\n     *                      java.lang.String)\n     *\n     * <p>If the handler is not null and there is a security manager,\n     * the security manager's {@code checkPermission}\n     * method is called with a\n     * {@code NetPermission(\"specifyStreamHandler\")} permission.\n     * This may result in a SecurityException.\n     *\n     * No validation of the inputs is performed by this constructor.\n     *\n     * @param      protocol   the name of the protocol to use.\n     * @param      host       the name of the host.\n     * @param      port       the port number on the host.\n     * @param      file       the file on the host\n     * @param      handler    the stream handler for the URL.\n     * @exception  MalformedURLException  if an unknown protocol is specified.\n     * @exception  SecurityException\n     *        if a security manager exists and its\n     *        {@code checkPermission} method doesn't allow\n     *        specifying a stream handler explicitly.\n     * @see        java.lang.System#getProperty(java.lang.String)\n     * @see        java.net.URL#setURLStreamHandlerFactory(\n     *                  java.net.URLStreamHandlerFactory)\n     * @see        java.net.URLStreamHandler\n     * @see        java.net.URLStreamHandlerFactory#createURLStreamHandler(\n     *                  java.lang.String)\n     * @see        SecurityManager#checkPermission\n     * @see        java.net.NetPermission\n     */\n    public URL(String protocol, String host, int port, String file,\n               URLStreamHandler handler) throws MalformedURLException {\n        if (handler != null) {\n            SecurityManager sm = System.getSecurityManager();\n            if (sm != null) {\n                // check for permission to specify a handler\n                checkSpecifyHandler(sm);\n            }\n        }\n\n        protocol = protocol.toLowerCase();\n        this.protocol = protocol;\n        if (host != null) {\n\n            /**\n             * if host is a literal IPv6 address,\n             * we will make it conform to RFC 2732\n             */\n            if (host.indexOf(':') >= 0 && !host.startsWith(\"[\")) {\n                host = \"[\"+host+\"]\";\n            }\n            this.host = host;\n\n            if (port < -1) {\n                throw new MalformedURLException(\"Invalid port number :\" +\n                                                    port);\n            }\n            this.port = port;\n            authority = (port == -1) ? host : host + \":\" + port;\n        }\n\n        Parts parts = new Parts(file);\n        path = parts.getPath();\n        query = parts.getQuery();\n\n        if (query != null) {\n            this.file = path + \"?\" + query;\n        } else {\n            this.file = path;\n        }\n        ref = parts.getRef();\n\n        // Note: we don't do validation of the URL here. Too risky to change\n        // right now, but worth considering for future reference. -br\n        if (handler == null &&\n            (handler = getURLStreamHandler(protocol)) == null) {\n            throw new MalformedURLException(\"unknown protocol: \" + protocol);\n        }\n        this.handler = handler;\n    }"}
{"Number":"372","API Relative Path":"java.net.URL.java-URL(String-String-int-String-URLStreamHandler)","Corresponding Source":"/**\n     * Creates a {@code URL} object from the specified\n     * {@code protocol}, {@code host}, {@code port}\n     * number, {@code file}, and {@code handler}. Specifying\n     * a {@code port} number of {@code -1} indicates that\n     * the URL should use the default port for the protocol. Specifying\n     * a {@code handler} of {@code null} indicates that the URL\n     * should use a default stream handler for the protocol, as outlined\n     * for:\n     *     java.net.URL#URL(java.lang.String, java.lang.String, int,\n     *                      java.lang.String)\n     *\n     * <p>If the handler is not null and there is a security manager,\n     * the security manager's {@code checkPermission}\n     * method is called with a\n     * {@code NetPermission(\"specifyStreamHandler\")} permission.\n     * This may result in a SecurityException.\n     *\n     * No validation of the inputs is performed by this constructor.\n     *\n     * @param      protocol   the name of the protocol to use.\n     * @param      host       the name of the host.\n     * @param      port       the port number on the host.\n     * @param      file       the file on the host\n     * @param      handler    the stream handler for the URL.\n     * @exception  MalformedURLException  if an unknown protocol is specified.\n     * @exception  SecurityException\n     *        if a security manager exists and its\n     *        {@code checkPermission} method doesn't allow\n     *        specifying a stream handler explicitly.\n     * @see        java.lang.System#getProperty(java.lang.String)\n     * @see        java.net.URL#setURLStreamHandlerFactory(\n     *                  java.net.URLStreamHandlerFactory)\n     * @see        java.net.URLStreamHandler\n     * @see        java.net.URLStreamHandlerFactory#createURLStreamHandler(\n     *                  java.lang.String)\n     * @see        SecurityManager#checkPermission\n     * @see        java.net.NetPermission\n     */\n    public URL(String protocol, String host, int port, String file,\n               URLStreamHandler handler) throws MalformedURLException {\n        if (handler != null) {\n            SecurityManager sm = System.getSecurityManager();\n            if (sm != null) {\n                // check for permission to specify a handler\n                checkSpecifyHandler(sm);\n            }\n        }\n\n        protocol = protocol.toLowerCase();\n        this.protocol = protocol;\n        if (host != null) {\n\n            /**\n             * if host is a literal IPv6 address,\n             * we will make it conform to RFC 2732\n             */\n            if (host.indexOf(':') >= 0 && !host.startsWith(\"[\")) {\n                host = \"[\"+host+\"]\";\n            }\n            this.host = host;\n\n            if (port < -1) {\n                throw new MalformedURLException(\"Invalid port number :\" +\n                                                    port);\n            }\n            this.port = port;\n            authority = (port == -1) ? host : host + \":\" + port;\n        }\n\n        Parts parts = new Parts(file);\n        path = parts.getPath();\n        query = parts.getQuery();\n\n        if (query != null) {\n            this.file = path + \"?\" + query;\n        } else {\n            this.file = path;\n        }\n        ref = parts.getRef();\n\n        // Note: we don't do validation of the URL here. Too risky to change\n        // right now, but worth considering for future reference. -br\n        if (handler == null &&\n            (handler = getURLStreamHandler(protocol)) == null) {\n            throw new MalformedURLException(\"unknown protocol: \" + protocol);\n        }\n        this.handler = handler;\n    }"}
{"Number":"373","API Relative Path":"java.net.URLConnection.java-setConnectTimeout(int)","Corresponding Source":"/**\n     * Sets a specified timeout value, in milliseconds, to be used\n     * when opening a communications link to the resource referenced\n     * by this URLConnection.  If the timeout expires before the\n     * connection can be established, a\n     * java.net.SocketTimeoutException is raised. A timeout of zero is\n     * interpreted as an infinite timeout.\n\n     * <p> Some non-standard implementation of this method may ignore\n     * the specified timeout. To see the connect timeout set, please\n     * call getConnectTimeout().\n     *\n     * @param timeout an {@code int} that specifies the connect\n     *               timeout value in milliseconds\n     * @throws IllegalArgumentException if the timeout parameter is negative\n     *\n     * @see #getConnectTimeout()\n     * @see #connect()\n     * @since 1.5\n     */\n    public void setConnectTimeout(int timeout) {\n        if (timeout < 0) {\n            throw new IllegalArgumentException(\"timeout can not be negative\");\n        }\n        connectTimeout = timeout;\n    }"}
{"Number":"374","API Relative Path":"java.net.URLConnection.java-setReadTimeout(int)","Corresponding Source":"/**\n     * Sets the read timeout to a specified timeout, in\n     * milliseconds. A non-zero value specifies the timeout when\n     * reading from Input stream when a connection is established to a\n     * resource. If the timeout expires before there is data available\n     * for read, a java.net.SocketTimeoutException is raised. A\n     * timeout of zero is interpreted as an infinite timeout.\n     *\n     *<p> Some non-standard implementation of this method ignores the\n     * specified timeout. To see the read timeout set, please call\n     * getReadTimeout().\n     *\n     * @param timeout an {@code int} that specifies the timeout\n     * value to be used in milliseconds\n     * @throws IllegalArgumentException if the timeout parameter is negative\n     *\n     * @see #getReadTimeout()\n     * @see InputStream#read()\n     * @since 1.5\n     */\n    public void setReadTimeout(int timeout) {\n        if (timeout < 0) {\n            throw new IllegalArgumentException(\"timeout can not be negative\");\n        }\n        readTimeout = timeout;\n    }"}
{"Number":"375","API Relative Path":"java.net.URLEncoder.java-encode(String-String)","Corresponding Source":"/**\n     * Translates a string into {@code application/x-www-form-urlencoded}\n     * format using a specific encoding scheme. This method uses the\n     * supplied encoding scheme to obtain the bytes for unsafe\n     * characters.\n     * <p>\n     * <em><strong>Note:<\/strong> The <a href=\n     * \"http://www.w3.org/TR/html40/appendix/notes.html#non-ascii-chars\">\n     * World Wide Web Consortium Recommendation<\/a> states that\n     * UTF-8 should be used. Not doing so may introduce\n     * incompatibilities.<\/em>\n     *\n     * @param   s   {@code String} to be translated.\n     * @param   enc   The name of a supported\n     *    <a href=\"../lang/package-summary.html#charenc\">character\n     *    encoding<\/a>.\n     * @return  the translated {@code String}.\n     * @exception  UnsupportedEncodingException\n     *             If the named encoding is not supported\n     * @see URLDecoder#decode(java.lang.String, java.lang.String)\n     * @since 1.4\n     */\n    public static String encode(String s, String enc)\n        throws UnsupportedEncodingException {\n\n        boolean needToChange = false;\n        StringBuffer out = new StringBuffer(s.length());\n        Charset charset;\n        CharArrayWriter charArrayWriter = new CharArrayWriter();\n\n        if (enc == null)\n            throw new NullPointerException(\"charsetName\");\n\n        try {\n            charset = Charset.forName(enc);\n        } catch (IllegalCharsetNameException e) {\n            throw new UnsupportedEncodingException(enc);\n        } catch (UnsupportedCharsetException e) {\n            throw new UnsupportedEncodingException(enc);\n        }\n\n        for (int i = 0; i < s.length();) {\n            int c = (int) s.charAt(i);\n            //System.out.println(\"Examining character: \" + c);\n            if (dontNeedEncoding.get(c)) {\n                if (c == ' ') {\n                    c = '+';\n                    needToChange = true;\n                }\n                //System.out.println(\"Storing: \" + c);\n                out.append((char)c);\n                i++;\n            } else {\n                // convert to external encoding before hex conversion\n                do {\n                    charArrayWriter.write(c);\n                    /*\n                     * If this character represents the start of a Unicode\n                     * surrogate pair, then pass in two characters. It's not\n                     * clear what should be done if a bytes reserved in the\n                     * surrogate pairs range occurs outside of a legal\n                     * surrogate pair. For now, just treat it as if it were\n                     * any other character.\n                     */\n                    if (c >= 0xD800 && c <= 0xDBFF) {\n                        /*\n                          System.out.println(Integer.toHexString(c)\n                          + \" is high surrogate\");\n                        */\n                        if ( (i+1) < s.length()) {\n                            int d = (int) s.charAt(i+1);\n                            /*\n                              System.out.println(\"\\tExamining \"\n                              + Integer.toHexString(d));\n                            */\n                            if (d >= 0xDC00 && d <= 0xDFFF) {\n                                /*\n                                  System.out.println(\"\\t\"\n                                  + Integer.toHexString(d)\n                                  + \" is low surrogate\");\n                                */\n                                charArrayWriter.write(d);\n                                i++;\n                            }\n                        }\n                    }\n                    i++;\n                } while (i < s.length() && !dontNeedEncoding.get((c = (int) s.charAt(i))));\n\n                charArrayWriter.flush();\n                String str = new String(charArrayWriter.toCharArray());\n                byte[] ba = str.getBytes(charset);\n                for (int j = 0; j < ba.length; j++) {\n                    out.append('%');\n                    char ch = Character.forDigit((ba[j] >> 4) & 0xF, 16);\n                    // converting to use uppercase letter as part of\n                    // the hex value if ch is a letter.\n                    if (Character.isLetter(ch)) {\n                        ch -= caseDiff;\n                    }\n                    out.append(ch);\n                    ch = Character.forDigit(ba[j] & 0xF, 16);\n                    if (Character.isLetter(ch)) {\n                        ch -= caseDiff;\n                    }\n                    out.append(ch);\n                }\n                charArrayWriter.reset();\n                needToChange = true;\n            }\n        }\n\n        return (needToChange? out.toString() : s);\n    }"}
{"Number":"376","API Relative Path":"java.net.URLStreamHandler.java-parseURL(URL-String-int-int)","Corresponding Source":"/**\n     * Parses the string representation of a {@code URL} into a\n     * {@code URL} object.\n     * <p>\n     * If there is any inherited context, then it has already been\n     * copied into the {@code URL} argument.\n     * <p>\n     * The {@code parseURL} method of {@code URLStreamHandler}\n     * parses the string representation as if it were an\n     * {@code http} specification. Most URL protocol families have a\n     * similar parsing. A stream protocol handler for a protocol that has\n     * a different syntax must override this routine.\n     *\n     * @param   u       the {@code URL} to receive the result of parsing\n     *                  the spec.\n     * @param   spec    the {@code String} representing the URL that\n     *                  must be parsed.\n     * @param   start   the character index at which to begin parsing. This is\n     *                  just past the '{@code :}' (if there is one) that\n     *                  specifies the determination of the protocol name.\n     * @param   limit   the character position to stop parsing at. This is the\n     *                  end of the string or the position of the\n     *                  \"{@code #}\" character, if present. All information\n     *                  after the sharp sign indicates an anchor.\n     */\n    protected void parseURL(URL u, String spec, int start, int limit) {\n        // These fields may receive context content if this was relative URL\n        String protocol = u.getProtocol();\n        String authority = u.getAuthority();\n        String userInfo = u.getUserInfo();\n        String host = u.getHost();\n        int port = u.getPort();\n        String path = u.getPath();\n        String query = u.getQuery();\n\n        // This field has already been parsed\n        String ref = u.getRef();\n\n        boolean isRelPath = false;\n        boolean queryOnly = false;\n\n// FIX: should not assume query if opaque\n        // Strip off the query part\n        if (start < limit) {\n            int queryStart = spec.indexOf('?');\n            queryOnly = queryStart == start;\n            if ((queryStart != -1) && (queryStart < limit)) {\n                query = spec.substring(queryStart+1, limit);\n                if (limit > queryStart)\n                    limit = queryStart;\n                spec = spec.substring(0, queryStart);\n            }\n        }\n\n        int i = 0;\n        // Parse the authority part if any\n        boolean isUNCName = (start <= limit - 4) &&\n                        (spec.charAt(start) == '/') &&\n                        (spec.charAt(start + 1) == '/') &&\n                        (spec.charAt(start + 2) == '/') &&\n                        (spec.charAt(start + 3) == '/');\n        if (!isUNCName && (start <= limit - 2) && (spec.charAt(start) == '/') &&\n            (spec.charAt(start + 1) == '/')) {\n            start += 2;\n            i = spec.indexOf('/', start);\n            if (i < 0 || i > limit) {\n                i = spec.indexOf('?', start);\n                if (i < 0 || i > limit)\n                    i = limit;\n            }\n\n            host = authority = spec.substring(start, i);\n\n            int ind = authority.indexOf('@');\n            if (ind != -1) {\n                if (ind != authority.lastIndexOf('@')) {\n                    // more than one '@' in authority. This is not server based\n                    userInfo = null;\n                    host = null;\n                } else {\n                    userInfo = authority.substring(0, ind);\n                    host = authority.substring(ind+1);\n                }\n            } else {\n                userInfo = null;\n            }\n            if (host != null) {\n                // If the host is surrounded by [ and ] then its an IPv6\n                // literal address as specified in RFC2732\n                if (host.length()>0 && (host.charAt(0) == '[')) {\n                    if ((ind = host.indexOf(']')) > 2) {\n\n                        String nhost = host ;\n                        host = nhost.substring(0,ind+1);\n                        if (!IPAddressUtil.\n                            isIPv6LiteralAddress(host.substring(1, ind))) {\n                            throw new IllegalArgumentException(\n                                \"Invalid host: \"+ host);\n                        }\n\n                        port = -1 ;\n                        if (nhost.length() > ind+1) {\n                            if (nhost.charAt(ind+1) == ':') {\n                                ++ind ;\n                                // port can be null according to RFC2396\n                                if (nhost.length() > (ind + 1)) {\n                                    port = Integer.parseInt(nhost.substring(ind+1));\n                                }\n                            } else {\n                                throw new IllegalArgumentException(\n                                    \"Invalid authority field: \" + authority);\n                            }\n                        }\n                    } else {\n                        throw new IllegalArgumentException(\n                            \"Invalid authority field: \" + authority);\n                    }\n                } else {\n                    ind = host.indexOf(':');\n                    port = -1;\n                    if (ind >= 0) {\n                        // port can be null according to RFC2396\n                        if (host.length() > (ind + 1)) {\n                            port = Integer.parseInt(host.substring(ind + 1));\n                        }\n                        host = host.substring(0, ind);\n                    }\n                }\n            } else {\n                host = \"\";\n            }\n            if (port < -1)\n                throw new IllegalArgumentException(\"Invalid port number :\" +\n                                                   port);\n            start = i;\n            // If the authority is defined then the path is defined by the\n            // spec only; See RFC 2396 Section 5.2.4.\n            if (authority != null && authority.length() > 0)\n                path = \"\";\n        }\n\n        if (host == null) {\n            host = \"\";\n        }\n\n        // Parse the file path if any\n        if (start < limit) {\n            if (spec.charAt(start) == '/') {\n                path = spec.substring(start, limit);\n            } else if (path != null && path.length() > 0) {\n                isRelPath = true;\n                int ind = path.lastIndexOf('/');\n                String seperator = \"\";\n                if (ind == -1 && authority != null)\n                    seperator = \"/\";\n                path = path.substring(0, ind + 1) + seperator +\n                         spec.substring(start, limit);\n\n            } else {\n                String seperator = (authority != null) ? \"/\" : \"\";\n                path = seperator + spec.substring(start, limit);\n            }\n        } else if (queryOnly && path != null) {\n            int ind = path.lastIndexOf('/');\n            if (ind < 0)\n                ind = 0;\n            path = path.substring(0, ind) + \"/\";\n        }\n        if (path == null)\n            path = \"\";\n\n        if (isRelPath) {\n            // Remove embedded /./\n            while ((i = path.indexOf(\"/./\")) >= 0) {\n                path = path.substring(0, i) + path.substring(i + 2);\n            }\n            // Remove embedded /../ if possible\n            i = 0;\n            while ((i = path.indexOf(\"/../\", i)) >= 0) {\n                /*\n                 * A \"/../\" will cancel the previous segment and itself,\n                 * unless that segment is a \"/../\" itself\n                 * i.e. \"/a/b/../c\" becomes \"/a/c\"\n                 * but \"/../../a\" should stay unchanged\n                 */\n                if (i > 0 && (limit = path.lastIndexOf('/', i - 1)) >= 0 &&\n                    (path.indexOf(\"/../\", limit) != 0)) {\n                    path = path.substring(0, limit) + path.substring(i + 3);\n                    i = 0;\n                } else {\n                    i = i + 3;\n                }\n            }\n            // Remove trailing .. if possible\n            while (path.endsWith(\"/..\")) {\n                i = path.indexOf(\"/..\");\n                if ((limit = path.lastIndexOf('/', i - 1)) >= 0) {\n                    path = path.substring(0, limit+1);\n                } else {\n                    break;\n                }\n            }\n            // Remove starting .\n            if (path.startsWith(\"./\") && path.length() > 2)\n                path = path.substring(2);\n\n            // Remove trailing .\n            if (path.endsWith(\"/.\"))\n                path = path.substring(0, path.length() -1);\n        }\n\n        setURL(u, protocol, host, port, authority, userInfo, path, query, ref);\n    }"}
{"Number":"377","API Relative Path":"java.net.URLStreamHandler.java-parseURL(URL-String-int-int)","Corresponding Source":"/**\n     * Parses the string representation of a {@code URL} into a\n     * {@code URL} object.\n     * <p>\n     * If there is any inherited context, then it has already been\n     * copied into the {@code URL} argument.\n     * <p>\n     * The {@code parseURL} method of {@code URLStreamHandler}\n     * parses the string representation as if it were an\n     * {@code http} specification. Most URL protocol families have a\n     * similar parsing. A stream protocol handler for a protocol that has\n     * a different syntax must override this routine.\n     *\n     * @param   u       the {@code URL} to receive the result of parsing\n     *                  the spec.\n     * @param   spec    the {@code String} representing the URL that\n     *                  must be parsed.\n     * @param   start   the character index at which to begin parsing. This is\n     *                  just past the '{@code :}' (if there is one) that\n     *                  specifies the determination of the protocol name.\n     * @param   limit   the character position to stop parsing at. This is the\n     *                  end of the string or the position of the\n     *                  \"{@code #}\" character, if present. All information\n     *                  after the sharp sign indicates an anchor.\n     */\n    protected void parseURL(URL u, String spec, int start, int limit) {\n        // These fields may receive context content if this was relative URL\n        String protocol = u.getProtocol();\n        String authority = u.getAuthority();\n        String userInfo = u.getUserInfo();\n        String host = u.getHost();\n        int port = u.getPort();\n        String path = u.getPath();\n        String query = u.getQuery();\n\n        // This field has already been parsed\n        String ref = u.getRef();\n\n        boolean isRelPath = false;\n        boolean queryOnly = false;\n\n// FIX: should not assume query if opaque\n        // Strip off the query part\n        if (start < limit) {\n            int queryStart = spec.indexOf('?');\n            queryOnly = queryStart == start;\n            if ((queryStart != -1) && (queryStart < limit)) {\n                query = spec.substring(queryStart+1, limit);\n                if (limit > queryStart)\n                    limit = queryStart;\n                spec = spec.substring(0, queryStart);\n            }\n        }\n\n        int i = 0;\n        // Parse the authority part if any\n        boolean isUNCName = (start <= limit - 4) &&\n                        (spec.charAt(start) == '/') &&\n                        (spec.charAt(start + 1) == '/') &&\n                        (spec.charAt(start + 2) == '/') &&\n                        (spec.charAt(start + 3) == '/');\n        if (!isUNCName && (start <= limit - 2) && (spec.charAt(start) == '/') &&\n            (spec.charAt(start + 1) == '/')) {\n            start += 2;\n            i = spec.indexOf('/', start);\n            if (i < 0 || i > limit) {\n                i = spec.indexOf('?', start);\n                if (i < 0 || i > limit)\n                    i = limit;\n            }\n\n            host = authority = spec.substring(start, i);\n\n            int ind = authority.indexOf('@');\n            if (ind != -1) {\n                if (ind != authority.lastIndexOf('@')) {\n                    // more than one '@' in authority. This is not server based\n                    userInfo = null;\n                    host = null;\n                } else {\n                    userInfo = authority.substring(0, ind);\n                    host = authority.substring(ind+1);\n                }\n            } else {\n                userInfo = null;\n            }\n            if (host != null) {\n                // If the host is surrounded by [ and ] then its an IPv6\n                // literal address as specified in RFC2732\n                if (host.length()>0 && (host.charAt(0) == '[')) {\n                    if ((ind = host.indexOf(']')) > 2) {\n\n                        String nhost = host ;\n                        host = nhost.substring(0,ind+1);\n                        if (!IPAddressUtil.\n                            isIPv6LiteralAddress(host.substring(1, ind))) {\n                            throw new IllegalArgumentException(\n                                \"Invalid host: \"+ host);\n                        }\n\n                        port = -1 ;\n                        if (nhost.length() > ind+1) {\n                            if (nhost.charAt(ind+1) == ':') {\n                                ++ind ;\n                                // port can be null according to RFC2396\n                                if (nhost.length() > (ind + 1)) {\n                                    port = Integer.parseInt(nhost.substring(ind+1));\n                                }\n                            } else {\n                                throw new IllegalArgumentException(\n                                    \"Invalid authority field: \" + authority);\n                            }\n                        }\n                    } else {\n                        throw new IllegalArgumentException(\n                            \"Invalid authority field: \" + authority);\n                    }\n                } else {\n                    ind = host.indexOf(':');\n                    port = -1;\n                    if (ind >= 0) {\n                        // port can be null according to RFC2396\n                        if (host.length() > (ind + 1)) {\n                            port = Integer.parseInt(host.substring(ind + 1));\n                        }\n                        host = host.substring(0, ind);\n                    }\n                }\n            } else {\n                host = \"\";\n            }\n            if (port < -1)\n                throw new IllegalArgumentException(\"Invalid port number :\" +\n                                                   port);\n            start = i;\n            // If the authority is defined then the path is defined by the\n            // spec only; See RFC 2396 Section 5.2.4.\n            if (authority != null && authority.length() > 0)\n                path = \"\";\n        }\n\n        if (host == null) {\n            host = \"\";\n        }\n\n        // Parse the file path if any\n        if (start < limit) {\n            if (spec.charAt(start) == '/') {\n                path = spec.substring(start, limit);\n            } else if (path != null && path.length() > 0) {\n                isRelPath = true;\n                int ind = path.lastIndexOf('/');\n                String seperator = \"\";\n                if (ind == -1 && authority != null)\n                    seperator = \"/\";\n                path = path.substring(0, ind + 1) + seperator +\n                         spec.substring(start, limit);\n\n            } else {\n                String seperator = (authority != null) ? \"/\" : \"\";\n                path = seperator + spec.substring(start, limit);\n            }\n        } else if (queryOnly && path != null) {\n            int ind = path.lastIndexOf('/');\n            if (ind < 0)\n                ind = 0;\n            path = path.substring(0, ind) + \"/\";\n        }\n        if (path == null)\n            path = \"\";\n\n        if (isRelPath) {\n            // Remove embedded /./\n            while ((i = path.indexOf(\"/./\")) >= 0) {\n                path = path.substring(0, i) + path.substring(i + 2);\n            }\n            // Remove embedded /../ if possible\n            i = 0;\n            while ((i = path.indexOf(\"/../\", i)) >= 0) {\n                /*\n                 * A \"/../\" will cancel the previous segment and itself,\n                 * unless that segment is a \"/../\" itself\n                 * i.e. \"/a/b/../c\" becomes \"/a/c\"\n                 * but \"/../../a\" should stay unchanged\n                 */\n                if (i > 0 && (limit = path.lastIndexOf('/', i - 1)) >= 0 &&\n                    (path.indexOf(\"/../\", limit) != 0)) {\n                    path = path.substring(0, limit) + path.substring(i + 3);\n                    i = 0;\n                } else {\n                    i = i + 3;\n                }\n            }\n            // Remove trailing .. if possible\n            while (path.endsWith(\"/..\")) {\n                i = path.indexOf(\"/..\");\n                if ((limit = path.lastIndexOf('/', i - 1)) >= 0) {\n                    path = path.substring(0, limit+1);\n                } else {\n                    break;\n                }\n            }\n            // Remove starting .\n            if (path.startsWith(\"./\") && path.length() > 2)\n                path = path.substring(2);\n\n            // Remove trailing .\n            if (path.endsWith(\"/.\"))\n                path = path.substring(0, path.length() -1);\n        }\n\n        setURL(u, protocol, host, port, authority, userInfo, path, query, ref);\n    }"}
{"Number":"378","API Relative Path":"java.net.URLStreamHandler.java-parseURL(URL-String-int-int)","Corresponding Source":"/**\n     * Parses the string representation of a {@code URL} into a\n     * {@code URL} object.\n     * <p>\n     * If there is any inherited context, then it has already been\n     * copied into the {@code URL} argument.\n     * <p>\n     * The {@code parseURL} method of {@code URLStreamHandler}\n     * parses the string representation as if it were an\n     * {@code http} specification. Most URL protocol families have a\n     * similar parsing. A stream protocol handler for a protocol that has\n     * a different syntax must override this routine.\n     *\n     * @param   u       the {@code URL} to receive the result of parsing\n     *                  the spec.\n     * @param   spec    the {@code String} representing the URL that\n     *                  must be parsed.\n     * @param   start   the character index at which to begin parsing. This is\n     *                  just past the '{@code :}' (if there is one) that\n     *                  specifies the determination of the protocol name.\n     * @param   limit   the character position to stop parsing at. This is the\n     *                  end of the string or the position of the\n     *                  \"{@code #}\" character, if present. All information\n     *                  after the sharp sign indicates an anchor.\n     */\n    protected void parseURL(URL u, String spec, int start, int limit) {\n        // These fields may receive context content if this was relative URL\n        String protocol = u.getProtocol();\n        String authority = u.getAuthority();\n        String userInfo = u.getUserInfo();\n        String host = u.getHost();\n        int port = u.getPort();\n        String path = u.getPath();\n        String query = u.getQuery();\n\n        // This field has already been parsed\n        String ref = u.getRef();\n\n        boolean isRelPath = false;\n        boolean queryOnly = false;\n\n// FIX: should not assume query if opaque\n        // Strip off the query part\n        if (start < limit) {\n            int queryStart = spec.indexOf('?');\n            queryOnly = queryStart == start;\n            if ((queryStart != -1) && (queryStart < limit)) {\n                query = spec.substring(queryStart+1, limit);\n                if (limit > queryStart)\n                    limit = queryStart;\n                spec = spec.substring(0, queryStart);\n            }\n        }\n\n        int i = 0;\n        // Parse the authority part if any\n        boolean isUNCName = (start <= limit - 4) &&\n                        (spec.charAt(start) == '/') &&\n                        (spec.charAt(start + 1) == '/') &&\n                        (spec.charAt(start + 2) == '/') &&\n                        (spec.charAt(start + 3) == '/');\n        if (!isUNCName && (start <= limit - 2) && (spec.charAt(start) == '/') &&\n            (spec.charAt(start + 1) == '/')) {\n            start += 2;\n            i = spec.indexOf('/', start);\n            if (i < 0 || i > limit) {\n                i = spec.indexOf('?', start);\n                if (i < 0 || i > limit)\n                    i = limit;\n            }\n\n            host = authority = spec.substring(start, i);\n\n            int ind = authority.indexOf('@');\n            if (ind != -1) {\n                if (ind != authority.lastIndexOf('@')) {\n                    // more than one '@' in authority. This is not server based\n                    userInfo = null;\n                    host = null;\n                } else {\n                    userInfo = authority.substring(0, ind);\n                    host = authority.substring(ind+1);\n                }\n            } else {\n                userInfo = null;\n            }\n            if (host != null) {\n                // If the host is surrounded by [ and ] then its an IPv6\n                // literal address as specified in RFC2732\n                if (host.length()>0 && (host.charAt(0) == '[')) {\n                    if ((ind = host.indexOf(']')) > 2) {\n\n                        String nhost = host ;\n                        host = nhost.substring(0,ind+1);\n                        if (!IPAddressUtil.\n                            isIPv6LiteralAddress(host.substring(1, ind))) {\n                            throw new IllegalArgumentException(\n                                \"Invalid host: \"+ host);\n                        }\n\n                        port = -1 ;\n                        if (nhost.length() > ind+1) {\n                            if (nhost.charAt(ind+1) == ':') {\n                                ++ind ;\n                                // port can be null according to RFC2396\n                                if (nhost.length() > (ind + 1)) {\n                                    port = Integer.parseInt(nhost.substring(ind+1));\n                                }\n                            } else {\n                                throw new IllegalArgumentException(\n                                    \"Invalid authority field: \" + authority);\n                            }\n                        }\n                    } else {\n                        throw new IllegalArgumentException(\n                            \"Invalid authority field: \" + authority);\n                    }\n                } else {\n                    ind = host.indexOf(':');\n                    port = -1;\n                    if (ind >= 0) {\n                        // port can be null according to RFC2396\n                        if (host.length() > (ind + 1)) {\n                            port = Integer.parseInt(host.substring(ind + 1));\n                        }\n                        host = host.substring(0, ind);\n                    }\n                }\n            } else {\n                host = \"\";\n            }\n            if (port < -1)\n                throw new IllegalArgumentException(\"Invalid port number :\" +\n                                                   port);\n            start = i;\n            // If the authority is defined then the path is defined by the\n            // spec only; See RFC 2396 Section 5.2.4.\n            if (authority != null && authority.length() > 0)\n                path = \"\";\n        }\n\n        if (host == null) {\n            host = \"\";\n        }\n\n        // Parse the file path if any\n        if (start < limit) {\n            if (spec.charAt(start) == '/') {\n                path = spec.substring(start, limit);\n            } else if (path != null && path.length() > 0) {\n                isRelPath = true;\n                int ind = path.lastIndexOf('/');\n                String seperator = \"\";\n                if (ind == -1 && authority != null)\n                    seperator = \"/\";\n                path = path.substring(0, ind + 1) + seperator +\n                         spec.substring(start, limit);\n\n            } else {\n                String seperator = (authority != null) ? \"/\" : \"\";\n                path = seperator + spec.substring(start, limit);\n            }\n        } else if (queryOnly && path != null) {\n            int ind = path.lastIndexOf('/');\n            if (ind < 0)\n                ind = 0;\n            path = path.substring(0, ind) + \"/\";\n        }\n        if (path == null)\n            path = \"\";\n\n        if (isRelPath) {\n            // Remove embedded /./\n            while ((i = path.indexOf(\"/./\")) >= 0) {\n                path = path.substring(0, i) + path.substring(i + 2);\n            }\n            // Remove embedded /../ if possible\n            i = 0;\n            while ((i = path.indexOf(\"/../\", i)) >= 0) {\n                /*\n                 * A \"/../\" will cancel the previous segment and itself,\n                 * unless that segment is a \"/../\" itself\n                 * i.e. \"/a/b/../c\" becomes \"/a/c\"\n                 * but \"/../../a\" should stay unchanged\n                 */\n                if (i > 0 && (limit = path.lastIndexOf('/', i - 1)) >= 0 &&\n                    (path.indexOf(\"/../\", limit) != 0)) {\n                    path = path.substring(0, limit) + path.substring(i + 3);\n                    i = 0;\n                } else {\n                    i = i + 3;\n                }\n            }\n            // Remove trailing .. if possible\n            while (path.endsWith(\"/..\")) {\n                i = path.indexOf(\"/..\");\n                if ((limit = path.lastIndexOf('/', i - 1)) >= 0) {\n                    path = path.substring(0, limit+1);\n                } else {\n                    break;\n                }\n            }\n            // Remove starting .\n            if (path.startsWith(\"./\") && path.length() > 2)\n                path = path.substring(2);\n\n            // Remove trailing .\n            if (path.endsWith(\"/.\"))\n                path = path.substring(0, path.length() -1);\n        }\n\n        setURL(u, protocol, host, port, authority, userInfo, path, query, ref);\n    }"}
{"Number":"379","API Relative Path":"java.net.URLStreamHandler.java-parseURL(URL-String-int-int)","Corresponding Source":"/**\n     * Parses the string representation of a {@code URL} into a\n     * {@code URL} object.\n     * <p>\n     * If there is any inherited context, then it has already been\n     * copied into the {@code URL} argument.\n     * <p>\n     * The {@code parseURL} method of {@code URLStreamHandler}\n     * parses the string representation as if it were an\n     * {@code http} specification. Most URL protocol families have a\n     * similar parsing. A stream protocol handler for a protocol that has\n     * a different syntax must override this routine.\n     *\n     * @param   u       the {@code URL} to receive the result of parsing\n     *                  the spec.\n     * @param   spec    the {@code String} representing the URL that\n     *                  must be parsed.\n     * @param   start   the character index at which to begin parsing. This is\n     *                  just past the '{@code :}' (if there is one) that\n     *                  specifies the determination of the protocol name.\n     * @param   limit   the character position to stop parsing at. This is the\n     *                  end of the string or the position of the\n     *                  \"{@code #}\" character, if present. All information\n     *                  after the sharp sign indicates an anchor.\n     */\n    protected void parseURL(URL u, String spec, int start, int limit) {\n        // These fields may receive context content if this was relative URL\n        String protocol = u.getProtocol();\n        String authority = u.getAuthority();\n        String userInfo = u.getUserInfo();\n        String host = u.getHost();\n        int port = u.getPort();\n        String path = u.getPath();\n        String query = u.getQuery();\n\n        // This field has already been parsed\n        String ref = u.getRef();\n\n        boolean isRelPath = false;\n        boolean queryOnly = false;\n\n// FIX: should not assume query if opaque\n        // Strip off the query part\n        if (start < limit) {\n            int queryStart = spec.indexOf('?');\n            queryOnly = queryStart == start;\n            if ((queryStart != -1) && (queryStart < limit)) {\n                query = spec.substring(queryStart+1, limit);\n                if (limit > queryStart)\n                    limit = queryStart;\n                spec = spec.substring(0, queryStart);\n            }\n        }\n\n        int i = 0;\n        // Parse the authority part if any\n        boolean isUNCName = (start <= limit - 4) &&\n                        (spec.charAt(start) == '/') &&\n                        (spec.charAt(start + 1) == '/') &&\n                        (spec.charAt(start + 2) == '/') &&\n                        (spec.charAt(start + 3) == '/');\n        if (!isUNCName && (start <= limit - 2) && (spec.charAt(start) == '/') &&\n            (spec.charAt(start + 1) == '/')) {\n            start += 2;\n            i = spec.indexOf('/', start);\n            if (i < 0 || i > limit) {\n                i = spec.indexOf('?', start);\n                if (i < 0 || i > limit)\n                    i = limit;\n            }\n\n            host = authority = spec.substring(start, i);\n\n            int ind = authority.indexOf('@');\n            if (ind != -1) {\n                if (ind != authority.lastIndexOf('@')) {\n                    // more than one '@' in authority. This is not server based\n                    userInfo = null;\n                    host = null;\n                } else {\n                    userInfo = authority.substring(0, ind);\n                    host = authority.substring(ind+1);\n                }\n            } else {\n                userInfo = null;\n            }\n            if (host != null) {\n                // If the host is surrounded by [ and ] then its an IPv6\n                // literal address as specified in RFC2732\n                if (host.length()>0 && (host.charAt(0) == '[')) {\n                    if ((ind = host.indexOf(']')) > 2) {\n\n                        String nhost = host ;\n                        host = nhost.substring(0,ind+1);\n                        if (!IPAddressUtil.\n                            isIPv6LiteralAddress(host.substring(1, ind))) {\n                            throw new IllegalArgumentException(\n                                \"Invalid host: \"+ host);\n                        }\n\n                        port = -1 ;\n                        if (nhost.length() > ind+1) {\n                            if (nhost.charAt(ind+1) == ':') {\n                                ++ind ;\n                                // port can be null according to RFC2396\n                                if (nhost.length() > (ind + 1)) {\n                                    port = Integer.parseInt(nhost.substring(ind+1));\n                                }\n                            } else {\n                                throw new IllegalArgumentException(\n                                    \"Invalid authority field: \" + authority);\n                            }\n                        }\n                    } else {\n                        throw new IllegalArgumentException(\n                            \"Invalid authority field: \" + authority);\n                    }\n                } else {\n                    ind = host.indexOf(':');\n                    port = -1;\n                    if (ind >= 0) {\n                        // port can be null according to RFC2396\n                        if (host.length() > (ind + 1)) {\n                            port = Integer.parseInt(host.substring(ind + 1));\n                        }\n                        host = host.substring(0, ind);\n                    }\n                }\n            } else {\n                host = \"\";\n            }\n            if (port < -1)\n                throw new IllegalArgumentException(\"Invalid port number :\" +\n                                                   port);\n            start = i;\n            // If the authority is defined then the path is defined by the\n            // spec only; See RFC 2396 Section 5.2.4.\n            if (authority != null && authority.length() > 0)\n                path = \"\";\n        }\n\n        if (host == null) {\n            host = \"\";\n        }\n\n        // Parse the file path if any\n        if (start < limit) {\n            if (spec.charAt(start) == '/') {\n                path = spec.substring(start, limit);\n            } else if (path != null && path.length() > 0) {\n                isRelPath = true;\n                int ind = path.lastIndexOf('/');\n                String seperator = \"\";\n                if (ind == -1 && authority != null)\n                    seperator = \"/\";\n                path = path.substring(0, ind + 1) + seperator +\n                         spec.substring(start, limit);\n\n            } else {\n                String seperator = (authority != null) ? \"/\" : \"\";\n                path = seperator + spec.substring(start, limit);\n            }\n        } else if (queryOnly && path != null) {\n            int ind = path.lastIndexOf('/');\n            if (ind < 0)\n                ind = 0;\n            path = path.substring(0, ind) + \"/\";\n        }\n        if (path == null)\n            path = \"\";\n\n        if (isRelPath) {\n            // Remove embedded /./\n            while ((i = path.indexOf(\"/./\")) >= 0) {\n                path = path.substring(0, i) + path.substring(i + 2);\n            }\n            // Remove embedded /../ if possible\n            i = 0;\n            while ((i = path.indexOf(\"/../\", i)) >= 0) {\n                /*\n                 * A \"/../\" will cancel the previous segment and itself,\n                 * unless that segment is a \"/../\" itself\n                 * i.e. \"/a/b/../c\" becomes \"/a/c\"\n                 * but \"/../../a\" should stay unchanged\n                 */\n                if (i > 0 && (limit = path.lastIndexOf('/', i - 1)) >= 0 &&\n                    (path.indexOf(\"/../\", limit) != 0)) {\n                    path = path.substring(0, limit) + path.substring(i + 3);\n                    i = 0;\n                } else {\n                    i = i + 3;\n                }\n            }\n            // Remove trailing .. if possible\n            while (path.endsWith(\"/..\")) {\n                i = path.indexOf(\"/..\");\n                if ((limit = path.lastIndexOf('/', i - 1)) >= 0) {\n                    path = path.substring(0, limit+1);\n                } else {\n                    break;\n                }\n            }\n            // Remove starting .\n            if (path.startsWith(\"./\") && path.length() > 2)\n                path = path.substring(2);\n\n            // Remove trailing .\n            if (path.endsWith(\"/.\"))\n                path = path.substring(0, path.length() -1);\n        }\n\n        setURL(u, protocol, host, port, authority, userInfo, path, query, ref);\n    }"}
{"Number":"380","API Relative Path":"java.net.URLStreamHandler.java-parseURL(URL-String-int-int)","Corresponding Source":"/**\n     * Parses the string representation of a {@code URL} into a\n     * {@code URL} object.\n     * <p>\n     * If there is any inherited context, then it has already been\n     * copied into the {@code URL} argument.\n     * <p>\n     * The {@code parseURL} method of {@code URLStreamHandler}\n     * parses the string representation as if it were an\n     * {@code http} specification. Most URL protocol families have a\n     * similar parsing. A stream protocol handler for a protocol that has\n     * a different syntax must override this routine.\n     *\n     * @param   u       the {@code URL} to receive the result of parsing\n     *                  the spec.\n     * @param   spec    the {@code String} representing the URL that\n     *                  must be parsed.\n     * @param   start   the character index at which to begin parsing. This is\n     *                  just past the '{@code :}' (if there is one) that\n     *                  specifies the determination of the protocol name.\n     * @param   limit   the character position to stop parsing at. This is the\n     *                  end of the string or the position of the\n     *                  \"{@code #}\" character, if present. All information\n     *                  after the sharp sign indicates an anchor.\n     */\n    protected void parseURL(URL u, String spec, int start, int limit) {\n        // These fields may receive context content if this was relative URL\n        String protocol = u.getProtocol();\n        String authority = u.getAuthority();\n        String userInfo = u.getUserInfo();\n        String host = u.getHost();\n        int port = u.getPort();\n        String path = u.getPath();\n        String query = u.getQuery();\n\n        // This field has already been parsed\n        String ref = u.getRef();\n\n        boolean isRelPath = false;\n        boolean queryOnly = false;\n\n// FIX: should not assume query if opaque\n        // Strip off the query part\n        if (start < limit) {\n            int queryStart = spec.indexOf('?');\n            queryOnly = queryStart == start;\n            if ((queryStart != -1) && (queryStart < limit)) {\n                query = spec.substring(queryStart+1, limit);\n                if (limit > queryStart)\n                    limit = queryStart;\n                spec = spec.substring(0, queryStart);\n            }\n        }\n\n        int i = 0;\n        // Parse the authority part if any\n        boolean isUNCName = (start <= limit - 4) &&\n                        (spec.charAt(start) == '/') &&\n                        (spec.charAt(start + 1) == '/') &&\n                        (spec.charAt(start + 2) == '/') &&\n                        (spec.charAt(start + 3) == '/');\n        if (!isUNCName && (start <= limit - 2) && (spec.charAt(start) == '/') &&\n            (spec.charAt(start + 1) == '/')) {\n            start += 2;\n            i = spec.indexOf('/', start);\n            if (i < 0 || i > limit) {\n                i = spec.indexOf('?', start);\n                if (i < 0 || i > limit)\n                    i = limit;\n            }\n\n            host = authority = spec.substring(start, i);\n\n            int ind = authority.indexOf('@');\n            if (ind != -1) {\n                if (ind != authority.lastIndexOf('@')) {\n                    // more than one '@' in authority. This is not server based\n                    userInfo = null;\n                    host = null;\n                } else {\n                    userInfo = authority.substring(0, ind);\n                    host = authority.substring(ind+1);\n                }\n            } else {\n                userInfo = null;\n            }\n            if (host != null) {\n                // If the host is surrounded by [ and ] then its an IPv6\n                // literal address as specified in RFC2732\n                if (host.length()>0 && (host.charAt(0) == '[')) {\n                    if ((ind = host.indexOf(']')) > 2) {\n\n                        String nhost = host ;\n                        host = nhost.substring(0,ind+1);\n                        if (!IPAddressUtil.\n                            isIPv6LiteralAddress(host.substring(1, ind))) {\n                            throw new IllegalArgumentException(\n                                \"Invalid host: \"+ host);\n                        }\n\n                        port = -1 ;\n                        if (nhost.length() > ind+1) {\n                            if (nhost.charAt(ind+1) == ':') {\n                                ++ind ;\n                                // port can be null according to RFC2396\n                                if (nhost.length() > (ind + 1)) {\n                                    port = Integer.parseInt(nhost.substring(ind+1));\n                                }\n                            } else {\n                                throw new IllegalArgumentException(\n                                    \"Invalid authority field: \" + authority);\n                            }\n                        }\n                    } else {\n                        throw new IllegalArgumentException(\n                            \"Invalid authority field: \" + authority);\n                    }\n                } else {\n                    ind = host.indexOf(':');\n                    port = -1;\n                    if (ind >= 0) {\n                        // port can be null according to RFC2396\n                        if (host.length() > (ind + 1)) {\n                            port = Integer.parseInt(host.substring(ind + 1));\n                        }\n                        host = host.substring(0, ind);\n                    }\n                }\n            } else {\n                host = \"\";\n            }\n            if (port < -1)\n                throw new IllegalArgumentException(\"Invalid port number :\" +\n                                                   port);\n            start = i;\n            // If the authority is defined then the path is defined by the\n            // spec only; See RFC 2396 Section 5.2.4.\n            if (authority != null && authority.length() > 0)\n                path = \"\";\n        }\n\n        if (host == null) {\n            host = \"\";\n        }\n\n        // Parse the file path if any\n        if (start < limit) {\n            if (spec.charAt(start) == '/') {\n                path = spec.substring(start, limit);\n            } else if (path != null && path.length() > 0) {\n                isRelPath = true;\n                int ind = path.lastIndexOf('/');\n                String seperator = \"\";\n                if (ind == -1 && authority != null)\n                    seperator = \"/\";\n                path = path.substring(0, ind + 1) + seperator +\n                         spec.substring(start, limit);\n\n            } else {\n                String seperator = (authority != null) ? \"/\" : \"\";\n                path = seperator + spec.substring(start, limit);\n            }\n        } else if (queryOnly && path != null) {\n            int ind = path.lastIndexOf('/');\n            if (ind < 0)\n                ind = 0;\n            path = path.substring(0, ind) + \"/\";\n        }\n        if (path == null)\n            path = \"\";\n\n        if (isRelPath) {\n            // Remove embedded /./\n            while ((i = path.indexOf(\"/./\")) >= 0) {\n                path = path.substring(0, i) + path.substring(i + 2);\n            }\n            // Remove embedded /../ if possible\n            i = 0;\n            while ((i = path.indexOf(\"/../\", i)) >= 0) {\n                /*\n                 * A \"/../\" will cancel the previous segment and itself,\n                 * unless that segment is a \"/../\" itself\n                 * i.e. \"/a/b/../c\" becomes \"/a/c\"\n                 * but \"/../../a\" should stay unchanged\n                 */\n                if (i > 0 && (limit = path.lastIndexOf('/', i - 1)) >= 0 &&\n                    (path.indexOf(\"/../\", limit) != 0)) {\n                    path = path.substring(0, limit) + path.substring(i + 3);\n                    i = 0;\n                } else {\n                    i = i + 3;\n                }\n            }\n            // Remove trailing .. if possible\n            while (path.endsWith(\"/..\")) {\n                i = path.indexOf(\"/..\");\n                if ((limit = path.lastIndexOf('/', i - 1)) >= 0) {\n                    path = path.substring(0, limit+1);\n                } else {\n                    break;\n                }\n            }\n            // Remove starting .\n            if (path.startsWith(\"./\") && path.length() > 2)\n                path = path.substring(2);\n\n            // Remove trailing .\n            if (path.endsWith(\"/.\"))\n                path = path.substring(0, path.length() -1);\n        }\n\n        setURL(u, protocol, host, port, authority, userInfo, path, query, ref);\n    }"}
{"Number":"381","API Relative Path":"java.net.URLStreamHandler.java-parseURL(URL-String-int-int)","Corresponding Source":"/**\n     * Parses the string representation of a {@code URL} into a\n     * {@code URL} object.\n     * <p>\n     * If there is any inherited context, then it has already been\n     * copied into the {@code URL} argument.\n     * <p>\n     * The {@code parseURL} method of {@code URLStreamHandler}\n     * parses the string representation as if it were an\n     * {@code http} specification. Most URL protocol families have a\n     * similar parsing. A stream protocol handler for a protocol that has\n     * a different syntax must override this routine.\n     *\n     * @param   u       the {@code URL} to receive the result of parsing\n     *                  the spec.\n     * @param   spec    the {@code String} representing the URL that\n     *                  must be parsed.\n     * @param   start   the character index at which to begin parsing. This is\n     *                  just past the '{@code :}' (if there is one) that\n     *                  specifies the determination of the protocol name.\n     * @param   limit   the character position to stop parsing at. This is the\n     *                  end of the string or the position of the\n     *                  \"{@code #}\" character, if present. All information\n     *                  after the sharp sign indicates an anchor.\n     */\n    protected void parseURL(URL u, String spec, int start, int limit) {\n        // These fields may receive context content if this was relative URL\n        String protocol = u.getProtocol();\n        String authority = u.getAuthority();\n        String userInfo = u.getUserInfo();\n        String host = u.getHost();\n        int port = u.getPort();\n        String path = u.getPath();\n        String query = u.getQuery();\n\n        // This field has already been parsed\n        String ref = u.getRef();\n\n        boolean isRelPath = false;\n        boolean queryOnly = false;\n\n// FIX: should not assume query if opaque\n        // Strip off the query part\n        if (start < limit) {\n            int queryStart = spec.indexOf('?');\n            queryOnly = queryStart == start;\n            if ((queryStart != -1) && (queryStart < limit)) {\n                query = spec.substring(queryStart+1, limit);\n                if (limit > queryStart)\n                    limit = queryStart;\n                spec = spec.substring(0, queryStart);\n            }\n        }\n\n        int i = 0;\n        // Parse the authority part if any\n        boolean isUNCName = (start <= limit - 4) &&\n                        (spec.charAt(start) == '/') &&\n                        (spec.charAt(start + 1) == '/') &&\n                        (spec.charAt(start + 2) == '/') &&\n                        (spec.charAt(start + 3) == '/');\n        if (!isUNCName && (start <= limit - 2) && (spec.charAt(start) == '/') &&\n            (spec.charAt(start + 1) == '/')) {\n            start += 2;\n            i = spec.indexOf('/', start);\n            if (i < 0 || i > limit) {\n                i = spec.indexOf('?', start);\n                if (i < 0 || i > limit)\n                    i = limit;\n            }\n\n            host = authority = spec.substring(start, i);\n\n            int ind = authority.indexOf('@');\n            if (ind != -1) {\n                if (ind != authority.lastIndexOf('@')) {\n                    // more than one '@' in authority. This is not server based\n                    userInfo = null;\n                    host = null;\n                } else {\n                    userInfo = authority.substring(0, ind);\n                    host = authority.substring(ind+1);\n                }\n            } else {\n                userInfo = null;\n            }\n            if (host != null) {\n                // If the host is surrounded by [ and ] then its an IPv6\n                // literal address as specified in RFC2732\n                if (host.length()>0 && (host.charAt(0) == '[')) {\n                    if ((ind = host.indexOf(']')) > 2) {\n\n                        String nhost = host ;\n                        host = nhost.substring(0,ind+1);\n                        if (!IPAddressUtil.\n                            isIPv6LiteralAddress(host.substring(1, ind))) {\n                            throw new IllegalArgumentException(\n                                \"Invalid host: \"+ host);\n                        }\n\n                        port = -1 ;\n                        if (nhost.length() > ind+1) {\n                            if (nhost.charAt(ind+1) == ':') {\n                                ++ind ;\n                                // port can be null according to RFC2396\n                                if (nhost.length() > (ind + 1)) {\n                                    port = Integer.parseInt(nhost.substring(ind+1));\n                                }\n                            } else {\n                                throw new IllegalArgumentException(\n                                    \"Invalid authority field: \" + authority);\n                            }\n                        }\n                    } else {\n                        throw new IllegalArgumentException(\n                            \"Invalid authority field: \" + authority);\n                    }\n                } else {\n                    ind = host.indexOf(':');\n                    port = -1;\n                    if (ind >= 0) {\n                        // port can be null according to RFC2396\n                        if (host.length() > (ind + 1)) {\n                            port = Integer.parseInt(host.substring(ind + 1));\n                        }\n                        host = host.substring(0, ind);\n                    }\n                }\n            } else {\n                host = \"\";\n            }\n            if (port < -1)\n                throw new IllegalArgumentException(\"Invalid port number :\" +\n                                                   port);\n            start = i;\n            // If the authority is defined then the path is defined by the\n            // spec only; See RFC 2396 Section 5.2.4.\n            if (authority != null && authority.length() > 0)\n                path = \"\";\n        }\n\n        if (host == null) {\n            host = \"\";\n        }\n\n        // Parse the file path if any\n        if (start < limit) {\n            if (spec.charAt(start) == '/') {\n                path = spec.substring(start, limit);\n            } else if (path != null && path.length() > 0) {\n                isRelPath = true;\n                int ind = path.lastIndexOf('/');\n                String seperator = \"\";\n                if (ind == -1 && authority != null)\n                    seperator = \"/\";\n                path = path.substring(0, ind + 1) + seperator +\n                         spec.substring(start, limit);\n\n            } else {\n                String seperator = (authority != null) ? \"/\" : \"\";\n                path = seperator + spec.substring(start, limit);\n            }\n        } else if (queryOnly && path != null) {\n            int ind = path.lastIndexOf('/');\n            if (ind < 0)\n                ind = 0;\n            path = path.substring(0, ind) + \"/\";\n        }\n        if (path == null)\n            path = \"\";\n\n        if (isRelPath) {\n            // Remove embedded /./\n            while ((i = path.indexOf(\"/./\")) >= 0) {\n                path = path.substring(0, i) + path.substring(i + 2);\n            }\n            // Remove embedded /../ if possible\n            i = 0;\n            while ((i = path.indexOf(\"/../\", i)) >= 0) {\n                /*\n                 * A \"/../\" will cancel the previous segment and itself,\n                 * unless that segment is a \"/../\" itself\n                 * i.e. \"/a/b/../c\" becomes \"/a/c\"\n                 * but \"/../../a\" should stay unchanged\n                 */\n                if (i > 0 && (limit = path.lastIndexOf('/', i - 1)) >= 0 &&\n                    (path.indexOf(\"/../\", limit) != 0)) {\n                    path = path.substring(0, limit) + path.substring(i + 3);\n                    i = 0;\n                } else {\n                    i = i + 3;\n                }\n            }\n            // Remove trailing .. if possible\n            while (path.endsWith(\"/..\")) {\n                i = path.indexOf(\"/..\");\n                if ((limit = path.lastIndexOf('/', i - 1)) >= 0) {\n                    path = path.substring(0, limit+1);\n                } else {\n                    break;\n                }\n            }\n            // Remove starting .\n            if (path.startsWith(\"./\") && path.length() > 2)\n                path = path.substring(2);\n\n            // Remove trailing .\n            if (path.endsWith(\"/.\"))\n                path = path.substring(0, path.length() -1);\n        }\n\n        setURL(u, protocol, host, port, authority, userInfo, path, query, ref);\n    }"}
{"Number":"382","API Relative Path":"java.net.URLStreamHandler.java-parseURL(URL-String-int-int)","Corresponding Source":"/**\n     * Parses the string representation of a {@code URL} into a\n     * {@code URL} object.\n     * <p>\n     * If there is any inherited context, then it has already been\n     * copied into the {@code URL} argument.\n     * <p>\n     * The {@code parseURL} method of {@code URLStreamHandler}\n     * parses the string representation as if it were an\n     * {@code http} specification. Most URL protocol families have a\n     * similar parsing. A stream protocol handler for a protocol that has\n     * a different syntax must override this routine.\n     *\n     * @param   u       the {@code URL} to receive the result of parsing\n     *                  the spec.\n     * @param   spec    the {@code String} representing the URL that\n     *                  must be parsed.\n     * @param   start   the character index at which to begin parsing. This is\n     *                  just past the '{@code :}' (if there is one) that\n     *                  specifies the determination of the protocol name.\n     * @param   limit   the character position to stop parsing at. This is the\n     *                  end of the string or the position of the\n     *                  \"{@code #}\" character, if present. All information\n     *                  after the sharp sign indicates an anchor.\n     */\n    protected void parseURL(URL u, String spec, int start, int limit) {\n        // These fields may receive context content if this was relative URL\n        String protocol = u.getProtocol();\n        String authority = u.getAuthority();\n        String userInfo = u.getUserInfo();\n        String host = u.getHost();\n        int port = u.getPort();\n        String path = u.getPath();\n        String query = u.getQuery();\n\n        // This field has already been parsed\n        String ref = u.getRef();\n\n        boolean isRelPath = false;\n        boolean queryOnly = false;\n\n// FIX: should not assume query if opaque\n        // Strip off the query part\n        if (start < limit) {\n            int queryStart = spec.indexOf('?');\n            queryOnly = queryStart == start;\n            if ((queryStart != -1) && (queryStart < limit)) {\n                query = spec.substring(queryStart+1, limit);\n                if (limit > queryStart)\n                    limit = queryStart;\n                spec = spec.substring(0, queryStart);\n            }\n        }\n\n        int i = 0;\n        // Parse the authority part if any\n        boolean isUNCName = (start <= limit - 4) &&\n                        (spec.charAt(start) == '/') &&\n                        (spec.charAt(start + 1) == '/') &&\n                        (spec.charAt(start + 2) == '/') &&\n                        (spec.charAt(start + 3) == '/');\n        if (!isUNCName && (start <= limit - 2) && (spec.charAt(start) == '/') &&\n            (spec.charAt(start + 1) == '/')) {\n            start += 2;\n            i = spec.indexOf('/', start);\n            if (i < 0 || i > limit) {\n                i = spec.indexOf('?', start);\n                if (i < 0 || i > limit)\n                    i = limit;\n            }\n\n            host = authority = spec.substring(start, i);\n\n            int ind = authority.indexOf('@');\n            if (ind != -1) {\n                if (ind != authority.lastIndexOf('@')) {\n                    // more than one '@' in authority. This is not server based\n                    userInfo = null;\n                    host = null;\n                } else {\n                    userInfo = authority.substring(0, ind);\n                    host = authority.substring(ind+1);\n                }\n            } else {\n                userInfo = null;\n            }\n            if (host != null) {\n                // If the host is surrounded by [ and ] then its an IPv6\n                // literal address as specified in RFC2732\n                if (host.length()>0 && (host.charAt(0) == '[')) {\n                    if ((ind = host.indexOf(']')) > 2) {\n\n                        String nhost = host ;\n                        host = nhost.substring(0,ind+1);\n                        if (!IPAddressUtil.\n                            isIPv6LiteralAddress(host.substring(1, ind))) {\n                            throw new IllegalArgumentException(\n                                \"Invalid host: \"+ host);\n                        }\n\n                        port = -1 ;\n                        if (nhost.length() > ind+1) {\n                            if (nhost.charAt(ind+1) == ':') {\n                                ++ind ;\n                                // port can be null according to RFC2396\n                                if (nhost.length() > (ind + 1)) {\n                                    port = Integer.parseInt(nhost.substring(ind+1));\n                                }\n                            } else {\n                                throw new IllegalArgumentException(\n                                    \"Invalid authority field: \" + authority);\n                            }\n                        }\n                    } else {\n                        throw new IllegalArgumentException(\n                            \"Invalid authority field: \" + authority);\n                    }\n                } else {\n                    ind = host.indexOf(':');\n                    port = -1;\n                    if (ind >= 0) {\n                        // port can be null according to RFC2396\n                        if (host.length() > (ind + 1)) {\n                            port = Integer.parseInt(host.substring(ind + 1));\n                        }\n                        host = host.substring(0, ind);\n                    }\n                }\n            } else {\n                host = \"\";\n            }\n            if (port < -1)\n                throw new IllegalArgumentException(\"Invalid port number :\" +\n                                                   port);\n            start = i;\n            // If the authority is defined then the path is defined by the\n            // spec only; See RFC 2396 Section 5.2.4.\n            if (authority != null && authority.length() > 0)\n                path = \"\";\n        }\n\n        if (host == null) {\n            host = \"\";\n        }\n\n        // Parse the file path if any\n        if (start < limit) {\n            if (spec.charAt(start) == '/') {\n                path = spec.substring(start, limit);\n            } else if (path != null && path.length() > 0) {\n                isRelPath = true;\n                int ind = path.lastIndexOf('/');\n                String seperator = \"\";\n                if (ind == -1 && authority != null)\n                    seperator = \"/\";\n                path = path.substring(0, ind + 1) + seperator +\n                         spec.substring(start, limit);\n\n            } else {\n                String seperator = (authority != null) ? \"/\" : \"\";\n                path = seperator + spec.substring(start, limit);\n            }\n        } else if (queryOnly && path != null) {\n            int ind = path.lastIndexOf('/');\n            if (ind < 0)\n                ind = 0;\n            path = path.substring(0, ind) + \"/\";\n        }\n        if (path == null)\n            path = \"\";\n\n        if (isRelPath) {\n            // Remove embedded /./\n            while ((i = path.indexOf(\"/./\")) >= 0) {\n                path = path.substring(0, i) + path.substring(i + 2);\n            }\n            // Remove embedded /../ if possible\n            i = 0;\n            while ((i = path.indexOf(\"/../\", i)) >= 0) {\n                /*\n                 * A \"/../\" will cancel the previous segment and itself,\n                 * unless that segment is a \"/../\" itself\n                 * i.e. \"/a/b/../c\" becomes \"/a/c\"\n                 * but \"/../../a\" should stay unchanged\n                 */\n                if (i > 0 && (limit = path.lastIndexOf('/', i - 1)) >= 0 &&\n                    (path.indexOf(\"/../\", limit) != 0)) {\n                    path = path.substring(0, limit) + path.substring(i + 3);\n                    i = 0;\n                } else {\n                    i = i + 3;\n                }\n            }\n            // Remove trailing .. if possible\n            while (path.endsWith(\"/..\")) {\n                i = path.indexOf(\"/..\");\n                if ((limit = path.lastIndexOf('/', i - 1)) >= 0) {\n                    path = path.substring(0, limit+1);\n                } else {\n                    break;\n                }\n            }\n            // Remove starting .\n            if (path.startsWith(\"./\") && path.length() > 2)\n                path = path.substring(2);\n\n            // Remove trailing .\n            if (path.endsWith(\"/.\"))\n                path = path.substring(0, path.length() -1);\n        }\n\n        setURL(u, protocol, host, port, authority, userInfo, path, query, ref);\n    }"}
{"Number":"383","API Relative Path":"java.net.URLStreamHandler.java-parseURL(URL-String-int-int)","Corresponding Source":"/**\n     * Parses the string representation of a {@code URL} into a\n     * {@code URL} object.\n     * <p>\n     * If there is any inherited context, then it has already been\n     * copied into the {@code URL} argument.\n     * <p>\n     * The {@code parseURL} method of {@code URLStreamHandler}\n     * parses the string representation as if it were an\n     * {@code http} specification. Most URL protocol families have a\n     * similar parsing. A stream protocol handler for a protocol that has\n     * a different syntax must override this routine.\n     *\n     * @param   u       the {@code URL} to receive the result of parsing\n     *                  the spec.\n     * @param   spec    the {@code String} representing the URL that\n     *                  must be parsed.\n     * @param   start   the character index at which to begin parsing. This is\n     *                  just past the '{@code :}' (if there is one) that\n     *                  specifies the determination of the protocol name.\n     * @param   limit   the character position to stop parsing at. This is the\n     *                  end of the string or the position of the\n     *                  \"{@code #}\" character, if present. All information\n     *                  after the sharp sign indicates an anchor.\n     */\n    protected void parseURL(URL u, String spec, int start, int limit) {\n        // These fields may receive context content if this was relative URL\n        String protocol = u.getProtocol();\n        String authority = u.getAuthority();\n        String userInfo = u.getUserInfo();\n        String host = u.getHost();\n        int port = u.getPort();\n        String path = u.getPath();\n        String query = u.getQuery();\n\n        // This field has already been parsed\n        String ref = u.getRef();\n\n        boolean isRelPath = false;\n        boolean queryOnly = false;\n\n// FIX: should not assume query if opaque\n        // Strip off the query part\n        if (start < limit) {\n            int queryStart = spec.indexOf('?');\n            queryOnly = queryStart == start;\n            if ((queryStart != -1) && (queryStart < limit)) {\n                query = spec.substring(queryStart+1, limit);\n                if (limit > queryStart)\n                    limit = queryStart;\n                spec = spec.substring(0, queryStart);\n            }\n        }\n\n        int i = 0;\n        // Parse the authority part if any\n        boolean isUNCName = (start <= limit - 4) &&\n                        (spec.charAt(start) == '/') &&\n                        (spec.charAt(start + 1) == '/') &&\n                        (spec.charAt(start + 2) == '/') &&\n                        (spec.charAt(start + 3) == '/');\n        if (!isUNCName && (start <= limit - 2) && (spec.charAt(start) == '/') &&\n            (spec.charAt(start + 1) == '/')) {\n            start += 2;\n            i = spec.indexOf('/', start);\n            if (i < 0 || i > limit) {\n                i = spec.indexOf('?', start);\n                if (i < 0 || i > limit)\n                    i = limit;\n            }\n\n            host = authority = spec.substring(start, i);\n\n            int ind = authority.indexOf('@');\n            if (ind != -1) {\n                if (ind != authority.lastIndexOf('@')) {\n                    // more than one '@' in authority. This is not server based\n                    userInfo = null;\n                    host = null;\n                } else {\n                    userInfo = authority.substring(0, ind);\n                    host = authority.substring(ind+1);\n                }\n            } else {\n                userInfo = null;\n            }\n            if (host != null) {\n                // If the host is surrounded by [ and ] then its an IPv6\n                // literal address as specified in RFC2732\n                if (host.length()>0 && (host.charAt(0) == '[')) {\n                    if ((ind = host.indexOf(']')) > 2) {\n\n                        String nhost = host ;\n                        host = nhost.substring(0,ind+1);\n                        if (!IPAddressUtil.\n                            isIPv6LiteralAddress(host.substring(1, ind))) {\n                            throw new IllegalArgumentException(\n                                \"Invalid host: \"+ host);\n                        }\n\n                        port = -1 ;\n                        if (nhost.length() > ind+1) {\n                            if (nhost.charAt(ind+1) == ':') {\n                                ++ind ;\n                                // port can be null according to RFC2396\n                                if (nhost.length() > (ind + 1)) {\n                                    port = Integer.parseInt(nhost.substring(ind+1));\n                                }\n                            } else {\n                                throw new IllegalArgumentException(\n                                    \"Invalid authority field: \" + authority);\n                            }\n                        }\n                    } else {\n                        throw new IllegalArgumentException(\n                            \"Invalid authority field: \" + authority);\n                    }\n                } else {\n                    ind = host.indexOf(':');\n                    port = -1;\n                    if (ind >= 0) {\n                        // port can be null according to RFC2396\n                        if (host.length() > (ind + 1)) {\n                            port = Integer.parseInt(host.substring(ind + 1));\n                        }\n                        host = host.substring(0, ind);\n                    }\n                }\n            } else {\n                host = \"\";\n            }\n            if (port < -1)\n                throw new IllegalArgumentException(\"Invalid port number :\" +\n                                                   port);\n            start = i;\n            // If the authority is defined then the path is defined by the\n            // spec only; See RFC 2396 Section 5.2.4.\n            if (authority != null && authority.length() > 0)\n                path = \"\";\n        }\n\n        if (host == null) {\n            host = \"\";\n        }\n\n        // Parse the file path if any\n        if (start < limit) {\n            if (spec.charAt(start) == '/') {\n                path = spec.substring(start, limit);\n            } else if (path != null && path.length() > 0) {\n                isRelPath = true;\n                int ind = path.lastIndexOf('/');\n                String seperator = \"\";\n                if (ind == -1 && authority != null)\n                    seperator = \"/\";\n                path = path.substring(0, ind + 1) + seperator +\n                         spec.substring(start, limit);\n\n            } else {\n                String seperator = (authority != null) ? \"/\" : \"\";\n                path = seperator + spec.substring(start, limit);\n            }\n        } else if (queryOnly && path != null) {\n            int ind = path.lastIndexOf('/');\n            if (ind < 0)\n                ind = 0;\n            path = path.substring(0, ind) + \"/\";\n        }\n        if (path == null)\n            path = \"\";\n\n        if (isRelPath) {\n            // Remove embedded /./\n            while ((i = path.indexOf(\"/./\")) >= 0) {\n                path = path.substring(0, i) + path.substring(i + 2);\n            }\n            // Remove embedded /../ if possible\n            i = 0;\n            while ((i = path.indexOf(\"/../\", i)) >= 0) {\n                /*\n                 * A \"/../\" will cancel the previous segment and itself,\n                 * unless that segment is a \"/../\" itself\n                 * i.e. \"/a/b/../c\" becomes \"/a/c\"\n                 * but \"/../../a\" should stay unchanged\n                 */\n                if (i > 0 && (limit = path.lastIndexOf('/', i - 1)) >= 0 &&\n                    (path.indexOf(\"/../\", limit) != 0)) {\n                    path = path.substring(0, limit) + path.substring(i + 3);\n                    i = 0;\n                } else {\n                    i = i + 3;\n                }\n            }\n            // Remove trailing .. if possible\n            while (path.endsWith(\"/..\")) {\n                i = path.indexOf(\"/..\");\n                if ((limit = path.lastIndexOf('/', i - 1)) >= 0) {\n                    path = path.substring(0, limit+1);\n                } else {\n                    break;\n                }\n            }\n            // Remove starting .\n            if (path.startsWith(\"./\") && path.length() > 2)\n                path = path.substring(2);\n\n            // Remove trailing .\n            if (path.endsWith(\"/.\"))\n                path = path.substring(0, path.length() -1);\n        }\n\n        setURL(u, protocol, host, port, authority, userInfo, path, query, ref);\n    }"}
{"Number":"384","API Relative Path":"java.net.URLStreamHandler.java-setURL(URL-String-String-int-String-String-String-String-String)","Corresponding Source":"/**\n     * Sets the fields of the {@code URL} argument to the indicated values.\n     * Only classes derived from URLStreamHandler are able\n     * to use this method to set the values of the URL fields.\n     *\n     * @param   u         the URL to modify.\n     * @param   protocol  the protocol name.\n     * @param   host      the remote host value for the URL.\n     * @param   port      the port on the remote machine.\n     * @param   authority the authority part for the URL.\n     * @param   userInfo the userInfo part of the URL.\n     * @param   path      the path component of the URL.\n     * @param   query     the query part for the URL.\n     * @param   ref       the reference.\n     * @exception       SecurityException       if the protocol handler of the URL is\n     *                                  different from this one\n     * @see     java.net.URL#set(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String)\n     * @since 1.3\n     */\n       protected void setURL(URL u, String protocol, String host, int port,\n                             String authority, String userInfo, String path,\n                             String query, String ref) {\n        if (this != u.handler) {\n            throw new SecurityException(\"handler for url different from \" +\n                                        \"this handler\");\n        }\n        // ensure that no one can reset the protocol on a given URL.\n        u.set(u.getProtocol(), host, port, authority, userInfo, path, query, ref);\n    }"}
{"Number":"385","API Relative Path":"java.nio.Buffer.java-checkIndex(int)","Corresponding Source":"/**\n     * Checks the given index against the limit, throwing an {@link\n     * IndexOutOfBoundsException} if it is not smaller than the limit\n     * or is smaller than zero.\n     */\n    final int checkIndex(int i) {                       // package-private\n        if ((i < 0) || (i >= limit))\n            throw new IndexOutOfBoundsException();\n        return i;\n    }"}
{"Number":"386","API Relative Path":"java.nio.Buffer.java-limit(int)","Corresponding Source":"/**\n     * Sets this buffer's limit.  If the position is larger than the new limit\n     * then it is set to the new limit.  If the mark is defined and larger than\n     * the new limit then it is discarded.\n     *\n     * @param  newLimit\n     *         The new limit value; must be non-negative\n     *         and no larger than this buffer's capacity\n     *\n     * @return  This buffer\n     *\n     * @throws  IllegalArgumentException\n     *          If the preconditions on <tt>newLimit<\/tt> do not hold\n     */\n    public final Buffer limit(int newLimit) {\n        if ((newLimit > capacity) || (newLimit < 0))\n            throw new IllegalArgumentException();\n        limit = newLimit;\n        if (position > limit) position = limit;\n        if (mark > limit) mark = -1;\n        return this;\n    }"}
{"Number":"387","API Relative Path":"java.nio.Buffer.java-position(int)","Corresponding Source":"/**\n     * Sets this buffer's position.  If the mark is defined and larger than the\n     * new position then it is discarded.\n     *\n     * @param  newPosition\n     *         The new position value; must be non-negative\n     *         and no larger than the current limit\n     *\n     * @return  This buffer\n     *\n     * @throws  IllegalArgumentException\n     *          If the preconditions on <tt>newPosition<\/tt> do not hold\n     */\n    public final Buffer position(int newPosition) {\n        if ((newPosition > limit) || (newPosition < 0))\n            throw new IllegalArgumentException();\n        position = newPosition;\n        if (mark > position) mark = -1;\n        return this;\n    }"}
{"Number":"388","API Relative Path":"java.nio.ByteBuffer.java-allocate(int)","Corresponding Source":"/**\n     * Allocates a new byte buffer.\n     *\n     * <p> The new buffer's position will be zero, its limit will be its\n     * capacity, its mark will be undefined, and each of its elements will be\n     * initialized to zero.  It will have a {@link #array backing array},\n     * and its {@link #arrayOffset array offset} will be zero.\n     *\n     * @param  capacity\n     *         The new buffer's capacity, in bytes\n     *\n     * @return  The new byte buffer\n     *\n     * @throws  IllegalArgumentException\n     *          If the <tt>capacity<\/tt> is a negative integer\n     */\n    public static ByteBuffer allocate(int capacity) {\n        if (capacity < 0)\n            throw new IllegalArgumentException();\n        return new HeapByteBuffer(capacity, capacity);\n    }"}
{"Number":"389","API Relative Path":"java.nio.ByteBuffer.java-get(byte[]-int-int)","Corresponding Source":"// -- Bulk get operations --\n\n    /**\n     * Relative bulk <i>get<\/i> method.\n     *\n     * <p> This method transfers bytes from this buffer into the given\n     * destination array.  If there are fewer bytes remaining in the\n     * buffer than are required to satisfy the request, that is, if\n     * <tt>length<\/tt>&nbsp;<tt>&gt;<\/tt>&nbsp;<tt>remaining()<\/tt>, then no\n     * bytes are transferred and a {@link BufferUnderflowException} is\n     * thrown.\n     *\n     * <p> Otherwise, this method copies <tt>length<\/tt> bytes from this\n     * buffer into the given array, starting at the current position of this\n     * buffer and at the given offset in the array.  The position of this\n     * buffer is then incremented by <tt>length<\/tt>.\n     *\n     * <p> In other words, an invocation of this method of the form\n     * <tt>src.get(dst,&nbsp;off,&nbsp;len)<\/tt> has exactly the same effect as\n     * the loop\n     *\n     * <pre>{@code\n     *     for (int i = off; i < off + len; i++)\n     *         dst[i] = src.get():\n     * }<\/pre>\n     *\n     * except that it first checks that there are sufficient bytes in\n     * this buffer and it is potentially much more efficient.\n     *\n     * @param  dst\n     *         The array into which bytes are to be written\n     *\n     * @param  offset\n     *         The offset within the array of the first byte to be\n     *         written; must be non-negative and no larger than\n     *         <tt>dst.length<\/tt>\n     *\n     * @param  length\n     *         The maximum number of bytes to be written to the given\n     *         array; must be non-negative and no larger than\n     *         <tt>dst.length - offset<\/tt>\n     *\n     * @return  This buffer\n     *\n     * @throws  BufferUnderflowException\n     *          If there are fewer than <tt>length<\/tt> bytes\n     *          remaining in this buffer\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the preconditions on the <tt>offset<\/tt> and <tt>length<\/tt>\n     *          parameters do not hold\n     */\n    public ByteBuffer get(byte[] dst, int offset, int length) {\n        checkBounds(offset, length, dst.length);\n        if (length > remaining())\n            throw new BufferUnderflowException();\n        int end = offset + length;\n        for (int i = offset; i < end; i++)\n            dst[i] = get();\n        return this;\n    }"}
{"Number":"390","API Relative Path":"java.nio.ByteBuffer.java-put(ByteBuffer)","Corresponding Source":"// -- Bulk put operations --\n\n    /**\n     * Relative bulk <i>put<\/i> method&nbsp;&nbsp;<i>(optional operation)<\/i>.\n     *\n     * <p> This method transfers the bytes remaining in the given source\n     * buffer into this buffer.  If there are more bytes remaining in the\n     * source buffer than in this buffer, that is, if\n     * <tt>src.remaining()<\/tt>&nbsp;<tt>&gt;<\/tt>&nbsp;<tt>remaining()<\/tt>,\n     * then no bytes are transferred and a {@link\n     * BufferOverflowException} is thrown.\n     *\n     * <p> Otherwise, this method copies\n     * <i>n<\/i>&nbsp;=&nbsp;<tt>src.remaining()<\/tt> bytes from the given\n     * buffer into this buffer, starting at each buffer's current position.\n     * The positions of both buffers are then incremented by <i>n<\/i>.\n     *\n     * <p> In other words, an invocation of this method of the form\n     * <tt>dst.put(src)<\/tt> has exactly the same effect as the loop\n     *\n     * <pre>\n     *     while (src.hasRemaining())\n     *         dst.put(src.get()); <\/pre>\n     *\n     * except that it first checks that there is sufficient space in this\n     * buffer and it is potentially much more efficient.\n     *\n     * @param  src\n     *         The source buffer from which bytes are to be read;\n     *         must not be this buffer\n     *\n     * @return  This buffer\n     *\n     * @throws  BufferOverflowException\n     *          If there is insufficient space in this buffer\n     *          for the remaining bytes in the source buffer\n     *\n     * @throws  IllegalArgumentException\n     *          If the source buffer is this buffer\n     *\n     * @throws  ReadOnlyBufferException\n     *          If this buffer is read-only\n     */\n    public ByteBuffer put(ByteBuffer src) {\n        if (src == this)\n            throw new IllegalArgumentException();\n        if (isReadOnly())\n            throw new ReadOnlyBufferException();\n        int n = src.remaining();\n        if (n > remaining())\n            throw new BufferOverflowException();\n        for (int i = 0; i < n; i++)\n            put(src.get());\n        return this;\n    }"}
{"Number":"391","API Relative Path":"java.nio.ByteBuffer.java-put(byte[]-int-int)","Corresponding Source":"/**\n     * Relative bulk <i>put<\/i> method&nbsp;&nbsp;<i>(optional operation)<\/i>.\n     *\n     * <p> This method transfers bytes into this buffer from the given\n     * source array.  If there are more bytes to be copied from the array\n     * than remain in this buffer, that is, if\n     * <tt>length<\/tt>&nbsp;<tt>&gt;<\/tt>&nbsp;<tt>remaining()<\/tt>, then no\n     * bytes are transferred and a {@link BufferOverflowException} is\n     * thrown.\n     *\n     * <p> Otherwise, this method copies <tt>length<\/tt> bytes from the\n     * given array into this buffer, starting at the given offset in the array\n     * and at the current position of this buffer.  The position of this buffer\n     * is then incremented by <tt>length<\/tt>.\n     *\n     * <p> In other words, an invocation of this method of the form\n     * <tt>dst.put(src,&nbsp;off,&nbsp;len)<\/tt> has exactly the same effect as\n     * the loop\n     *\n     * <pre>{@code\n     *     for (int i = off; i < off + len; i++)\n     *         dst.put(a[i]);\n     * }<\/pre>\n     *\n     * except that it first checks that there is sufficient space in this\n     * buffer and it is potentially much more efficient.\n     *\n     * @param  src\n     *         The array from which bytes are to be read\n     *\n     * @param  offset\n     *         The offset within the array of the first byte to be read;\n     *         must be non-negative and no larger than <tt>array.length<\/tt>\n     *\n     * @param  length\n     *         The number of bytes to be read from the given array;\n     *         must be non-negative and no larger than\n     *         <tt>array.length - offset<\/tt>\n     *\n     * @return  This buffer\n     *\n     * @throws  BufferOverflowException\n     *          If there is insufficient space in this buffer\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the preconditions on the <tt>offset<\/tt> and <tt>length<\/tt>\n     *          parameters do not hold\n     *\n     * @throws  ReadOnlyBufferException\n     *          If this buffer is read-only\n     */\n    public ByteBuffer put(byte[] src, int offset, int length) {\n        checkBounds(offset, length, src.length);\n        if (length > remaining())\n            throw new BufferOverflowException();\n        int end = offset + length;\n        for (int i = offset; i < end; i++)\n            this.put(src[i]);\n        return this;\n    }"}
{"Number":"392","API Relative Path":"java.nio.channels.Channels.java-newChannel(InputStream)","Corresponding Source":"// -- Channels from streams --\n\n    /**\n     * Constructs a channel that reads bytes from the given stream.\n     *\n     * <p> The resulting channel will not be buffered; it will simply redirect\n     * its I/O operations to the given stream.  Closing the channel will in\n     * turn cause the stream to be closed.  <\/p>\n     *\n     * @param  in\n     *         The stream from which bytes are to be read\n     *\n     * @return  A new readable byte channel\n     */\n    public static ReadableByteChannel newChannel(final InputStream in) {\n        checkNotNull(in, \"in\");\n\n        if (in instanceof FileInputStream &&\n            FileInputStream.class.equals(in.getClass())) {\n            return ((FileInputStream)in).getChannel();\n        }\n\n        return new ReadableByteChannelImpl(in);\n    }"}
{"Number":"393","API Relative Path":"java.nio.channels.Channels.java-newChannel(InputStream)","Corresponding Source":"// -- Channels from streams --\n\n    /**\n     * Constructs a channel that reads bytes from the given stream.\n     *\n     * <p> The resulting channel will not be buffered; it will simply redirect\n     * its I/O operations to the given stream.  Closing the channel will in\n     * turn cause the stream to be closed.  <\/p>\n     *\n     * @param  in\n     *         The stream from which bytes are to be read\n     *\n     * @return  A new readable byte channel\n     */\n    public static ReadableByteChannel newChannel(final InputStream in) {\n        checkNotNull(in, \"in\");\n\n        if (in instanceof FileInputStream &&\n            FileInputStream.class.equals(in.getClass())) {\n            return ((FileInputStream)in).getChannel();\n        }\n\n        return new ReadableByteChannelImpl(in);\n    }"}
{"Number":"394","API Relative Path":"java.nio.channels.Channels.java-newChannel(OutputStream)","Corresponding Source":"/**\n     * Constructs a channel that writes bytes to the given stream.\n     *\n     * <p> The resulting channel will not be buffered; it will simply redirect\n     * its I/O operations to the given stream.  Closing the channel will in\n     * turn cause the stream to be closed.  <\/p>\n     *\n     * @param  out\n     *         The stream to which bytes are to be written\n     *\n     * @return  A new writable byte channel\n     */\n    public static WritableByteChannel newChannel(final OutputStream out) {\n        checkNotNull(out, \"out\");\n\n        if (out instanceof FileOutputStream &&\n            FileOutputStream.class.equals(out.getClass())) {\n                return ((FileOutputStream)out).getChannel();\n        }\n\n        return new WritableByteChannelImpl(out);\n    }"}
{"Number":"395","API Relative Path":"java.nio.channels.Channels.java-newChannel(OutputStream)","Corresponding Source":"/**\n     * Constructs a channel that writes bytes to the given stream.\n     *\n     * <p> The resulting channel will not be buffered; it will simply redirect\n     * its I/O operations to the given stream.  Closing the channel will in\n     * turn cause the stream to be closed.  <\/p>\n     *\n     * @param  out\n     *         The stream to which bytes are to be written\n     *\n     * @return  A new writable byte channel\n     */\n    public static WritableByteChannel newChannel(final OutputStream out) {\n        checkNotNull(out, \"out\");\n\n        if (out instanceof FileOutputStream &&\n            FileOutputStream.class.equals(out.getClass())) {\n                return ((FileOutputStream)out).getChannel();\n        }\n\n        return new WritableByteChannelImpl(out);\n    }"}
{"Number":"396","API Relative Path":"java.nio.channels.Channels.java-newInputStream(AsynchronousByteChannel)","Corresponding Source":"/**\n     * Constructs a stream that reads bytes from the given channel.\n     *\n     * <p> The stream will not be buffered, and it will not support the {@link\n     * InputStream#mark mark} or {@link InputStream#reset reset} methods.  The\n     * stream will be safe for access by multiple concurrent threads.  Closing\n     * the stream will in turn cause the channel to be closed.  <\/p>\n     *\n     * @param  ch\n     *         The channel from which bytes will be read\n     *\n     * @return  A new input stream\n     *\n     * @since 1.7\n     */\n    public static InputStream newInputStream(final AsynchronousByteChannel ch) {\n        checkNotNull(ch, \"ch\");\n        return new InputStream() {\n\n            private ByteBuffer bb = null;\n            private byte[] bs = null;           // Invoker's previous array\n            private byte[] b1 = null;\n\n            @Override\n            public synchronized int read() throws IOException {\n                if (b1 == null)\n                    b1 = new byte[1];\n                int n = this.read(b1);\n                if (n == 1)\n                    return b1[0] & 0xff;\n                return -1;\n            }\n\n            @Override\n            public synchronized int read(byte[] bs, int off, int len)\n                throws IOException\n            {\n                if ((off < 0) || (off > bs.length) || (len < 0) ||\n                    ((off + len) > bs.length) || ((off + len) < 0)) {\n                    throw new IndexOutOfBoundsException();\n                } else if (len == 0)\n                    return 0;\n\n                ByteBuffer bb = ((this.bs == bs)\n                                 ? this.bb\n                                 : ByteBuffer.wrap(bs));\n                bb.position(off);\n                bb.limit(Math.min(off + len, bb.capacity()));\n                this.bb = bb;\n                this.bs = bs;\n\n                boolean interrupted = false;\n                try {\n                    for (;;) {\n                        try {\n                            return ch.read(bb).get();\n                        } catch (ExecutionException ee) {\n                            throw new IOException(ee.getCause());\n                        } catch (InterruptedException ie) {\n                            interrupted = true;\n                        }\n                    }\n                } finally {\n                    if (interrupted)\n                        Thread.currentThread().interrupt();\n                }\n            }\n\n            @Override\n            public void close() throws IOException {\n                ch.close();\n            }\n        };\n    }"}
{"Number":"397","API Relative Path":"java.nio.channels.Channels.java-newInputStream(AsynchronousByteChannel)","Corresponding Source":"/**\n     * Constructs a stream that reads bytes from the given channel.\n     *\n     * <p> The stream will not be buffered, and it will not support the {@link\n     * InputStream#mark mark} or {@link InputStream#reset reset} methods.  The\n     * stream will be safe for access by multiple concurrent threads.  Closing\n     * the stream will in turn cause the channel to be closed.  <\/p>\n     *\n     * @param  ch\n     *         The channel from which bytes will be read\n     *\n     * @return  A new input stream\n     *\n     * @since 1.7\n     */\n    public static InputStream newInputStream(final AsynchronousByteChannel ch) {\n        checkNotNull(ch, \"ch\");\n        return new InputStream() {\n\n            private ByteBuffer bb = null;\n            private byte[] bs = null;           // Invoker's previous array\n            private byte[] b1 = null;\n\n            @Override\n            public synchronized int read() throws IOException {\n                if (b1 == null)\n                    b1 = new byte[1];\n                int n = this.read(b1);\n                if (n == 1)\n                    return b1[0] & 0xff;\n                return -1;\n            }\n\n            @Override\n            public synchronized int read(byte[] bs, int off, int len)\n                throws IOException\n            {\n                if ((off < 0) || (off > bs.length) || (len < 0) ||\n                    ((off + len) > bs.length) || ((off + len) < 0)) {\n                    throw new IndexOutOfBoundsException();\n                } else if (len == 0)\n                    return 0;\n\n                ByteBuffer bb = ((this.bs == bs)\n                                 ? this.bb\n                                 : ByteBuffer.wrap(bs));\n                bb.position(off);\n                bb.limit(Math.min(off + len, bb.capacity()));\n                this.bb = bb;\n                this.bs = bs;\n\n                boolean interrupted = false;\n                try {\n                    for (;;) {\n                        try {\n                            return ch.read(bb).get();\n                        } catch (ExecutionException ee) {\n                            throw new IOException(ee.getCause());\n                        } catch (InterruptedException ie) {\n                            interrupted = true;\n                        }\n                    }\n                } finally {\n                    if (interrupted)\n                        Thread.currentThread().interrupt();\n                }\n            }\n\n            @Override\n            public void close() throws IOException {\n                ch.close();\n            }\n        };\n    }"}
{"Number":"398","API Relative Path":"java.nio.channels.Channels.java-newInputStream(ReadableByteChannel)","Corresponding Source":"// -- Byte streams from channels --\n\n    /**\n     * Constructs a stream that reads bytes from the given channel.\n     *\n     * <p> The <tt>read<\/tt> methods of the resulting stream will throw an\n     * {@link IllegalBlockingModeException} if invoked while the underlying\n     * channel is in non-blocking mode.  The stream will not be buffered, and\n     * it will not support the {@link InputStream#mark mark} or {@link\n     * InputStream#reset reset} methods.  The stream will be safe for access by\n     * multiple concurrent threads.  Closing the stream will in turn cause the\n     * channel to be closed.  <\/p>\n     *\n     * @param  ch\n     *         The channel from which bytes will be read\n     *\n     * @return  A new input stream\n     */\n    public static InputStream newInputStream(ReadableByteChannel ch) {\n        checkNotNull(ch, \"ch\");\n        return new sun.nio.ch.ChannelInputStream(ch);\n    }"}
{"Number":"399","API Relative Path":"java.nio.channels.Channels.java-newInputStream(ReadableByteChannel)","Corresponding Source":"// -- Byte streams from channels --\n\n    /**\n     * Constructs a stream that reads bytes from the given channel.\n     *\n     * <p> The <tt>read<\/tt> methods of the resulting stream will throw an\n     * {@link IllegalBlockingModeException} if invoked while the underlying\n     * channel is in non-blocking mode.  The stream will not be buffered, and\n     * it will not support the {@link InputStream#mark mark} or {@link\n     * InputStream#reset reset} methods.  The stream will be safe for access by\n     * multiple concurrent threads.  Closing the stream will in turn cause the\n     * channel to be closed.  <\/p>\n     *\n     * @param  ch\n     *         The channel from which bytes will be read\n     *\n     * @return  A new input stream\n     */\n    public static InputStream newInputStream(ReadableByteChannel ch) {\n        checkNotNull(ch, \"ch\");\n        return new sun.nio.ch.ChannelInputStream(ch);\n    }"}
{"Number":"400","API Relative Path":"java.nio.channels.Channels.java-newOutputStream(AsynchronousByteChannel)","Corresponding Source":"/**\n     * Constructs a stream that writes bytes to the given channel.\n     *\n     * <p> The stream will not be buffered. The stream will be safe for access\n     * by multiple concurrent threads.  Closing the stream will in turn cause\n     * the channel to be closed.  <\/p>\n     *\n     * @param  ch\n     *         The channel to which bytes will be written\n     *\n     * @return  A new output stream\n     *\n     * @since 1.7\n     */\n    public static OutputStream newOutputStream(final AsynchronousByteChannel ch) {\n        checkNotNull(ch, \"ch\");\n        return new OutputStream() {\n\n            private ByteBuffer bb = null;\n            private byte[] bs = null;   // Invoker's previous array\n            private byte[] b1 = null;\n\n            @Override\n            public synchronized void write(int b) throws IOException {\n               if (b1 == null)\n                    b1 = new byte[1];\n                b1[0] = (byte)b;\n                this.write(b1);\n            }\n\n            @Override\n            public synchronized void write(byte[] bs, int off, int len)\n                throws IOException\n            {\n                if ((off < 0) || (off > bs.length) || (len < 0) ||\n                    ((off + len) > bs.length) || ((off + len) < 0)) {\n                    throw new IndexOutOfBoundsException();\n                } else if (len == 0) {\n                    return;\n                }\n                ByteBuffer bb = ((this.bs == bs)\n                                 ? this.bb\n                                 : ByteBuffer.wrap(bs));\n                bb.limit(Math.min(off + len, bb.capacity()));\n                bb.position(off);\n                this.bb = bb;\n                this.bs = bs;\n\n                boolean interrupted = false;\n                try {\n                    while (bb.remaining() > 0) {\n                        try {\n                            ch.write(bb).get();\n                        } catch (ExecutionException ee) {\n                            throw new IOException(ee.getCause());\n                        } catch (InterruptedException ie) {\n                            interrupted = true;\n                        }\n                    }\n                } finally {\n                    if (interrupted)\n                        Thread.currentThread().interrupt();\n                }\n            }\n\n            @Override\n            public void close() throws IOException {\n                ch.close();\n            }\n        };\n    }"}
{"Number":"401","API Relative Path":"java.nio.channels.Channels.java-newOutputStream(AsynchronousByteChannel)","Corresponding Source":"/**\n     * Constructs a stream that writes bytes to the given channel.\n     *\n     * <p> The stream will not be buffered. The stream will be safe for access\n     * by multiple concurrent threads.  Closing the stream will in turn cause\n     * the channel to be closed.  <\/p>\n     *\n     * @param  ch\n     *         The channel to which bytes will be written\n     *\n     * @return  A new output stream\n     *\n     * @since 1.7\n     */\n    public static OutputStream newOutputStream(final AsynchronousByteChannel ch) {\n        checkNotNull(ch, \"ch\");\n        return new OutputStream() {\n\n            private ByteBuffer bb = null;\n            private byte[] bs = null;   // Invoker's previous array\n            private byte[] b1 = null;\n\n            @Override\n            public synchronized void write(int b) throws IOException {\n               if (b1 == null)\n                    b1 = new byte[1];\n                b1[0] = (byte)b;\n                this.write(b1);\n            }\n\n            @Override\n            public synchronized void write(byte[] bs, int off, int len)\n                throws IOException\n            {\n                if ((off < 0) || (off > bs.length) || (len < 0) ||\n                    ((off + len) > bs.length) || ((off + len) < 0)) {\n                    throw new IndexOutOfBoundsException();\n                } else if (len == 0) {\n                    return;\n                }\n                ByteBuffer bb = ((this.bs == bs)\n                                 ? this.bb\n                                 : ByteBuffer.wrap(bs));\n                bb.limit(Math.min(off + len, bb.capacity()));\n                bb.position(off);\n                this.bb = bb;\n                this.bs = bs;\n\n                boolean interrupted = false;\n                try {\n                    while (bb.remaining() > 0) {\n                        try {\n                            ch.write(bb).get();\n                        } catch (ExecutionException ee) {\n                            throw new IOException(ee.getCause());\n                        } catch (InterruptedException ie) {\n                            interrupted = true;\n                        }\n                    }\n                } finally {\n                    if (interrupted)\n                        Thread.currentThread().interrupt();\n                }\n            }\n\n            @Override\n            public void close() throws IOException {\n                ch.close();\n            }\n        };\n    }"}
{"Number":"402","API Relative Path":"java.nio.channels.Channels.java-newOutputStream(WritableByteChannel)","Corresponding Source":"/**\n     * Constructs a stream that writes bytes to the given channel.\n     *\n     * <p> The <tt>write<\/tt> methods of the resulting stream will throw an\n     * {@link IllegalBlockingModeException} if invoked while the underlying\n     * channel is in non-blocking mode.  The stream will not be buffered.  The\n     * stream will be safe for access by multiple concurrent threads.  Closing\n     * the stream will in turn cause the channel to be closed.  <\/p>\n     *\n     * @param  ch\n     *         The channel to which bytes will be written\n     *\n     * @return  A new output stream\n     */\n    public static OutputStream newOutputStream(final WritableByteChannel ch) {\n        checkNotNull(ch, \"ch\");\n\n        return new OutputStream() {\n\n                private ByteBuffer bb = null;\n                private byte[] bs = null;       // Invoker's previous array\n                private byte[] b1 = null;\n\n                public synchronized void write(int b) throws IOException {\n                   if (b1 == null)\n                        b1 = new byte[1];\n                    b1[0] = (byte)b;\n                    this.write(b1);\n                }\n\n                public synchronized void write(byte[] bs, int off, int len)\n                    throws IOException\n                {\n                    if ((off < 0) || (off > bs.length) || (len < 0) ||\n                        ((off + len) > bs.length) || ((off + len) < 0)) {\n                        throw new IndexOutOfBoundsException();\n                    } else if (len == 0) {\n                        return;\n                    }\n                    ByteBuffer bb = ((this.bs == bs)\n                                     ? this.bb\n                                     : ByteBuffer.wrap(bs));\n                    bb.limit(Math.min(off + len, bb.capacity()));\n                    bb.position(off);\n                    this.bb = bb;\n                    this.bs = bs;\n                    Channels.writeFully(ch, bb);\n                }\n\n                public void close() throws IOException {\n                    ch.close();\n                }\n\n            };\n    }"}
{"Number":"403","API Relative Path":"java.nio.channels.Channels.java-newOutputStream(WritableByteChannel)","Corresponding Source":"/**\n     * Constructs a stream that writes bytes to the given channel.\n     *\n     * <p> The <tt>write<\/tt> methods of the resulting stream will throw an\n     * {@link IllegalBlockingModeException} if invoked while the underlying\n     * channel is in non-blocking mode.  The stream will not be buffered.  The\n     * stream will be safe for access by multiple concurrent threads.  Closing\n     * the stream will in turn cause the channel to be closed.  <\/p>\n     *\n     * @param  ch\n     *         The channel to which bytes will be written\n     *\n     * @return  A new output stream\n     */\n    public static OutputStream newOutputStream(final WritableByteChannel ch) {\n        checkNotNull(ch, \"ch\");\n\n        return new OutputStream() {\n\n                private ByteBuffer bb = null;\n                private byte[] bs = null;       // Invoker's previous array\n                private byte[] b1 = null;\n\n                public synchronized void write(int b) throws IOException {\n                   if (b1 == null)\n                        b1 = new byte[1];\n                    b1[0] = (byte)b;\n                    this.write(b1);\n                }\n\n                public synchronized void write(byte[] bs, int off, int len)\n                    throws IOException\n                {\n                    if ((off < 0) || (off > bs.length) || (len < 0) ||\n                        ((off + len) > bs.length) || ((off + len) < 0)) {\n                        throw new IndexOutOfBoundsException();\n                    } else if (len == 0) {\n                        return;\n                    }\n                    ByteBuffer bb = ((this.bs == bs)\n                                     ? this.bb\n                                     : ByteBuffer.wrap(bs));\n                    bb.limit(Math.min(off + len, bb.capacity()));\n                    bb.position(off);\n                    this.bb = bb;\n                    this.bs = bs;\n                    Channels.writeFully(ch, bb);\n                }\n\n                public void close() throws IOException {\n                    ch.close();\n                }\n\n            };\n    }"}
{"Number":"404","API Relative Path":"java.nio.channels.Channels.java-newReader(ReadableByteChannel-CharsetDecoder-int)","Corresponding Source":"// -- Character streams from channels --\n\n    /**\n     * Constructs a reader that decodes bytes from the given channel using the\n     * given decoder.\n     *\n     * <p> The resulting stream will contain an internal input buffer of at\n     * least <tt>minBufferCap<\/tt> bytes.  The stream's <tt>read<\/tt> methods\n     * will, as needed, fill the buffer by reading bytes from the underlying\n     * channel; if the channel is in non-blocking mode when bytes are to be\n     * read then an {@link IllegalBlockingModeException} will be thrown.  The\n     * resulting stream will not otherwise be buffered, and it will not support\n     * the {@link Reader#mark mark} or {@link Reader#reset reset} methods.\n     * Closing the stream will in turn cause the channel to be closed.  <\/p>\n     *\n     * @param  ch\n     *         The channel from which bytes will be read\n     *\n     * @param  dec\n     *         The charset decoder to be used\n     *\n     * @param  minBufferCap\n     *         The minimum capacity of the internal byte buffer,\n     *         or <tt>-1<\/tt> if an implementation-dependent\n     *         default capacity is to be used\n     *\n     * @return  A new reader\n     */\n    public static Reader newReader(ReadableByteChannel ch,\n                                   CharsetDecoder dec,\n                                   int minBufferCap)\n    {\n        checkNotNull(ch, \"ch\");\n        return StreamDecoder.forDecoder(ch, dec.reset(), minBufferCap);\n    }"}
{"Number":"405","API Relative Path":"java.nio.channels.Channels.java-newReader(ReadableByteChannel-CharsetDecoder-int)","Corresponding Source":"// -- Character streams from channels --\n\n    /**\n     * Constructs a reader that decodes bytes from the given channel using the\n     * given decoder.\n     *\n     * <p> The resulting stream will contain an internal input buffer of at\n     * least <tt>minBufferCap<\/tt> bytes.  The stream's <tt>read<\/tt> methods\n     * will, as needed, fill the buffer by reading bytes from the underlying\n     * channel; if the channel is in non-blocking mode when bytes are to be\n     * read then an {@link IllegalBlockingModeException} will be thrown.  The\n     * resulting stream will not otherwise be buffered, and it will not support\n     * the {@link Reader#mark mark} or {@link Reader#reset reset} methods.\n     * Closing the stream will in turn cause the channel to be closed.  <\/p>\n     *\n     * @param  ch\n     *         The channel from which bytes will be read\n     *\n     * @param  dec\n     *         The charset decoder to be used\n     *\n     * @param  minBufferCap\n     *         The minimum capacity of the internal byte buffer,\n     *         or <tt>-1<\/tt> if an implementation-dependent\n     *         default capacity is to be used\n     *\n     * @return  A new reader\n     */\n    public static Reader newReader(ReadableByteChannel ch,\n                                   CharsetDecoder dec,\n                                   int minBufferCap)\n    {\n        checkNotNull(ch, \"ch\");\n        return StreamDecoder.forDecoder(ch, dec.reset(), minBufferCap);\n    }"}
{"Number":"406","API Relative Path":"java.nio.channels.Channels.java-newReader(ReadableByteChannel-String)","Corresponding Source":"/**\n     * Constructs a reader that decodes bytes from the given channel according\n     * to the named charset.\n     *\n     * <p> An invocation of this method of the form\n     *\n     * <blockquote><pre>\n     * Channels.newReader(ch, csname)<\/pre><\/blockquote>\n     *\n     * behaves in exactly the same way as the expression\n     *\n     * <blockquote><pre>\n     * Channels.newReader(ch,\n     *                    Charset.forName(csName)\n     *                        .newDecoder(),\n     *                    -1);<\/pre><\/blockquote>\n     *\n     * @param  ch\n     *         The channel from which bytes will be read\n     *\n     * @param  csName\n     *         The name of the charset to be used\n     *\n     * @return  A new reader\n     *\n     * @throws  UnsupportedCharsetException\n     *          If no support for the named charset is available\n     *          in this instance of the Java virtual machine\n     */\n    public static Reader newReader(ReadableByteChannel ch,\n                                   String csName)\n    {\n        checkNotNull(csName, \"csName\");\n        return newReader(ch, Charset.forName(csName).newDecoder(), -1);\n    }"}
{"Number":"407","API Relative Path":"java.nio.channels.Channels.java-newReader(ReadableByteChannel-String)","Corresponding Source":"/**\n     * Constructs a reader that decodes bytes from the given channel according\n     * to the named charset.\n     *\n     * <p> An invocation of this method of the form\n     *\n     * <blockquote><pre>\n     * Channels.newReader(ch, csname)<\/pre><\/blockquote>\n     *\n     * behaves in exactly the same way as the expression\n     *\n     * <blockquote><pre>\n     * Channels.newReader(ch,\n     *                    Charset.forName(csName)\n     *                        .newDecoder(),\n     *                    -1);<\/pre><\/blockquote>\n     *\n     * @param  ch\n     *         The channel from which bytes will be read\n     *\n     * @param  csName\n     *         The name of the charset to be used\n     *\n     * @return  A new reader\n     *\n     * @throws  UnsupportedCharsetException\n     *          If no support for the named charset is available\n     *          in this instance of the Java virtual machine\n     */\n    public static Reader newReader(ReadableByteChannel ch,\n                                   String csName)\n    {\n        checkNotNull(csName, \"csName\");\n        return newReader(ch, Charset.forName(csName).newDecoder(), -1);\n    }"}
{"Number":"408","API Relative Path":"java.nio.channels.Channels.java-newReader(ReadableByteChannel-String)","Corresponding Source":"/**\n     * Constructs a reader that decodes bytes from the given channel according\n     * to the named charset.\n     *\n     * <p> An invocation of this method of the form\n     *\n     * <blockquote><pre>\n     * Channels.newReader(ch, csname)<\/pre><\/blockquote>\n     *\n     * behaves in exactly the same way as the expression\n     *\n     * <blockquote><pre>\n     * Channels.newReader(ch,\n     *                    Charset.forName(csName)\n     *                        .newDecoder(),\n     *                    -1);<\/pre><\/blockquote>\n     *\n     * @param  ch\n     *         The channel from which bytes will be read\n     *\n     * @param  csName\n     *         The name of the charset to be used\n     *\n     * @return  A new reader\n     *\n     * @throws  UnsupportedCharsetException\n     *          If no support for the named charset is available\n     *          in this instance of the Java virtual machine\n     */\n    public static Reader newReader(ReadableByteChannel ch,\n                                   String csName)\n    {\n        checkNotNull(csName, \"csName\");\n        return newReader(ch, Charset.forName(csName).newDecoder(), -1);\n    }"}
{"Number":"409","API Relative Path":"java.nio.channels.Channels.java-newWriter(WritableByteChannel-CharsetEncoder-int)","Corresponding Source":"/**\n     * Constructs a writer that encodes characters using the given encoder and\n     * writes the resulting bytes to the given channel.\n     *\n     * <p> The resulting stream will contain an internal output buffer of at\n     * least <tt>minBufferCap<\/tt> bytes.  The stream's <tt>write<\/tt> methods\n     * will, as needed, flush the buffer by writing bytes to the underlying\n     * channel; if the channel is in non-blocking mode when bytes are to be\n     * written then an {@link IllegalBlockingModeException} will be thrown.\n     * The resulting stream will not otherwise be buffered.  Closing the stream\n     * will in turn cause the channel to be closed.  <\/p>\n     *\n     * @param  ch\n     *         The channel to which bytes will be written\n     *\n     * @param  enc\n     *         The charset encoder to be used\n     *\n     * @param  minBufferCap\n     *         The minimum capacity of the internal byte buffer,\n     *         or <tt>-1<\/tt> if an implementation-dependent\n     *         default capacity is to be used\n     *\n     * @return  A new writer\n     */\n    public static Writer newWriter(final WritableByteChannel ch,\n                                   final CharsetEncoder enc,\n                                   final int minBufferCap)\n    {\n        checkNotNull(ch, \"ch\");\n        return StreamEncoder.forEncoder(ch, enc.reset(), minBufferCap);\n    }"}
{"Number":"410","API Relative Path":"java.nio.channels.Channels.java-newWriter(WritableByteChannel-CharsetEncoder-int)","Corresponding Source":"/**\n     * Constructs a writer that encodes characters using the given encoder and\n     * writes the resulting bytes to the given channel.\n     *\n     * <p> The resulting stream will contain an internal output buffer of at\n     * least <tt>minBufferCap<\/tt> bytes.  The stream's <tt>write<\/tt> methods\n     * will, as needed, flush the buffer by writing bytes to the underlying\n     * channel; if the channel is in non-blocking mode when bytes are to be\n     * written then an {@link IllegalBlockingModeException} will be thrown.\n     * The resulting stream will not otherwise be buffered.  Closing the stream\n     * will in turn cause the channel to be closed.  <\/p>\n     *\n     * @param  ch\n     *         The channel to which bytes will be written\n     *\n     * @param  enc\n     *         The charset encoder to be used\n     *\n     * @param  minBufferCap\n     *         The minimum capacity of the internal byte buffer,\n     *         or <tt>-1<\/tt> if an implementation-dependent\n     *         default capacity is to be used\n     *\n     * @return  A new writer\n     */\n    public static Writer newWriter(final WritableByteChannel ch,\n                                   final CharsetEncoder enc,\n                                   final int minBufferCap)\n    {\n        checkNotNull(ch, \"ch\");\n        return StreamEncoder.forEncoder(ch, enc.reset(), minBufferCap);\n    }"}
{"Number":"411","API Relative Path":"java.nio.channels.Channels.java-newWriter(WritableByteChannel-String)","Corresponding Source":"/**\n     * Constructs a writer that encodes characters according to the named\n     * charset and writes the resulting bytes to the given channel.\n     *\n     * <p> An invocation of this method of the form\n     *\n     * <blockquote><pre>\n     * Channels.newWriter(ch, csname)<\/pre><\/blockquote>\n     *\n     * behaves in exactly the same way as the expression\n     *\n     * <blockquote><pre>\n     * Channels.newWriter(ch,\n     *                    Charset.forName(csName)\n     *                        .newEncoder(),\n     *                    -1);<\/pre><\/blockquote>\n     *\n     * @param  ch\n     *         The channel to which bytes will be written\n     *\n     * @param  csName\n     *         The name of the charset to be used\n     *\n     * @return  A new writer\n     *\n     * @throws  UnsupportedCharsetException\n     *          If no support for the named charset is available\n     *          in this instance of the Java virtual machine\n     */\n    public static Writer newWriter(WritableByteChannel ch,\n                                   String csName)\n    {\n        checkNotNull(csName, \"csName\");\n        return newWriter(ch, Charset.forName(csName).newEncoder(), -1);\n    }"}
{"Number":"412","API Relative Path":"java.nio.channels.Channels.java-newWriter(WritableByteChannel-String)","Corresponding Source":"/**\n     * Constructs a writer that encodes characters according to the named\n     * charset and writes the resulting bytes to the given channel.\n     *\n     * <p> An invocation of this method of the form\n     *\n     * <blockquote><pre>\n     * Channels.newWriter(ch, csname)<\/pre><\/blockquote>\n     *\n     * behaves in exactly the same way as the expression\n     *\n     * <blockquote><pre>\n     * Channels.newWriter(ch,\n     *                    Charset.forName(csName)\n     *                        .newEncoder(),\n     *                    -1);<\/pre><\/blockquote>\n     *\n     * @param  ch\n     *         The channel to which bytes will be written\n     *\n     * @param  csName\n     *         The name of the charset to be used\n     *\n     * @return  A new writer\n     *\n     * @throws  UnsupportedCharsetException\n     *          If no support for the named charset is available\n     *          in this instance of the Java virtual machine\n     */\n    public static Writer newWriter(WritableByteChannel ch,\n                                   String csName)\n    {\n        checkNotNull(csName, \"csName\");\n        return newWriter(ch, Charset.forName(csName).newEncoder(), -1);\n    }"}
{"Number":"413","API Relative Path":"java.nio.channels.Channels.java-newWriter(WritableByteChannel-String)","Corresponding Source":"/**\n     * Constructs a writer that encodes characters according to the named\n     * charset and writes the resulting bytes to the given channel.\n     *\n     * <p> An invocation of this method of the form\n     *\n     * <blockquote><pre>\n     * Channels.newWriter(ch, csname)<\/pre><\/blockquote>\n     *\n     * behaves in exactly the same way as the expression\n     *\n     * <blockquote><pre>\n     * Channels.newWriter(ch,\n     *                    Charset.forName(csName)\n     *                        .newEncoder(),\n     *                    -1);<\/pre><\/blockquote>\n     *\n     * @param  ch\n     *         The channel to which bytes will be written\n     *\n     * @param  csName\n     *         The name of the charset to be used\n     *\n     * @return  A new writer\n     *\n     * @throws  UnsupportedCharsetException\n     *          If no support for the named charset is available\n     *          in this instance of the Java virtual machine\n     */\n    public static Writer newWriter(WritableByteChannel ch,\n                                   String csName)\n    {\n        checkNotNull(csName, \"csName\");\n        return newWriter(ch, Charset.forName(csName).newEncoder(), -1);\n    }"}
{"Number":"414","API Relative Path":"java.nio.channels.FileLock.java-FileLock(AsynchronousFileChannel-long-long-boolean)","Corresponding Source":"/**\n     * Initializes a new instance of this class.\n     *\n     * @param  channel\n     *         The channel upon whose file this lock is held\n     *\n     * @param  position\n     *         The position within the file at which the locked region starts;\n     *         must be non-negative\n     *\n     * @param  size\n     *         The size of the locked region; must be non-negative, and the sum\n     *         <tt>position<\/tt>&nbsp;+&nbsp;<tt>size<\/tt> must be non-negative\n     *\n     * @param  shared\n     *         <tt>true<\/tt> if this lock is shared,\n     *         <tt>false<\/tt> if it is exclusive\n     *\n     * @throws IllegalArgumentException\n     *         If the preconditions on the parameters do not hold\n     *\n     * @since 1.7\n     */\n    protected FileLock(AsynchronousFileChannel channel,\n                       long position, long size, boolean shared)\n    {\n        if (position < 0)\n            throw new IllegalArgumentException(\"Negative position\");\n        if (size < 0)\n            throw new IllegalArgumentException(\"Negative size\");\n        if (position + size < 0)\n            throw new IllegalArgumentException(\"Negative position + size\");\n        this.channel = channel;\n        this.position = position;\n        this.size = size;\n        this.shared = shared;\n    }"}
{"Number":"415","API Relative Path":"java.nio.channels.FileLock.java-FileLock(FileChannel-long-long-boolean)","Corresponding Source":"/**\n     * Initializes a new instance of this class.\n     *\n     * @param  channel\n     *         The file channel upon whose file this lock is held\n     *\n     * @param  position\n     *         The position within the file at which the locked region starts;\n     *         must be non-negative\n     *\n     * @param  size\n     *         The size of the locked region; must be non-negative, and the sum\n     *         <tt>position<\/tt>&nbsp;+&nbsp;<tt>size<\/tt> must be non-negative\n     *\n     * @param  shared\n     *         <tt>true<\/tt> if this lock is shared,\n     *         <tt>false<\/tt> if it is exclusive\n     *\n     * @throws IllegalArgumentException\n     *         If the preconditions on the parameters do not hold\n     */\n    protected FileLock(FileChannel channel,\n                       long position, long size, boolean shared)\n    {\n        if (position < 0)\n            throw new IllegalArgumentException(\"Negative position\");\n        if (size < 0)\n            throw new IllegalArgumentException(\"Negative size\");\n        if (position + size < 0)\n            throw new IllegalArgumentException(\"Negative position + size\");\n        this.channel = channel;\n        this.position = position;\n        this.size = size;\n        this.shared = shared;\n    }"}
{"Number":"416","API Relative Path":"java.nio.channels.spi.AbstractInterruptibleChannel.java-end(boolean)","Corresponding Source":"/**\n     * Marks the end of an I/O operation that might block indefinitely.\n     *\n     * <p> This method should be invoked in tandem with the {@link #begin\n     * begin} method, using a <tt>try<\/tt>&nbsp;...&nbsp;<tt>finally<\/tt> block\n     * as shown <a href=\"#be\">above<\/a>, in order to implement asynchronous\n     * closing and interruption for this channel.  <\/p>\n     *\n     * @param  completed\n     *         <tt>true<\/tt> if, and only if, the I/O operation completed\n     *         successfully, that is, had some effect that would be visible to\n     *         the operation's invoker\n     *\n     * @throws  AsynchronousCloseException\n     *          If the channel was asynchronously closed\n     *\n     * @throws  ClosedByInterruptException\n     *          If the thread blocked in the I/O operation was interrupted\n     */\n    protected final void end(boolean completed)\n        throws AsynchronousCloseException\n    {\n        blockedOn(null);\n        Thread interrupted = this.interrupted;\n        if (interrupted != null && interrupted == Thread.currentThread()) {\n            interrupted = null;\n            throw new ClosedByInterruptException();\n        }\n        if (!completed && !open)\n            throw new AsynchronousCloseException();\n    }"}
{"Number":"417","API Relative Path":"java.nio.CharBuffer.java-allocate(int)","Corresponding Source":"/**\n     * Allocates a new char buffer.\n     *\n     * <p> The new buffer's position will be zero, its limit will be its\n     * capacity, its mark will be undefined, and each of its elements will be\n     * initialized to zero.  It will have a {@link #array backing array},\n     * and its {@link #arrayOffset array offset} will be zero.\n     *\n     * @param  capacity\n     *         The new buffer's capacity, in chars\n     *\n     * @return  The new char buffer\n     *\n     * @throws  IllegalArgumentException\n     *          If the <tt>capacity<\/tt> is a negative integer\n     */\n    public static CharBuffer allocate(int capacity) {\n        if (capacity < 0)\n            throw new IllegalArgumentException();\n        return new HeapCharBuffer(capacity, capacity);\n    }"}
{"Number":"418","API Relative Path":"java.nio.CharBuffer.java-get(char[]-int-int)","Corresponding Source":"// -- Bulk get operations --\n\n    /**\n     * Relative bulk <i>get<\/i> method.\n     *\n     * <p> This method transfers chars from this buffer into the given\n     * destination array.  If there are fewer chars remaining in the\n     * buffer than are required to satisfy the request, that is, if\n     * <tt>length<\/tt>&nbsp;<tt>&gt;<\/tt>&nbsp;<tt>remaining()<\/tt>, then no\n     * chars are transferred and a {@link BufferUnderflowException} is\n     * thrown.\n     *\n     * <p> Otherwise, this method copies <tt>length<\/tt> chars from this\n     * buffer into the given array, starting at the current position of this\n     * buffer and at the given offset in the array.  The position of this\n     * buffer is then incremented by <tt>length<\/tt>.\n     *\n     * <p> In other words, an invocation of this method of the form\n     * <tt>src.get(dst,&nbsp;off,&nbsp;len)<\/tt> has exactly the same effect as\n     * the loop\n     *\n     * <pre>{@code\n     *     for (int i = off; i < off + len; i++)\n     *         dst[i] = src.get():\n     * }<\/pre>\n     *\n     * except that it first checks that there are sufficient chars in\n     * this buffer and it is potentially much more efficient.\n     *\n     * @param  dst\n     *         The array into which chars are to be written\n     *\n     * @param  offset\n     *         The offset within the array of the first char to be\n     *         written; must be non-negative and no larger than\n     *         <tt>dst.length<\/tt>\n     *\n     * @param  length\n     *         The maximum number of chars to be written to the given\n     *         array; must be non-negative and no larger than\n     *         <tt>dst.length - offset<\/tt>\n     *\n     * @return  This buffer\n     *\n     * @throws  BufferUnderflowException\n     *          If there are fewer than <tt>length<\/tt> chars\n     *          remaining in this buffer\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the preconditions on the <tt>offset<\/tt> and <tt>length<\/tt>\n     *          parameters do not hold\n     */\n    public CharBuffer get(char[] dst, int offset, int length) {\n        checkBounds(offset, length, dst.length);\n        if (length > remaining())\n            throw new BufferUnderflowException();\n        int end = offset + length;\n        for (int i = offset; i < end; i++)\n            dst[i] = get();\n        return this;\n    }"}
{"Number":"419","API Relative Path":"java.nio.CharBuffer.java-put(CharBuffer)","Corresponding Source":"// -- Bulk put operations --\n\n    /**\n     * Relative bulk <i>put<\/i> method&nbsp;&nbsp;<i>(optional operation)<\/i>.\n     *\n     * <p> This method transfers the chars remaining in the given source\n     * buffer into this buffer.  If there are more chars remaining in the\n     * source buffer than in this buffer, that is, if\n     * <tt>src.remaining()<\/tt>&nbsp;<tt>&gt;<\/tt>&nbsp;<tt>remaining()<\/tt>,\n     * then no chars are transferred and a {@link\n     * BufferOverflowException} is thrown.\n     *\n     * <p> Otherwise, this method copies\n     * <i>n<\/i>&nbsp;=&nbsp;<tt>src.remaining()<\/tt> chars from the given\n     * buffer into this buffer, starting at each buffer's current position.\n     * The positions of both buffers are then incremented by <i>n<\/i>.\n     *\n     * <p> In other words, an invocation of this method of the form\n     * <tt>dst.put(src)<\/tt> has exactly the same effect as the loop\n     *\n     * <pre>\n     *     while (src.hasRemaining())\n     *         dst.put(src.get()); <\/pre>\n     *\n     * except that it first checks that there is sufficient space in this\n     * buffer and it is potentially much more efficient.\n     *\n     * @param  src\n     *         The source buffer from which chars are to be read;\n     *         must not be this buffer\n     *\n     * @return  This buffer\n     *\n     * @throws  BufferOverflowException\n     *          If there is insufficient space in this buffer\n     *          for the remaining chars in the source buffer\n     *\n     * @throws  IllegalArgumentException\n     *          If the source buffer is this buffer\n     *\n     * @throws  ReadOnlyBufferException\n     *          If this buffer is read-only\n     */\n    public CharBuffer put(CharBuffer src) {\n        if (src == this)\n            throw new IllegalArgumentException();\n        if (isReadOnly())\n            throw new ReadOnlyBufferException();\n        int n = src.remaining();\n        if (n > remaining())\n            throw new BufferOverflowException();\n        for (int i = 0; i < n; i++)\n            put(src.get());\n        return this;\n    }"}
{"Number":"420","API Relative Path":"java.nio.CharBuffer.java-put(char[]-int-int)","Corresponding Source":"/**\n     * Relative bulk <i>put<\/i> method&nbsp;&nbsp;<i>(optional operation)<\/i>.\n     *\n     * <p> This method transfers chars into this buffer from the given\n     * source array.  If there are more chars to be copied from the array\n     * than remain in this buffer, that is, if\n     * <tt>length<\/tt>&nbsp;<tt>&gt;<\/tt>&nbsp;<tt>remaining()<\/tt>, then no\n     * chars are transferred and a {@link BufferOverflowException} is\n     * thrown.\n     *\n     * <p> Otherwise, this method copies <tt>length<\/tt> chars from the\n     * given array into this buffer, starting at the given offset in the array\n     * and at the current position of this buffer.  The position of this buffer\n     * is then incremented by <tt>length<\/tt>.\n     *\n     * <p> In other words, an invocation of this method of the form\n     * <tt>dst.put(src,&nbsp;off,&nbsp;len)<\/tt> has exactly the same effect as\n     * the loop\n     *\n     * <pre>{@code\n     *     for (int i = off; i < off + len; i++)\n     *         dst.put(a[i]);\n     * }<\/pre>\n     *\n     * except that it first checks that there is sufficient space in this\n     * buffer and it is potentially much more efficient.\n     *\n     * @param  src\n     *         The array from which chars are to be read\n     *\n     * @param  offset\n     *         The offset within the array of the first char to be read;\n     *         must be non-negative and no larger than <tt>array.length<\/tt>\n     *\n     * @param  length\n     *         The number of chars to be read from the given array;\n     *         must be non-negative and no larger than\n     *         <tt>array.length - offset<\/tt>\n     *\n     * @return  This buffer\n     *\n     * @throws  BufferOverflowException\n     *          If there is insufficient space in this buffer\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the preconditions on the <tt>offset<\/tt> and <tt>length<\/tt>\n     *          parameters do not hold\n     *\n     * @throws  ReadOnlyBufferException\n     *          If this buffer is read-only\n     */\n    public CharBuffer put(char[] src, int offset, int length) {\n        checkBounds(offset, length, src.length);\n        if (length > remaining())\n            throw new BufferOverflowException();\n        int end = offset + length;\n        for (int i = offset; i < end; i++)\n            this.put(src[i]);\n        return this;\n    }"}
{"Number":"421","API Relative Path":"java.nio.CharBuffer.java-put(String-int-int)","Corresponding Source":"/**\n     * Relative bulk <i>put<\/i> method&nbsp;&nbsp;<i>(optional operation)<\/i>.\n     *\n     * <p> This method transfers chars from the given string into this\n     * buffer.  If there are more chars to be copied from the string than\n     * remain in this buffer, that is, if\n     * <tt>end&nbsp;-&nbsp;start<\/tt>&nbsp;<tt>&gt;<\/tt>&nbsp;<tt>remaining()<\/tt>,\n     * then no chars are transferred and a {@link\n     * BufferOverflowException} is thrown.\n     *\n     * <p> Otherwise, this method copies\n     * <i>n<\/i>&nbsp;=&nbsp;<tt>end<\/tt>&nbsp;-&nbsp;<tt>start<\/tt> chars\n     * from the given string into this buffer, starting at the given\n     * <tt>start<\/tt> index and at the current position of this buffer.  The\n     * position of this buffer is then incremented by <i>n<\/i>.\n     *\n     * <p> In other words, an invocation of this method of the form\n     * <tt>dst.put(src,&nbsp;start,&nbsp;end)<\/tt> has exactly the same effect\n     * as the loop\n     *\n     * <pre>{@code\n     *     for (int i = start; i < end; i++)\n     *         dst.put(src.charAt(i));\n     * }<\/pre>\n     *\n     * except that it first checks that there is sufficient space in this\n     * buffer and it is potentially much more efficient.\n     *\n     * @param  src\n     *         The string from which chars are to be read\n     *\n     * @param  start\n     *         The offset within the string of the first char to be read;\n     *         must be non-negative and no larger than\n     *         <tt>string.length()<\/tt>\n     *\n     * @param  end\n     *         The offset within the string of the last char to be read,\n     *         plus one; must be non-negative and no larger than\n     *         <tt>string.length()<\/tt>\n     *\n     * @return  This buffer\n     *\n     * @throws  BufferOverflowException\n     *          If there is insufficient space in this buffer\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the preconditions on the <tt>start<\/tt> and <tt>end<\/tt>\n     *          parameters do not hold\n     *\n     * @throws  ReadOnlyBufferException\n     *          If this buffer is read-only\n     */\n    public CharBuffer put(String src, int start, int end) {\n        checkBounds(start, end - start, src.length());\n        if (isReadOnly())\n            throw new ReadOnlyBufferException();\n        if (end - start > remaining())\n            throw new BufferOverflowException();\n        for (int i = start; i < end; i++)\n            this.put(src.charAt(i));\n        return this;\n    }"}
{"Number":"422","API Relative Path":"java.nio.charset.CharsetEncoder.java-CharsetEncoder(Charset-float-float-byte[])","Corresponding Source":"/**\n     * Initializes a new encoder.  The new encoder will have the given\n     * bytes-per-char and replacement values.\n     *\n     * @param  cs\n     *         The charset that created this encoder\n     *\n     * @param  averageBytesPerChar\n     *         A positive float value indicating the expected number of\n     *         bytes that will be produced for each input character\n     *\n     * @param  maxBytesPerChar\n     *         A positive float value indicating the maximum number of\n     *         bytes that will be produced for each input character\n     *\n     * @param  replacement\n     *         The initial replacement; must not be <tt>null<\/tt>, must have\n     *         non-zero length, must not be longer than maxBytesPerChar,\n     *         and must be {@linkplain #isLegalReplacement legal}\n     *\n     * @throws  IllegalArgumentException\n     *          If the preconditions on the parameters do not hold\n     */\n    protected\n    CharsetEncoder(Charset cs,\n                   float averageBytesPerChar,\n                   float maxBytesPerChar,\n                   byte[] replacement)\n    {\n        this.charset = cs;\n        if (averageBytesPerChar <= 0.0f)\n            throw new IllegalArgumentException(\"Non-positive \"\n                                               + \"averageBytesPerChar\");\n        if (maxBytesPerChar <= 0.0f)\n            throw new IllegalArgumentException(\"Non-positive \"\n                                               + \"maxBytesPerChar\");\n        if (!Charset.atBugLevel(\"1.4\")) {\n            if (averageBytesPerChar > maxBytesPerChar)\n                throw new IllegalArgumentException(\"averageBytesPerChar\"\n                                                   + \" exceeds \"\n                                                   + \"maxBytesPerChar\");\n        }\n        this.replacement = replacement;\n        this.averageBytesPerChar = averageBytesPerChar;\n        this.maxBytesPerChar = maxBytesPerChar;\n        replaceWith(replacement);\n    }"}
{"Number":"423","API Relative Path":"java.nio.DoubleBuffer.java-allocate(int)","Corresponding Source":"/**\n     * Allocates a new double buffer.\n     *\n     * <p> The new buffer's position will be zero, its limit will be its\n     * capacity, its mark will be undefined, and each of its elements will be\n     * initialized to zero.  It will have a {@link #array backing array},\n     * and its {@link #arrayOffset array offset} will be zero.\n     *\n     * @param  capacity\n     *         The new buffer's capacity, in doubles\n     *\n     * @return  The new double buffer\n     *\n     * @throws  IllegalArgumentException\n     *          If the <tt>capacity<\/tt> is a negative integer\n     */\n    public static DoubleBuffer allocate(int capacity) {\n        if (capacity < 0)\n            throw new IllegalArgumentException();\n        return new HeapDoubleBuffer(capacity, capacity);\n    }"}
{"Number":"424","API Relative Path":"java.nio.DoubleBuffer.java-get(double[]-int-int)","Corresponding Source":"// -- Bulk get operations --\n\n    /**\n     * Relative bulk <i>get<\/i> method.\n     *\n     * <p> This method transfers doubles from this buffer into the given\n     * destination array.  If there are fewer doubles remaining in the\n     * buffer than are required to satisfy the request, that is, if\n     * <tt>length<\/tt>&nbsp;<tt>&gt;<\/tt>&nbsp;<tt>remaining()<\/tt>, then no\n     * doubles are transferred and a {@link BufferUnderflowException} is\n     * thrown.\n     *\n     * <p> Otherwise, this method copies <tt>length<\/tt> doubles from this\n     * buffer into the given array, starting at the current position of this\n     * buffer and at the given offset in the array.  The position of this\n     * buffer is then incremented by <tt>length<\/tt>.\n     *\n     * <p> In other words, an invocation of this method of the form\n     * <tt>src.get(dst,&nbsp;off,&nbsp;len)<\/tt> has exactly the same effect as\n     * the loop\n     *\n     * <pre>{@code\n     *     for (int i = off; i < off + len; i++)\n     *         dst[i] = src.get():\n     * }<\/pre>\n     *\n     * except that it first checks that there are sufficient doubles in\n     * this buffer and it is potentially much more efficient.\n     *\n     * @param  dst\n     *         The array into which doubles are to be written\n     *\n     * @param  offset\n     *         The offset within the array of the first double to be\n     *         written; must be non-negative and no larger than\n     *         <tt>dst.length<\/tt>\n     *\n     * @param  length\n     *         The maximum number of doubles to be written to the given\n     *         array; must be non-negative and no larger than\n     *         <tt>dst.length - offset<\/tt>\n     *\n     * @return  This buffer\n     *\n     * @throws  BufferUnderflowException\n     *          If there are fewer than <tt>length<\/tt> doubles\n     *          remaining in this buffer\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the preconditions on the <tt>offset<\/tt> and <tt>length<\/tt>\n     *          parameters do not hold\n     */\n    public DoubleBuffer get(double[] dst, int offset, int length) {\n        checkBounds(offset, length, dst.length);\n        if (length > remaining())\n            throw new BufferUnderflowException();\n        int end = offset + length;\n        for (int i = offset; i < end; i++)\n            dst[i] = get();\n        return this;\n    }"}
{"Number":"425","API Relative Path":"java.nio.DoubleBuffer.java-put(DoubleBuffer)","Corresponding Source":"// -- Bulk put operations --\n\n    /**\n     * Relative bulk <i>put<\/i> method&nbsp;&nbsp;<i>(optional operation)<\/i>.\n     *\n     * <p> This method transfers the doubles remaining in the given source\n     * buffer into this buffer.  If there are more doubles remaining in the\n     * source buffer than in this buffer, that is, if\n     * <tt>src.remaining()<\/tt>&nbsp;<tt>&gt;<\/tt>&nbsp;<tt>remaining()<\/tt>,\n     * then no doubles are transferred and a {@link\n     * BufferOverflowException} is thrown.\n     *\n     * <p> Otherwise, this method copies\n     * <i>n<\/i>&nbsp;=&nbsp;<tt>src.remaining()<\/tt> doubles from the given\n     * buffer into this buffer, starting at each buffer's current position.\n     * The positions of both buffers are then incremented by <i>n<\/i>.\n     *\n     * <p> In other words, an invocation of this method of the form\n     * <tt>dst.put(src)<\/tt> has exactly the same effect as the loop\n     *\n     * <pre>\n     *     while (src.hasRemaining())\n     *         dst.put(src.get()); <\/pre>\n     *\n     * except that it first checks that there is sufficient space in this\n     * buffer and it is potentially much more efficient.\n     *\n     * @param  src\n     *         The source buffer from which doubles are to be read;\n     *         must not be this buffer\n     *\n     * @return  This buffer\n     *\n     * @throws  BufferOverflowException\n     *          If there is insufficient space in this buffer\n     *          for the remaining doubles in the source buffer\n     *\n     * @throws  IllegalArgumentException\n     *          If the source buffer is this buffer\n     *\n     * @throws  ReadOnlyBufferException\n     *          If this buffer is read-only\n     */\n    public DoubleBuffer put(DoubleBuffer src) {\n        if (src == this)\n            throw new IllegalArgumentException();\n        if (isReadOnly())\n            throw new ReadOnlyBufferException();\n        int n = src.remaining();\n        if (n > remaining())\n            throw new BufferOverflowException();\n        for (int i = 0; i < n; i++)\n            put(src.get());\n        return this;\n    }"}
{"Number":"426","API Relative Path":"java.nio.DoubleBuffer.java-put(double[]-int-int)","Corresponding Source":"/**\n     * Relative bulk <i>put<\/i> method&nbsp;&nbsp;<i>(optional operation)<\/i>.\n     *\n     * <p> This method transfers doubles into this buffer from the given\n     * source array.  If there are more doubles to be copied from the array\n     * than remain in this buffer, that is, if\n     * <tt>length<\/tt>&nbsp;<tt>&gt;<\/tt>&nbsp;<tt>remaining()<\/tt>, then no\n     * doubles are transferred and a {@link BufferOverflowException} is\n     * thrown.\n     *\n     * <p> Otherwise, this method copies <tt>length<\/tt> doubles from the\n     * given array into this buffer, starting at the given offset in the array\n     * and at the current position of this buffer.  The position of this buffer\n     * is then incremented by <tt>length<\/tt>.\n     *\n     * <p> In other words, an invocation of this method of the form\n     * <tt>dst.put(src,&nbsp;off,&nbsp;len)<\/tt> has exactly the same effect as\n     * the loop\n     *\n     * <pre>{@code\n     *     for (int i = off; i < off + len; i++)\n     *         dst.put(a[i]);\n     * }<\/pre>\n     *\n     * except that it first checks that there is sufficient space in this\n     * buffer and it is potentially much more efficient.\n     *\n     * @param  src\n     *         The array from which doubles are to be read\n     *\n     * @param  offset\n     *         The offset within the array of the first double to be read;\n     *         must be non-negative and no larger than <tt>array.length<\/tt>\n     *\n     * @param  length\n     *         The number of doubles to be read from the given array;\n     *         must be non-negative and no larger than\n     *         <tt>array.length - offset<\/tt>\n     *\n     * @return  This buffer\n     *\n     * @throws  BufferOverflowException\n     *          If there is insufficient space in this buffer\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the preconditions on the <tt>offset<\/tt> and <tt>length<\/tt>\n     *          parameters do not hold\n     *\n     * @throws  ReadOnlyBufferException\n     *          If this buffer is read-only\n     */\n    public DoubleBuffer put(double[] src, int offset, int length) {\n        checkBounds(offset, length, src.length);\n        if (length > remaining())\n            throw new BufferOverflowException();\n        int end = offset + length;\n        for (int i = offset; i < end; i++)\n            this.put(src[i]);\n        return this;\n    }"}
{"Number":"427","API Relative Path":"java.nio.file.attribute.FileTime.java-from(Instant)","Corresponding Source":"/**\n     * Returns a {@code FileTime} representing the same point of time value\n     * on the time-line as the provided {@code Instant} object.\n     *\n     * @param   instant\n     *          the instant to convert\n     * @return  a {@code FileTime} representing the same point on the time-line\n     *          as the provided instant\n     * @since 1.8\n     */\n    public static FileTime from(Instant instant) {\n        Objects.requireNonNull(instant, \"instant\");\n        return new FileTime(0, null, instant);\n    }"}
{"Number":"428","API Relative Path":"java.nio.file.attribute.FileTime.java-from(long-TimeUnit)","Corresponding Source":"/**\n     * Returns a {@code FileTime} representing a value at the given unit of\n     * granularity.\n     *\n     * @param   value\n     *          the value since the epoch (1970-01-01T00:00:00Z); can be\n     *          negative\n     * @param   unit\n     *          the unit of granularity to interpret the value\n     *\n     * @return  a {@code FileTime} representing the given value\n     */\n    public static FileTime from(long value, TimeUnit unit) {\n        Objects.requireNonNull(unit, \"unit\");\n        return new FileTime(value, unit, null);\n    }"}
{"Number":"429","API Relative Path":"java.nio.file.attribute.FileTime.java-to(TimeUnit)","Corresponding Source":"/**\n     * Returns the value at the given unit of granularity.\n     *\n     * <p> Conversion from a coarser granularity that would numerically overflow\n     * saturate to {@code Long.MIN_VALUE} if negative or {@code Long.MAX_VALUE}\n     * if positive.\n     *\n     * @param   unit\n     *          the unit of granularity for the return value\n     *\n     * @return  value in the given unit of granularity, since the epoch\n     *          since the epoch (1970-01-01T00:00:00Z); can be negative\n     */\n    public long to(TimeUnit unit) {\n        Objects.requireNonNull(unit, \"unit\");\n        if (this.unit != null) {\n            return unit.convert(this.value, this.unit);\n        } else {\n            long secs = unit.convert(instant.getEpochSecond(), TimeUnit.SECONDS);\n            if (secs == Long.MIN_VALUE || secs == Long.MAX_VALUE) {\n                return secs;\n            }\n            long nanos = unit.convert(instant.getNano(), TimeUnit.NANOSECONDS);\n            long r = secs + nanos;\n            // Math.addExact() variant\n            if (((secs ^ r) & (nanos ^ r)) < 0) {\n                return (secs < 0) ? Long.MIN_VALUE : Long.MAX_VALUE;\n            }\n            return r;\n        }\n    }"}
{"Number":"430","API Relative Path":"java.nio.file.Files.java-copy(Path-OutputStream)","Corresponding Source":"/**\n     * Copies all bytes from a file to an output stream.\n     *\n     * <p> If an I/O error occurs reading from the file or writing to the output\n     * stream, then it may do so after some bytes have been read or written.\n     * Consequently the output stream may be in an inconsistent state. It is\n     * strongly recommended that the output stream be promptly closed if an I/O\n     * error occurs.\n     *\n     * <p> This method may block indefinitely writing to the output stream (or\n     * reading from the file). The behavior for the case that the output stream\n     * is <i>asynchronously closed<\/i> or the thread interrupted during the copy\n     * is highly output stream and file system provider specific and therefore\n     * not specified.\n     *\n     * <p> Note that if the given output stream is {@link java.io.Flushable}\n     * then its {@link java.io.Flushable#flush flush} method may need to invoked\n     * after this method completes so as to flush any buffered output.\n     *\n     * @param   source\n     *          the  path to the file\n     * @param   out\n     *          the output stream to write to\n     *\n     * @return  the number of bytes read or written\n     *\n     * @throws  IOException\n     *          if an I/O error occurs when reading or writing\n     * @throws  SecurityException\n     *          In the case of the default provider, and a security manager is\n     *          installed, the {@link SecurityManager#checkRead(String) checkRead}\n     *          method is invoked to check read access to the file.\n     */\n    public static long copy(Path source, OutputStream out) throws IOException {\n        // ensure not null before opening file\n        Objects.requireNonNull(out);\n\n        try (InputStream in = newInputStream(source)) {\n            return copy(in, out);\n        }\n    }"}
{"Number":"431","API Relative Path":"java.nio.file.FileSystems.java-newFileSystem(Path-ClassLoader)","Corresponding Source":"/**\n     * Constructs a new {@code FileSystem} to access the contents of a file as a\n     * file system.\n     *\n     * <p> This method makes use of specialized providers that create pseudo file\n     * systems where the contents of one or more files is treated as a file\n     * system.\n     *\n     * <p> This method iterates over the {@link FileSystemProvider#installedProviders()\n     * installed} providers. It invokes, in turn, each provider's {@link\n     * FileSystemProvider#newFileSystem(Path,Map) newFileSystem(Path,Map)} method\n     * with an empty map. If a provider returns a file system then the iteration\n     * terminates and the file system is returned. If none of the installed\n     * providers return a {@code FileSystem} then an attempt is made to locate\n     * the provider using the given class loader. If a provider returns a file\n     * system then the lookup terminates and the file system is returned.\n     *\n     * @param   path\n     *          the path to the file\n     * @param   loader\n     *          the class loader to locate the provider or {@code null} to only\n     *          attempt to locate an installed provider\n     *\n     * @return  a new file system\n     *\n     * @throws  ProviderNotFoundException\n     *          if a provider supporting this file type cannot be located\n     * @throws  ServiceConfigurationError\n     *          when an error occurs while loading a service provider\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          if a security manager is installed and it denies an unspecified\n     *          permission\n     */\n    public static FileSystem newFileSystem(Path path,\n                                           ClassLoader loader)\n        throws IOException\n    {\n        if (path == null)\n            throw new NullPointerException();\n        Map<String,?> env = Collections.emptyMap();\n\n        // check installed providers\n        for (FileSystemProvider provider: FileSystemProvider.installedProviders()) {\n            try {\n                return provider.newFileSystem(path, env);\n            } catch (UnsupportedOperationException uoe) {\n            }\n        }\n\n        // if not found, use service-provider loading facility\n        if (loader != null) {\n            ServiceLoader<FileSystemProvider> sl = ServiceLoader\n                .load(FileSystemProvider.class, loader);\n            for (FileSystemProvider provider: sl) {\n                try {\n                    return provider.newFileSystem(path, env);\n                } catch (UnsupportedOperationException uoe) {\n                }\n            }\n        }\n\n        throw new ProviderNotFoundException(\"Provider not found\");\n    }"}
{"Number":"432","API Relative Path":"java.nio.file.LinkPermission.java-LinkPermission(String-String)","Corresponding Source":"/**\n     * Constructs a {@code LinkPermission} with the specified name.\n     *\n     * @param   name\n     *          the name of the permission; must be \"hard\" or \"symbolic\".\n     * @param   actions\n     *          the actions for the permission; must be the empty string or\n     *          {@code null}\n     *\n     * @throws  IllegalArgumentException\n     *          if name is empty or invalid, or actions is a non-empty string\n     */\n    public LinkPermission(String name, String actions) {\n        super(name);\n        checkName(name);\n        if (actions != null && actions.length() > 0) {\n            throw new IllegalArgumentException(\"actions: \" + actions);\n        }\n    }"}
{"Number":"433","API Relative Path":"java.nio.file.SimpleFileVisitor.java-postVisitDirectory(T-IOException)","Corresponding Source":"/**\n     * Invoked for a directory after entries in the directory, and all of their\n     * descendants, have been visited.\n     *\n     * <p> Unless overridden, this method returns {@link FileVisitResult#CONTINUE\n     * CONTINUE} if the directory iteration completes without an I/O exception;\n     * otherwise this method re-throws the I/O exception that caused the iteration\n     * of the directory to terminate prematurely.\n     */\n    @Override\n    public FileVisitResult postVisitDirectory(T dir, IOException exc)\n        throws IOException\n    {\n        Objects.requireNonNull(dir);\n        if (exc != null)\n            throw exc;\n        return FileVisitResult.CONTINUE;\n    }"}
{"Number":"434","API Relative Path":"java.nio.file.SimpleFileVisitor.java-preVisitDirectory(T-BasicFileAttributes)","Corresponding Source":"/**\n     * Invoked for a directory before entries in the directory are visited.\n     *\n     * <p> Unless overridden, this method returns {@link FileVisitResult#CONTINUE\n     * CONTINUE}.\n     */\n    @Override\n    public FileVisitResult preVisitDirectory(T dir, BasicFileAttributes attrs)\n        throws IOException\n    {\n        Objects.requireNonNull(dir);\n        Objects.requireNonNull(attrs);\n        return FileVisitResult.CONTINUE;\n    }"}
{"Number":"435","API Relative Path":"java.nio.file.SimpleFileVisitor.java-visitFile(T-BasicFileAttributes)","Corresponding Source":"/**\n     * Invoked for a file in a directory.\n     *\n     * <p> Unless overridden, this method returns {@link FileVisitResult#CONTINUE\n     * CONTINUE}.\n     */\n    @Override\n    public FileVisitResult visitFile(T file, BasicFileAttributes attrs)\n        throws IOException\n    {\n        Objects.requireNonNull(file);\n        Objects.requireNonNull(attrs);\n        return FileVisitResult.CONTINUE;\n    }"}
{"Number":"436","API Relative Path":"java.nio.file.SimpleFileVisitor.java-visitFileFailed(T-IOException)","Corresponding Source":"/**\n     * Invoked for a file that could not be visited.\n     *\n     * <p> Unless overridden, this method re-throws the I/O exception that prevented\n     * the file from being visited.\n     */\n    @Override\n    public FileVisitResult visitFileFailed(T file, IOException exc)\n        throws IOException\n    {\n        Objects.requireNonNull(file);\n        throw exc;\n    }"}
{"Number":"437","API Relative Path":"java.nio.FloatBuffer.java-allocate(int)","Corresponding Source":"/**\n     * Allocates a new float buffer.\n     *\n     * <p> The new buffer's position will be zero, its limit will be its\n     * capacity, its mark will be undefined, and each of its elements will be\n     * initialized to zero.  It will have a {@link #array backing array},\n     * and its {@link #arrayOffset array offset} will be zero.\n     *\n     * @param  capacity\n     *         The new buffer's capacity, in floats\n     *\n     * @return  The new float buffer\n     *\n     * @throws  IllegalArgumentException\n     *          If the <tt>capacity<\/tt> is a negative integer\n     */\n    public static FloatBuffer allocate(int capacity) {\n        if (capacity < 0)\n            throw new IllegalArgumentException();\n        return new HeapFloatBuffer(capacity, capacity);\n    }"}
{"Number":"438","API Relative Path":"java.nio.FloatBuffer.java-get(float[]-int-int)","Corresponding Source":"// -- Bulk get operations --\n\n    /**\n     * Relative bulk <i>get<\/i> method.\n     *\n     * <p> This method transfers floats from this buffer into the given\n     * destination array.  If there are fewer floats remaining in the\n     * buffer than are required to satisfy the request, that is, if\n     * <tt>length<\/tt>&nbsp;<tt>&gt;<\/tt>&nbsp;<tt>remaining()<\/tt>, then no\n     * floats are transferred and a {@link BufferUnderflowException} is\n     * thrown.\n     *\n     * <p> Otherwise, this method copies <tt>length<\/tt> floats from this\n     * buffer into the given array, starting at the current position of this\n     * buffer and at the given offset in the array.  The position of this\n     * buffer is then incremented by <tt>length<\/tt>.\n     *\n     * <p> In other words, an invocation of this method of the form\n     * <tt>src.get(dst,&nbsp;off,&nbsp;len)<\/tt> has exactly the same effect as\n     * the loop\n     *\n     * <pre>{@code\n     *     for (int i = off; i < off + len; i++)\n     *         dst[i] = src.get():\n     * }<\/pre>\n     *\n     * except that it first checks that there are sufficient floats in\n     * this buffer and it is potentially much more efficient.\n     *\n     * @param  dst\n     *         The array into which floats are to be written\n     *\n     * @param  offset\n     *         The offset within the array of the first float to be\n     *         written; must be non-negative and no larger than\n     *         <tt>dst.length<\/tt>\n     *\n     * @param  length\n     *         The maximum number of floats to be written to the given\n     *         array; must be non-negative and no larger than\n     *         <tt>dst.length - offset<\/tt>\n     *\n     * @return  This buffer\n     *\n     * @throws  BufferUnderflowException\n     *          If there are fewer than <tt>length<\/tt> floats\n     *          remaining in this buffer\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the preconditions on the <tt>offset<\/tt> and <tt>length<\/tt>\n     *          parameters do not hold\n     */\n    public FloatBuffer get(float[] dst, int offset, int length) {\n        checkBounds(offset, length, dst.length);\n        if (length > remaining())\n            throw new BufferUnderflowException();\n        int end = offset + length;\n        for (int i = offset; i < end; i++)\n            dst[i] = get();\n        return this;\n    }"}
{"Number":"439","API Relative Path":"java.nio.FloatBuffer.java-put(FloatBuffer)","Corresponding Source":"// -- Bulk put operations --\n\n    /**\n     * Relative bulk <i>put<\/i> method&nbsp;&nbsp;<i>(optional operation)<\/i>.\n     *\n     * <p> This method transfers the floats remaining in the given source\n     * buffer into this buffer.  If there are more floats remaining in the\n     * source buffer than in this buffer, that is, if\n     * <tt>src.remaining()<\/tt>&nbsp;<tt>&gt;<\/tt>&nbsp;<tt>remaining()<\/tt>,\n     * then no floats are transferred and a {@link\n     * BufferOverflowException} is thrown.\n     *\n     * <p> Otherwise, this method copies\n     * <i>n<\/i>&nbsp;=&nbsp;<tt>src.remaining()<\/tt> floats from the given\n     * buffer into this buffer, starting at each buffer's current position.\n     * The positions of both buffers are then incremented by <i>n<\/i>.\n     *\n     * <p> In other words, an invocation of this method of the form\n     * <tt>dst.put(src)<\/tt> has exactly the same effect as the loop\n     *\n     * <pre>\n     *     while (src.hasRemaining())\n     *         dst.put(src.get()); <\/pre>\n     *\n     * except that it first checks that there is sufficient space in this\n     * buffer and it is potentially much more efficient.\n     *\n     * @param  src\n     *         The source buffer from which floats are to be read;\n     *         must not be this buffer\n     *\n     * @return  This buffer\n     *\n     * @throws  BufferOverflowException\n     *          If there is insufficient space in this buffer\n     *          for the remaining floats in the source buffer\n     *\n     * @throws  IllegalArgumentException\n     *          If the source buffer is this buffer\n     *\n     * @throws  ReadOnlyBufferException\n     *          If this buffer is read-only\n     */\n    public FloatBuffer put(FloatBuffer src) {\n        if (src == this)\n            throw new IllegalArgumentException();\n        if (isReadOnly())\n            throw new ReadOnlyBufferException();\n        int n = src.remaining();\n        if (n > remaining())\n            throw new BufferOverflowException();\n        for (int i = 0; i < n; i++)\n            put(src.get());\n        return this;\n    }"}
{"Number":"440","API Relative Path":"java.nio.FloatBuffer.java-put(float[]-int-int)","Corresponding Source":"/**\n     * Relative bulk <i>put<\/i> method&nbsp;&nbsp;<i>(optional operation)<\/i>.\n     *\n     * <p> This method transfers floats into this buffer from the given\n     * source array.  If there are more floats to be copied from the array\n     * than remain in this buffer, that is, if\n     * <tt>length<\/tt>&nbsp;<tt>&gt;<\/tt>&nbsp;<tt>remaining()<\/tt>, then no\n     * floats are transferred and a {@link BufferOverflowException} is\n     * thrown.\n     *\n     * <p> Otherwise, this method copies <tt>length<\/tt> floats from the\n     * given array into this buffer, starting at the given offset in the array\n     * and at the current position of this buffer.  The position of this buffer\n     * is then incremented by <tt>length<\/tt>.\n     *\n     * <p> In other words, an invocation of this method of the form\n     * <tt>dst.put(src,&nbsp;off,&nbsp;len)<\/tt> has exactly the same effect as\n     * the loop\n     *\n     * <pre>{@code\n     *     for (int i = off; i < off + len; i++)\n     *         dst.put(a[i]);\n     * }<\/pre>\n     *\n     * except that it first checks that there is sufficient space in this\n     * buffer and it is potentially much more efficient.\n     *\n     * @param  src\n     *         The array from which floats are to be read\n     *\n     * @param  offset\n     *         The offset within the array of the first float to be read;\n     *         must be non-negative and no larger than <tt>array.length<\/tt>\n     *\n     * @param  length\n     *         The number of floats to be read from the given array;\n     *         must be non-negative and no larger than\n     *         <tt>array.length - offset<\/tt>\n     *\n     * @return  This buffer\n     *\n     * @throws  BufferOverflowException\n     *          If there is insufficient space in this buffer\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the preconditions on the <tt>offset<\/tt> and <tt>length<\/tt>\n     *          parameters do not hold\n     *\n     * @throws  ReadOnlyBufferException\n     *          If this buffer is read-only\n     */\n    public FloatBuffer put(float[] src, int offset, int length) {\n        checkBounds(offset, length, src.length);\n        if (length > remaining())\n            throw new BufferOverflowException();\n        int end = offset + length;\n        for (int i = offset; i < end; i++)\n            this.put(src[i]);\n        return this;\n    }"}
{"Number":"441","API Relative Path":"java.nio.IntBuffer.java-allocate(int)","Corresponding Source":"/**\n     * Allocates a new int buffer.\n     *\n     * <p> The new buffer's position will be zero, its limit will be its\n     * capacity, its mark will be undefined, and each of its elements will be\n     * initialized to zero.  It will have a {@link #array backing array},\n     * and its {@link #arrayOffset array offset} will be zero.\n     *\n     * @param  capacity\n     *         The new buffer's capacity, in ints\n     *\n     * @return  The new int buffer\n     *\n     * @throws  IllegalArgumentException\n     *          If the <tt>capacity<\/tt> is a negative integer\n     */\n    public static IntBuffer allocate(int capacity) {\n        if (capacity < 0)\n            throw new IllegalArgumentException();\n        return new HeapIntBuffer(capacity, capacity);\n    }"}
{"Number":"442","API Relative Path":"java.nio.IntBuffer.java-get(int[]-int-int)","Corresponding Source":"// -- Bulk get operations --\n\n    /**\n     * Relative bulk <i>get<\/i> method.\n     *\n     * <p> This method transfers ints from this buffer into the given\n     * destination array.  If there are fewer ints remaining in the\n     * buffer than are required to satisfy the request, that is, if\n     * <tt>length<\/tt>&nbsp;<tt>&gt;<\/tt>&nbsp;<tt>remaining()<\/tt>, then no\n     * ints are transferred and a {@link BufferUnderflowException} is\n     * thrown.\n     *\n     * <p> Otherwise, this method copies <tt>length<\/tt> ints from this\n     * buffer into the given array, starting at the current position of this\n     * buffer and at the given offset in the array.  The position of this\n     * buffer is then incremented by <tt>length<\/tt>.\n     *\n     * <p> In other words, an invocation of this method of the form\n     * <tt>src.get(dst,&nbsp;off,&nbsp;len)<\/tt> has exactly the same effect as\n     * the loop\n     *\n     * <pre>{@code\n     *     for (int i = off; i < off + len; i++)\n     *         dst[i] = src.get():\n     * }<\/pre>\n     *\n     * except that it first checks that there are sufficient ints in\n     * this buffer and it is potentially much more efficient.\n     *\n     * @param  dst\n     *         The array into which ints are to be written\n     *\n     * @param  offset\n     *         The offset within the array of the first int to be\n     *         written; must be non-negative and no larger than\n     *         <tt>dst.length<\/tt>\n     *\n     * @param  length\n     *         The maximum number of ints to be written to the given\n     *         array; must be non-negative and no larger than\n     *         <tt>dst.length - offset<\/tt>\n     *\n     * @return  This buffer\n     *\n     * @throws  BufferUnderflowException\n     *          If there are fewer than <tt>length<\/tt> ints\n     *          remaining in this buffer\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the preconditions on the <tt>offset<\/tt> and <tt>length<\/tt>\n     *          parameters do not hold\n     */\n    public IntBuffer get(int[] dst, int offset, int length) {\n        checkBounds(offset, length, dst.length);\n        if (length > remaining())\n            throw new BufferUnderflowException();\n        int end = offset + length;\n        for (int i = offset; i < end; i++)\n            dst[i] = get();\n        return this;\n    }"}
{"Number":"443","API Relative Path":"java.nio.IntBuffer.java-put(IntBuffer)","Corresponding Source":"// -- Bulk put operations --\n\n    /**\n     * Relative bulk <i>put<\/i> method&nbsp;&nbsp;<i>(optional operation)<\/i>.\n     *\n     * <p> This method transfers the ints remaining in the given source\n     * buffer into this buffer.  If there are more ints remaining in the\n     * source buffer than in this buffer, that is, if\n     * <tt>src.remaining()<\/tt>&nbsp;<tt>&gt;<\/tt>&nbsp;<tt>remaining()<\/tt>,\n     * then no ints are transferred and a {@link\n     * BufferOverflowException} is thrown.\n     *\n     * <p> Otherwise, this method copies\n     * <i>n<\/i>&nbsp;=&nbsp;<tt>src.remaining()<\/tt> ints from the given\n     * buffer into this buffer, starting at each buffer's current position.\n     * The positions of both buffers are then incremented by <i>n<\/i>.\n     *\n     * <p> In other words, an invocation of this method of the form\n     * <tt>dst.put(src)<\/tt> has exactly the same effect as the loop\n     *\n     * <pre>\n     *     while (src.hasRemaining())\n     *         dst.put(src.get()); <\/pre>\n     *\n     * except that it first checks that there is sufficient space in this\n     * buffer and it is potentially much more efficient.\n     *\n     * @param  src\n     *         The source buffer from which ints are to be read;\n     *         must not be this buffer\n     *\n     * @return  This buffer\n     *\n     * @throws  BufferOverflowException\n     *          If there is insufficient space in this buffer\n     *          for the remaining ints in the source buffer\n     *\n     * @throws  IllegalArgumentException\n     *          If the source buffer is this buffer\n     *\n     * @throws  ReadOnlyBufferException\n     *          If this buffer is read-only\n     */\n    public IntBuffer put(IntBuffer src) {\n        if (src == this)\n            throw new IllegalArgumentException();\n        if (isReadOnly())\n            throw new ReadOnlyBufferException();\n        int n = src.remaining();\n        if (n > remaining())\n            throw new BufferOverflowException();\n        for (int i = 0; i < n; i++)\n            put(src.get());\n        return this;\n    }"}
{"Number":"444","API Relative Path":"java.nio.IntBuffer.java-put(int[]-int-int)","Corresponding Source":"/**\n     * Relative bulk <i>put<\/i> method&nbsp;&nbsp;<i>(optional operation)<\/i>.\n     *\n     * <p> This method transfers ints into this buffer from the given\n     * source array.  If there are more ints to be copied from the array\n     * than remain in this buffer, that is, if\n     * <tt>length<\/tt>&nbsp;<tt>&gt;<\/tt>&nbsp;<tt>remaining()<\/tt>, then no\n     * ints are transferred and a {@link BufferOverflowException} is\n     * thrown.\n     *\n     * <p> Otherwise, this method copies <tt>length<\/tt> ints from the\n     * given array into this buffer, starting at the given offset in the array\n     * and at the current position of this buffer.  The position of this buffer\n     * is then incremented by <tt>length<\/tt>.\n     *\n     * <p> In other words, an invocation of this method of the form\n     * <tt>dst.put(src,&nbsp;off,&nbsp;len)<\/tt> has exactly the same effect as\n     * the loop\n     *\n     * <pre>{@code\n     *     for (int i = off; i < off + len; i++)\n     *         dst.put(a[i]);\n     * }<\/pre>\n     *\n     * except that it first checks that there is sufficient space in this\n     * buffer and it is potentially much more efficient.\n     *\n     * @param  src\n     *         The array from which ints are to be read\n     *\n     * @param  offset\n     *         The offset within the array of the first int to be read;\n     *         must be non-negative and no larger than <tt>array.length<\/tt>\n     *\n     * @param  length\n     *         The number of ints to be read from the given array;\n     *         must be non-negative and no larger than\n     *         <tt>array.length - offset<\/tt>\n     *\n     * @return  This buffer\n     *\n     * @throws  BufferOverflowException\n     *          If there is insufficient space in this buffer\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the preconditions on the <tt>offset<\/tt> and <tt>length<\/tt>\n     *          parameters do not hold\n     *\n     * @throws  ReadOnlyBufferException\n     *          If this buffer is read-only\n     */\n    public IntBuffer put(int[] src, int offset, int length) {\n        checkBounds(offset, length, src.length);\n        if (length > remaining())\n            throw new BufferOverflowException();\n        int end = offset + length;\n        for (int i = offset; i < end; i++)\n            this.put(src[i]);\n        return this;\n    }"}
{"Number":"445","API Relative Path":"java.nio.LongBuffer.java-allocate(int)","Corresponding Source":"/**\n     * Allocates a new long buffer.\n     *\n     * <p> The new buffer's position will be zero, its limit will be its\n     * capacity, its mark will be undefined, and each of its elements will be\n     * initialized to zero.  It will have a {@link #array backing array},\n     * and its {@link #arrayOffset array offset} will be zero.\n     *\n     * @param  capacity\n     *         The new buffer's capacity, in longs\n     *\n     * @return  The new long buffer\n     *\n     * @throws  IllegalArgumentException\n     *          If the <tt>capacity<\/tt> is a negative integer\n     */\n    public static LongBuffer allocate(int capacity) {\n        if (capacity < 0)\n            throw new IllegalArgumentException();\n        return new HeapLongBuffer(capacity, capacity);\n    }"}
{"Number":"446","API Relative Path":"java.nio.LongBuffer.java-get(long[]-int-int)","Corresponding Source":"// -- Bulk get operations --\n\n    /**\n     * Relative bulk <i>get<\/i> method.\n     *\n     * <p> This method transfers longs from this buffer into the given\n     * destination array.  If there are fewer longs remaining in the\n     * buffer than are required to satisfy the request, that is, if\n     * <tt>length<\/tt>&nbsp;<tt>&gt;<\/tt>&nbsp;<tt>remaining()<\/tt>, then no\n     * longs are transferred and a {@link BufferUnderflowException} is\n     * thrown.\n     *\n     * <p> Otherwise, this method copies <tt>length<\/tt> longs from this\n     * buffer into the given array, starting at the current position of this\n     * buffer and at the given offset in the array.  The position of this\n     * buffer is then incremented by <tt>length<\/tt>.\n     *\n     * <p> In other words, an invocation of this method of the form\n     * <tt>src.get(dst,&nbsp;off,&nbsp;len)<\/tt> has exactly the same effect as\n     * the loop\n     *\n     * <pre>{@code\n     *     for (int i = off; i < off + len; i++)\n     *         dst[i] = src.get():\n     * }<\/pre>\n     *\n     * except that it first checks that there are sufficient longs in\n     * this buffer and it is potentially much more efficient.\n     *\n     * @param  dst\n     *         The array into which longs are to be written\n     *\n     * @param  offset\n     *         The offset within the array of the first long to be\n     *         written; must be non-negative and no larger than\n     *         <tt>dst.length<\/tt>\n     *\n     * @param  length\n     *         The maximum number of longs to be written to the given\n     *         array; must be non-negative and no larger than\n     *         <tt>dst.length - offset<\/tt>\n     *\n     * @return  This buffer\n     *\n     * @throws  BufferUnderflowException\n     *          If there are fewer than <tt>length<\/tt> longs\n     *          remaining in this buffer\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the preconditions on the <tt>offset<\/tt> and <tt>length<\/tt>\n     *          parameters do not hold\n     */\n    public LongBuffer get(long[] dst, int offset, int length) {\n        checkBounds(offset, length, dst.length);\n        if (length > remaining())\n            throw new BufferUnderflowException();\n        int end = offset + length;\n        for (int i = offset; i < end; i++)\n            dst[i] = get();\n        return this;\n    }"}
{"Number":"447","API Relative Path":"java.nio.LongBuffer.java-put(LongBuffer)","Corresponding Source":"// -- Bulk put operations --\n\n    /**\n     * Relative bulk <i>put<\/i> method&nbsp;&nbsp;<i>(optional operation)<\/i>.\n     *\n     * <p> This method transfers the longs remaining in the given source\n     * buffer into this buffer.  If there are more longs remaining in the\n     * source buffer than in this buffer, that is, if\n     * <tt>src.remaining()<\/tt>&nbsp;<tt>&gt;<\/tt>&nbsp;<tt>remaining()<\/tt>,\n     * then no longs are transferred and a {@link\n     * BufferOverflowException} is thrown.\n     *\n     * <p> Otherwise, this method copies\n     * <i>n<\/i>&nbsp;=&nbsp;<tt>src.remaining()<\/tt> longs from the given\n     * buffer into this buffer, starting at each buffer's current position.\n     * The positions of both buffers are then incremented by <i>n<\/i>.\n     *\n     * <p> In other words, an invocation of this method of the form\n     * <tt>dst.put(src)<\/tt> has exactly the same effect as the loop\n     *\n     * <pre>\n     *     while (src.hasRemaining())\n     *         dst.put(src.get()); <\/pre>\n     *\n     * except that it first checks that there is sufficient space in this\n     * buffer and it is potentially much more efficient.\n     *\n     * @param  src\n     *         The source buffer from which longs are to be read;\n     *         must not be this buffer\n     *\n     * @return  This buffer\n     *\n     * @throws  BufferOverflowException\n     *          If there is insufficient space in this buffer\n     *          for the remaining longs in the source buffer\n     *\n     * @throws  IllegalArgumentException\n     *          If the source buffer is this buffer\n     *\n     * @throws  ReadOnlyBufferException\n     *          If this buffer is read-only\n     */\n    public LongBuffer put(LongBuffer src) {\n        if (src == this)\n            throw new IllegalArgumentException();\n        if (isReadOnly())\n            throw new ReadOnlyBufferException();\n        int n = src.remaining();\n        if (n > remaining())\n            throw new BufferOverflowException();\n        for (int i = 0; i < n; i++)\n            put(src.get());\n        return this;\n    }"}
{"Number":"448","API Relative Path":"java.nio.LongBuffer.java-put(long[]-int-int)","Corresponding Source":"/**\n     * Relative bulk <i>put<\/i> method&nbsp;&nbsp;<i>(optional operation)<\/i>.\n     *\n     * <p> This method transfers longs into this buffer from the given\n     * source array.  If there are more longs to be copied from the array\n     * than remain in this buffer, that is, if\n     * <tt>length<\/tt>&nbsp;<tt>&gt;<\/tt>&nbsp;<tt>remaining()<\/tt>, then no\n     * longs are transferred and a {@link BufferOverflowException} is\n     * thrown.\n     *\n     * <p> Otherwise, this method copies <tt>length<\/tt> longs from the\n     * given array into this buffer, starting at the given offset in the array\n     * and at the current position of this buffer.  The position of this buffer\n     * is then incremented by <tt>length<\/tt>.\n     *\n     * <p> In other words, an invocation of this method of the form\n     * <tt>dst.put(src,&nbsp;off,&nbsp;len)<\/tt> has exactly the same effect as\n     * the loop\n     *\n     * <pre>{@code\n     *     for (int i = off; i < off + len; i++)\n     *         dst.put(a[i]);\n     * }<\/pre>\n     *\n     * except that it first checks that there is sufficient space in this\n     * buffer and it is potentially much more efficient.\n     *\n     * @param  src\n     *         The array from which longs are to be read\n     *\n     * @param  offset\n     *         The offset within the array of the first long to be read;\n     *         must be non-negative and no larger than <tt>array.length<\/tt>\n     *\n     * @param  length\n     *         The number of longs to be read from the given array;\n     *         must be non-negative and no larger than\n     *         <tt>array.length - offset<\/tt>\n     *\n     * @return  This buffer\n     *\n     * @throws  BufferOverflowException\n     *          If there is insufficient space in this buffer\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the preconditions on the <tt>offset<\/tt> and <tt>length<\/tt>\n     *          parameters do not hold\n     *\n     * @throws  ReadOnlyBufferException\n     *          If this buffer is read-only\n     */\n    public LongBuffer put(long[] src, int offset, int length) {\n        checkBounds(offset, length, src.length);\n        if (length > remaining())\n            throw new BufferOverflowException();\n        int end = offset + length;\n        for (int i = offset; i < end; i++)\n            this.put(src[i]);\n        return this;\n    }"}
{"Number":"449","API Relative Path":"java.nio.ShortBuffer.java-allocate(int)","Corresponding Source":"/**\n     * Allocates a new short buffer.\n     *\n     * <p> The new buffer's position will be zero, its limit will be its\n     * capacity, its mark will be undefined, and each of its elements will be\n     * initialized to zero.  It will have a {@link #array backing array},\n     * and its {@link #arrayOffset array offset} will be zero.\n     *\n     * @param  capacity\n     *         The new buffer's capacity, in shorts\n     *\n     * @return  The new short buffer\n     *\n     * @throws  IllegalArgumentException\n     *          If the <tt>capacity<\/tt> is a negative integer\n     */\n    public static ShortBuffer allocate(int capacity) {\n        if (capacity < 0)\n            throw new IllegalArgumentException();\n        return new HeapShortBuffer(capacity, capacity);\n    }"}
{"Number":"450","API Relative Path":"java.nio.ShortBuffer.java-get(short[]-int-int)","Corresponding Source":"// -- Bulk get operations --\n\n    /**\n     * Relative bulk <i>get<\/i> method.\n     *\n     * <p> This method transfers shorts from this buffer into the given\n     * destination array.  If there are fewer shorts remaining in the\n     * buffer than are required to satisfy the request, that is, if\n     * <tt>length<\/tt>&nbsp;<tt>&gt;<\/tt>&nbsp;<tt>remaining()<\/tt>, then no\n     * shorts are transferred and a {@link BufferUnderflowException} is\n     * thrown.\n     *\n     * <p> Otherwise, this method copies <tt>length<\/tt> shorts from this\n     * buffer into the given array, starting at the current position of this\n     * buffer and at the given offset in the array.  The position of this\n     * buffer is then incremented by <tt>length<\/tt>.\n     *\n     * <p> In other words, an invocation of this method of the form\n     * <tt>src.get(dst,&nbsp;off,&nbsp;len)<\/tt> has exactly the same effect as\n     * the loop\n     *\n     * <pre>{@code\n     *     for (int i = off; i < off + len; i++)\n     *         dst[i] = src.get():\n     * }<\/pre>\n     *\n     * except that it first checks that there are sufficient shorts in\n     * this buffer and it is potentially much more efficient.\n     *\n     * @param  dst\n     *         The array into which shorts are to be written\n     *\n     * @param  offset\n     *         The offset within the array of the first short to be\n     *         written; must be non-negative and no larger than\n     *         <tt>dst.length<\/tt>\n     *\n     * @param  length\n     *         The maximum number of shorts to be written to the given\n     *         array; must be non-negative and no larger than\n     *         <tt>dst.length - offset<\/tt>\n     *\n     * @return  This buffer\n     *\n     * @throws  BufferUnderflowException\n     *          If there are fewer than <tt>length<\/tt> shorts\n     *          remaining in this buffer\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the preconditions on the <tt>offset<\/tt> and <tt>length<\/tt>\n     *          parameters do not hold\n     */\n    public ShortBuffer get(short[] dst, int offset, int length) {\n        checkBounds(offset, length, dst.length);\n        if (length > remaining())\n            throw new BufferUnderflowException();\n        int end = offset + length;\n        for (int i = offset; i < end; i++)\n            dst[i] = get();\n        return this;\n    }"}
{"Number":"451","API Relative Path":"java.nio.ShortBuffer.java-put(ShortBuffer)","Corresponding Source":"// -- Bulk put operations --\n\n    /**\n     * Relative bulk <i>put<\/i> method&nbsp;&nbsp;<i>(optional operation)<\/i>.\n     *\n     * <p> This method transfers the shorts remaining in the given source\n     * buffer into this buffer.  If there are more shorts remaining in the\n     * source buffer than in this buffer, that is, if\n     * <tt>src.remaining()<\/tt>&nbsp;<tt>&gt;<\/tt>&nbsp;<tt>remaining()<\/tt>,\n     * then no shorts are transferred and a {@link\n     * BufferOverflowException} is thrown.\n     *\n     * <p> Otherwise, this method copies\n     * <i>n<\/i>&nbsp;=&nbsp;<tt>src.remaining()<\/tt> shorts from the given\n     * buffer into this buffer, starting at each buffer's current position.\n     * The positions of both buffers are then incremented by <i>n<\/i>.\n     *\n     * <p> In other words, an invocation of this method of the form\n     * <tt>dst.put(src)<\/tt> has exactly the same effect as the loop\n     *\n     * <pre>\n     *     while (src.hasRemaining())\n     *         dst.put(src.get()); <\/pre>\n     *\n     * except that it first checks that there is sufficient space in this\n     * buffer and it is potentially much more efficient.\n     *\n     * @param  src\n     *         The source buffer from which shorts are to be read;\n     *         must not be this buffer\n     *\n     * @return  This buffer\n     *\n     * @throws  BufferOverflowException\n     *          If there is insufficient space in this buffer\n     *          for the remaining shorts in the source buffer\n     *\n     * @throws  IllegalArgumentException\n     *          If the source buffer is this buffer\n     *\n     * @throws  ReadOnlyBufferException\n     *          If this buffer is read-only\n     */\n    public ShortBuffer put(ShortBuffer src) {\n        if (src == this)\n            throw new IllegalArgumentException();\n        if (isReadOnly())\n            throw new ReadOnlyBufferException();\n        int n = src.remaining();\n        if (n > remaining())\n            throw new BufferOverflowException();\n        for (int i = 0; i < n; i++)\n            put(src.get());\n        return this;\n    }"}
{"Number":"452","API Relative Path":"java.nio.ShortBuffer.java-put(short[]-int-int)","Corresponding Source":"/**\n     * Relative bulk <i>put<\/i> method&nbsp;&nbsp;<i>(optional operation)<\/i>.\n     *\n     * <p> This method transfers shorts into this buffer from the given\n     * source array.  If there are more shorts to be copied from the array\n     * than remain in this buffer, that is, if\n     * <tt>length<\/tt>&nbsp;<tt>&gt;<\/tt>&nbsp;<tt>remaining()<\/tt>, then no\n     * shorts are transferred and a {@link BufferOverflowException} is\n     * thrown.\n     *\n     * <p> Otherwise, this method copies <tt>length<\/tt> shorts from the\n     * given array into this buffer, starting at the given offset in the array\n     * and at the current position of this buffer.  The position of this buffer\n     * is then incremented by <tt>length<\/tt>.\n     *\n     * <p> In other words, an invocation of this method of the form\n     * <tt>dst.put(src,&nbsp;off,&nbsp;len)<\/tt> has exactly the same effect as\n     * the loop\n     *\n     * <pre>{@code\n     *     for (int i = off; i < off + len; i++)\n     *         dst.put(a[i]);\n     * }<\/pre>\n     *\n     * except that it first checks that there is sufficient space in this\n     * buffer and it is potentially much more efficient.\n     *\n     * @param  src\n     *         The array from which shorts are to be read\n     *\n     * @param  offset\n     *         The offset within the array of the first short to be read;\n     *         must be non-negative and no larger than <tt>array.length<\/tt>\n     *\n     * @param  length\n     *         The number of shorts to be read from the given array;\n     *         must be non-negative and no larger than\n     *         <tt>array.length - offset<\/tt>\n     *\n     * @return  This buffer\n     *\n     * @throws  BufferOverflowException\n     *          If there is insufficient space in this buffer\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the preconditions on the <tt>offset<\/tt> and <tt>length<\/tt>\n     *          parameters do not hold\n     *\n     * @throws  ReadOnlyBufferException\n     *          If this buffer is read-only\n     */\n    public ShortBuffer put(short[] src, int offset, int length) {\n        checkBounds(offset, length, src.length);\n        if (length > remaining())\n            throw new BufferOverflowException();\n        int end = offset + length;\n        for (int i = offset; i < end; i++)\n            this.put(src[i]);\n        return this;\n    }"}
{"Number":"453","API Relative Path":"java.security.AccessControlContext.java-AccessControlContext(ProtectionDomain-DomainCombiner-AccessControlContext-AccessControlContext-Permission[])","Corresponding Source":"/**\n     * package private for AccessController\n     *\n     * This \"argument wrapper\" context will be passed as the actual context\n     * parameter on an internal doPrivileged() call used in the implementation.\n     */\n    AccessControlContext(ProtectionDomain caller, DomainCombiner combiner,\n        AccessControlContext parent, AccessControlContext context,\n        Permission[] perms)\n    {\n        /*\n         * Combine the domains from the doPrivileged() context into our\n         * wrapper context, if necessary.\n         */\n        ProtectionDomain[] callerPDs = null;\n        if (caller != null) {\n             callerPDs = new ProtectionDomain[] { caller };\n        }\n        if (context != null) {\n            if (combiner != null) {\n                this.context = combiner.combine(callerPDs, context.context);\n            } else {\n                this.context = combine(callerPDs, context.context);\n            }\n        } else {\n            /*\n             * Call combiner even if there is seemingly nothing to combine.\n             */\n            if (combiner != null) {\n                this.context = combiner.combine(callerPDs, null);\n            } else {\n                this.context = combine(callerPDs, null);\n            }\n        }\n        this.combiner = combiner;\n\n        Permission[] tmp = null;\n        if (perms != null) {\n            tmp = new Permission[perms.length];\n            for (int i=0; i < perms.length; i++) {\n                if (perms[i] == null) {\n                    throw new NullPointerException(\"permission can't be null\");\n                }\n\n                /*\n                 * An AllPermission argument is equivalent to calling\n                 * doPrivileged() without any limit permissions.\n                 */\n                if (perms[i].getClass() == AllPermission.class) {\n                    parent = null;\n                }\n                tmp[i] = perms[i];\n            }\n        }\n\n        /*\n         * For a doPrivileged() with limited privilege scope, initialize\n         * the relevant fields.\n         *\n         * The limitedContext field contains the union of all domains which\n         * are enclosed by this limited privilege scope. In other words,\n         * it contains all of the domains which could potentially be checked\n         * if none of the limiting permissions implied a requested permission.\n         */\n        if (parent != null) {\n            this.limitedContext = combine(parent.context, parent.limitedContext);\n            this.isLimited = true;\n            this.isWrapped = true;\n            this.permissions = tmp;\n            this.parent = parent;\n            this.privilegedContext = context; // used in checkPermission2()\n        }\n        this.isAuthorized = true;\n    }"}
{"Number":"454","API Relative Path":"java.security.AccessControlContext.java-checkPermission(Permission)","Corresponding Source":"/**\n     * Determines whether the access request indicated by the\n     * specified permission should be allowed or denied, based on\n     * the security policy currently in effect, and the context in\n     * this object. The request is allowed only if every ProtectionDomain\n     * in the context implies the permission. Otherwise the request is\n     * denied.\n     *\n     * <p>\n     * This method quietly returns if the access request\n     * is permitted, or throws a suitable AccessControlException otherwise.\n     *\n     * @param perm the requested permission.\n     *\n     * @exception AccessControlException if the specified permission\n     * is not permitted, based on the current security policy and the\n     * context encapsulated by this object.\n     * @exception NullPointerException if the permission to check for is null.\n     */\n    public void checkPermission(Permission perm)\n        throws AccessControlException\n    {\n        boolean dumpDebug = false;\n\n        if (perm == null) {\n            throw new NullPointerException(\"permission can't be null\");\n        }\n        if (getDebug() != null) {\n            // If \"codebase\" is not specified, we dump the info by default.\n            dumpDebug = !Debug.isOn(\"codebase=\");\n            if (!dumpDebug) {\n                // If \"codebase\" is specified, only dump if the specified code\n                // value is in the stack.\n                for (int i = 0; context != null && i < context.length; i++) {\n                    if (context[i].getCodeSource() != null &&\n                        context[i].getCodeSource().getLocation() != null &&\n                        Debug.isOn(\"codebase=\" + context[i].getCodeSource().getLocation().toString())) {\n                        dumpDebug = true;\n                        break;\n                    }\n                }\n            }\n\n            dumpDebug &= !Debug.isOn(\"permission=\") ||\n                Debug.isOn(\"permission=\" + perm.getClass().getCanonicalName());\n\n            if (dumpDebug && Debug.isOn(\"stack\")) {\n                Thread.dumpStack();\n            }\n\n            if (dumpDebug && Debug.isOn(\"domain\")) {\n                if (context == null) {\n                    debug.println(\"domain (context is null)\");\n                } else {\n                    for (int i=0; i< context.length; i++) {\n                        debug.println(\"domain \"+i+\" \"+context[i]);\n                    }\n                }\n            }\n        }\n\n        /*\n         * iterate through the ProtectionDomains in the context.\n         * Stop at the first one that doesn't allow the\n         * requested permission (throwing an exception).\n         *\n         */\n\n        /* if ctxt is null, all we had on the stack were system domains,\n           or the first domain was a Privileged system domain. This\n           is to make the common case for system code very fast */\n\n        if (context == null) {\n            checkPermission2(perm);\n            return;\n        }\n\n        for (int i=0; i< context.length; i++) {\n            if (context[i] != null &&  !context[i].implies(perm)) {\n                if (dumpDebug) {\n                    debug.println(\"access denied \" + perm);\n                }\n\n                if (Debug.isOn(\"failure\") && debug != null) {\n                    // Want to make sure this is always displayed for failure,\n                    // but do not want to display again if already displayed\n                    // above.\n                    if (!dumpDebug) {\n                        debug.println(\"access denied \" + perm);\n                    }\n                    Thread.dumpStack();\n                    final ProtectionDomain pd = context[i];\n                    final Debug db = debug;\n                    AccessController.doPrivileged (new PrivilegedAction<Void>() {\n                        public Void run() {\n                            db.println(\"domain that failed \"+pd);\n                            return null;\n                        }\n                    });\n                }\n                throw new AccessControlException(\"access denied \"+perm, perm);\n            }\n        }\n\n        // allow if all of them allowed access\n        if (dumpDebug) {\n            debug.println(\"access allowed \"+perm);\n        }\n\n        checkPermission2(perm);\n    }"}
{"Number":"455","API Relative Path":"java.security.AccessControlContext.java-checkPermission(Permission)","Corresponding Source":"/**\n     * Determines whether the access request indicated by the\n     * specified permission should be allowed or denied, based on\n     * the security policy currently in effect, and the context in\n     * this object. The request is allowed only if every ProtectionDomain\n     * in the context implies the permission. Otherwise the request is\n     * denied.\n     *\n     * <p>\n     * This method quietly returns if the access request\n     * is permitted, or throws a suitable AccessControlException otherwise.\n     *\n     * @param perm the requested permission.\n     *\n     * @exception AccessControlException if the specified permission\n     * is not permitted, based on the current security policy and the\n     * context encapsulated by this object.\n     * @exception NullPointerException if the permission to check for is null.\n     */\n    public void checkPermission(Permission perm)\n        throws AccessControlException\n    {\n        boolean dumpDebug = false;\n\n        if (perm == null) {\n            throw new NullPointerException(\"permission can't be null\");\n        }\n        if (getDebug() != null) {\n            // If \"codebase\" is not specified, we dump the info by default.\n            dumpDebug = !Debug.isOn(\"codebase=\");\n            if (!dumpDebug) {\n                // If \"codebase\" is specified, only dump if the specified code\n                // value is in the stack.\n                for (int i = 0; context != null && i < context.length; i++) {\n                    if (context[i].getCodeSource() != null &&\n                        context[i].getCodeSource().getLocation() != null &&\n                        Debug.isOn(\"codebase=\" + context[i].getCodeSource().getLocation().toString())) {\n                        dumpDebug = true;\n                        break;\n                    }\n                }\n            }\n\n            dumpDebug &= !Debug.isOn(\"permission=\") ||\n                Debug.isOn(\"permission=\" + perm.getClass().getCanonicalName());\n\n            if (dumpDebug && Debug.isOn(\"stack\")) {\n                Thread.dumpStack();\n            }\n\n            if (dumpDebug && Debug.isOn(\"domain\")) {\n                if (context == null) {\n                    debug.println(\"domain (context is null)\");\n                } else {\n                    for (int i=0; i< context.length; i++) {\n                        debug.println(\"domain \"+i+\" \"+context[i]);\n                    }\n                }\n            }\n        }\n\n        /*\n         * iterate through the ProtectionDomains in the context.\n         * Stop at the first one that doesn't allow the\n         * requested permission (throwing an exception).\n         *\n         */\n\n        /* if ctxt is null, all we had on the stack were system domains,\n           or the first domain was a Privileged system domain. This\n           is to make the common case for system code very fast */\n\n        if (context == null) {\n            checkPermission2(perm);\n            return;\n        }\n\n        for (int i=0; i< context.length; i++) {\n            if (context[i] != null &&  !context[i].implies(perm)) {\n                if (dumpDebug) {\n                    debug.println(\"access denied \" + perm);\n                }\n\n                if (Debug.isOn(\"failure\") && debug != null) {\n                    // Want to make sure this is always displayed for failure,\n                    // but do not want to display again if already displayed\n                    // above.\n                    if (!dumpDebug) {\n                        debug.println(\"access denied \" + perm);\n                    }\n                    Thread.dumpStack();\n                    final ProtectionDomain pd = context[i];\n                    final Debug db = debug;\n                    AccessController.doPrivileged (new PrivilegedAction<Void>() {\n                        public Void run() {\n                            db.println(\"domain that failed \"+pd);\n                            return null;\n                        }\n                    });\n                }\n                throw new AccessControlException(\"access denied \"+perm, perm);\n            }\n        }\n\n        // allow if all of them allowed access\n        if (dumpDebug) {\n            debug.println(\"access allowed \"+perm);\n        }\n\n        checkPermission2(perm);\n    }"}
{"Number":"456","API Relative Path":"java.security.cert.CertificateRevokedException.java-CertificateRevokedException(Date-CRLReason-X500Principal-Map)","Corresponding Source":"/**\n     * Constructs a {@code CertificateRevokedException} with\n     * the specified revocation date, reason code, authority name, and map\n     * of extensions.\n     *\n     * @param revocationDate the date on which the certificate was revoked. The\n     *    date is copied to protect against subsequent modification.\n     * @param reason the revocation reason\n     * @param extensions a map of X.509 Extensions. Each key is an OID String\n     *    that maps to the corresponding Extension. The map is copied to\n     *    prevent subsequent modification.\n     * @param authority the {@code X500Principal} that represents the name\n     *    of the authority that signed the certificate's revocation status\n     *    information\n     * @throws NullPointerException if {@code revocationDate},\n     *    {@code reason}, {@code authority}, or\n     *    {@code extensions} is {@code null}\n     */\n    public CertificateRevokedException(Date revocationDate, CRLReason reason,\n        X500Principal authority, Map<String, Extension> extensions) {\n        if (revocationDate == null || reason == null || authority == null ||\n            extensions == null) {\n            throw new NullPointerException();\n        }\n        this.revocationDate = new Date(revocationDate.getTime());\n        this.reason = reason;\n        this.authority = authority;\n        // make sure Map only contains correct types\n        this.extensions = Collections.checkedMap(new HashMap<>(),\n                                                 String.class, Extension.class);\n        this.extensions.putAll(extensions);\n    }"}
{"Number":"457","API Relative Path":"java.security.cert.CertPathValidatorException.java-CertPathValidatorException(String-Throwable-CertPath-int-Reason)","Corresponding Source":"/**\n     * Creates a {@code CertPathValidatorException} with the specified\n     * detail message, cause, certification path, index, and reason.\n     *\n     * @param msg the detail message (or {@code null} if none)\n     * @param cause the cause (or {@code null} if none)\n     * @param certPath the certification path that was in the process of\n     * being validated when the error was encountered\n     * @param index the index of the certificate in the certification path\n     * that caused the error (or -1 if not applicable). Note that\n     * the list of certificates in a {@code CertPath} is zero based.\n     * @param reason the reason the validation failed\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * {@code (index < -1 || (certPath != null && index >=\n     * certPath.getCertificates().size()) }\n     * @throws IllegalArgumentException if {@code certPath} is\n     * {@code null} and {@code index} is not -1\n     * @throws NullPointerException if {@code reason} is {@code null}\n     *\n     * @since 1.7\n     */\n    public CertPathValidatorException(String msg, Throwable cause,\n            CertPath certPath, int index, Reason reason) {\n        super(msg, cause);\n        if (certPath == null && index != -1) {\n            throw new IllegalArgumentException();\n        }\n        if (index < -1 ||\n            (certPath != null && index >= certPath.getCertificates().size())) {\n            throw new IndexOutOfBoundsException();\n        }\n        if (reason == null) {\n            throw new NullPointerException(\"reason can't be null\");\n        }\n        this.certPath = certPath;\n        this.index = index;\n        this.reason = reason;\n    }"}
{"Number":"458","API Relative Path":"java.security.cert.CertPathValidatorException.java-CertPathValidatorException(String-Throwable-CertPath-int-Reason)","Corresponding Source":"/**\n     * Creates a {@code CertPathValidatorException} with the specified\n     * detail message, cause, certification path, index, and reason.\n     *\n     * @param msg the detail message (or {@code null} if none)\n     * @param cause the cause (or {@code null} if none)\n     * @param certPath the certification path that was in the process of\n     * being validated when the error was encountered\n     * @param index the index of the certificate in the certification path\n     * that caused the error (or -1 if not applicable). Note that\n     * the list of certificates in a {@code CertPath} is zero based.\n     * @param reason the reason the validation failed\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * {@code (index < -1 || (certPath != null && index >=\n     * certPath.getCertificates().size()) }\n     * @throws IllegalArgumentException if {@code certPath} is\n     * {@code null} and {@code index} is not -1\n     * @throws NullPointerException if {@code reason} is {@code null}\n     *\n     * @since 1.7\n     */\n    public CertPathValidatorException(String msg, Throwable cause,\n            CertPath certPath, int index, Reason reason) {\n        super(msg, cause);\n        if (certPath == null && index != -1) {\n            throw new IllegalArgumentException();\n        }\n        if (index < -1 ||\n            (certPath != null && index >= certPath.getCertificates().size())) {\n            throw new IndexOutOfBoundsException();\n        }\n        if (reason == null) {\n            throw new NullPointerException(\"reason can't be null\");\n        }\n        this.certPath = certPath;\n        this.index = index;\n        this.reason = reason;\n    }"}
{"Number":"459","API Relative Path":"java.security.cert.CertStore.java-CertStore(CertStoreSpi-Provider-String-CertStoreParameters)","Corresponding Source":"/**\n     * Creates a {@code CertStore} object of the given type, and\n     * encapsulates the given provider implementation (SPI object) in it.\n     *\n     * @param storeSpi the provider implementation\n     * @param provider the provider\n     * @param type the type\n     * @param params the initialization parameters (may be {@code null})\n     */\n    protected CertStore(CertStoreSpi storeSpi, Provider provider,\n                        String type, CertStoreParameters params) {\n        this.storeSpi = storeSpi;\n        this.provider = provider;\n        this.type = type;\n        if (params != null)\n            this.params = (CertStoreParameters) params.clone();\n    }"}
{"Number":"460","API Relative Path":"java.security.cert.PKIXBuilderParameters.java-setMaxPathLength(int)","Corresponding Source":"/**\n     * Sets the value of the maximum number of non-self-issued intermediate\n     * certificates that may exist in a certification path. A certificate\n     * is self-issued if the DNs that appear in the subject and issuer\n     * fields are identical and are not empty. Note that the last certificate\n     * in a certification path is not an intermediate certificate, and is not\n     * included in this limit. Usually the last certificate is an end entity\n     * certificate, but it can be a CA certificate. A PKIX\n     * {@code CertPathBuilder} instance must not build\n     * paths longer than the length specified.\n     *\n     * <p> A value of 0 implies that the path can only contain\n     * a single certificate. A value of -1 implies that the\n     * path length is unconstrained (i.e. there is no maximum).\n     * The default maximum path length, if not specified, is 5.\n     * Setting a value less than -1 will cause an exception to be thrown.\n     *\n     * <p> If any of the CA certificates contain the\n     * {@code BasicConstraintsExtension}, the value of the\n     * {@code pathLenConstraint} field of the extension overrides\n     * the maximum path length parameter whenever the result is a\n     * certification path of smaller length.\n     *\n     * @param maxPathLength the maximum number of non-self-issued intermediate\n     *  certificates that may exist in a certification path\n     * @throws InvalidParameterException if {@code maxPathLength} is set\n     *  to a value less than -1\n     *\n     * @see #getMaxPathLength\n     */\n    public void setMaxPathLength(int maxPathLength) {\n        if (maxPathLength < -1) {\n            throw new InvalidParameterException(\"the maximum path \"\n                + \"length parameter can not be less than -1\");\n        }\n        this.maxPathLength = maxPathLength;\n    }"}
{"Number":"461","API Relative Path":"java.security.cert.PKIXCertPathBuilderResult.java-PKIXCertPathBuilderResult(CertPath-TrustAnchor-PolicyNode-PublicKey)","Corresponding Source":"/**\n     * Creates an instance of {@code PKIXCertPathBuilderResult}\n     * containing the specified parameters.\n     *\n     * @param certPath the validated {@code CertPath}\n     * @param trustAnchor a {@code TrustAnchor} describing the CA that\n     * served as a trust anchor for the certification path\n     * @param policyTree the immutable valid policy tree, or {@code null}\n     * if there are no valid policies\n     * @param subjectPublicKey the public key of the subject\n     * @throws NullPointerException if the {@code certPath},\n     * {@code trustAnchor} or {@code subjectPublicKey} parameters\n     * are {@code null}\n     */\n    public PKIXCertPathBuilderResult(CertPath certPath,\n        TrustAnchor trustAnchor, PolicyNode policyTree,\n        PublicKey subjectPublicKey)\n    {\n        super(trustAnchor, policyTree, subjectPublicKey);\n        if (certPath == null)\n            throw new NullPointerException(\"certPath must be non-null\");\n        this.certPath = certPath;\n    }"}
{"Number":"462","API Relative Path":"java.security.cert.PKIXParameters.java-addCertPathChecker(PKIXCertPathChecker)","Corresponding Source":"/**\n     * Adds a {@code PKIXCertPathChecker} to the list of certification\n     * path checkers. See the {@link #setCertPathCheckers setCertPathCheckers}\n     * method for more details.\n     * <p>\n     * Note that the {@code PKIXCertPathChecker} is cloned to protect\n     * against subsequent modifications.\n     *\n     * @param checker a {@code PKIXCertPathChecker} to add to the list of\n     * checks. If {@code null}, the checker is ignored (not added to list).\n     */\n    public void addCertPathChecker(PKIXCertPathChecker checker) {\n        if (checker != null) {\n            certPathCheckers.add((PKIXCertPathChecker)checker.clone());\n        }\n    }"}
{"Number":"463","API Relative Path":"java.security.cert.PKIXParameters.java-addCertStore(CertStore)","Corresponding Source":"/**\n     * Adds a {@code CertStore} to the end of the list of\n     * {@code CertStore}s used in finding certificates and CRLs.\n     *\n     * @param store the {@code CertStore} to add. If {@code null},\n     * the store is ignored (not added to list).\n     */\n    public void addCertStore(CertStore store) {\n        if (store != null) {\n            this.certStores.add(store);\n        }\n    }"}
{"Number":"464","API Relative Path":"java.security.cert.TrustAnchor.java-TrustAnchor(String-PublicKey-byte[])","Corresponding Source":"/**\n     * Creates an instance of {@code TrustAnchor} where the\n     * most-trusted CA is specified as a distinguished name and public key.\n     * Name constraints are an optional parameter, and are intended to be used\n     * as additional constraints when validating an X.509 certification path.\n     * <p>\n     * The name constraints are specified as a byte array. This byte array\n     * contains the DER encoded form of the name constraints, as they\n     * would appear in the NameConstraints structure defined in RFC 3280\n     * and X.509. The ASN.1 notation for this structure is supplied in the\n     * documentation for\n     * {@link #TrustAnchor(X509Certificate, byte[])\n     * TrustAnchor(X509Certificate trustedCert, byte[] nameConstraints) }.\n     * <p>\n     * Note that the name constraints byte array supplied here is cloned to\n     * protect against subsequent modifications.\n     *\n     * @param caName the X.500 distinguished name of the most-trusted CA in\n     * <a href=\"http://www.ietf.org/rfc/rfc2253.txt\">RFC 2253<\/a>\n     * {@code String} format\n     * @param pubKey the public key of the most-trusted CA\n     * @param nameConstraints a byte array containing the ASN.1 DER encoding of\n     * a NameConstraints extension to be used for checking name constraints.\n     * Only the value of the extension is included, not the OID or criticality\n     * flag. Specify {@code null} to omit the parameter.\n     * @throws IllegalArgumentException if the specified\n     * {@code caName} parameter is empty {@code (caName.length() == 0)}\n     * or incorrectly formatted or the name constraints cannot be decoded\n     * @throws NullPointerException if the specified {@code caName} or\n     * {@code pubKey} parameter is {@code null}\n     */\n    public TrustAnchor(String caName, PublicKey pubKey, byte[] nameConstraints)\n    {\n        if (pubKey == null)\n            throw new NullPointerException(\"the pubKey parameter must be \" +\n                \"non-null\");\n        if (caName == null)\n            throw new NullPointerException(\"the caName parameter must be \" +\n                \"non-null\");\n        if (caName.length() == 0)\n            throw new IllegalArgumentException(\"the caName \" +\n                \"parameter must be a non-empty String\");\n        // check if caName is formatted correctly\n        this.caPrincipal = new X500Principal(caName);\n        this.pubKey = pubKey;\n        this.caName = caName;\n        this.trustedCert = null;\n        setNameConstraints(nameConstraints);\n    }"}
{"Number":"465","API Relative Path":"java.security.cert.TrustAnchor.java-TrustAnchor(X500Principal-PublicKey-byte[])","Corresponding Source":"/**\n     * Creates an instance of {@code TrustAnchor} where the\n     * most-trusted CA is specified as an X500Principal and public key.\n     * Name constraints are an optional parameter, and are intended to be used\n     * as additional constraints when validating an X.509 certification path.\n     * <p>\n     * The name constraints are specified as a byte array. This byte array\n     * contains the DER encoded form of the name constraints, as they\n     * would appear in the NameConstraints structure defined in RFC 3280\n     * and X.509. The ASN.1 notation for this structure is supplied in the\n     * documentation for\n     * {@link #TrustAnchor(X509Certificate, byte[])\n     * TrustAnchor(X509Certificate trustedCert, byte[] nameConstraints) }.\n     * <p>\n     * Note that the name constraints byte array supplied here is cloned to\n     * protect against subsequent modifications.\n     *\n     * @param caPrincipal the name of the most-trusted CA as X500Principal\n     * @param pubKey the public key of the most-trusted CA\n     * @param nameConstraints a byte array containing the ASN.1 DER encoding of\n     * a NameConstraints extension to be used for checking name constraints.\n     * Only the value of the extension is included, not the OID or criticality\n     * flag. Specify {@code null} to omit the parameter.\n     * @throws NullPointerException if the specified {@code caPrincipal} or\n     * {@code pubKey} parameter is {@code null}\n     * @since 1.5\n     */\n    public TrustAnchor(X500Principal caPrincipal, PublicKey pubKey,\n            byte[] nameConstraints) {\n        if ((caPrincipal == null) || (pubKey == null)) {\n            throw new NullPointerException();\n        }\n        this.trustedCert = null;\n        this.caPrincipal = caPrincipal;\n        this.caName = caPrincipal.getName();\n        this.pubKey = pubKey;\n        setNameConstraints(nameConstraints);\n    }"}
{"Number":"466","API Relative Path":"java.security.cert.X509CertSelector.java-addPathToName(int-String)","Corresponding Source":"/**\n     * Adds a name to the pathToNames criterion. The {@code X509Certificate}\n     * must not include name constraints that would prohibit building a\n     * path to the specified name.\n     * <p>\n     * This method allows the caller to add a name to the set of names which\n     * the {@code X509Certificates}'s name constraints must permit.\n     * The specified name is added to any previous value for the\n     * pathToNames criterion.  If the name is a duplicate, it may be ignored.\n     * <p>\n     * The name is provided in string format. RFC 822, DNS, and URI names\n     * use the well-established string formats for those types (subject to\n     * the restrictions included in RFC 3280). IPv4 address names are\n     * supplied using dotted quad notation. OID address names are represented\n     * as a series of nonnegative integers separated by periods. And\n     * directory names (distinguished names) are supplied in RFC 2253 format.\n     * No standard string format is defined for otherNames, X.400 names,\n     * EDI party names, IPv6 address names, or any other type of names. They\n     * should be specified using the\n     * {@link #addPathToName(int type, byte [] name)\n     * addPathToName(int type, byte [] name)} method.\n     * <p>\n     * <strong>Note:<\/strong> for distinguished names, use\n     * {@linkplain #addPathToName(int, byte[])} instead.\n     * This method should not be relied on as it can fail to match some\n     * certificates because of a loss of encoding information in the RFC 2253\n     * String form of some distinguished names.\n     *\n     * @param type the name type (0-8, as specified in\n     *             RFC 3280, section 4.2.1.7)\n     * @param name the name in string form\n     * @throws IOException if a parsing error occurs\n     */\n    public void addPathToName(int type, String name) throws IOException {\n        addPathToNameInternal(type, name);\n    }"}
{"Number":"467","API Relative Path":"java.security.cert.X509CertSelector.java-addSubjectAlternativeName(int-String)","Corresponding Source":"/**\n     * Adds a name to the subjectAlternativeNames criterion. The\n     * {@code X509Certificate} must contain all or at least one\n     * of the specified subjectAlternativeNames, depending on the value of\n     * the matchAllNames flag (see {@link #setMatchAllSubjectAltNames\n     * setMatchAllSubjectAltNames}).\n     * <p>\n     * This method allows the caller to add a name to the set of subject\n     * alternative names.\n     * The specified name is added to any previous value for the\n     * subjectAlternativeNames criterion. If the specified name is a\n     * duplicate, it may be ignored.\n     * <p>\n     * The name is provided in string format.\n     * <a href=\"http://www.ietf.org/rfc/rfc822.txt\">RFC 822<\/a>, DNS, and URI\n     * names use the well-established string formats for those types (subject to\n     * the restrictions included in RFC 3280). IPv4 address names are\n     * supplied using dotted quad notation. OID address names are represented\n     * as a series of nonnegative integers separated by periods. And\n     * directory names (distinguished names) are supplied in RFC 2253 format.\n     * No standard string format is defined for otherNames, X.400 names,\n     * EDI party names, IPv6 address names, or any other type of names. They\n     * should be specified using the\n     * {@link #addSubjectAlternativeName(int type, byte [] name)\n     * addSubjectAlternativeName(int type, byte [] name)}\n     * method.\n     * <p>\n     * <strong>Note:<\/strong> for distinguished names, use\n     * {@linkplain #addSubjectAlternativeName(int, byte[])} instead.\n     * This method should not be relied on as it can fail to match some\n     * certificates because of a loss of encoding information in the RFC 2253\n     * String form of some distinguished names.\n     *\n     * @param type the name type (0-8, as specified in\n     *             RFC 3280, section 4.2.1.7)\n     * @param name the name in string form (not {@code null})\n     * @throws IOException if a parsing error occurs\n     */\n    public void addSubjectAlternativeName(int type, String name)\n            throws IOException {\n        addSubjectAlternativeNameInternal(type, name);\n    }"}
{"Number":"468","API Relative Path":"java.security.cert.X509CertSelector.java-makeGeneralNameInterface(int-Object)","Corresponding Source":"/**\n     * Make a {@code GeneralNameInterface} out of a name type (0-8) and an\n     * Object that may be a byte array holding the ASN.1 DER encoded\n     * name or a String form of the name.  Except for X.509\n     * Distinguished Names, the String form of the name must not be the\n     * result from calling toString on an existing GeneralNameInterface\n     * implementing class.  The output of toString is not compatible\n     * with the String constructors for names other than Distinguished\n     * Names.\n     *\n     * @param type name type (0-8)\n     * @param name name as ASN.1 Der-encoded byte array or String\n     * @return a GeneralNameInterface name\n     * @throws IOException if a parsing error occurs\n     */\n    static GeneralNameInterface makeGeneralNameInterface(int type, Object name)\n            throws IOException {\n        GeneralNameInterface result;\n        if (debug != null) {\n            debug.println(\"X509CertSelector.makeGeneralNameInterface(\"\n                + type + \")...\");\n        }\n\n        if (name instanceof String) {\n            if (debug != null) {\n                debug.println(\"X509CertSelector.makeGeneralNameInterface() \"\n                    + \"name is String: \" + name);\n            }\n            switch (type) {\n            case NAME_RFC822:\n                result = new RFC822Name((String)name);\n                break;\n            case NAME_DNS:\n                result = new DNSName((String)name);\n                break;\n            case NAME_DIRECTORY:\n                result = new X500Name((String)name);\n                break;\n            case NAME_URI:\n                result = new URIName((String)name);\n                break;\n            case NAME_IP:\n                result = new IPAddressName((String)name);\n                break;\n            case NAME_OID:\n                result = new OIDName((String)name);\n                break;\n            default:\n                throw new IOException(\"unable to parse String names of type \"\n                                      + type);\n            }\n            if (debug != null) {\n                debug.println(\"X509CertSelector.makeGeneralNameInterface() \"\n                    + \"result: \" + result.toString());\n            }\n        } else if (name instanceof byte[]) {\n            DerValue val = new DerValue((byte[]) name);\n            if (debug != null) {\n                debug.println\n                    (\"X509CertSelector.makeGeneralNameInterface() is byte[]\");\n            }\n\n            switch (type) {\n            case NAME_ANY:\n                result = new OtherName(val);\n                break;\n            case NAME_RFC822:\n                result = new RFC822Name(val);\n                break;\n            case NAME_DNS:\n                result = new DNSName(val);\n                break;\n            case NAME_X400:\n                result = new X400Address(val);\n                break;\n            case NAME_DIRECTORY:\n                result = new X500Name(val);\n                break;\n            case NAME_EDI:\n                result = new EDIPartyName(val);\n                break;\n            case NAME_URI:\n                result = new URIName(val);\n                break;\n            case NAME_IP:\n                result = new IPAddressName(val);\n                break;\n            case NAME_OID:\n                result = new OIDName(val);\n                break;\n            default:\n                throw new IOException(\"unable to parse byte array names of \"\n                    + \"type \" + type);\n            }\n            if (debug != null) {\n                debug.println(\"X509CertSelector.makeGeneralNameInterface() result: \"\n                    + result.toString());\n            }\n        } else {\n            if (debug != null) {\n                debug.println(\"X509CertSelector.makeGeneralName() input name \"\n                    + \"not String or byte array\");\n            }\n            throw new IOException(\"name not String or byte array\");\n        }\n        return result;\n    }"}
{"Number":"469","API Relative Path":"java.security.cert.X509CertSelector.java-setBasicConstraints(int)","Corresponding Source":"/**\n     * Sets the basic constraints constraint. If the value is greater than or\n     * equal to zero, {@code X509Certificates} must include a\n     * basicConstraints extension with\n     * a pathLen of at least this value. If the value is -2, only end-entity\n     * certificates are accepted. If the value is -1, no check is done.\n     * <p>\n     * This constraint is useful when building a certification path forward\n     * (from the target toward the trust anchor. If a partial path has been\n     * built, any candidate certificate must have a maxPathLen value greater\n     * than or equal to the number of certificates in the partial path.\n     *\n     * @param minMaxPathLen the value for the basic constraints constraint\n     * @throws IllegalArgumentException if the value is less than -2\n     * @see #getBasicConstraints\n     */\n    public void setBasicConstraints(int minMaxPathLen) {\n        if (minMaxPathLen < -2) {\n            throw new IllegalArgumentException(\"basic constraints less than -2\");\n        }\n        basicConstraints = minMaxPathLen;\n    }"}
{"Number":"470","API Relative Path":"java.security.cert.X509CertSelector.java-setSubjectAlternativeNames(Collection)","Corresponding Source":"/**\n     * Sets the subjectAlternativeNames criterion. The\n     * {@code X509Certificate} must contain all or at least one of the\n     * specified subjectAlternativeNames, depending on the value of\n     * the matchAllNames flag (see {@link #setMatchAllSubjectAltNames\n     * setMatchAllSubjectAltNames}).\n     * <p>\n     * This method allows the caller to specify, with a single method call,\n     * the complete set of subject alternative names for the\n     * subjectAlternativeNames criterion. The specified value replaces\n     * the previous value for the subjectAlternativeNames criterion.\n     * <p>\n     * The {@code names} parameter (if not {@code null}) is a\n     * {@code Collection} with one\n     * entry for each name to be included in the subject alternative name\n     * criterion. Each entry is a {@code List} whose first entry is an\n     * {@code Integer} (the name type, 0-8) and whose second\n     * entry is a {@code String} or a byte array (the name, in\n     * string or ASN.1 DER encoded form, respectively).\n     * There can be multiple names of the same type. If {@code null}\n     * is supplied as the value for this argument, no\n     * subjectAlternativeNames check will be performed.\n     * <p>\n     * Each subject alternative name in the {@code Collection}\n     * may be specified either as a {@code String} or as an ASN.1 encoded\n     * byte array. For more details about the formats used, see\n     * {@link #addSubjectAlternativeName(int type, String name)\n     * addSubjectAlternativeName(int type, String name)} and\n     * {@link #addSubjectAlternativeName(int type, byte [] name)\n     * addSubjectAlternativeName(int type, byte [] name)}.\n     * <p>\n     * <strong>Note:<\/strong> for distinguished names, specify the byte\n     * array form instead of the String form. See the note in\n     * {@link #addSubjectAlternativeName(int, String)} for more information.\n     * <p>\n     * Note that the {@code names} parameter can contain duplicate\n     * names (same name and name type), but they may be removed from the\n     * {@code Collection} of names returned by the\n     * {@link #getSubjectAlternativeNames getSubjectAlternativeNames} method.\n     * <p>\n     * Note that a deep copy is performed on the {@code Collection} to\n     * protect against subsequent modifications.\n     *\n     * @param names a {@code Collection} of names (or {@code null})\n     * @throws IOException if a parsing error occurs\n     * @see #getSubjectAlternativeNames\n     */\n    public void setSubjectAlternativeNames(Collection<List<?>> names)\n            throws IOException {\n        if (names == null) {\n            subjectAlternativeNames = null;\n            subjectAlternativeGeneralNames = null;\n        } else {\n            if (names.isEmpty()) {\n                subjectAlternativeNames = null;\n                subjectAlternativeGeneralNames = null;\n                return;\n            }\n            Set<List<?>> tempNames = cloneAndCheckNames(names);\n            // Ensure that we either set both of these or neither\n            subjectAlternativeGeneralNames = parseNames(tempNames);\n            subjectAlternativeNames = tempNames;\n        }\n    }"}
{"Number":"471","API Relative Path":"java.security.CodeSource.java-CodeSource(URL-CodeSigner[])","Corresponding Source":"/**\n     * Constructs a CodeSource and associates it with the specified\n     * location and set of code signers.\n     *\n     * @param url the location (URL).\n     * @param signers the code signers. It may be null. The contents of the\n     * array are copied to protect against subsequent modification.\n     *\n     * @since 1.5\n     */\n    public CodeSource(URL url, CodeSigner[] signers) {\n        this.location = url;\n\n        // Copy the supplied signers\n        if (signers != null) {\n            this.signers = signers.clone();\n        }\n    }"}
{"Number":"472","API Relative Path":"java.security.DigestInputStream.java-read(byte[]-int-int)","Corresponding Source":"/**\n     * Reads into a byte array, and updates the message digest (if the\n     * digest function is on).  That is, this method reads up to\n     * {@code len} bytes from the input stream into the array\n     * {@code b}, starting at offset {@code off}. This method\n     * blocks until the data is actually\n     * read. If the digest function is on (see\n     * {@link #on(boolean) on}), this method will then call {@code update}\n     * on the message digest associated with this stream, passing it\n     * the data.\n     *\n     * @param b the array into which the data is read.\n     *\n     * @param off the starting offset into {@code b} of where the\n     * data should be placed.\n     *\n     * @param len the maximum number of bytes to be read from the input\n     * stream into b, starting at offset {@code off}.\n     *\n     * @return  the actual number of bytes read. This is less than\n     * {@code len} if the end of the stream is reached prior to\n     * reading {@code len} bytes. -1 is returned if no bytes were\n     * read because the end of the stream had already been reached when\n     * the call was made.\n     *\n     * @exception IOException if an I/O error occurs.\n     *\n     * @see MessageDigest#update(byte[], int, int)\n     */\n    public int read(byte[] b, int off, int len) throws IOException {\n        int result = in.read(b, off, len);\n        if (on && result != -1) {\n            digest.update(b, off, result);\n        }\n        return result;\n    }"}
{"Number":"473","API Relative Path":"java.security.DigestInputStream.java-read(byte[]-int-int)","Corresponding Source":"/**\n     * Reads into a byte array, and updates the message digest (if the\n     * digest function is on).  That is, this method reads up to\n     * {@code len} bytes from the input stream into the array\n     * {@code b}, starting at offset {@code off}. This method\n     * blocks until the data is actually\n     * read. If the digest function is on (see\n     * {@link #on(boolean) on}), this method will then call {@code update}\n     * on the message digest associated with this stream, passing it\n     * the data.\n     *\n     * @param b the array into which the data is read.\n     *\n     * @param off the starting offset into {@code b} of where the\n     * data should be placed.\n     *\n     * @param len the maximum number of bytes to be read from the input\n     * stream into b, starting at offset {@code off}.\n     *\n     * @return  the actual number of bytes read. This is less than\n     * {@code len} if the end of the stream is reached prior to\n     * reading {@code len} bytes. -1 is returned if no bytes were\n     * read because the end of the stream had already been reached when\n     * the call was made.\n     *\n     * @exception IOException if an I/O error occurs.\n     *\n     * @see MessageDigest#update(byte[], int, int)\n     */\n    public int read(byte[] b, int off, int len) throws IOException {\n        int result = in.read(b, off, len);\n        if (on && result != -1) {\n            digest.update(b, off, result);\n        }\n        return result;\n    }"}
{"Number":"474","API Relative Path":"java.security.DigestOutputStream.java-write(byte[]-int-int)","Corresponding Source":"/**\n     * Updates the message digest (if the digest function is on) using\n     * the specified subarray, and in any case writes the subarray to\n     * the output stream. That is, if the digest function is on (see\n     * {@link #on(boolean) on}), this method calls {@code update}\n     * on the message digest associated with this stream, passing it\n     * the subarray specifications. This method then writes the subarray\n     * bytes to the output stream, blocking until the bytes are actually\n     * written.\n     *\n     * @param b the array containing the subarray to be used for updating\n     * and writing to the output stream.\n     *\n     * @param off the offset into {@code b} of the first byte to\n     * be updated and written.\n     *\n     * @param len the number of bytes of data to be updated and written\n     * from {@code b}, starting at offset {@code off}.\n     *\n     * @exception IOException if an I/O error occurs.\n     *\n     * @see MessageDigest#update(byte[], int, int)\n     */\n    public void write(byte[] b, int off, int len) throws IOException {\n        out.write(b, off, len);\n        if (on) {\n            digest.update(b, off, len);\n        }\n    }"}
{"Number":"475","API Relative Path":"java.security.DigestOutputStream.java-write(byte[]-int-int)","Corresponding Source":"/**\n     * Updates the message digest (if the digest function is on) using\n     * the specified subarray, and in any case writes the subarray to\n     * the output stream. That is, if the digest function is on (see\n     * {@link #on(boolean) on}), this method calls {@code update}\n     * on the message digest associated with this stream, passing it\n     * the subarray specifications. This method then writes the subarray\n     * bytes to the output stream, blocking until the bytes are actually\n     * written.\n     *\n     * @param b the array containing the subarray to be used for updating\n     * and writing to the output stream.\n     *\n     * @param off the offset into {@code b} of the first byte to\n     * be updated and written.\n     *\n     * @param len the number of bytes of data to be updated and written\n     * from {@code b}, starting at offset {@code off}.\n     *\n     * @exception IOException if an I/O error occurs.\n     *\n     * @see MessageDigest#update(byte[], int, int)\n     */\n    public void write(byte[] b, int off, int len) throws IOException {\n        out.write(b, off, len);\n        if (on) {\n            digest.update(b, off, len);\n        }\n    }"}
{"Number":"476","API Relative Path":"java.security.KeyStore.java-entryInstanceOf(String-Class)","Corresponding Source":"/**\n     * Determines if the keystore {@code Entry} for the specified\n     * {@code alias} is an instance or subclass of the specified\n     * {@code entryClass}.\n     *\n     * @param alias the alias name\n     * @param entryClass the entry class\n     *\n     * @return true if the keystore {@code Entry} for the specified\n     *          {@code alias} is an instance or subclass of the\n     *          specified {@code entryClass}, false otherwise\n     *\n     * @exception NullPointerException if\n     *          {@code alias} or {@code entryClass}\n     *          is {@code null}\n     * @exception KeyStoreException if the keystore has not been\n     *          initialized (loaded)\n     *\n     * @since 1.5\n     */\n    public final boolean\n        entryInstanceOf(String alias,\n                        Class<? extends KeyStore.Entry> entryClass)\n        throws KeyStoreException\n    {\n\n        if (alias == null || entryClass == null) {\n            throw new NullPointerException(\"invalid null input\");\n        }\n        if (!initialized) {\n            throw new KeyStoreException(\"Uninitialized keystore\");\n        }\n        return keyStoreSpi.engineEntryInstanceOf(alias, entryClass);\n    }"}
{"Number":"477","API Relative Path":"java.security.KeyStore.java-setEntry(String-Entry-ProtectionParameter)","Corresponding Source":"/**\n     * Saves a keystore {@code Entry} under the specified alias.\n     * The protection parameter is used to protect the\n     * {@code Entry}.\n     *\n     * <p> If an entry already exists for the specified alias,\n     * it is overridden.\n     *\n     * @param alias save the keystore {@code Entry} under this alias\n     * @param entry the {@code Entry} to save\n     * @param protParam the {@code ProtectionParameter}\n     *          used to protect the {@code Entry},\n     *          which may be {@code null}\n     *\n     * @exception NullPointerException if\n     *          {@code alias} or {@code entry}\n     *          is {@code null}\n     * @exception KeyStoreException if the keystore has not been initialized\n     *          (loaded), or if this operation fails for some other reason\n     *\n     * @see #getEntry(String, KeyStore.ProtectionParameter)\n     *\n     * @since 1.5\n     */\n    public final void setEntry(String alias, Entry entry,\n                        ProtectionParameter protParam)\n                throws KeyStoreException {\n        if (alias == null || entry == null) {\n            throw new NullPointerException(\"invalid null input\");\n        }\n        if (!initialized) {\n            throw new KeyStoreException(\"Uninitialized keystore\");\n        }\n        keyStoreSpi.engineSetEntry(alias, entry, protParam);\n    }"}
{"Number":"478","API Relative Path":"java.security.KeyStore.java-setKeyEntry(String-Key-char[]-Certificate[])","Corresponding Source":"/**\n     * Assigns the given key to the given alias, protecting it with the given\n     * password.\n     *\n     * <p>If the given key is of type {@code java.security.PrivateKey},\n     * it must be accompanied by a certificate chain certifying the\n     * corresponding public key.\n     *\n     * <p>If the given alias already exists, the keystore information\n     * associated with it is overridden by the given key (and possibly\n     * certificate chain).\n     *\n     * @param alias the alias name\n     * @param key the key to be associated with the alias\n     * @param password the password to protect the key\n     * @param chain the certificate chain for the corresponding public\n     * key (only required if the given key is of type\n     * {@code java.security.PrivateKey}).\n     *\n     * @exception KeyStoreException if the keystore has not been initialized\n     * (loaded), the given key cannot be protected, or this operation fails\n     * for some other reason\n     */\n    public final void setKeyEntry(String alias, Key key, char[] password,\n                                  Certificate[] chain)\n        throws KeyStoreException\n    {\n        if (!initialized) {\n            throw new KeyStoreException(\"Uninitialized keystore\");\n        }\n        if ((key instanceof PrivateKey) &&\n            (chain == null || chain.length == 0)) {\n            throw new IllegalArgumentException(\"Private key must be \"\n                                               + \"accompanied by certificate \"\n                                               + \"chain\");\n        }\n        keyStoreSpi.engineSetKeyEntry(alias, key, password, chain);\n    }"}
{"Number":"479","API Relative Path":"java.security.MessageDigest.java-digest(byte[]-int-int)","Corresponding Source":"/**\n     * Completes the hash computation by performing final operations\n     * such as padding. The digest is reset after this call is made.\n     *\n     * @param buf output buffer for the computed digest\n     *\n     * @param offset offset into the output buffer to begin storing the digest\n     *\n     * @param len number of bytes within buf allotted for the digest\n     *\n     * @return the number of bytes placed into {@code buf}\n     *\n     * @exception DigestException if an error occurs.\n     */\n    public int digest(byte[] buf, int offset, int len) throws DigestException {\n        if (buf == null) {\n            throw new IllegalArgumentException(\"No output buffer given\");\n        }\n        if (buf.length - offset < len) {\n            throw new IllegalArgumentException\n                (\"Output buffer too small for specified offset and length\");\n        }\n        int numBytes = engineDigest(buf, offset, len);\n        state = INITIAL;\n        return numBytes;\n    }"}
{"Number":"480","API Relative Path":"java.security.MessageDigest.java-digest(byte[]-int-int)","Corresponding Source":"/**\n     * Completes the hash computation by performing final operations\n     * such as padding. The digest is reset after this call is made.\n     *\n     * @param buf output buffer for the computed digest\n     *\n     * @param offset offset into the output buffer to begin storing the digest\n     *\n     * @param len number of bytes within buf allotted for the digest\n     *\n     * @return the number of bytes placed into {@code buf}\n     *\n     * @exception DigestException if an error occurs.\n     */\n    public int digest(byte[] buf, int offset, int len) throws DigestException {\n        if (buf == null) {\n            throw new IllegalArgumentException(\"No output buffer given\");\n        }\n        if (buf.length - offset < len) {\n            throw new IllegalArgumentException\n                (\"Output buffer too small for specified offset and length\");\n        }\n        int numBytes = engineDigest(buf, offset, len);\n        state = INITIAL;\n        return numBytes;\n    }"}
{"Number":"481","API Relative Path":"java.security.MessageDigest.java-digest(byte[]-int-int)","Corresponding Source":"/**\n     * Completes the hash computation by performing final operations\n     * such as padding. The digest is reset after this call is made.\n     *\n     * @param buf output buffer for the computed digest\n     *\n     * @param offset offset into the output buffer to begin storing the digest\n     *\n     * @param len number of bytes within buf allotted for the digest\n     *\n     * @return the number of bytes placed into {@code buf}\n     *\n     * @exception DigestException if an error occurs.\n     */\n    public int digest(byte[] buf, int offset, int len) throws DigestException {\n        if (buf == null) {\n            throw new IllegalArgumentException(\"No output buffer given\");\n        }\n        if (buf.length - offset < len) {\n            throw new IllegalArgumentException\n                (\"Output buffer too small for specified offset and length\");\n        }\n        int numBytes = engineDigest(buf, offset, len);\n        state = INITIAL;\n        return numBytes;\n    }"}
{"Number":"482","API Relative Path":"java.security.MessageDigest.java-digest(byte[]-int-int)","Corresponding Source":"/**\n     * Completes the hash computation by performing final operations\n     * such as padding. The digest is reset after this call is made.\n     *\n     * @param buf output buffer for the computed digest\n     *\n     * @param offset offset into the output buffer to begin storing the digest\n     *\n     * @param len number of bytes within buf allotted for the digest\n     *\n     * @return the number of bytes placed into {@code buf}\n     *\n     * @exception DigestException if an error occurs.\n     */\n    public int digest(byte[] buf, int offset, int len) throws DigestException {\n        if (buf == null) {\n            throw new IllegalArgumentException(\"No output buffer given\");\n        }\n        if (buf.length - offset < len) {\n            throw new IllegalArgumentException\n                (\"Output buffer too small for specified offset and length\");\n        }\n        int numBytes = engineDigest(buf, offset, len);\n        state = INITIAL;\n        return numBytes;\n    }"}
{"Number":"483","API Relative Path":"java.security.MessageDigest.java-update(ByteBuffer)","Corresponding Source":"/**\n     * Update the digest using the specified ByteBuffer. The digest is\n     * updated using the {@code input.remaining()} bytes starting\n     * at {@code input.position()}.\n     * Upon return, the buffer's position will be equal to its limit;\n     * its limit will not have changed.\n     *\n     * @param input the ByteBuffer\n     * @since 1.5\n     */\n    public final void update(ByteBuffer input) {\n        if (input == null) {\n            throw new NullPointerException();\n        }\n        engineUpdate(input);\n        state = IN_PROGRESS;\n    }"}
{"Number":"484","API Relative Path":"java.security.MessageDigest.java-update(byte[]-int-int)","Corresponding Source":"/**\n     * Updates the digest using the specified array of bytes, starting\n     * at the specified offset.\n     *\n     * @param input the array of bytes.\n     *\n     * @param offset the offset to start from in the array of bytes.\n     *\n     * @param len the number of bytes to use, starting at\n     * {@code offset}.\n     */\n    public void update(byte[] input, int offset, int len) {\n        if (input == null) {\n            throw new IllegalArgumentException(\"No input buffer given\");\n        }\n        if (input.length - offset < len) {\n            throw new IllegalArgumentException(\"Input buffer too short\");\n        }\n        engineUpdate(input, offset, len);\n        state = IN_PROGRESS;\n    }"}
{"Number":"485","API Relative Path":"java.security.MessageDigest.java-update(byte[]-int-int)","Corresponding Source":"/**\n     * Updates the digest using the specified array of bytes, starting\n     * at the specified offset.\n     *\n     * @param input the array of bytes.\n     *\n     * @param offset the offset to start from in the array of bytes.\n     *\n     * @param len the number of bytes to use, starting at\n     * {@code offset}.\n     */\n    public void update(byte[] input, int offset, int len) {\n        if (input == null) {\n            throw new IllegalArgumentException(\"No input buffer given\");\n        }\n        if (input.length - offset < len) {\n            throw new IllegalArgumentException(\"Input buffer too short\");\n        }\n        engineUpdate(input, offset, len);\n        state = IN_PROGRESS;\n    }"}
{"Number":"486","API Relative Path":"java.security.MessageDigestSpi.java-engineDigest(byte[]-int-int)","Corresponding Source":"/**\n     * Completes the hash computation by performing final\n     * operations such as padding. Once {@code engineDigest} has\n     * been called, the engine should be reset (see\n     * {@link #engineReset() engineReset}).\n     * Resetting is the responsibility of the\n     * engine implementor.\n     *\n     * This method should be abstract, but we leave it concrete for\n     * binary compatibility.  Knowledgeable providers should override this\n     * method.\n     *\n     * @param buf the output buffer in which to store the digest\n     *\n     * @param offset offset to start from in the output buffer\n     *\n     * @param len number of bytes within buf allotted for the digest.\n     * Both this default implementation and the SUN provider do not\n     * return partial digests.  The presence of this parameter is solely\n     * for consistency in our API's.  If the value of this parameter is less\n     * than the actual digest length, the method will throw a DigestException.\n     * This parameter is ignored if its value is greater than or equal to\n     * the actual digest length.\n     *\n     * @return the length of the digest stored in the output buffer.\n     *\n     * @exception DigestException if an error occurs.\n     *\n     * @since 1.2\n     */\n    protected int engineDigest(byte[] buf, int offset, int len)\n                                                throws DigestException {\n\n        byte[] digest = engineDigest();\n        if (len < digest.length)\n                throw new DigestException(\"partial digests not returned\");\n        if (buf.length - offset < digest.length)\n                throw new DigestException(\"insufficient space in the output \"\n                                          + \"buffer to store the digest\");\n        System.arraycopy(digest, 0, buf, offset, digest.length);\n        return digest.length;\n    }"}
{"Number":"487","API Relative Path":"java.security.MessageDigestSpi.java-engineDigest(byte[]-int-int)","Corresponding Source":"/**\n     * Completes the hash computation by performing final\n     * operations such as padding. Once {@code engineDigest} has\n     * been called, the engine should be reset (see\n     * {@link #engineReset() engineReset}).\n     * Resetting is the responsibility of the\n     * engine implementor.\n     *\n     * This method should be abstract, but we leave it concrete for\n     * binary compatibility.  Knowledgeable providers should override this\n     * method.\n     *\n     * @param buf the output buffer in which to store the digest\n     *\n     * @param offset offset to start from in the output buffer\n     *\n     * @param len number of bytes within buf allotted for the digest.\n     * Both this default implementation and the SUN provider do not\n     * return partial digests.  The presence of this parameter is solely\n     * for consistency in our API's.  If the value of this parameter is less\n     * than the actual digest length, the method will throw a DigestException.\n     * This parameter is ignored if its value is greater than or equal to\n     * the actual digest length.\n     *\n     * @return the length of the digest stored in the output buffer.\n     *\n     * @exception DigestException if an error occurs.\n     *\n     * @since 1.2\n     */\n    protected int engineDigest(byte[] buf, int offset, int len)\n                                                throws DigestException {\n\n        byte[] digest = engineDigest();\n        if (len < digest.length)\n                throw new DigestException(\"partial digests not returned\");\n        if (buf.length - offset < digest.length)\n                throw new DigestException(\"insufficient space in the output \"\n                                          + \"buffer to store the digest\");\n        System.arraycopy(digest, 0, buf, offset, digest.length);\n        return digest.length;\n    }"}
{"Number":"488","API Relative Path":"java.security.PKCS12Attribute.java-PKCS12Attribute(String-String)","Corresponding Source":"/**\n     * Constructs a PKCS12 attribute from its name and value.\n     * The name is an ASN.1 Object Identifier represented as a list of\n     * dot-separated integers.\n     * A string value is represented as the string itself.\n     * A binary value is represented as a string of colon-separated\n     * pairs of hexadecimal digits.\n     * Multi-valued attributes are represented as a comma-separated\n     * list of values, enclosed in square brackets. See\n     * {@link Arrays#toString(java.lang.Object[])}.\n     * <p>\n     * A string value will be DER-encoded as an ASN.1 UTF8String and a\n     * binary value will be DER-encoded as an ASN.1 Octet String.\n     *\n     * @param name the attribute's identifier\n     * @param value the attribute's value\n     *\n     * @exception NullPointerException if {@code name} or {@code value}\n     *     is {@code null}\n     * @exception IllegalArgumentException if {@code name} or\n     *     {@code value} is incorrectly formatted\n     */\n    public PKCS12Attribute(String name, String value) {\n        if (name == null || value == null) {\n            throw new NullPointerException();\n        }\n        // Validate name\n        ObjectIdentifier type;\n        try {\n            type = new ObjectIdentifier(name);\n        } catch (IOException e) {\n            throw new IllegalArgumentException(\"Incorrect format: name\", e);\n        }\n        this.name = name;\n\n        // Validate value\n        int length = value.length();\n        String[] values;\n        if (value.charAt(0) == '[' && value.charAt(length - 1) == ']') {\n            values = value.substring(1, length - 1).split(\", \");\n        } else {\n            values = new String[]{ value };\n        }\n        this.value = value;\n\n        try {\n            this.encoded = encode(type, values);\n        } catch (IOException e) {\n            throw new IllegalArgumentException(\"Incorrect format: value\", e);\n        }\n    }"}
{"Number":"489","API Relative Path":"java.security.Provider.java-compute(Object-BiFunction)","Corresponding Source":"private Object implCompute(Object key, BiFunction<? super Object, ? super Object, ? extends Object> remappingFunction) {\n        if (key instanceof String) {\n            if (!checkLegacy(key)) {\n                return null;\n            }\n            legacyStrings.computeIfAbsent((String) key,\n                    (Function<? super String, ? extends String>) remappingFunction);\n        }\n        return super.compute(key, remappingFunction);\n    }"}
{"Number":"490","API Relative Path":"java.security.Provider.java-computeIfAbsent(Object-Function)","Corresponding Source":"private Object implComputeIfAbsent(Object key, Function<? super Object, ? extends Object> mappingFunction) {\n        if (key instanceof String) {\n            if (!checkLegacy(key)) {\n                return null;\n            }\n            legacyStrings.computeIfAbsent((String) key,\n                    (Function<? super String, ? extends String>) mappingFunction);\n        }\n        return super.computeIfAbsent(key, mappingFunction);\n    }"}
{"Number":"491","API Relative Path":"java.security.Provider.java-computeIfPresent(Object-BiFunction)","Corresponding Source":"private Object implComputeIfPresent(Object key, BiFunction<? super Object, ? super Object, ? extends Object> remappingFunction) {\n        if (key instanceof String) {\n            if (!checkLegacy(key)) {\n                return null;\n            }\n            legacyStrings.computeIfPresent((String) key,\n                    (BiFunction<? super String, ? super String, ? extends String>) remappingFunction);\n        }\n        return super.computeIfPresent(key, remappingFunction);\n    }"}
{"Number":"492","API Relative Path":"java.security.Provider.java-remove(Object-Object)","Corresponding Source":"private boolean implRemove(Object key, Object value) {\n        if (key instanceof String && value instanceof String) {\n            if (!checkLegacy(key)) {\n                return false;\n            }\n            legacyStrings.remove((String)key, value);\n        }\n        return super.remove(key, value);\n    }"}
{"Number":"493","API Relative Path":"java.security.Provider.java-removeService(Service)","Corresponding Source":"private void implRemoveService(Service s) {\n        if ((s == null) || (serviceMap == null)) {\n            return;\n        }\n        String type = s.getType();\n        String algorithm = s.getAlgorithm();\n        ServiceKey key = new ServiceKey(type, algorithm, false);\n        Service oldService = serviceMap.get(key);\n        if (s != oldService) {\n            return;\n        }\n        servicesChanged = true;\n        serviceMap.remove(key);\n        for (String alias : s.getAliases()) {\n            serviceMap.remove(new ServiceKey(type, alias, false));\n        }\n        removePropertyStrings(s);\n    }"}
{"Number":"494","API Relative Path":"java.security.Provider.java-replaceAll(BiFunction)","Corresponding Source":"private void implReplaceAll(BiFunction<? super Object, ? super Object, ? extends Object> function) {\n        legacyChanged = true;\n        if (legacyStrings == null) {\n            legacyStrings = new LinkedHashMap<String,String>();\n        } else {\n            legacyStrings.replaceAll((BiFunction<? super String, ? super String, ? extends String>) function);\n        }\n        super.replaceAll(function);\n    }"}
{"Number":"495","API Relative Path":"java.security.Signature.java-initVerify(Certificate)","Corresponding Source":"/**\n     * Initializes this object for verification, using the public key from\n     * the given certificate.\n     * <p>If the certificate is of type X.509 and has a <i>key usage<\/i>\n     * extension field marked as critical, and the value of the <i>key usage<\/i>\n     * extension field implies that the public key in\n     * the certificate and its corresponding private key are not\n     * supposed to be used for digital signatures, an\n     * {@code InvalidKeyException} is thrown.\n     *\n     * @param certificate the certificate of the identity whose signature is\n     * going to be verified.\n     *\n     * @exception InvalidKeyException  if the public key in the certificate\n     * is not encoded properly or does not include required  parameter\n     * information or cannot be used for digital signature purposes.\n     * @since 1.3\n     */\n    public final void initVerify(Certificate certificate)\n            throws InvalidKeyException {\n        // If the certificate is of type X509Certificate,\n        // we should check whether it has a Key Usage\n        // extension marked as critical.\n        if (certificate instanceof java.security.cert.X509Certificate) {\n            // Check whether the cert has a key usage extension\n            // marked as a critical extension.\n            // The OID for KeyUsage extension is 2.5.29.15.\n            X509Certificate cert = (X509Certificate)certificate;\n            Set<String> critSet = cert.getCriticalExtensionOIDs();\n\n            if (critSet != null && !critSet.isEmpty()\n                && critSet.contains(\"2.5.29.15\")) {\n                boolean[] keyUsageInfo = cert.getKeyUsage();\n                // keyUsageInfo[0] is for digitalSignature.\n                if ((keyUsageInfo != null) && (keyUsageInfo[0] == false))\n                    throw new InvalidKeyException(\"Wrong key usage\");\n            }\n        }\n\n        PublicKey publicKey = certificate.getPublicKey();\n        engineInitVerify(publicKey);\n        state = VERIFY;\n    }"}
{"Number":"496","API Relative Path":"java.security.Signature.java-sign(byte[]-int-int)","Corresponding Source":"/**\n     * Finishes the signature operation and stores the resulting signature\n     * bytes in the provided buffer {@code outbuf}, starting at\n     * {@code offset}.\n     * The format of the signature depends on the underlying\n     * signature scheme.\n     *\n     * <p>This signature object is reset to its initial state (the state it\n     * was in after a call to one of the {@code initSign} methods) and\n     * can be reused to generate further signatures with the same private key.\n     *\n     * @param outbuf buffer for the signature result.\n     *\n     * @param offset offset into {@code outbuf} where the signature is\n     * stored.\n     *\n     * @param len number of bytes within {@code outbuf} allotted for the\n     * signature.\n     *\n     * @return the number of bytes placed into {@code outbuf}.\n     *\n     * @exception SignatureException if this signature object is not\n     * initialized properly, if this signature algorithm is unable to\n     * process the input data provided, or if {@code len} is less\n     * than the actual signature length.\n     *\n     * @since 1.2\n     */\n    public final int sign(byte[] outbuf, int offset, int len)\n        throws SignatureException {\n        if (outbuf == null) {\n            throw new IllegalArgumentException(\"No output buffer given\");\n        }\n        if (offset < 0 || len < 0) {\n            throw new IllegalArgumentException(\"offset or len is less than 0\");\n        }\n        if (outbuf.length - offset < len) {\n            throw new IllegalArgumentException\n                (\"Output buffer too small for specified offset and length\");\n        }\n        if (state != SIGN) {\n            throw new SignatureException(\"object not initialized for \" +\n                                         \"signing\");\n        }\n        return engineSign(outbuf, offset, len);\n    }"}
{"Number":"497","API Relative Path":"java.security.Signature.java-sign(byte[]-int-int)","Corresponding Source":"/**\n     * Finishes the signature operation and stores the resulting signature\n     * bytes in the provided buffer {@code outbuf}, starting at\n     * {@code offset}.\n     * The format of the signature depends on the underlying\n     * signature scheme.\n     *\n     * <p>This signature object is reset to its initial state (the state it\n     * was in after a call to one of the {@code initSign} methods) and\n     * can be reused to generate further signatures with the same private key.\n     *\n     * @param outbuf buffer for the signature result.\n     *\n     * @param offset offset into {@code outbuf} where the signature is\n     * stored.\n     *\n     * @param len number of bytes within {@code outbuf} allotted for the\n     * signature.\n     *\n     * @return the number of bytes placed into {@code outbuf}.\n     *\n     * @exception SignatureException if this signature object is not\n     * initialized properly, if this signature algorithm is unable to\n     * process the input data provided, or if {@code len} is less\n     * than the actual signature length.\n     *\n     * @since 1.2\n     */\n    public final int sign(byte[] outbuf, int offset, int len)\n        throws SignatureException {\n        if (outbuf == null) {\n            throw new IllegalArgumentException(\"No output buffer given\");\n        }\n        if (offset < 0 || len < 0) {\n            throw new IllegalArgumentException(\"offset or len is less than 0\");\n        }\n        if (outbuf.length - offset < len) {\n            throw new IllegalArgumentException\n                (\"Output buffer too small for specified offset and length\");\n        }\n        if (state != SIGN) {\n            throw new SignatureException(\"object not initialized for \" +\n                                         \"signing\");\n        }\n        return engineSign(outbuf, offset, len);\n    }"}
{"Number":"498","API Relative Path":"java.security.Signature.java-sign(byte[]-int-int)","Corresponding Source":"/**\n     * Finishes the signature operation and stores the resulting signature\n     * bytes in the provided buffer {@code outbuf}, starting at\n     * {@code offset}.\n     * The format of the signature depends on the underlying\n     * signature scheme.\n     *\n     * <p>This signature object is reset to its initial state (the state it\n     * was in after a call to one of the {@code initSign} methods) and\n     * can be reused to generate further signatures with the same private key.\n     *\n     * @param outbuf buffer for the signature result.\n     *\n     * @param offset offset into {@code outbuf} where the signature is\n     * stored.\n     *\n     * @param len number of bytes within {@code outbuf} allotted for the\n     * signature.\n     *\n     * @return the number of bytes placed into {@code outbuf}.\n     *\n     * @exception SignatureException if this signature object is not\n     * initialized properly, if this signature algorithm is unable to\n     * process the input data provided, or if {@code len} is less\n     * than the actual signature length.\n     *\n     * @since 1.2\n     */\n    public final int sign(byte[] outbuf, int offset, int len)\n        throws SignatureException {\n        if (outbuf == null) {\n            throw new IllegalArgumentException(\"No output buffer given\");\n        }\n        if (offset < 0 || len < 0) {\n            throw new IllegalArgumentException(\"offset or len is less than 0\");\n        }\n        if (outbuf.length - offset < len) {\n            throw new IllegalArgumentException\n                (\"Output buffer too small for specified offset and length\");\n        }\n        if (state != SIGN) {\n            throw new SignatureException(\"object not initialized for \" +\n                                         \"signing\");\n        }\n        return engineSign(outbuf, offset, len);\n    }"}
{"Number":"499","API Relative Path":"java.security.Signature.java-sign(byte[]-int-int)","Corresponding Source":"/**\n     * Finishes the signature operation and stores the resulting signature\n     * bytes in the provided buffer {@code outbuf}, starting at\n     * {@code offset}.\n     * The format of the signature depends on the underlying\n     * signature scheme.\n     *\n     * <p>This signature object is reset to its initial state (the state it\n     * was in after a call to one of the {@code initSign} methods) and\n     * can be reused to generate further signatures with the same private key.\n     *\n     * @param outbuf buffer for the signature result.\n     *\n     * @param offset offset into {@code outbuf} where the signature is\n     * stored.\n     *\n     * @param len number of bytes within {@code outbuf} allotted for the\n     * signature.\n     *\n     * @return the number of bytes placed into {@code outbuf}.\n     *\n     * @exception SignatureException if this signature object is not\n     * initialized properly, if this signature algorithm is unable to\n     * process the input data provided, or if {@code len} is less\n     * than the actual signature length.\n     *\n     * @since 1.2\n     */\n    public final int sign(byte[] outbuf, int offset, int len)\n        throws SignatureException {\n        if (outbuf == null) {\n            throw new IllegalArgumentException(\"No output buffer given\");\n        }\n        if (offset < 0 || len < 0) {\n            throw new IllegalArgumentException(\"offset or len is less than 0\");\n        }\n        if (outbuf.length - offset < len) {\n            throw new IllegalArgumentException\n                (\"Output buffer too small for specified offset and length\");\n        }\n        if (state != SIGN) {\n            throw new SignatureException(\"object not initialized for \" +\n                                         \"signing\");\n        }\n        return engineSign(outbuf, offset, len);\n    }"}
{"Number":"500","API Relative Path":"java.security.Signature.java-sign(byte[]-int-int)","Corresponding Source":"/**\n     * Finishes the signature operation and stores the resulting signature\n     * bytes in the provided buffer {@code outbuf}, starting at\n     * {@code offset}.\n     * The format of the signature depends on the underlying\n     * signature scheme.\n     *\n     * <p>This signature object is reset to its initial state (the state it\n     * was in after a call to one of the {@code initSign} methods) and\n     * can be reused to generate further signatures with the same private key.\n     *\n     * @param outbuf buffer for the signature result.\n     *\n     * @param offset offset into {@code outbuf} where the signature is\n     * stored.\n     *\n     * @param len number of bytes within {@code outbuf} allotted for the\n     * signature.\n     *\n     * @return the number of bytes placed into {@code outbuf}.\n     *\n     * @exception SignatureException if this signature object is not\n     * initialized properly, if this signature algorithm is unable to\n     * process the input data provided, or if {@code len} is less\n     * than the actual signature length.\n     *\n     * @since 1.2\n     */\n    public final int sign(byte[] outbuf, int offset, int len)\n        throws SignatureException {\n        if (outbuf == null) {\n            throw new IllegalArgumentException(\"No output buffer given\");\n        }\n        if (offset < 0 || len < 0) {\n            throw new IllegalArgumentException(\"offset or len is less than 0\");\n        }\n        if (outbuf.length - offset < len) {\n            throw new IllegalArgumentException\n                (\"Output buffer too small for specified offset and length\");\n        }\n        if (state != SIGN) {\n            throw new SignatureException(\"object not initialized for \" +\n                                         \"signing\");\n        }\n        return engineSign(outbuf, offset, len);\n    }"}
{"Number":"501","API Relative Path":"java.security.Signature.java-update(ByteBuffer)","Corresponding Source":"/**\n     * Updates the data to be signed or verified using the specified\n     * ByteBuffer. Processes the {@code data.remaining()} bytes\n     * starting at at {@code data.position()}.\n     * Upon return, the buffer's position will be equal to its limit;\n     * its limit will not have changed.\n     *\n     * @param data the ByteBuffer\n     *\n     * @exception SignatureException if this signature object is not\n     * initialized properly.\n     * @since 1.5\n     */\n    public final void update(ByteBuffer data) throws SignatureException {\n        if ((state != SIGN) && (state != VERIFY)) {\n            throw new SignatureException(\"object not initialized for \"\n                                         + \"signature or verification\");\n        }\n        if (data == null) {\n            throw new NullPointerException();\n        }\n        engineUpdate(data);\n    }"}
{"Number":"502","API Relative Path":"java.security.Signature.java-update(byte[]-int-int)","Corresponding Source":"/**\n     * Updates the data to be signed or verified, using the specified\n     * array of bytes, starting at the specified offset.\n     *\n     * @param data the array of bytes.\n     * @param off the offset to start from in the array of bytes.\n     * @param len the number of bytes to use, starting at offset.\n     *\n     * @exception SignatureException if this signature object is not\n     * initialized properly.\n     */\n    public final void update(byte[] data, int off, int len)\n            throws SignatureException {\n        if (state == SIGN || state == VERIFY) {\n            if (data == null) {\n                throw new IllegalArgumentException(\"data is null\");\n            }\n            if (off < 0 || len < 0) {\n                throw new IllegalArgumentException(\"off or len is less than 0\");\n            }\n            if (data.length - off < len) {\n                throw new IllegalArgumentException\n                    (\"data too small for specified offset and length\");\n            }\n            engineUpdate(data, off, len);\n        } else {\n            throw new SignatureException(\"object not initialized for \"\n                                         + \"signature or verification\");\n        }\n    }"}
{"Number":"503","API Relative Path":"java.security.Signature.java-update(byte[]-int-int)","Corresponding Source":"/**\n     * Updates the data to be signed or verified, using the specified\n     * array of bytes, starting at the specified offset.\n     *\n     * @param data the array of bytes.\n     * @param off the offset to start from in the array of bytes.\n     * @param len the number of bytes to use, starting at offset.\n     *\n     * @exception SignatureException if this signature object is not\n     * initialized properly.\n     */\n    public final void update(byte[] data, int off, int len)\n            throws SignatureException {\n        if (state == SIGN || state == VERIFY) {\n            if (data == null) {\n                throw new IllegalArgumentException(\"data is null\");\n            }\n            if (off < 0 || len < 0) {\n                throw new IllegalArgumentException(\"off or len is less than 0\");\n            }\n            if (data.length - off < len) {\n                throw new IllegalArgumentException\n                    (\"data too small for specified offset and length\");\n            }\n            engineUpdate(data, off, len);\n        } else {\n            throw new SignatureException(\"object not initialized for \"\n                                         + \"signature or verification\");\n        }\n    }"}
{"Number":"504","API Relative Path":"java.security.Signature.java-update(byte[]-int-int)","Corresponding Source":"/**\n     * Updates the data to be signed or verified, using the specified\n     * array of bytes, starting at the specified offset.\n     *\n     * @param data the array of bytes.\n     * @param off the offset to start from in the array of bytes.\n     * @param len the number of bytes to use, starting at offset.\n     *\n     * @exception SignatureException if this signature object is not\n     * initialized properly.\n     */\n    public final void update(byte[] data, int off, int len)\n            throws SignatureException {\n        if (state == SIGN || state == VERIFY) {\n            if (data == null) {\n                throw new IllegalArgumentException(\"data is null\");\n            }\n            if (off < 0 || len < 0) {\n                throw new IllegalArgumentException(\"off or len is less than 0\");\n            }\n            if (data.length - off < len) {\n                throw new IllegalArgumentException\n                    (\"data too small for specified offset and length\");\n            }\n            engineUpdate(data, off, len);\n        } else {\n            throw new SignatureException(\"object not initialized for \"\n                                         + \"signature or verification\");\n        }\n    }"}
{"Number":"505","API Relative Path":"java.security.Signature.java-verify(byte[]-int-int)","Corresponding Source":"/**\n     * Verifies the passed-in signature in the specified array\n     * of bytes, starting at the specified offset.\n     *\n     * <p>A call to this method resets this signature object to the state\n     * it was in when previously initialized for verification via a\n     * call to {@code initVerify(PublicKey)}. That is, the object is\n     * reset and available to verify another signature from the identity\n     * whose public key was specified in the call to {@code initVerify}.\n     *\n     *\n     * @param signature the signature bytes to be verified.\n     * @param offset the offset to start from in the array of bytes.\n     * @param length the number of bytes to use, starting at offset.\n     *\n     * @return true if the signature was verified, false if not.\n     *\n     * @exception SignatureException if this signature object is not\n     * initialized properly, the passed-in signature is improperly\n     * encoded or of the wrong type, if this signature algorithm is unable to\n     * process the input data provided, etc.\n     * @exception IllegalArgumentException if the {@code signature}\n     * byte array is null, or the {@code offset} or {@code length}\n     * is less than 0, or the sum of the {@code offset} and\n     * {@code length} is greater than the length of the\n     * {@code signature} byte array.\n     * @since 1.4\n     */\n    public final boolean verify(byte[] signature, int offset, int length)\n        throws SignatureException {\n        if (state == VERIFY) {\n            if (signature == null) {\n                throw new IllegalArgumentException(\"signature is null\");\n            }\n            if (offset < 0 || length < 0) {\n                throw new IllegalArgumentException\n                    (\"offset or length is less than 0\");\n            }\n            if (signature.length - offset < length) {\n                throw new IllegalArgumentException\n                    (\"signature too small for specified offset and length\");\n            }\n\n            return engineVerify(signature, offset, length);\n        }\n        throw new SignatureException(\"object not initialized for \" +\n                                     \"verification\");\n    }"}
{"Number":"506","API Relative Path":"java.security.SignatureSpi.java-engineSign(byte[]-int-int)","Corresponding Source":"/**\n     * Finishes this signature operation and stores the resulting signature\n     * bytes in the provided buffer {@code outbuf}, starting at\n     * {@code offset}.\n     * The format of the signature depends on the underlying\n     * signature scheme.\n     *\n     * <p>The signature implementation is reset to its initial state\n     * (the state it was in after a call to one of the\n     * {@code engineInitSign} methods)\n     * and can be reused to generate further signatures with the same private\n     * key.\n     *\n     * This method should be abstract, but we leave it concrete for\n     * binary compatibility.  Knowledgeable providers should override this\n     * method.\n     *\n     * @param outbuf buffer for the signature result.\n     *\n     * @param offset offset into {@code outbuf} where the signature is\n     * stored.\n     *\n     * @param len number of bytes within {@code outbuf} allotted for the\n     * signature.\n     * Both this default implementation and the SUN provider do not\n     * return partial digests. If the value of this parameter is less\n     * than the actual signature length, this method will throw a\n     * SignatureException.\n     * This parameter is ignored if its value is greater than or equal to\n     * the actual signature length.\n     *\n     * @return the number of bytes placed into {@code outbuf}\n     *\n     * @exception SignatureException if the engine is not\n     * initialized properly, if this signature algorithm is unable to\n     * process the input data provided, or if {@code len} is less\n     * than the actual signature length.\n     *\n     * @since 1.2\n     */\n    protected int engineSign(byte[] outbuf, int offset, int len)\n                        throws SignatureException {\n        byte[] sig = engineSign();\n        if (len < sig.length) {\n                throw new SignatureException\n                    (\"partial signatures not returned\");\n        }\n        if (outbuf.length - offset < sig.length) {\n                throw new SignatureException\n                    (\"insufficient space in the output buffer to store the \"\n                     + \"signature\");\n        }\n        System.arraycopy(sig, 0, outbuf, offset, sig.length);\n        return sig.length;\n    }"}
{"Number":"507","API Relative Path":"java.security.SignatureSpi.java-engineSign(byte[]-int-int)","Corresponding Source":"/**\n     * Finishes this signature operation and stores the resulting signature\n     * bytes in the provided buffer {@code outbuf}, starting at\n     * {@code offset}.\n     * The format of the signature depends on the underlying\n     * signature scheme.\n     *\n     * <p>The signature implementation is reset to its initial state\n     * (the state it was in after a call to one of the\n     * {@code engineInitSign} methods)\n     * and can be reused to generate further signatures with the same private\n     * key.\n     *\n     * This method should be abstract, but we leave it concrete for\n     * binary compatibility.  Knowledgeable providers should override this\n     * method.\n     *\n     * @param outbuf buffer for the signature result.\n     *\n     * @param offset offset into {@code outbuf} where the signature is\n     * stored.\n     *\n     * @param len number of bytes within {@code outbuf} allotted for the\n     * signature.\n     * Both this default implementation and the SUN provider do not\n     * return partial digests. If the value of this parameter is less\n     * than the actual signature length, this method will throw a\n     * SignatureException.\n     * This parameter is ignored if its value is greater than or equal to\n     * the actual signature length.\n     *\n     * @return the number of bytes placed into {@code outbuf}\n     *\n     * @exception SignatureException if the engine is not\n     * initialized properly, if this signature algorithm is unable to\n     * process the input data provided, or if {@code len} is less\n     * than the actual signature length.\n     *\n     * @since 1.2\n     */\n    protected int engineSign(byte[] outbuf, int offset, int len)\n                        throws SignatureException {\n        byte[] sig = engineSign();\n        if (len < sig.length) {\n                throw new SignatureException\n                    (\"partial signatures not returned\");\n        }\n        if (outbuf.length - offset < sig.length) {\n                throw new SignatureException\n                    (\"insufficient space in the output buffer to store the \"\n                     + \"signature\");\n        }\n        System.arraycopy(sig, 0, outbuf, offset, sig.length);\n        return sig.length;\n    }"}
{"Number":"508","API Relative Path":"java.security.spec.DSAGenParameterSpec.java-DSAGenParameterSpec(int-int-int)","Corresponding Source":"/**\n     * Creates a domain parameter specification for DSA parameter\n     * generation using {@code primePLen}, {@code subprimeQLen},\n     * and {@code seedLen}.\n     * @param primePLen the desired length of the prime P in bits.\n     * @param subprimeQLen the desired length of the sub-prime Q in bits.\n     * @param seedLen the desired length of the domain parameter seed in bits,\n     * shall be equal to or greater than {@code subprimeQLen}.\n     * @exception IllegalArgumentException if {@code primePLenLen},\n     * {@code subprimeQLen}, or {@code seedLen} is illegal per the\n     * specification of FIPS 186-3.\n     */\n    public DSAGenParameterSpec(int primePLen, int subprimeQLen, int seedLen) {\n        switch (primePLen) {\n        case 1024:\n            if (subprimeQLen != 160) {\n                throw new IllegalArgumentException\n                    (\"subprimeQLen must be 160 when primePLen=1024\");\n            }\n            break;\n        case 2048:\n            if (subprimeQLen != 224 && subprimeQLen != 256) {\n               throw new IllegalArgumentException\n                   (\"subprimeQLen must be 224 or 256 when primePLen=2048\");\n            }\n            break;\n        case 3072:\n            if (subprimeQLen != 256) {\n                throw new IllegalArgumentException\n                    (\"subprimeQLen must be 256 when primePLen=3072\");\n            }\n            break;\n        default:\n            throw new IllegalArgumentException\n                (\"primePLen must be 1024, 2048, or 3072\");\n        }\n        if (seedLen < subprimeQLen) {\n            throw new IllegalArgumentException\n                (\"seedLen must be equal to or greater than subprimeQLen\");\n        }\n        this.pLen = primePLen;\n        this.qLen = subprimeQLen;\n        this.seedLen = seedLen;\n    }"}
{"Number":"509","API Relative Path":"java.security.spec.ECFieldF2m.java-ECFieldF2m(int-BigInteger)","Corresponding Source":"/**\n     * Creates an elliptic curve characteristic 2 finite\n     * field which has 2^{@code m} elements with\n     * polynomial basis.\n     * The reduction polynomial for this field is based\n     * on {@code rp} whose i-th bit corresponds to\n     * the i-th coefficient of the reduction polynomial.<p>\n     * Note: A valid reduction polynomial is either a\n     * trinomial (X^{@code m} + X^{@code k} + 1\n     * with {@code m} &gt; {@code k} &gt;= 1) or a\n     * pentanomial (X^{@code m} + X^{@code k3}\n     * + X^{@code k2} + X^{@code k1} + 1 with\n     * {@code m} &gt; {@code k3} &gt; {@code k2}\n     * &gt; {@code k1} &gt;= 1).\n     * @param m with 2^{@code m} being the number of elements.\n     * @param rp the BigInteger whose i-th bit corresponds to\n     * the i-th coefficient of the reduction polynomial.\n     * @exception NullPointerException if {@code rp} is null.\n     * @exception IllegalArgumentException if {@code m}\n     * is not positive, or {@code rp} does not represent\n     * a valid reduction polynomial.\n     */\n    public ECFieldF2m(int m, BigInteger rp) {\n        // check m and rp\n        this.m = m;\n        this.rp = rp;\n        if (m <= 0) {\n            throw new IllegalArgumentException(\"m is not positive\");\n        }\n        int bitCount = this.rp.bitCount();\n        if (!this.rp.testBit(0) || !this.rp.testBit(m) ||\n            ((bitCount != 3) && (bitCount != 5))) {\n            throw new IllegalArgumentException\n                (\"rp does not represent a valid reduction polynomial\");\n        }\n        // convert rp into ks\n        BigInteger temp = this.rp.clearBit(0).clearBit(m);\n        this.ks = new int[bitCount-2];\n        for (int i = this.ks.length-1; i >= 0; i--) {\n            int index = temp.getLowestSetBit();\n            this.ks[i] = index;\n            temp = temp.clearBit(index);\n        }\n    }"}
{"Number":"510","API Relative Path":"java.security.spec.ECFieldF2m.java-ECFieldF2m(int-int[])","Corresponding Source":"/**\n     * Creates an elliptic curve characteristic 2 finite\n     * field which has 2^{@code m} elements with\n     * polynomial basis. The reduction polynomial for this\n     * field is based on {@code ks} whose content\n     * contains the order of the middle term(s) of the\n     * reduction polynomial.\n     * Note: A valid reduction polynomial is either a\n     * trinomial (X^{@code m} + X^{@code k} + 1\n     * with {@code m} &gt; {@code k} &gt;= 1) or a\n     * pentanomial (X^{@code m} + X^{@code k3}\n     * + X^{@code k2} + X^{@code k1} + 1 with\n     * {@code m} &gt; {@code k3} &gt; {@code k2}\n     * &gt; {@code k1} &gt;= 1), so {@code ks} should\n     * have length 1 or 3.\n     * @param m with 2^{@code m} being the number of elements.\n     * @param ks the order of the middle term(s) of the\n     * reduction polynomial. Contents of this array are copied\n     * to protect against subsequent modification.\n     * @exception NullPointerException if {@code ks} is null.\n     * @exception IllegalArgumentException if{@code m}\n     * is not positive, or the length of {@code ks}\n     * is neither 1 nor 3, or values in {@code ks}\n     * are not between {@code m}-1 and 1 (inclusive)\n     * and in descending order.\n     */\n    public ECFieldF2m(int m, int[] ks) {\n        // check m and ks\n        this.m = m;\n        this.ks = ks.clone();\n        if (m <= 0) {\n            throw new IllegalArgumentException(\"m is not positive\");\n        }\n        if ((this.ks.length != 1) && (this.ks.length != 3)) {\n            throw new IllegalArgumentException\n                (\"length of ks is neither 1 nor 3\");\n        }\n        for (int i = 0; i < this.ks.length; i++) {\n            if ((this.ks[i] < 1) || (this.ks[i] > m-1)) {\n                throw new IllegalArgumentException\n                    (\"ks[\"+ i + \"] is out of range\");\n            }\n            if ((i != 0) && (this.ks[i] >= this.ks[i-1])) {\n                throw new IllegalArgumentException\n                    (\"values in ks are not in descending order\");\n            }\n        }\n        // convert ks into rp\n        this.rp = BigInteger.ONE;\n        this.rp = rp.setBit(m);\n        for (int j = 0; j < this.ks.length; j++) {\n            rp = rp.setBit(this.ks[j]);\n        }\n    }"}
{"Number":"511","API Relative Path":"java.security.spec.ECFieldF2m.java-ECFieldF2m(int-int[])","Corresponding Source":"/**\n     * Creates an elliptic curve characteristic 2 finite\n     * field which has 2^{@code m} elements with\n     * polynomial basis. The reduction polynomial for this\n     * field is based on {@code ks} whose content\n     * contains the order of the middle term(s) of the\n     * reduction polynomial.\n     * Note: A valid reduction polynomial is either a\n     * trinomial (X^{@code m} + X^{@code k} + 1\n     * with {@code m} &gt; {@code k} &gt;= 1) or a\n     * pentanomial (X^{@code m} + X^{@code k3}\n     * + X^{@code k2} + X^{@code k1} + 1 with\n     * {@code m} &gt; {@code k3} &gt; {@code k2}\n     * &gt; {@code k1} &gt;= 1), so {@code ks} should\n     * have length 1 or 3.\n     * @param m with 2^{@code m} being the number of elements.\n     * @param ks the order of the middle term(s) of the\n     * reduction polynomial. Contents of this array are copied\n     * to protect against subsequent modification.\n     * @exception NullPointerException if {@code ks} is null.\n     * @exception IllegalArgumentException if{@code m}\n     * is not positive, or the length of {@code ks}\n     * is neither 1 nor 3, or values in {@code ks}\n     * are not between {@code m}-1 and 1 (inclusive)\n     * and in descending order.\n     */\n    public ECFieldF2m(int m, int[] ks) {\n        // check m and ks\n        this.m = m;\n        this.ks = ks.clone();\n        if (m <= 0) {\n            throw new IllegalArgumentException(\"m is not positive\");\n        }\n        if ((this.ks.length != 1) && (this.ks.length != 3)) {\n            throw new IllegalArgumentException\n                (\"length of ks is neither 1 nor 3\");\n        }\n        for (int i = 0; i < this.ks.length; i++) {\n            if ((this.ks[i] < 1) || (this.ks[i] > m-1)) {\n                throw new IllegalArgumentException\n                    (\"ks[\"+ i + \"] is out of range\");\n            }\n            if ((i != 0) && (this.ks[i] >= this.ks[i-1])) {\n                throw new IllegalArgumentException\n                    (\"values in ks are not in descending order\");\n            }\n        }\n        // convert ks into rp\n        this.rp = BigInteger.ONE;\n        this.rp = rp.setBit(m);\n        for (int j = 0; j < this.ks.length; j++) {\n            rp = rp.setBit(this.ks[j]);\n        }\n    }"}
{"Number":"512","API Relative Path":"java.security.spec.ECParameterSpec.java-ECParameterSpec(EllipticCurve-ECPoint-BigInteger-int)","Corresponding Source":"/**\n     * Creates elliptic curve domain parameters based on the\n     * specified values.\n     * @param curve the elliptic curve which this parameter\n     * defines.\n     * @param g the generator which is also known as the base point.\n     * @param n the order of the generator {@code g}.\n     * @param h the cofactor.\n     * @exception NullPointerException if {@code curve},\n     * {@code g}, or {@code n} is null.\n     * @exception IllegalArgumentException if {@code n}\n     * or {@code h} is not positive.\n     */\n    public ECParameterSpec(EllipticCurve curve, ECPoint g,\n                           BigInteger n, int h) {\n        if (curve == null) {\n            throw new NullPointerException(\"curve is null\");\n        }\n        if (g == null) {\n            throw new NullPointerException(\"g is null\");\n        }\n        if (n == null) {\n            throw new NullPointerException(\"n is null\");\n        }\n        if (n.signum() != 1) {\n            throw new IllegalArgumentException(\"n is not positive\");\n        }\n        if (h <= 0) {\n            throw new IllegalArgumentException(\"h is not positive\");\n        }\n        this.curve = curve;\n        this.g = g;\n        this.n = n;\n        this.h = h;\n    }"}
{"Number":"513","API Relative Path":"java.security.spec.ECParameterSpec.java-ECParameterSpec(EllipticCurve-ECPoint-BigInteger-int)","Corresponding Source":"/**\n     * Creates elliptic curve domain parameters based on the\n     * specified values.\n     * @param curve the elliptic curve which this parameter\n     * defines.\n     * @param g the generator which is also known as the base point.\n     * @param n the order of the generator {@code g}.\n     * @param h the cofactor.\n     * @exception NullPointerException if {@code curve},\n     * {@code g}, or {@code n} is null.\n     * @exception IllegalArgumentException if {@code n}\n     * or {@code h} is not positive.\n     */\n    public ECParameterSpec(EllipticCurve curve, ECPoint g,\n                           BigInteger n, int h) {\n        if (curve == null) {\n            throw new NullPointerException(\"curve is null\");\n        }\n        if (g == null) {\n            throw new NullPointerException(\"g is null\");\n        }\n        if (n == null) {\n            throw new NullPointerException(\"n is null\");\n        }\n        if (n.signum() != 1) {\n            throw new IllegalArgumentException(\"n is not positive\");\n        }\n        if (h <= 0) {\n            throw new IllegalArgumentException(\"h is not positive\");\n        }\n        this.curve = curve;\n        this.g = g;\n        this.n = n;\n        this.h = h;\n    }"}
{"Number":"514","API Relative Path":"java.security.spec.ECPrivateKeySpec.java-ECPrivateKeySpec(BigInteger-ECParameterSpec)","Corresponding Source":"/**\n     * Creates a new ECPrivateKeySpec with the specified\n     * parameter values.\n     * @param s the private value.\n     * @param params the associated elliptic curve domain\n     * parameters.\n     * @exception NullPointerException if {@code s}\n     * or {@code params} is null.\n     */\n    public ECPrivateKeySpec(BigInteger s, ECParameterSpec params) {\n        if (s == null) {\n            throw new NullPointerException(\"s is null\");\n        }\n        if (params == null) {\n            throw new NullPointerException(\"params is null\");\n        }\n        this.s = s;\n        this.params = params;\n    }"}
{"Number":"515","API Relative Path":"java.security.spec.ECPublicKeySpec.java-ECPublicKeySpec(ECPoint-ECParameterSpec)","Corresponding Source":"/**\n     * Creates a new ECPublicKeySpec with the specified\n     * parameter values.\n     * @param w the public point.\n     * @param params the associated elliptic curve domain\n     * parameters.\n     * @exception NullPointerException if {@code w}\n     * or {@code params} is null.\n     * @exception IllegalArgumentException if {@code w}\n     * is point at infinity, i.e. ECPoint.POINT_INFINITY\n     */\n    public ECPublicKeySpec(ECPoint w, ECParameterSpec params) {\n        if (w == null) {\n            throw new NullPointerException(\"w is null\");\n        }\n        if (params == null) {\n            throw new NullPointerException(\"params is null\");\n        }\n        if (w == ECPoint.POINT_INFINITY) {\n            throw new IllegalArgumentException(\"w is ECPoint.POINT_INFINITY\");\n        }\n        this.w = w;\n        this.params = params;\n    }"}
{"Number":"516","API Relative Path":"java.security.spec.ECPublicKeySpec.java-ECPublicKeySpec(ECPoint-ECParameterSpec)","Corresponding Source":"/**\n     * Creates a new ECPublicKeySpec with the specified\n     * parameter values.\n     * @param w the public point.\n     * @param params the associated elliptic curve domain\n     * parameters.\n     * @exception NullPointerException if {@code w}\n     * or {@code params} is null.\n     * @exception IllegalArgumentException if {@code w}\n     * is point at infinity, i.e. ECPoint.POINT_INFINITY\n     */\n    public ECPublicKeySpec(ECPoint w, ECParameterSpec params) {\n        if (w == null) {\n            throw new NullPointerException(\"w is null\");\n        }\n        if (params == null) {\n            throw new NullPointerException(\"params is null\");\n        }\n        if (w == ECPoint.POINT_INFINITY) {\n            throw new IllegalArgumentException(\"w is ECPoint.POINT_INFINITY\");\n        }\n        this.w = w;\n        this.params = params;\n    }"}
{"Number":"517","API Relative Path":"java.security.spec.EllipticCurve.java-EllipticCurve(ECField-BigInteger-BigInteger-byte[])","Corresponding Source":"/**\n     * Creates an elliptic curve with the specified elliptic field\n     * {@code field}, the coefficients {@code a} and\n     * {@code b}, and the {@code seed} used for curve generation.\n     * @param field the finite field that this elliptic curve is over.\n     * @param a the first coefficient of this elliptic curve.\n     * @param b the second coefficient of this elliptic curve.\n     * @param seed the bytes used during curve generation for later\n     * validation. Contents of this array are copied to protect against\n     * subsequent modification.\n     * @exception NullPointerException if {@code field},\n     * {@code a}, or {@code b} is null.\n     * @exception IllegalArgumentException if {@code a}\n     * or {@code b} is not null and not in {@code field}.\n     */\n    public EllipticCurve(ECField field, BigInteger a,\n                         BigInteger b, byte[] seed) {\n        if (field == null) {\n            throw new NullPointerException(\"field is null\");\n        }\n        if (a == null) {\n            throw new NullPointerException(\"first coefficient is null\");\n        }\n        if (b == null) {\n            throw new NullPointerException(\"second coefficient is null\");\n        }\n        checkValidity(field, a, \"first coefficient\");\n        checkValidity(field, b, \"second coefficient\");\n        this.field = field;\n        this.a = a;\n        this.b = b;\n        if (seed != null) {\n            this.seed = seed.clone();\n        } else {\n            this.seed = null;\n        }\n    }"}
{"Number":"518","API Relative Path":"java.security.spec.EllipticCurve.java-EllipticCurve(ECField-BigInteger-BigInteger-byte[])","Corresponding Source":"/**\n     * Creates an elliptic curve with the specified elliptic field\n     * {@code field}, the coefficients {@code a} and\n     * {@code b}, and the {@code seed} used for curve generation.\n     * @param field the finite field that this elliptic curve is over.\n     * @param a the first coefficient of this elliptic curve.\n     * @param b the second coefficient of this elliptic curve.\n     * @param seed the bytes used during curve generation for later\n     * validation. Contents of this array are copied to protect against\n     * subsequent modification.\n     * @exception NullPointerException if {@code field},\n     * {@code a}, or {@code b} is null.\n     * @exception IllegalArgumentException if {@code a}\n     * or {@code b} is not null and not in {@code field}.\n     */\n    public EllipticCurve(ECField field, BigInteger a,\n                         BigInteger b, byte[] seed) {\n        if (field == null) {\n            throw new NullPointerException(\"field is null\");\n        }\n        if (a == null) {\n            throw new NullPointerException(\"first coefficient is null\");\n        }\n        if (b == null) {\n            throw new NullPointerException(\"second coefficient is null\");\n        }\n        checkValidity(field, a, \"first coefficient\");\n        checkValidity(field, b, \"second coefficient\");\n        this.field = field;\n        this.a = a;\n        this.b = b;\n        if (seed != null) {\n            this.seed = seed.clone();\n        } else {\n            this.seed = null;\n        }\n    }"}
{"Number":"519","API Relative Path":"java.security.spec.PSSParameterSpec.java-PSSParameterSpec(String-String-AlgorithmParameterSpec-int-int)","Corresponding Source":"/**\n     * Creates a new {@code PSSParameterSpec} as defined in\n     * the PKCS #1 standard using the specified message digest,\n     * mask generation function, parameters for mask generation\n     * function, salt length, and trailer field values.\n     *\n     * @param mdName the algorithm name of the hash function.\n     * @param mgfName the algorithm name of the mask generation\n     * function.\n     * @param mgfSpec the parameters for the mask generation\n     * function. If null is specified, null will be returned by\n     * getMGFParameters().\n     * @param saltLen the length of salt.\n     * @param trailerField the value of the trailer field.\n     * @exception NullPointerException if {@code mdName},\n     * or {@code mgfName} is null.\n     * @exception IllegalArgumentException if {@code saltLen}\n     * or {@code trailerField} is less than 0.\n     * @since 1.5\n     */\n    public PSSParameterSpec(String mdName, String mgfName,\n                            AlgorithmParameterSpec mgfSpec,\n                            int saltLen, int trailerField) {\n        if (mdName == null) {\n            throw new NullPointerException(\"digest algorithm is null\");\n        }\n        if (mgfName == null) {\n            throw new NullPointerException(\"mask generation function \" +\n                                           \"algorithm is null\");\n        }\n        if (saltLen < 0) {\n            throw new IllegalArgumentException(\"negative saltLen value: \" +\n                                               saltLen);\n        }\n        if (trailerField < 0) {\n            throw new IllegalArgumentException(\"negative trailerField: \" +\n                                               trailerField);\n        }\n        this.mdName = mdName;\n        this.mgfName = mgfName;\n        this.mgfSpec = mgfSpec;\n        this.saltLen = saltLen;\n        this.trailerField = trailerField;\n    }"}
{"Number":"520","API Relative Path":"java.security.spec.PSSParameterSpec.java-PSSParameterSpec(String-String-AlgorithmParameterSpec-int-int)","Corresponding Source":"/**\n     * Creates a new {@code PSSParameterSpec} as defined in\n     * the PKCS #1 standard using the specified message digest,\n     * mask generation function, parameters for mask generation\n     * function, salt length, and trailer field values.\n     *\n     * @param mdName the algorithm name of the hash function.\n     * @param mgfName the algorithm name of the mask generation\n     * function.\n     * @param mgfSpec the parameters for the mask generation\n     * function. If null is specified, null will be returned by\n     * getMGFParameters().\n     * @param saltLen the length of salt.\n     * @param trailerField the value of the trailer field.\n     * @exception NullPointerException if {@code mdName},\n     * or {@code mgfName} is null.\n     * @exception IllegalArgumentException if {@code saltLen}\n     * or {@code trailerField} is less than 0.\n     * @since 1.5\n     */\n    public PSSParameterSpec(String mdName, String mgfName,\n                            AlgorithmParameterSpec mgfSpec,\n                            int saltLen, int trailerField) {\n        if (mdName == null) {\n            throw new NullPointerException(\"digest algorithm is null\");\n        }\n        if (mgfName == null) {\n            throw new NullPointerException(\"mask generation function \" +\n                                           \"algorithm is null\");\n        }\n        if (saltLen < 0) {\n            throw new IllegalArgumentException(\"negative saltLen value: \" +\n                                               saltLen);\n        }\n        if (trailerField < 0) {\n            throw new IllegalArgumentException(\"negative trailerField: \" +\n                                               trailerField);\n        }\n        this.mdName = mdName;\n        this.mgfName = mgfName;\n        this.mgfSpec = mgfSpec;\n        this.saltLen = saltLen;\n        this.trailerField = trailerField;\n    }"}
{"Number":"521","API Relative Path":"java.security.spec.RSAMultiPrimePrivateCrtKeySpec.java-RSAMultiPrimePrivateCrtKeySpec(BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-RSAOtherPrimeInfo[])","Corresponding Source":"/**\n    * Creates a new {@code RSAMultiPrimePrivateCrtKeySpec}\n    * given the modulus, publicExponent, privateExponent,\n    * primeP, primeQ, primeExponentP, primeExponentQ,\n    * crtCoefficient, and otherPrimeInfo as defined in PKCS#1 v2.1.\n    *\n    * <p>Note that the contents of {@code otherPrimeInfo}\n    * are copied to protect against subsequent modification when\n    * constructing this object.\n    *\n    * @param modulus the modulus n.\n    * @param publicExponent the public exponent e.\n    * @param privateExponent the private exponent d.\n    * @param primeP the prime factor p of n.\n    * @param primeQ the prime factor q of n.\n    * @param primeExponentP this is d mod (p-1).\n    * @param primeExponentQ this is d mod (q-1).\n    * @param crtCoefficient the Chinese Remainder Theorem\n    * coefficient q-1 mod p.\n    * @param otherPrimeInfo triplets of the rest of primes, null can be\n    * specified if there are only two prime factors (p and q).\n    * @exception NullPointerException if any of the parameters, i.e.\n    * {@code modulus},\n    * {@code publicExponent}, {@code privateExponent},\n    * {@code primeP}, {@code primeQ},\n    * {@code primeExponentP}, {@code primeExponentQ},\n    * {@code crtCoefficient}, is null.\n    * @exception IllegalArgumentException if an empty, i.e. 0-length,\n    * {@code otherPrimeInfo} is specified.\n    */\n    public RSAMultiPrimePrivateCrtKeySpec(BigInteger modulus,\n                                BigInteger publicExponent,\n                                BigInteger privateExponent,\n                                BigInteger primeP,\n                                BigInteger primeQ,\n                                BigInteger primeExponentP,\n                                BigInteger primeExponentQ,\n                                BigInteger crtCoefficient,\n                                RSAOtherPrimeInfo[] otherPrimeInfo) {\n        super(modulus, privateExponent);\n        if (modulus == null) {\n            throw new NullPointerException(\"the modulus parameter must be \" +\n                                            \"non-null\");\n        }\n        if (publicExponent == null) {\n            throw new NullPointerException(\"the publicExponent parameter \" +\n                                            \"must be non-null\");\n        }\n        if (privateExponent == null) {\n            throw new NullPointerException(\"the privateExponent parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeP == null) {\n            throw new NullPointerException(\"the primeP parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeQ == null) {\n            throw new NullPointerException(\"the primeQ parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeExponentP == null) {\n            throw new NullPointerException(\"the primeExponentP parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeExponentQ == null) {\n            throw new NullPointerException(\"the primeExponentQ parameter \" +\n                                            \"must be non-null\");\n        }\n        if (crtCoefficient == null) {\n            throw new NullPointerException(\"the crtCoefficient parameter \" +\n                                            \"must be non-null\");\n        }\n        this.publicExponent = publicExponent;\n        this.primeP = primeP;\n        this.primeQ = primeQ;\n        this.primeExponentP = primeExponentP;\n        this.primeExponentQ = primeExponentQ;\n        this.crtCoefficient = crtCoefficient;\n        if (otherPrimeInfo == null)  {\n            this.otherPrimeInfo = null;\n        } else if (otherPrimeInfo.length == 0) {\n            throw new IllegalArgumentException(\"the otherPrimeInfo \" +\n                                                \"parameter must not be empty\");\n        } else {\n            this.otherPrimeInfo = otherPrimeInfo.clone();\n        }\n    }"}
{"Number":"522","API Relative Path":"java.security.spec.RSAMultiPrimePrivateCrtKeySpec.java-RSAMultiPrimePrivateCrtKeySpec(BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-RSAOtherPrimeInfo[])","Corresponding Source":"/**\n    * Creates a new {@code RSAMultiPrimePrivateCrtKeySpec}\n    * given the modulus, publicExponent, privateExponent,\n    * primeP, primeQ, primeExponentP, primeExponentQ,\n    * crtCoefficient, and otherPrimeInfo as defined in PKCS#1 v2.1.\n    *\n    * <p>Note that the contents of {@code otherPrimeInfo}\n    * are copied to protect against subsequent modification when\n    * constructing this object.\n    *\n    * @param modulus the modulus n.\n    * @param publicExponent the public exponent e.\n    * @param privateExponent the private exponent d.\n    * @param primeP the prime factor p of n.\n    * @param primeQ the prime factor q of n.\n    * @param primeExponentP this is d mod (p-1).\n    * @param primeExponentQ this is d mod (q-1).\n    * @param crtCoefficient the Chinese Remainder Theorem\n    * coefficient q-1 mod p.\n    * @param otherPrimeInfo triplets of the rest of primes, null can be\n    * specified if there are only two prime factors (p and q).\n    * @exception NullPointerException if any of the parameters, i.e.\n    * {@code modulus},\n    * {@code publicExponent}, {@code privateExponent},\n    * {@code primeP}, {@code primeQ},\n    * {@code primeExponentP}, {@code primeExponentQ},\n    * {@code crtCoefficient}, is null.\n    * @exception IllegalArgumentException if an empty, i.e. 0-length,\n    * {@code otherPrimeInfo} is specified.\n    */\n    public RSAMultiPrimePrivateCrtKeySpec(BigInteger modulus,\n                                BigInteger publicExponent,\n                                BigInteger privateExponent,\n                                BigInteger primeP,\n                                BigInteger primeQ,\n                                BigInteger primeExponentP,\n                                BigInteger primeExponentQ,\n                                BigInteger crtCoefficient,\n                                RSAOtherPrimeInfo[] otherPrimeInfo) {\n        super(modulus, privateExponent);\n        if (modulus == null) {\n            throw new NullPointerException(\"the modulus parameter must be \" +\n                                            \"non-null\");\n        }\n        if (publicExponent == null) {\n            throw new NullPointerException(\"the publicExponent parameter \" +\n                                            \"must be non-null\");\n        }\n        if (privateExponent == null) {\n            throw new NullPointerException(\"the privateExponent parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeP == null) {\n            throw new NullPointerException(\"the primeP parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeQ == null) {\n            throw new NullPointerException(\"the primeQ parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeExponentP == null) {\n            throw new NullPointerException(\"the primeExponentP parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeExponentQ == null) {\n            throw new NullPointerException(\"the primeExponentQ parameter \" +\n                                            \"must be non-null\");\n        }\n        if (crtCoefficient == null) {\n            throw new NullPointerException(\"the crtCoefficient parameter \" +\n                                            \"must be non-null\");\n        }\n        this.publicExponent = publicExponent;\n        this.primeP = primeP;\n        this.primeQ = primeQ;\n        this.primeExponentP = primeExponentP;\n        this.primeExponentQ = primeExponentQ;\n        this.crtCoefficient = crtCoefficient;\n        if (otherPrimeInfo == null)  {\n            this.otherPrimeInfo = null;\n        } else if (otherPrimeInfo.length == 0) {\n            throw new IllegalArgumentException(\"the otherPrimeInfo \" +\n                                                \"parameter must not be empty\");\n        } else {\n            this.otherPrimeInfo = otherPrimeInfo.clone();\n        }\n    }"}
{"Number":"523","API Relative Path":"java.security.spec.RSAMultiPrimePrivateCrtKeySpec.java-RSAMultiPrimePrivateCrtKeySpec(BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-RSAOtherPrimeInfo[])","Corresponding Source":"/**\n    * Creates a new {@code RSAMultiPrimePrivateCrtKeySpec}\n    * given the modulus, publicExponent, privateExponent,\n    * primeP, primeQ, primeExponentP, primeExponentQ,\n    * crtCoefficient, and otherPrimeInfo as defined in PKCS#1 v2.1.\n    *\n    * <p>Note that the contents of {@code otherPrimeInfo}\n    * are copied to protect against subsequent modification when\n    * constructing this object.\n    *\n    * @param modulus the modulus n.\n    * @param publicExponent the public exponent e.\n    * @param privateExponent the private exponent d.\n    * @param primeP the prime factor p of n.\n    * @param primeQ the prime factor q of n.\n    * @param primeExponentP this is d mod (p-1).\n    * @param primeExponentQ this is d mod (q-1).\n    * @param crtCoefficient the Chinese Remainder Theorem\n    * coefficient q-1 mod p.\n    * @param otherPrimeInfo triplets of the rest of primes, null can be\n    * specified if there are only two prime factors (p and q).\n    * @exception NullPointerException if any of the parameters, i.e.\n    * {@code modulus},\n    * {@code publicExponent}, {@code privateExponent},\n    * {@code primeP}, {@code primeQ},\n    * {@code primeExponentP}, {@code primeExponentQ},\n    * {@code crtCoefficient}, is null.\n    * @exception IllegalArgumentException if an empty, i.e. 0-length,\n    * {@code otherPrimeInfo} is specified.\n    */\n    public RSAMultiPrimePrivateCrtKeySpec(BigInteger modulus,\n                                BigInteger publicExponent,\n                                BigInteger privateExponent,\n                                BigInteger primeP,\n                                BigInteger primeQ,\n                                BigInteger primeExponentP,\n                                BigInteger primeExponentQ,\n                                BigInteger crtCoefficient,\n                                RSAOtherPrimeInfo[] otherPrimeInfo) {\n        super(modulus, privateExponent);\n        if (modulus == null) {\n            throw new NullPointerException(\"the modulus parameter must be \" +\n                                            \"non-null\");\n        }\n        if (publicExponent == null) {\n            throw new NullPointerException(\"the publicExponent parameter \" +\n                                            \"must be non-null\");\n        }\n        if (privateExponent == null) {\n            throw new NullPointerException(\"the privateExponent parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeP == null) {\n            throw new NullPointerException(\"the primeP parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeQ == null) {\n            throw new NullPointerException(\"the primeQ parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeExponentP == null) {\n            throw new NullPointerException(\"the primeExponentP parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeExponentQ == null) {\n            throw new NullPointerException(\"the primeExponentQ parameter \" +\n                                            \"must be non-null\");\n        }\n        if (crtCoefficient == null) {\n            throw new NullPointerException(\"the crtCoefficient parameter \" +\n                                            \"must be non-null\");\n        }\n        this.publicExponent = publicExponent;\n        this.primeP = primeP;\n        this.primeQ = primeQ;\n        this.primeExponentP = primeExponentP;\n        this.primeExponentQ = primeExponentQ;\n        this.crtCoefficient = crtCoefficient;\n        if (otherPrimeInfo == null)  {\n            this.otherPrimeInfo = null;\n        } else if (otherPrimeInfo.length == 0) {\n            throw new IllegalArgumentException(\"the otherPrimeInfo \" +\n                                                \"parameter must not be empty\");\n        } else {\n            this.otherPrimeInfo = otherPrimeInfo.clone();\n        }\n    }"}
{"Number":"524","API Relative Path":"java.security.spec.RSAMultiPrimePrivateCrtKeySpec.java-RSAMultiPrimePrivateCrtKeySpec(BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-RSAOtherPrimeInfo[])","Corresponding Source":"/**\n    * Creates a new {@code RSAMultiPrimePrivateCrtKeySpec}\n    * given the modulus, publicExponent, privateExponent,\n    * primeP, primeQ, primeExponentP, primeExponentQ,\n    * crtCoefficient, and otherPrimeInfo as defined in PKCS#1 v2.1.\n    *\n    * <p>Note that the contents of {@code otherPrimeInfo}\n    * are copied to protect against subsequent modification when\n    * constructing this object.\n    *\n    * @param modulus the modulus n.\n    * @param publicExponent the public exponent e.\n    * @param privateExponent the private exponent d.\n    * @param primeP the prime factor p of n.\n    * @param primeQ the prime factor q of n.\n    * @param primeExponentP this is d mod (p-1).\n    * @param primeExponentQ this is d mod (q-1).\n    * @param crtCoefficient the Chinese Remainder Theorem\n    * coefficient q-1 mod p.\n    * @param otherPrimeInfo triplets of the rest of primes, null can be\n    * specified if there are only two prime factors (p and q).\n    * @exception NullPointerException if any of the parameters, i.e.\n    * {@code modulus},\n    * {@code publicExponent}, {@code privateExponent},\n    * {@code primeP}, {@code primeQ},\n    * {@code primeExponentP}, {@code primeExponentQ},\n    * {@code crtCoefficient}, is null.\n    * @exception IllegalArgumentException if an empty, i.e. 0-length,\n    * {@code otherPrimeInfo} is specified.\n    */\n    public RSAMultiPrimePrivateCrtKeySpec(BigInteger modulus,\n                                BigInteger publicExponent,\n                                BigInteger privateExponent,\n                                BigInteger primeP,\n                                BigInteger primeQ,\n                                BigInteger primeExponentP,\n                                BigInteger primeExponentQ,\n                                BigInteger crtCoefficient,\n                                RSAOtherPrimeInfo[] otherPrimeInfo) {\n        super(modulus, privateExponent);\n        if (modulus == null) {\n            throw new NullPointerException(\"the modulus parameter must be \" +\n                                            \"non-null\");\n        }\n        if (publicExponent == null) {\n            throw new NullPointerException(\"the publicExponent parameter \" +\n                                            \"must be non-null\");\n        }\n        if (privateExponent == null) {\n            throw new NullPointerException(\"the privateExponent parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeP == null) {\n            throw new NullPointerException(\"the primeP parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeQ == null) {\n            throw new NullPointerException(\"the primeQ parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeExponentP == null) {\n            throw new NullPointerException(\"the primeExponentP parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeExponentQ == null) {\n            throw new NullPointerException(\"the primeExponentQ parameter \" +\n                                            \"must be non-null\");\n        }\n        if (crtCoefficient == null) {\n            throw new NullPointerException(\"the crtCoefficient parameter \" +\n                                            \"must be non-null\");\n        }\n        this.publicExponent = publicExponent;\n        this.primeP = primeP;\n        this.primeQ = primeQ;\n        this.primeExponentP = primeExponentP;\n        this.primeExponentQ = primeExponentQ;\n        this.crtCoefficient = crtCoefficient;\n        if (otherPrimeInfo == null)  {\n            this.otherPrimeInfo = null;\n        } else if (otherPrimeInfo.length == 0) {\n            throw new IllegalArgumentException(\"the otherPrimeInfo \" +\n                                                \"parameter must not be empty\");\n        } else {\n            this.otherPrimeInfo = otherPrimeInfo.clone();\n        }\n    }"}
{"Number":"525","API Relative Path":"java.security.spec.RSAMultiPrimePrivateCrtKeySpec.java-RSAMultiPrimePrivateCrtKeySpec(BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-RSAOtherPrimeInfo[])","Corresponding Source":"/**\n    * Creates a new {@code RSAMultiPrimePrivateCrtKeySpec}\n    * given the modulus, publicExponent, privateExponent,\n    * primeP, primeQ, primeExponentP, primeExponentQ,\n    * crtCoefficient, and otherPrimeInfo as defined in PKCS#1 v2.1.\n    *\n    * <p>Note that the contents of {@code otherPrimeInfo}\n    * are copied to protect against subsequent modification when\n    * constructing this object.\n    *\n    * @param modulus the modulus n.\n    * @param publicExponent the public exponent e.\n    * @param privateExponent the private exponent d.\n    * @param primeP the prime factor p of n.\n    * @param primeQ the prime factor q of n.\n    * @param primeExponentP this is d mod (p-1).\n    * @param primeExponentQ this is d mod (q-1).\n    * @param crtCoefficient the Chinese Remainder Theorem\n    * coefficient q-1 mod p.\n    * @param otherPrimeInfo triplets of the rest of primes, null can be\n    * specified if there are only two prime factors (p and q).\n    * @exception NullPointerException if any of the parameters, i.e.\n    * {@code modulus},\n    * {@code publicExponent}, {@code privateExponent},\n    * {@code primeP}, {@code primeQ},\n    * {@code primeExponentP}, {@code primeExponentQ},\n    * {@code crtCoefficient}, is null.\n    * @exception IllegalArgumentException if an empty, i.e. 0-length,\n    * {@code otherPrimeInfo} is specified.\n    */\n    public RSAMultiPrimePrivateCrtKeySpec(BigInteger modulus,\n                                BigInteger publicExponent,\n                                BigInteger privateExponent,\n                                BigInteger primeP,\n                                BigInteger primeQ,\n                                BigInteger primeExponentP,\n                                BigInteger primeExponentQ,\n                                BigInteger crtCoefficient,\n                                RSAOtherPrimeInfo[] otherPrimeInfo) {\n        super(modulus, privateExponent);\n        if (modulus == null) {\n            throw new NullPointerException(\"the modulus parameter must be \" +\n                                            \"non-null\");\n        }\n        if (publicExponent == null) {\n            throw new NullPointerException(\"the publicExponent parameter \" +\n                                            \"must be non-null\");\n        }\n        if (privateExponent == null) {\n            throw new NullPointerException(\"the privateExponent parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeP == null) {\n            throw new NullPointerException(\"the primeP parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeQ == null) {\n            throw new NullPointerException(\"the primeQ parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeExponentP == null) {\n            throw new NullPointerException(\"the primeExponentP parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeExponentQ == null) {\n            throw new NullPointerException(\"the primeExponentQ parameter \" +\n                                            \"must be non-null\");\n        }\n        if (crtCoefficient == null) {\n            throw new NullPointerException(\"the crtCoefficient parameter \" +\n                                            \"must be non-null\");\n        }\n        this.publicExponent = publicExponent;\n        this.primeP = primeP;\n        this.primeQ = primeQ;\n        this.primeExponentP = primeExponentP;\n        this.primeExponentQ = primeExponentQ;\n        this.crtCoefficient = crtCoefficient;\n        if (otherPrimeInfo == null)  {\n            this.otherPrimeInfo = null;\n        } else if (otherPrimeInfo.length == 0) {\n            throw new IllegalArgumentException(\"the otherPrimeInfo \" +\n                                                \"parameter must not be empty\");\n        } else {\n            this.otherPrimeInfo = otherPrimeInfo.clone();\n        }\n    }"}
{"Number":"526","API Relative Path":"java.security.spec.RSAMultiPrimePrivateCrtKeySpec.java-RSAMultiPrimePrivateCrtKeySpec(BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-RSAOtherPrimeInfo[])","Corresponding Source":"/**\n    * Creates a new {@code RSAMultiPrimePrivateCrtKeySpec}\n    * given the modulus, publicExponent, privateExponent,\n    * primeP, primeQ, primeExponentP, primeExponentQ,\n    * crtCoefficient, and otherPrimeInfo as defined in PKCS#1 v2.1.\n    *\n    * <p>Note that the contents of {@code otherPrimeInfo}\n    * are copied to protect against subsequent modification when\n    * constructing this object.\n    *\n    * @param modulus the modulus n.\n    * @param publicExponent the public exponent e.\n    * @param privateExponent the private exponent d.\n    * @param primeP the prime factor p of n.\n    * @param primeQ the prime factor q of n.\n    * @param primeExponentP this is d mod (p-1).\n    * @param primeExponentQ this is d mod (q-1).\n    * @param crtCoefficient the Chinese Remainder Theorem\n    * coefficient q-1 mod p.\n    * @param otherPrimeInfo triplets of the rest of primes, null can be\n    * specified if there are only two prime factors (p and q).\n    * @exception NullPointerException if any of the parameters, i.e.\n    * {@code modulus},\n    * {@code publicExponent}, {@code privateExponent},\n    * {@code primeP}, {@code primeQ},\n    * {@code primeExponentP}, {@code primeExponentQ},\n    * {@code crtCoefficient}, is null.\n    * @exception IllegalArgumentException if an empty, i.e. 0-length,\n    * {@code otherPrimeInfo} is specified.\n    */\n    public RSAMultiPrimePrivateCrtKeySpec(BigInteger modulus,\n                                BigInteger publicExponent,\n                                BigInteger privateExponent,\n                                BigInteger primeP,\n                                BigInteger primeQ,\n                                BigInteger primeExponentP,\n                                BigInteger primeExponentQ,\n                                BigInteger crtCoefficient,\n                                RSAOtherPrimeInfo[] otherPrimeInfo) {\n        super(modulus, privateExponent);\n        if (modulus == null) {\n            throw new NullPointerException(\"the modulus parameter must be \" +\n                                            \"non-null\");\n        }\n        if (publicExponent == null) {\n            throw new NullPointerException(\"the publicExponent parameter \" +\n                                            \"must be non-null\");\n        }\n        if (privateExponent == null) {\n            throw new NullPointerException(\"the privateExponent parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeP == null) {\n            throw new NullPointerException(\"the primeP parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeQ == null) {\n            throw new NullPointerException(\"the primeQ parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeExponentP == null) {\n            throw new NullPointerException(\"the primeExponentP parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeExponentQ == null) {\n            throw new NullPointerException(\"the primeExponentQ parameter \" +\n                                            \"must be non-null\");\n        }\n        if (crtCoefficient == null) {\n            throw new NullPointerException(\"the crtCoefficient parameter \" +\n                                            \"must be non-null\");\n        }\n        this.publicExponent = publicExponent;\n        this.primeP = primeP;\n        this.primeQ = primeQ;\n        this.primeExponentP = primeExponentP;\n        this.primeExponentQ = primeExponentQ;\n        this.crtCoefficient = crtCoefficient;\n        if (otherPrimeInfo == null)  {\n            this.otherPrimeInfo = null;\n        } else if (otherPrimeInfo.length == 0) {\n            throw new IllegalArgumentException(\"the otherPrimeInfo \" +\n                                                \"parameter must not be empty\");\n        } else {\n            this.otherPrimeInfo = otherPrimeInfo.clone();\n        }\n    }"}
{"Number":"527","API Relative Path":"java.security.spec.RSAMultiPrimePrivateCrtKeySpec.java-RSAMultiPrimePrivateCrtKeySpec(BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-RSAOtherPrimeInfo[])","Corresponding Source":"/**\n    * Creates a new {@code RSAMultiPrimePrivateCrtKeySpec}\n    * given the modulus, publicExponent, privateExponent,\n    * primeP, primeQ, primeExponentP, primeExponentQ,\n    * crtCoefficient, and otherPrimeInfo as defined in PKCS#1 v2.1.\n    *\n    * <p>Note that the contents of {@code otherPrimeInfo}\n    * are copied to protect against subsequent modification when\n    * constructing this object.\n    *\n    * @param modulus the modulus n.\n    * @param publicExponent the public exponent e.\n    * @param privateExponent the private exponent d.\n    * @param primeP the prime factor p of n.\n    * @param primeQ the prime factor q of n.\n    * @param primeExponentP this is d mod (p-1).\n    * @param primeExponentQ this is d mod (q-1).\n    * @param crtCoefficient the Chinese Remainder Theorem\n    * coefficient q-1 mod p.\n    * @param otherPrimeInfo triplets of the rest of primes, null can be\n    * specified if there are only two prime factors (p and q).\n    * @exception NullPointerException if any of the parameters, i.e.\n    * {@code modulus},\n    * {@code publicExponent}, {@code privateExponent},\n    * {@code primeP}, {@code primeQ},\n    * {@code primeExponentP}, {@code primeExponentQ},\n    * {@code crtCoefficient}, is null.\n    * @exception IllegalArgumentException if an empty, i.e. 0-length,\n    * {@code otherPrimeInfo} is specified.\n    */\n    public RSAMultiPrimePrivateCrtKeySpec(BigInteger modulus,\n                                BigInteger publicExponent,\n                                BigInteger privateExponent,\n                                BigInteger primeP,\n                                BigInteger primeQ,\n                                BigInteger primeExponentP,\n                                BigInteger primeExponentQ,\n                                BigInteger crtCoefficient,\n                                RSAOtherPrimeInfo[] otherPrimeInfo) {\n        super(modulus, privateExponent);\n        if (modulus == null) {\n            throw new NullPointerException(\"the modulus parameter must be \" +\n                                            \"non-null\");\n        }\n        if (publicExponent == null) {\n            throw new NullPointerException(\"the publicExponent parameter \" +\n                                            \"must be non-null\");\n        }\n        if (privateExponent == null) {\n            throw new NullPointerException(\"the privateExponent parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeP == null) {\n            throw new NullPointerException(\"the primeP parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeQ == null) {\n            throw new NullPointerException(\"the primeQ parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeExponentP == null) {\n            throw new NullPointerException(\"the primeExponentP parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeExponentQ == null) {\n            throw new NullPointerException(\"the primeExponentQ parameter \" +\n                                            \"must be non-null\");\n        }\n        if (crtCoefficient == null) {\n            throw new NullPointerException(\"the crtCoefficient parameter \" +\n                                            \"must be non-null\");\n        }\n        this.publicExponent = publicExponent;\n        this.primeP = primeP;\n        this.primeQ = primeQ;\n        this.primeExponentP = primeExponentP;\n        this.primeExponentQ = primeExponentQ;\n        this.crtCoefficient = crtCoefficient;\n        if (otherPrimeInfo == null)  {\n            this.otherPrimeInfo = null;\n        } else if (otherPrimeInfo.length == 0) {\n            throw new IllegalArgumentException(\"the otherPrimeInfo \" +\n                                                \"parameter must not be empty\");\n        } else {\n            this.otherPrimeInfo = otherPrimeInfo.clone();\n        }\n    }"}
{"Number":"528","API Relative Path":"java.security.spec.RSAMultiPrimePrivateCrtKeySpec.java-RSAMultiPrimePrivateCrtKeySpec(BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-BigInteger-RSAOtherPrimeInfo[])","Corresponding Source":"/**\n    * Creates a new {@code RSAMultiPrimePrivateCrtKeySpec}\n    * given the modulus, publicExponent, privateExponent,\n    * primeP, primeQ, primeExponentP, primeExponentQ,\n    * crtCoefficient, and otherPrimeInfo as defined in PKCS#1 v2.1.\n    *\n    * <p>Note that the contents of {@code otherPrimeInfo}\n    * are copied to protect against subsequent modification when\n    * constructing this object.\n    *\n    * @param modulus the modulus n.\n    * @param publicExponent the public exponent e.\n    * @param privateExponent the private exponent d.\n    * @param primeP the prime factor p of n.\n    * @param primeQ the prime factor q of n.\n    * @param primeExponentP this is d mod (p-1).\n    * @param primeExponentQ this is d mod (q-1).\n    * @param crtCoefficient the Chinese Remainder Theorem\n    * coefficient q-1 mod p.\n    * @param otherPrimeInfo triplets of the rest of primes, null can be\n    * specified if there are only two prime factors (p and q).\n    * @exception NullPointerException if any of the parameters, i.e.\n    * {@code modulus},\n    * {@code publicExponent}, {@code privateExponent},\n    * {@code primeP}, {@code primeQ},\n    * {@code primeExponentP}, {@code primeExponentQ},\n    * {@code crtCoefficient}, is null.\n    * @exception IllegalArgumentException if an empty, i.e. 0-length,\n    * {@code otherPrimeInfo} is specified.\n    */\n    public RSAMultiPrimePrivateCrtKeySpec(BigInteger modulus,\n                                BigInteger publicExponent,\n                                BigInteger privateExponent,\n                                BigInteger primeP,\n                                BigInteger primeQ,\n                                BigInteger primeExponentP,\n                                BigInteger primeExponentQ,\n                                BigInteger crtCoefficient,\n                                RSAOtherPrimeInfo[] otherPrimeInfo) {\n        super(modulus, privateExponent);\n        if (modulus == null) {\n            throw new NullPointerException(\"the modulus parameter must be \" +\n                                            \"non-null\");\n        }\n        if (publicExponent == null) {\n            throw new NullPointerException(\"the publicExponent parameter \" +\n                                            \"must be non-null\");\n        }\n        if (privateExponent == null) {\n            throw new NullPointerException(\"the privateExponent parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeP == null) {\n            throw new NullPointerException(\"the primeP parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeQ == null) {\n            throw new NullPointerException(\"the primeQ parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeExponentP == null) {\n            throw new NullPointerException(\"the primeExponentP parameter \" +\n                                            \"must be non-null\");\n        }\n        if (primeExponentQ == null) {\n            throw new NullPointerException(\"the primeExponentQ parameter \" +\n                                            \"must be non-null\");\n        }\n        if (crtCoefficient == null) {\n            throw new NullPointerException(\"the crtCoefficient parameter \" +\n                                            \"must be non-null\");\n        }\n        this.publicExponent = publicExponent;\n        this.primeP = primeP;\n        this.primeQ = primeQ;\n        this.primeExponentP = primeExponentP;\n        this.primeExponentQ = primeExponentQ;\n        this.crtCoefficient = crtCoefficient;\n        if (otherPrimeInfo == null)  {\n            this.otherPrimeInfo = null;\n        } else if (otherPrimeInfo.length == 0) {\n            throw new IllegalArgumentException(\"the otherPrimeInfo \" +\n                                                \"parameter must not be empty\");\n        } else {\n            this.otherPrimeInfo = otherPrimeInfo.clone();\n        }\n    }"}
{"Number":"529","API Relative Path":"java.security.spec.RSAOtherPrimeInfo.java-RSAOtherPrimeInfo(BigInteger-BigInteger-BigInteger)","Corresponding Source":"/**\n    * Creates a new {@code RSAOtherPrimeInfo}\n    * given the prime, primeExponent, and\n    * crtCoefficient as defined in PKCS#1.\n    *\n    * @param prime the prime factor of n.\n    * @param primeExponent the exponent.\n    * @param crtCoefficient the Chinese Remainder Theorem\n    * coefficient.\n    * @exception NullPointerException if any of the parameters, i.e.\n    * {@code prime}, {@code primeExponent},\n    * {@code crtCoefficient}, is null.\n    *\n    */\n    public RSAOtherPrimeInfo(BigInteger prime,\n                          BigInteger primeExponent,\n                          BigInteger crtCoefficient) {\n        if (prime == null) {\n            throw new NullPointerException(\"the prime parameter must be \" +\n                                            \"non-null\");\n        }\n        if (primeExponent == null) {\n            throw new NullPointerException(\"the primeExponent parameter \" +\n                                            \"must be non-null\");\n        }\n        if (crtCoefficient == null) {\n            throw new NullPointerException(\"the crtCoefficient parameter \" +\n                                            \"must be non-null\");\n        }\n        this.prime = prime;\n        this.primeExponent = primeExponent;\n        this.crtCoefficient = crtCoefficient;\n    }"}
{"Number":"530","API Relative Path":"java.security.spec.RSAOtherPrimeInfo.java-RSAOtherPrimeInfo(BigInteger-BigInteger-BigInteger)","Corresponding Source":"/**\n    * Creates a new {@code RSAOtherPrimeInfo}\n    * given the prime, primeExponent, and\n    * crtCoefficient as defined in PKCS#1.\n    *\n    * @param prime the prime factor of n.\n    * @param primeExponent the exponent.\n    * @param crtCoefficient the Chinese Remainder Theorem\n    * coefficient.\n    * @exception NullPointerException if any of the parameters, i.e.\n    * {@code prime}, {@code primeExponent},\n    * {@code crtCoefficient}, is null.\n    *\n    */\n    public RSAOtherPrimeInfo(BigInteger prime,\n                          BigInteger primeExponent,\n                          BigInteger crtCoefficient) {\n        if (prime == null) {\n            throw new NullPointerException(\"the prime parameter must be \" +\n                                            \"non-null\");\n        }\n        if (primeExponent == null) {\n            throw new NullPointerException(\"the primeExponent parameter \" +\n                                            \"must be non-null\");\n        }\n        if (crtCoefficient == null) {\n            throw new NullPointerException(\"the crtCoefficient parameter \" +\n                                            \"must be non-null\");\n        }\n        this.prime = prime;\n        this.primeExponent = primeExponent;\n        this.crtCoefficient = crtCoefficient;\n    }"}
{"Number":"531","API Relative Path":"java.security.UnresolvedPermissionCollection.java-add(Permission)","Corresponding Source":"/**\n     * Adds a permission to this UnresolvedPermissionCollection.\n     * The key for the hash is the unresolved permission's type (class) name.\n     *\n     * @param permission the Permission object to add.\n     */\n\n    public void add(Permission permission)\n    {\n        if (! (permission instanceof UnresolvedPermission))\n            throw new IllegalArgumentException(\"invalid permission: \"+\n                                               permission);\n        UnresolvedPermission up = (UnresolvedPermission) permission;\n\n        List<UnresolvedPermission> v;\n        synchronized (this) {\n            v = perms.get(up.getName());\n            if (v == null) {\n                v = new ArrayList<UnresolvedPermission>();\n                perms.put(up.getName(), v);\n            }\n        }\n        synchronized (v) {\n            v.add(up);\n        }\n    }"}
{"Number":"532","API Relative Path":"java.sql.Date.java-valueOf(String)","Corresponding Source":"/**\n     * Converts a string in JDBC date escape format to\n     * a <code>Date<\/code> value.\n     *\n     * @param s a <code>String<\/code> object representing a date in\n     *        in the format \"yyyy-[m]m-[d]d\". The leading zero for <code>mm<\/code>\n     * and <code>dd<\/code> may also be omitted.\n     * @return a <code>java.sql.Date<\/code> object representing the\n     *         given date\n     * @throws IllegalArgumentException if the date given is not in the\n     *         JDBC date escape format (yyyy-[m]m-[d]d)\n     */\n    public static Date valueOf(String s) {\n        final int YEAR_LENGTH = 4;\n        final int MONTH_LENGTH = 2;\n        final int DAY_LENGTH = 2;\n        final int MAX_MONTH = 12;\n        final int MAX_DAY = 31;\n        int firstDash;\n        int secondDash;\n        Date d = null;\n        if (s == null) {\n            throw new java.lang.IllegalArgumentException();\n        }\n\n        firstDash = s.indexOf('-');\n        secondDash = s.indexOf('-', firstDash + 1);\n\n        if ((firstDash > 0) && (secondDash > 0) && (secondDash < s.length() - 1)) {\n            String yyyy = s.substring(0, firstDash);\n            String mm = s.substring(firstDash + 1, secondDash);\n            String dd = s.substring(secondDash + 1);\n            if (yyyy.length() == YEAR_LENGTH &&\n                    (mm.length() >= 1 && mm.length() <= MONTH_LENGTH) &&\n                    (dd.length() >= 1 && dd.length() <= DAY_LENGTH)) {\n                int year = Integer.parseInt(yyyy);\n                int month = Integer.parseInt(mm);\n                int day = Integer.parseInt(dd);\n\n                if ((month >= 1 && month <= MAX_MONTH) && (day >= 1 && day <= MAX_DAY)) {\n                    d = new Date(year - 1900, month - 1, day);\n                }\n            }\n        }\n        if (d == null) {\n            throw new java.lang.IllegalArgumentException();\n        }\n\n        return d;\n\n    }"}
{"Number":"533","API Relative Path":"java.sql.DriverManager.java-deregisterDriver(Driver)","Corresponding Source":"/**\n     * Removes the specified driver from the {@code DriverManager}'s list of\n     * registered drivers.\n     * <p>\n     * If a {@code null} value is specified for the driver to be removed, then no\n     * action is taken.\n     * <p>\n     * If a security manager exists and its {@code checkPermission} denies\n     * permission, then a {@code SecurityException} will be thrown.\n     * <p>\n     * If the specified driver is not found in the list of registered drivers,\n     * then no action is taken.  If the driver was found, it will be removed\n     * from the list of registered drivers.\n     * <p>\n     * If a {@code DriverAction} instance was specified when the JDBC driver was\n     * registered, its deregister method will be called\n     * prior to the driver being removed from the list of registered drivers.\n     *\n     * @param driver the JDBC Driver to remove\n     * @exception SQLException if a database access error occurs\n     * @throws SecurityException if a security manager exists and its\n     * {@code checkPermission} method denies permission to deregister a driver.\n     *\n     * @see SecurityManager#checkPermission\n     */\n    @CallerSensitive\n    public static synchronized void deregisterDriver(Driver driver)\n        throws SQLException {\n        if (driver == null) {\n            return;\n        }\n\n        SecurityManager sec = System.getSecurityManager();\n        if (sec != null) {\n            sec.checkPermission(DEREGISTER_DRIVER_PERMISSION);\n        }\n\n        println(\"DriverManager.deregisterDriver: \" + driver);\n\n        DriverInfo aDriver = new DriverInfo(driver, null);\n        if(registeredDrivers.contains(aDriver)) {\n            if (isDriverAllowed(driver, Reflection.getCallerClass())) {\n                DriverInfo di = registeredDrivers.get(registeredDrivers.indexOf(aDriver));\n                 // If a DriverAction was specified, Call it to notify the\n                 // driver that it has been deregistered\n                 if(di.action() != null) {\n                     di.action().deregister();\n                 }\n                 registeredDrivers.remove(aDriver);\n            } else {\n                // If the caller does not have permission to load the driver then\n                // throw a SecurityException.\n                throw new SecurityException();\n            }\n        } else {\n            println(\"    couldn't find driver to unload\");\n        }\n    }"}
{"Number":"534","API Relative Path":"java.sql.SQLClientInfoException.java-SQLClientInfoException(Map-Throwable)","Corresponding Source":"/**\n     * Constructs a <code>SQLClientInfoException<\/code> object initialized with\n     * a given <code>cause<\/code> and <code>failedProperties<\/code>.\n     *\n     * The <code>reason<\/code>  is initialized to <code>null<\/code> if\n     * <code>cause==null<\/code> or to <code>cause.toString()<\/code> if\n     * <code>cause!=null<\/code> and the vendor code is initialized to 0.\n     *\n     * <p>\n     *\n     * @param failedProperties          A Map containing the property values that could not\n     *                                  be set.  The keys in the Map\n     *                                  contain the names of the client info\n     *                                  properties that could not be set and\n     *                                  the values contain one of the reason codes\n     *                                  defined in <code>ClientInfoStatus<\/code>\n     * @param cause                                     the (which is saved for later retrieval by the <code>getCause()<\/code> method); may be null indicating\n     *     the cause is non-existent or unknown.\n     * <p>\n     * @since 1.6\n     */\n        public SQLClientInfoException(Map<String, ClientInfoStatus> failedProperties,\n                                                           Throwable cause) {\n\n                super(cause != null?cause.toString():null);\n                initCause(cause);\n                this.failedProperties = failedProperties;\n        }"}
{"Number":"535","API Relative Path":"java.sql.SQLClientInfoException.java-SQLClientInfoException(Map-Throwable)","Corresponding Source":"/**\n     * Constructs a <code>SQLClientInfoException<\/code> object initialized with\n     * a given <code>cause<\/code> and <code>failedProperties<\/code>.\n     *\n     * The <code>reason<\/code>  is initialized to <code>null<\/code> if\n     * <code>cause==null<\/code> or to <code>cause.toString()<\/code> if\n     * <code>cause!=null<\/code> and the vendor code is initialized to 0.\n     *\n     * <p>\n     *\n     * @param failedProperties          A Map containing the property values that could not\n     *                                  be set.  The keys in the Map\n     *                                  contain the names of the client info\n     *                                  properties that could not be set and\n     *                                  the values contain one of the reason codes\n     *                                  defined in <code>ClientInfoStatus<\/code>\n     * @param cause                                     the (which is saved for later retrieval by the <code>getCause()<\/code> method); may be null indicating\n     *     the cause is non-existent or unknown.\n     * <p>\n     * @since 1.6\n     */\n        public SQLClientInfoException(Map<String, ClientInfoStatus> failedProperties,\n                                                           Throwable cause) {\n\n                super(cause != null?cause.toString():null);\n                initCause(cause);\n                this.failedProperties = failedProperties;\n        }"}
{"Number":"536","API Relative Path":"java.sql.SQLClientInfoException.java-SQLClientInfoException(String-Map-Throwable)","Corresponding Source":"/**\n     * Constructs a <code>SQLClientInfoException<\/code> object initialized with a\n     * given <code>reason<\/code>, <code>cause<\/code> and\n     * <code>failedProperties<\/code>.\n     * The  <code>SQLState<\/code> is initialized\n     * to <code>null<\/code> and the vendor code is initialized to 0.\n     * <p>\n     *\n     * @param reason                            a description of the exception\n     * @param failedProperties          A Map containing the property values that could not\n     *                                  be set.  The keys in the Map\n     *                                  contain the names of the client info\n     *                                  properties that could not be set and\n     *                                  the values contain one of the reason codes\n     *                                  defined in <code>ClientInfoStatus<\/code>\n     * @param cause                                     the underlying reason for this <code>SQLException<\/code> (which is saved for later retrieval by the <code>getCause()<\/code> method); may be null indicating\n     *     the cause is non-existent or unknown.\n     * <p>\n     * @since 1.6\n     */\n        public SQLClientInfoException(String reason,\n                                                           Map<String, ClientInfoStatus> failedProperties,\n                                                           Throwable cause) {\n\n                super(reason);\n                initCause(cause);\n                this.failedProperties = failedProperties;\n        }"}
{"Number":"537","API Relative Path":"java.sql.SQLClientInfoException.java-SQLClientInfoException(String-Map-Throwable)","Corresponding Source":"/**\n     * Constructs a <code>SQLClientInfoException<\/code> object initialized with a\n     * given <code>reason<\/code>, <code>cause<\/code> and\n     * <code>failedProperties<\/code>.\n     * The  <code>SQLState<\/code> is initialized\n     * to <code>null<\/code> and the vendor code is initialized to 0.\n     * <p>\n     *\n     * @param reason                            a description of the exception\n     * @param failedProperties          A Map containing the property values that could not\n     *                                  be set.  The keys in the Map\n     *                                  contain the names of the client info\n     *                                  properties that could not be set and\n     *                                  the values contain one of the reason codes\n     *                                  defined in <code>ClientInfoStatus<\/code>\n     * @param cause                                     the underlying reason for this <code>SQLException<\/code> (which is saved for later retrieval by the <code>getCause()<\/code> method); may be null indicating\n     *     the cause is non-existent or unknown.\n     * <p>\n     * @since 1.6\n     */\n        public SQLClientInfoException(String reason,\n                                                           Map<String, ClientInfoStatus> failedProperties,\n                                                           Throwable cause) {\n\n                super(reason);\n                initCause(cause);\n                this.failedProperties = failedProperties;\n        }"}
{"Number":"538","API Relative Path":"java.sql.SQLClientInfoException.java-SQLClientInfoException(String-String-int-Map-Throwable)","Corresponding Source":"/**\n     * Constructs a <code>SQLClientInfoException<\/code> object initialized with a\n     * given  <code>reason<\/code>, <code>SQLState<\/code>,\n     * <code>cause<\/code>, <code>vendorCode<\/code> and\n     * <code>failedProperties<\/code>.\n     * <p>\n     *\n     * @param reason                            a description of the exception\n     * @param SQLState                          an XOPEN or SQL:2003 code identifying the exception\n     * @param vendorCode                        a database vendor-specific exception code\n     * @param failedProperties          A Map containing the property values that could not\n     *                                  be set.  The keys in the Map\n     *                                  contain the names of the client info\n     *                                  properties that could not be set and\n     *                                  the values contain one of the reason codes\n     *                                  defined in <code>ClientInfoStatus<\/code>\n     * @param cause                     the underlying reason for this <code>SQLException<\/code> (which is saved for later retrieval by the <code>getCause()<\/code> method); may be null indicating\n     *     the cause is non-existent or unknown.\n     * <p>\n     * @since 1.6\n     */\n        public SQLClientInfoException(String reason,\n                                                           String SQLState,\n                                                           int vendorCode,\n                                                           Map<String, ClientInfoStatus> failedProperties,\n                                                           Throwable cause) {\n\n                super(reason, SQLState, vendorCode);\n                initCause(cause);\n                this.failedProperties = failedProperties;\n        }"}
{"Number":"539","API Relative Path":"java.sql.SQLClientInfoException.java-SQLClientInfoException(String-String-int-Map-Throwable)","Corresponding Source":"/**\n     * Constructs a <code>SQLClientInfoException<\/code> object initialized with a\n     * given  <code>reason<\/code>, <code>SQLState<\/code>,\n     * <code>cause<\/code>, <code>vendorCode<\/code> and\n     * <code>failedProperties<\/code>.\n     * <p>\n     *\n     * @param reason                            a description of the exception\n     * @param SQLState                          an XOPEN or SQL:2003 code identifying the exception\n     * @param vendorCode                        a database vendor-specific exception code\n     * @param failedProperties          A Map containing the property values that could not\n     *                                  be set.  The keys in the Map\n     *                                  contain the names of the client info\n     *                                  properties that could not be set and\n     *                                  the values contain one of the reason codes\n     *                                  defined in <code>ClientInfoStatus<\/code>\n     * @param cause                     the underlying reason for this <code>SQLException<\/code> (which is saved for later retrieval by the <code>getCause()<\/code> method); may be null indicating\n     *     the cause is non-existent or unknown.\n     * <p>\n     * @since 1.6\n     */\n        public SQLClientInfoException(String reason,\n                                                           String SQLState,\n                                                           int vendorCode,\n                                                           Map<String, ClientInfoStatus> failedProperties,\n                                                           Throwable cause) {\n\n                super(reason, SQLState, vendorCode);\n                initCause(cause);\n                this.failedProperties = failedProperties;\n        }"}
{"Number":"540","API Relative Path":"java.sql.SQLClientInfoException.java-SQLClientInfoException(String-String-Map-Throwable)","Corresponding Source":"/**\n     * Constructs a <code>SQLClientInfoException<\/code> object initialized with a\n     * given  <code>reason<\/code>, <code>SQLState<\/code>, <code>cause<\/code>\n     * and <code>failedProperties<\/code>.  The vendor code is initialized to 0.\n     * <p>\n     *\n     * @param reason                            a description of the exception\n     * @param SQLState                          an XOPEN or SQL:2003 code identifying the exception\n     * @param failedProperties          A Map containing the property values that could not\n     *                                  be set.  The keys in the Map\n     *                                  contain the names of the client info\n     *                                  properties that could not be set and\n     *                                  the values contain one of the reason codes\n     *                                  defined in <code>ClientInfoStatus<\/code>\n     * @param cause                                     the underlying reason for this <code>SQLException<\/code> (which is saved for later retrieval by the <code>getCause()<\/code> method); may be null indicating\n     *     the cause is non-existent or unknown.\n     * <p>\n     * @since 1.6\n     */\n        public SQLClientInfoException(String reason,\n                                                           String SQLState,\n                                                           Map<String, ClientInfoStatus> failedProperties,\n                                                           Throwable cause) {\n\n                super(reason, SQLState);\n                initCause(cause);\n                this.failedProperties = failedProperties;\n        }"}
{"Number":"541","API Relative Path":"java.sql.SQLClientInfoException.java-SQLClientInfoException(String-String-Map-Throwable)","Corresponding Source":"/**\n     * Constructs a <code>SQLClientInfoException<\/code> object initialized with a\n     * given  <code>reason<\/code>, <code>SQLState<\/code>, <code>cause<\/code>\n     * and <code>failedProperties<\/code>.  The vendor code is initialized to 0.\n     * <p>\n     *\n     * @param reason                            a description of the exception\n     * @param SQLState                          an XOPEN or SQL:2003 code identifying the exception\n     * @param failedProperties          A Map containing the property values that could not\n     *                                  be set.  The keys in the Map\n     *                                  contain the names of the client info\n     *                                  properties that could not be set and\n     *                                  the values contain one of the reason codes\n     *                                  defined in <code>ClientInfoStatus<\/code>\n     * @param cause                                     the underlying reason for this <code>SQLException<\/code> (which is saved for later retrieval by the <code>getCause()<\/code> method); may be null indicating\n     *     the cause is non-existent or unknown.\n     * <p>\n     * @since 1.6\n     */\n        public SQLClientInfoException(String reason,\n                                                           String SQLState,\n                                                           Map<String, ClientInfoStatus> failedProperties,\n                                                           Throwable cause) {\n\n                super(reason, SQLState);\n                initCause(cause);\n                this.failedProperties = failedProperties;\n        }"}
{"Number":"542","API Relative Path":"java.sql.Time.java-valueOf(String)","Corresponding Source":"/**\n     * Converts a string in JDBC time escape format to a <code>Time<\/code> value.\n     *\n     * @param s time in format \"hh:mm:ss\"\n     * @return a corresponding <code>Time<\/code> object\n     */\n    public static Time valueOf(String s) {\n        int hour;\n        int minute;\n        int second;\n        int firstColon;\n        int secondColon;\n\n        if (s == null) throw new java.lang.IllegalArgumentException();\n\n        firstColon = s.indexOf(':');\n        secondColon = s.indexOf(':', firstColon+1);\n        if ((firstColon > 0) & (secondColon > 0) &\n            (secondColon < s.length()-1)) {\n            hour = Integer.parseInt(s.substring(0, firstColon));\n            minute =\n                Integer.parseInt(s.substring(firstColon+1, secondColon));\n            second = Integer.parseInt(s.substring(secondColon+1));\n        } else {\n            throw new java.lang.IllegalArgumentException();\n        }\n\n        return new Time(hour, minute, second);\n    }"}
{"Number":"543","API Relative Path":"java.sql.Timestamp.java-setNanos(int)","Corresponding Source":"/**\n     * Sets this <code>Timestamp<\/code> object's <code>nanos<\/code> field\n     * to the given value.\n     *\n     * @param n the new fractional seconds component\n     * @exception java.lang.IllegalArgumentException if the given argument\n     *            is greater than 999999999 or less than 0\n     * @see #getNanos\n     */\n    public void setNanos(int n) {\n        if (n > 999999999 || n < 0) {\n            throw new IllegalArgumentException(\"nanos > 999999999 or < 0\");\n        }\n        nanos = n;\n    }"}
{"Number":"544","API Relative Path":"java.sql.Timestamp.java-Timestamp(int-int-int-int-int-int-int)","Corresponding Source":"/**\n     * Constructs a <code>Timestamp<\/code> object initialized\n     * with the given values.\n     *\n     * @param year the year minus 1900\n     * @param month 0 to 11\n     * @param date 1 to 31\n     * @param hour 0 to 23\n     * @param minute 0 to 59\n     * @param second 0 to 59\n     * @param nano 0 to 999,999,999\n     * @deprecated instead use the constructor <code>Timestamp(long millis)<\/code>\n     * @exception IllegalArgumentException if the nano argument is out of bounds\n     */\n    @Deprecated\n    public Timestamp(int year, int month, int date,\n                     int hour, int minute, int second, int nano) {\n        super(year, month, date, hour, minute, second);\n        if (nano > 999999999 || nano < 0) {\n            throw new IllegalArgumentException(\"nanos > 999999999 or < 0\");\n        }\n        nanos = nano;\n    }"}
{"Number":"545","API Relative Path":"java.sql.Timestamp.java-valueOf(String)","Corresponding Source":"/**\n     * Converts a <code>String<\/code> object in JDBC timestamp escape format to a\n     * <code>Timestamp<\/code> value.\n     *\n     * @param s timestamp in format <code>yyyy-[m]m-[d]d hh:mm:ss[.f...]<\/code>.  The\n     * fractional seconds may be omitted. The leading zero for <code>mm<\/code>\n     * and <code>dd<\/code> may also be omitted.\n     *\n     * @return corresponding <code>Timestamp<\/code> value\n     * @exception java.lang.IllegalArgumentException if the given argument\n     * does not have the format <code>yyyy-[m]m-[d]d hh:mm:ss[.f...]<\/code>\n     */\n    public static Timestamp valueOf(String s) {\n        final int YEAR_LENGTH = 4;\n        final int MONTH_LENGTH = 2;\n        final int DAY_LENGTH = 2;\n        final int MAX_MONTH = 12;\n        final int MAX_DAY = 31;\n        String date_s;\n        String time_s;\n        String nanos_s;\n        int year = 0;\n        int month = 0;\n        int day = 0;\n        int hour;\n        int minute;\n        int second;\n        int a_nanos = 0;\n        int firstDash;\n        int secondDash;\n        int dividingSpace;\n        int firstColon = 0;\n        int secondColon = 0;\n        int period = 0;\n        String formatError = \"Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]\";\n        String zeros = \"000000000\";\n        String delimiterDate = \"-\";\n        String delimiterTime = \":\";\n\n        if (s == null) throw new java.lang.IllegalArgumentException(\"null string\");\n\n        // Split the string into date and time components\n        s = s.trim();\n        dividingSpace = s.indexOf(' ');\n        if (dividingSpace > 0) {\n            date_s = s.substring(0,dividingSpace);\n            time_s = s.substring(dividingSpace+1);\n        } else {\n            throw new java.lang.IllegalArgumentException(formatError);\n        }\n\n        // Parse the date\n        firstDash = date_s.indexOf('-');\n        secondDash = date_s.indexOf('-', firstDash+1);\n\n        // Parse the time\n        if (time_s == null)\n            throw new java.lang.IllegalArgumentException(formatError);\n        firstColon = time_s.indexOf(':');\n        secondColon = time_s.indexOf(':', firstColon+1);\n        period = time_s.indexOf('.', secondColon+1);\n\n        // Convert the date\n        boolean parsedDate = false;\n        if ((firstDash > 0) && (secondDash > 0) && (secondDash < date_s.length() - 1)) {\n            String yyyy = date_s.substring(0, firstDash);\n            String mm = date_s.substring(firstDash + 1, secondDash);\n            String dd = date_s.substring(secondDash + 1);\n            if (yyyy.length() == YEAR_LENGTH &&\n                    (mm.length() >= 1 && mm.length() <= MONTH_LENGTH) &&\n                    (dd.length() >= 1 && dd.length() <= DAY_LENGTH)) {\n                 year = Integer.parseInt(yyyy);\n                 month = Integer.parseInt(mm);\n                 day = Integer.parseInt(dd);\n\n                if ((month >= 1 && month <= MAX_MONTH) && (day >= 1 && day <= MAX_DAY)) {\n                    parsedDate = true;\n                }\n            }\n        }\n        if (! parsedDate) {\n            throw new java.lang.IllegalArgumentException(formatError);\n        }\n\n        // Convert the time; default missing nanos\n        if ((firstColon > 0) & (secondColon > 0) &\n            (secondColon < time_s.length()-1)) {\n            hour = Integer.parseInt(time_s.substring(0, firstColon));\n            minute =\n                Integer.parseInt(time_s.substring(firstColon+1, secondColon));\n            if ((period > 0) & (period < time_s.length()-1)) {\n                second =\n                    Integer.parseInt(time_s.substring(secondColon+1, period));\n                nanos_s = time_s.substring(period+1);\n                if (nanos_s.length() > 9)\n                    throw new java.lang.IllegalArgumentException(formatError);\n                if (!Character.isDigit(nanos_s.charAt(0)))\n                    throw new java.lang.IllegalArgumentException(formatError);\n                nanos_s = nanos_s + zeros.substring(0,9-nanos_s.length());\n                a_nanos = Integer.parseInt(nanos_s);\n            } else if (period > 0) {\n                throw new java.lang.IllegalArgumentException(formatError);\n            } else {\n                second = Integer.parseInt(time_s.substring(secondColon+1));\n            }\n        } else {\n            throw new java.lang.IllegalArgumentException(formatError);\n        }\n\n        return new Timestamp(year - 1900, month - 1, day, hour, minute, second, a_nanos);\n    }"}
{"Number":"546","API Relative Path":"java.text.AttributedString.java-addAttribute(Attribute-Object-int-int)","Corresponding Source":"/**\n     * Adds an attribute to a subrange of the string.\n     * @param attribute the attribute key\n     * @param value The value of the attribute. May be null.\n     * @param beginIndex Index of the first character of the range.\n     * @param endIndex Index of the character following the last character of the range.\n     * @exception NullPointerException if <code>attribute<\/code> is null.\n     * @exception IllegalArgumentException if beginIndex is less then 0, endIndex is\n     * greater than the length of the string, or beginIndex and endIndex together don't\n     * define a non-empty subrange of the string.\n     */\n    public void addAttribute(Attribute attribute, Object value,\n            int beginIndex, int endIndex) {\n\n        if (attribute == null) {\n            throw new NullPointerException();\n        }\n\n        if (beginIndex < 0 || endIndex > length() || beginIndex >= endIndex) {\n            throw new IllegalArgumentException(\"Invalid substring range\");\n        }\n\n        addAttributeImpl(attribute, value, beginIndex, endIndex);\n    }"}
{"Number":"547","API Relative Path":"java.text.AttributedString.java-addAttributes(Map-int-int)","Corresponding Source":"/**\n     * Adds a set of attributes to a subrange of the string.\n     * @param attributes The attributes to be added to the string.\n     * @param beginIndex Index of the first character of the range.\n     * @param endIndex Index of the character following the last\n     * character of the range.\n     * @exception NullPointerException if <code>attributes<\/code> is null.\n     * @exception IllegalArgumentException if beginIndex is less then\n     * 0, endIndex is greater than the length of the string, or\n     * beginIndex and endIndex together don't define a non-empty\n     * subrange of the string and the attributes parameter is not an\n     * empty Map.\n     */\n    public void addAttributes(Map<? extends Attribute, ?> attributes,\n                              int beginIndex, int endIndex)\n    {\n        if (attributes == null) {\n            throw new NullPointerException();\n        }\n\n        if (beginIndex < 0 || endIndex > length() || beginIndex > endIndex) {\n            throw new IllegalArgumentException(\"Invalid substring range\");\n        }\n        if (beginIndex == endIndex) {\n            if (attributes.isEmpty())\n                return;\n            throw new IllegalArgumentException(\"Can't add attribute to 0-length text\");\n        }\n\n        // make sure we have run attribute data vectors\n        if (runCount == 0) {\n            createRunAttributeDataVectors();\n        }\n\n        // break up runs if necessary\n        int beginRunIndex = ensureRunBreak(beginIndex);\n        int endRunIndex = ensureRunBreak(endIndex);\n\n        Iterator<? extends Map.Entry<? extends Attribute, ?>> iterator =\n            attributes.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<? extends Attribute, ?> entry = iterator.next();\n            addAttributeRunData(entry.getKey(), entry.getValue(), beginRunIndex, endRunIndex);\n        }\n    }"}
{"Number":"548","API Relative Path":"java.text.AttributedString.java-addAttributes(Map-int-int)","Corresponding Source":"/**\n     * Adds a set of attributes to a subrange of the string.\n     * @param attributes The attributes to be added to the string.\n     * @param beginIndex Index of the first character of the range.\n     * @param endIndex Index of the character following the last\n     * character of the range.\n     * @exception NullPointerException if <code>attributes<\/code> is null.\n     * @exception IllegalArgumentException if beginIndex is less then\n     * 0, endIndex is greater than the length of the string, or\n     * beginIndex and endIndex together don't define a non-empty\n     * subrange of the string and the attributes parameter is not an\n     * empty Map.\n     */\n    public void addAttributes(Map<? extends Attribute, ?> attributes,\n                              int beginIndex, int endIndex)\n    {\n        if (attributes == null) {\n            throw new NullPointerException();\n        }\n\n        if (beginIndex < 0 || endIndex > length() || beginIndex > endIndex) {\n            throw new IllegalArgumentException(\"Invalid substring range\");\n        }\n        if (beginIndex == endIndex) {\n            if (attributes.isEmpty())\n                return;\n            throw new IllegalArgumentException(\"Can't add attribute to 0-length text\");\n        }\n\n        // make sure we have run attribute data vectors\n        if (runCount == 0) {\n            createRunAttributeDataVectors();\n        }\n\n        // break up runs if necessary\n        int beginRunIndex = ensureRunBreak(beginIndex);\n        int endRunIndex = ensureRunBreak(endIndex);\n\n        Iterator<? extends Map.Entry<? extends Attribute, ?>> iterator =\n            attributes.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<? extends Attribute, ?> entry = iterator.next();\n            addAttributeRunData(entry.getKey(), entry.getValue(), beginRunIndex, endRunIndex);\n        }\n    }"}
{"Number":"549","API Relative Path":"java.text.AttributedString.java-AttributedString(AttributedCharacterIterator-int-int-Attribute[])","Corresponding Source":"/**\n     * Constructs an AttributedString instance with the subrange of\n     * the given attributed text represented by\n     * AttributedCharacterIterator.  Only attributes that match the\n     * given attributes will be incorporated into the instance. If the\n     * given range produces an empty text, all attributes will be\n     * discarded. Note that any attributes wrapped by an Annotation\n     * object are discarded for a subrange of the original attribute\n     * range.\n     *\n     * @param text The text for this attributed string.\n     * @param beginIndex Index of the first character of the range.\n     * @param endIndex Index of the character following the last character\n     * of the range.\n     * @param attributes Specifies attributes to be extracted\n     * from the text. If null is specified, all available attributes will\n     * be used.\n     * @exception NullPointerException if <code>text<\/code> is null.\n     * @exception IllegalArgumentException if the subrange given by\n     * beginIndex and endIndex is out of the text range.\n     * @see java.text.Annotation\n     */\n    public AttributedString(AttributedCharacterIterator text,\n                            int beginIndex,\n                            int endIndex,\n                            Attribute[] attributes) {\n        if (text == null) {\n            throw new NullPointerException();\n        }\n\n        // Validate the given subrange\n        int textBeginIndex = text.getBeginIndex();\n        int textEndIndex = text.getEndIndex();\n        if (beginIndex < textBeginIndex || endIndex > textEndIndex || beginIndex > endIndex)\n            throw new IllegalArgumentException(\"Invalid substring range\");\n\n        // Copy the given string\n        StringBuffer textBuffer = new StringBuffer();\n        text.setIndex(beginIndex);\n        for (char c = text.current(); text.getIndex() < endIndex; c = text.next())\n            textBuffer.append(c);\n        this.text = textBuffer.toString();\n\n        if (beginIndex == endIndex)\n            return;\n\n        // Select attribute keys to be taken care of\n        HashSet<Attribute> keys = new HashSet<>();\n        if (attributes == null) {\n            keys.addAll(text.getAllAttributeKeys());\n        } else {\n            for (int i = 0; i < attributes.length; i++)\n                keys.add(attributes[i]);\n            keys.retainAll(text.getAllAttributeKeys());\n        }\n        if (keys.isEmpty())\n            return;\n\n        // Get and set attribute runs for each attribute name. Need to\n        // scan from the top of the text so that we can discard any\n        // Annotation that is no longer applied to a subset text segment.\n        Iterator<Attribute> itr = keys.iterator();\n        while (itr.hasNext()) {\n            Attribute attributeKey = itr.next();\n            text.setIndex(textBeginIndex);\n            while (text.getIndex() < endIndex) {\n                int start = text.getRunStart(attributeKey);\n                int limit = text.getRunLimit(attributeKey);\n                Object value = text.getAttribute(attributeKey);\n\n                if (value != null) {\n                    if (value instanceof Annotation) {\n                        if (start >= beginIndex && limit <= endIndex) {\n                            addAttribute(attributeKey, value, start - beginIndex, limit - beginIndex);\n                        } else {\n                            if (limit > endIndex)\n                                break;\n                        }\n                    } else {\n                        // if the run is beyond the given (subset) range, we\n                        // don't need to process further.\n                        if (start >= endIndex)\n                            break;\n                        if (limit > beginIndex) {\n                            // attribute is applied to any subrange\n                            if (start < beginIndex)\n                                start = beginIndex;\n                            if (limit > endIndex)\n                                limit = endIndex;\n                            if (start != limit) {\n                                addAttribute(attributeKey, value, start - beginIndex, limit - beginIndex);\n                            }\n                        }\n                    }\n                }\n                text.setIndex(limit);\n            }\n        }\n    }"}
{"Number":"550","API Relative Path":"java.text.AttributedString.java-AttributedString(String-Map)","Corresponding Source":"/**\n     * Constructs an AttributedString instance with the given text and attributes.\n     * @param text The text for this attributed string.\n     * @param attributes The attributes that apply to the entire string.\n     * @exception NullPointerException if <code>text<\/code> or\n     *            <code>attributes<\/code> is null.\n     * @exception IllegalArgumentException if the text has length 0\n     * and the attributes parameter is not an empty Map (attributes\n     * cannot be applied to a 0-length range).\n     */\n    public AttributedString(String text,\n                            Map<? extends Attribute, ?> attributes)\n    {\n        if (text == null || attributes == null) {\n            throw new NullPointerException();\n        }\n        this.text = text;\n\n        if (text.length() == 0) {\n            if (attributes.isEmpty())\n                return;\n            throw new IllegalArgumentException(\"Can't add attribute to 0-length text\");\n        }\n\n        int attributeCount = attributes.size();\n        if (attributeCount > 0) {\n            createRunAttributeDataVectors();\n            Vector<Attribute> newRunAttributes = new Vector<>(attributeCount);\n            Vector<Object> newRunAttributeValues = new Vector<>(attributeCount);\n            runAttributes[0] = newRunAttributes;\n            runAttributeValues[0] = newRunAttributeValues;\n\n            Iterator<? extends Map.Entry<? extends Attribute, ?>> iterator = attributes.entrySet().iterator();\n            while (iterator.hasNext()) {\n                Map.Entry<? extends Attribute, ?> entry = iterator.next();\n                newRunAttributes.addElement(entry.getKey());\n                newRunAttributeValues.addElement(entry.getValue());\n            }\n        }\n    }"}
{"Number":"551","API Relative Path":"java.text.Bidi.java-Bidi(AttributedCharacterIterator)","Corresponding Source":"/**\n     * Create Bidi from the given paragraph of text.\n     * <p>\n     * The RUN_DIRECTION attribute in the text, if present, determines the base\n     * direction (left-to-right or right-to-left).  If not present, the base\n     * direction is computes using the Unicode Bidirectional Algorithm, defaulting to left-to-right\n     * if there are no strong directional characters in the text.  This attribute, if\n     * present, must be applied to all the text in the paragraph.\n     * <p>\n     * The BIDI_EMBEDDING attribute in the text, if present, represents embedding level\n     * information.  Negative values from -1 to -62 indicate overrides at the absolute value\n     * of the level.  Positive values from 1 to 62 indicate embeddings.  Where values are\n     * zero or not defined, the base embedding level as determined by the base direction\n     * is assumed.\n     * <p>\n     * The NUMERIC_SHAPING attribute in the text, if present, converts European digits to\n     * other decimal digits before running the bidi algorithm.  This attribute, if present,\n     * must be applied to all the text in the paragraph.\n     *\n     * @param paragraph a paragraph of text with optional character and paragraph attribute information\n     *\n     * @see java.awt.font.TextAttribute#BIDI_EMBEDDING\n     * @see java.awt.font.TextAttribute#NUMERIC_SHAPING\n     * @see java.awt.font.TextAttribute#RUN_DIRECTION\n     */\n    public Bidi(AttributedCharacterIterator paragraph) {\n        if (paragraph == null) {\n            throw new IllegalArgumentException(\"paragraph is null\");\n        }\n\n        bidiBase = new BidiBase(0, 0);\n        bidiBase.setPara(paragraph);\n    }"}
{"Number":"552","API Relative Path":"java.text.Bidi.java-Bidi(char[]-int-byte[]-int-int-int)","Corresponding Source":"/**\n     * Create Bidi from the given text, embedding, and direction information.\n     * The embeddings array may be null.  If present, the values represent embedding level\n     * information.  Negative values from -1 to -61 indicate overrides at the absolute value\n     * of the level.  Positive values from 1 to 61 indicate embeddings.  Where values are\n     * zero, the base embedding level as determined by the base direction is assumed.\n     * @param text an array containing the paragraph of text to process.\n     * @param textStart the index into the text array of the start of the paragraph.\n     * @param embeddings an array containing embedding values for each character in the paragraph.\n     * This can be null, in which case it is assumed that there is no external embedding information.\n     * @param embStart the index into the embedding array of the start of the paragraph.\n     * @param paragraphLength the length of the paragraph in the text and embeddings arrays.\n     * @param flags a collection of flags that control the algorithm.  The\n     * algorithm understands the flags DIRECTION_LEFT_TO_RIGHT, DIRECTION_RIGHT_TO_LEFT,\n     * DIRECTION_DEFAULT_LEFT_TO_RIGHT, and DIRECTION_DEFAULT_RIGHT_TO_LEFT.\n     * Other values are reserved.\n     */\n    public Bidi(char[] text, int textStart, byte[] embeddings, int embStart, int paragraphLength, int flags) {\n        if (text == null) {\n            throw new IllegalArgumentException(\"text is null\");\n        }\n        if (paragraphLength < 0) {\n            throw new IllegalArgumentException(\"bad length: \" + paragraphLength);\n        }\n        if (textStart < 0 || paragraphLength > text.length - textStart) {\n            throw new IllegalArgumentException(\"bad range: \" + textStart +\n                                               \" length: \" + paragraphLength +\n                                               \" for text of length: \" + text.length);\n        }\n        if (embeddings != null && (embStart < 0 || paragraphLength > embeddings.length - embStart)) {\n            throw new IllegalArgumentException(\"bad range: \" + embStart +\n                                               \" length: \" + paragraphLength +\n                                               \" for embeddings of length: \" + text.length);\n        }\n\n        bidiBase = new BidiBase(text, textStart, embeddings, embStart, paragraphLength, flags);\n    }"}
{"Number":"553","API Relative Path":"java.text.Bidi.java-Bidi(char[]-int-byte[]-int-int-int)","Corresponding Source":"/**\n     * Create Bidi from the given text, embedding, and direction information.\n     * The embeddings array may be null.  If present, the values represent embedding level\n     * information.  Negative values from -1 to -61 indicate overrides at the absolute value\n     * of the level.  Positive values from 1 to 61 indicate embeddings.  Where values are\n     * zero, the base embedding level as determined by the base direction is assumed.\n     * @param text an array containing the paragraph of text to process.\n     * @param textStart the index into the text array of the start of the paragraph.\n     * @param embeddings an array containing embedding values for each character in the paragraph.\n     * This can be null, in which case it is assumed that there is no external embedding information.\n     * @param embStart the index into the embedding array of the start of the paragraph.\n     * @param paragraphLength the length of the paragraph in the text and embeddings arrays.\n     * @param flags a collection of flags that control the algorithm.  The\n     * algorithm understands the flags DIRECTION_LEFT_TO_RIGHT, DIRECTION_RIGHT_TO_LEFT,\n     * DIRECTION_DEFAULT_LEFT_TO_RIGHT, and DIRECTION_DEFAULT_RIGHT_TO_LEFT.\n     * Other values are reserved.\n     */\n    public Bidi(char[] text, int textStart, byte[] embeddings, int embStart, int paragraphLength, int flags) {\n        if (text == null) {\n            throw new IllegalArgumentException(\"text is null\");\n        }\n        if (paragraphLength < 0) {\n            throw new IllegalArgumentException(\"bad length: \" + paragraphLength);\n        }\n        if (textStart < 0 || paragraphLength > text.length - textStart) {\n            throw new IllegalArgumentException(\"bad range: \" + textStart +\n                                               \" length: \" + paragraphLength +\n                                               \" for text of length: \" + text.length);\n        }\n        if (embeddings != null && (embStart < 0 || paragraphLength > embeddings.length - embStart)) {\n            throw new IllegalArgumentException(\"bad range: \" + embStart +\n                                               \" length: \" + paragraphLength +\n                                               \" for embeddings of length: \" + text.length);\n        }\n\n        bidiBase = new BidiBase(text, textStart, embeddings, embStart, paragraphLength, flags);\n    }"}
{"Number":"554","API Relative Path":"java.text.Bidi.java-Bidi(char[]-int-byte[]-int-int-int)","Corresponding Source":"/**\n     * Create Bidi from the given text, embedding, and direction information.\n     * The embeddings array may be null.  If present, the values represent embedding level\n     * information.  Negative values from -1 to -61 indicate overrides at the absolute value\n     * of the level.  Positive values from 1 to 61 indicate embeddings.  Where values are\n     * zero, the base embedding level as determined by the base direction is assumed.\n     * @param text an array containing the paragraph of text to process.\n     * @param textStart the index into the text array of the start of the paragraph.\n     * @param embeddings an array containing embedding values for each character in the paragraph.\n     * This can be null, in which case it is assumed that there is no external embedding information.\n     * @param embStart the index into the embedding array of the start of the paragraph.\n     * @param paragraphLength the length of the paragraph in the text and embeddings arrays.\n     * @param flags a collection of flags that control the algorithm.  The\n     * algorithm understands the flags DIRECTION_LEFT_TO_RIGHT, DIRECTION_RIGHT_TO_LEFT,\n     * DIRECTION_DEFAULT_LEFT_TO_RIGHT, and DIRECTION_DEFAULT_RIGHT_TO_LEFT.\n     * Other values are reserved.\n     */\n    public Bidi(char[] text, int textStart, byte[] embeddings, int embStart, int paragraphLength, int flags) {\n        if (text == null) {\n            throw new IllegalArgumentException(\"text is null\");\n        }\n        if (paragraphLength < 0) {\n            throw new IllegalArgumentException(\"bad length: \" + paragraphLength);\n        }\n        if (textStart < 0 || paragraphLength > text.length - textStart) {\n            throw new IllegalArgumentException(\"bad range: \" + textStart +\n                                               \" length: \" + paragraphLength +\n                                               \" for text of length: \" + text.length);\n        }\n        if (embeddings != null && (embStart < 0 || paragraphLength > embeddings.length - embStart)) {\n            throw new IllegalArgumentException(\"bad range: \" + embStart +\n                                               \" length: \" + paragraphLength +\n                                               \" for embeddings of length: \" + text.length);\n        }\n\n        bidiBase = new BidiBase(text, textStart, embeddings, embStart, paragraphLength, flags);\n    }"}
{"Number":"555","API Relative Path":"java.text.Bidi.java-Bidi(char[]-int-byte[]-int-int-int)","Corresponding Source":"/**\n     * Create Bidi from the given text, embedding, and direction information.\n     * The embeddings array may be null.  If present, the values represent embedding level\n     * information.  Negative values from -1 to -61 indicate overrides at the absolute value\n     * of the level.  Positive values from 1 to 61 indicate embeddings.  Where values are\n     * zero, the base embedding level as determined by the base direction is assumed.\n     * @param text an array containing the paragraph of text to process.\n     * @param textStart the index into the text array of the start of the paragraph.\n     * @param embeddings an array containing embedding values for each character in the paragraph.\n     * This can be null, in which case it is assumed that there is no external embedding information.\n     * @param embStart the index into the embedding array of the start of the paragraph.\n     * @param paragraphLength the length of the paragraph in the text and embeddings arrays.\n     * @param flags a collection of flags that control the algorithm.  The\n     * algorithm understands the flags DIRECTION_LEFT_TO_RIGHT, DIRECTION_RIGHT_TO_LEFT,\n     * DIRECTION_DEFAULT_LEFT_TO_RIGHT, and DIRECTION_DEFAULT_RIGHT_TO_LEFT.\n     * Other values are reserved.\n     */\n    public Bidi(char[] text, int textStart, byte[] embeddings, int embStart, int paragraphLength, int flags) {\n        if (text == null) {\n            throw new IllegalArgumentException(\"text is null\");\n        }\n        if (paragraphLength < 0) {\n            throw new IllegalArgumentException(\"bad length: \" + paragraphLength);\n        }\n        if (textStart < 0 || paragraphLength > text.length - textStart) {\n            throw new IllegalArgumentException(\"bad range: \" + textStart +\n                                               \" length: \" + paragraphLength +\n                                               \" for text of length: \" + text.length);\n        }\n        if (embeddings != null && (embStart < 0 || paragraphLength > embeddings.length - embStart)) {\n            throw new IllegalArgumentException(\"bad range: \" + embStart +\n                                               \" length: \" + paragraphLength +\n                                               \" for embeddings of length: \" + text.length);\n        }\n\n        bidiBase = new BidiBase(text, textStart, embeddings, embStart, paragraphLength, flags);\n    }"}
{"Number":"556","API Relative Path":"java.text.Bidi.java-Bidi(String-int)","Corresponding Source":"/**\n     * Create Bidi from the given paragraph of text and base direction.\n     * @param paragraph a paragraph of text\n     * @param flags a collection of flags that control the algorithm.  The\n     * algorithm understands the flags DIRECTION_LEFT_TO_RIGHT, DIRECTION_RIGHT_TO_LEFT,\n     * DIRECTION_DEFAULT_LEFT_TO_RIGHT, and DIRECTION_DEFAULT_RIGHT_TO_LEFT.\n     * Other values are reserved.\n     */\n    public Bidi(String paragraph, int flags) {\n        if (paragraph == null) {\n            throw new IllegalArgumentException(\"paragraph is null\");\n        }\n\n        bidiBase = new BidiBase(paragraph.toCharArray(), 0, null, 0, paragraph.length(), flags);\n    }"}
{"Number":"557","API Relative Path":"java.text.ChoiceFormat.java-setChoices(double[]-String)","Corresponding Source":"/**\n     * Set the choices to be used in formatting.\n     * @param limits contains the top value that you want\n     * parsed with that format, and should be in ascending sorted order. When\n     * formatting X, the choice will be the i, where\n     * limit[i] &le; X {@literal <} limit[i+1].\n     * If the limit array is not in ascending order, the results of formatting\n     * will be incorrect.\n     * @param formats are the formats you want to use for each limit.\n     * They can be either Format objects or Strings.\n     * When formatting with object Y,\n     * if the object is a NumberFormat, then ((NumberFormat) Y).format(X)\n     * is called. Otherwise Y.toString() is called.\n     */\n    public void setChoices(double[] limits, String formats[]) {\n        if (limits.length != formats.length) {\n            throw new IllegalArgumentException(\n                \"Array and limit arrays must be of the same length.\");\n        }\n        choiceLimits = Arrays.copyOf(limits, limits.length);\n        choiceFormats = Arrays.copyOf(formats, formats.length);\n    }"}
{"Number":"558","API Relative Path":"java.text.Collator.java-setDecomposition(int)","Corresponding Source":"/**\n     * Set the decomposition mode of this Collator. See getDecomposition\n     * for a description of decomposition mode.\n     * @param decompositionMode  the new decomposition mode.\n     * @see java.text.Collator#getDecomposition\n     * @see java.text.Collator#NO_DECOMPOSITION\n     * @see java.text.Collator#CANONICAL_DECOMPOSITION\n     * @see java.text.Collator#FULL_DECOMPOSITION\n     * @exception IllegalArgumentException If the given value is not a valid decomposition\n     * mode.\n     */\n    public synchronized void setDecomposition(int decompositionMode) {\n        if ((decompositionMode != NO_DECOMPOSITION) &&\n            (decompositionMode != CANONICAL_DECOMPOSITION) &&\n            (decompositionMode != FULL_DECOMPOSITION)) {\n            throw new IllegalArgumentException(\"Wrong decomposition mode.\");\n        }\n        decmp = decompositionMode;\n    }"}
{"Number":"559","API Relative Path":"java.text.Collator.java-setStrength(int)","Corresponding Source":"/**\n     * Sets this Collator's strength property.  The strength property determines\n     * the minimum level of difference considered significant during comparison.\n     * See the Collator class description for an example of use.\n     * @param newStrength  the new strength value.\n     * @see java.text.Collator#getStrength\n     * @see java.text.Collator#PRIMARY\n     * @see java.text.Collator#SECONDARY\n     * @see java.text.Collator#TERTIARY\n     * @see java.text.Collator#IDENTICAL\n     * @exception  IllegalArgumentException If the new strength value is not one of\n     * PRIMARY, SECONDARY, TERTIARY or IDENTICAL.\n     */\n    public synchronized void setStrength(int newStrength) {\n        if ((newStrength != PRIMARY) &&\n            (newStrength != SECONDARY) &&\n            (newStrength != TERTIARY) &&\n            (newStrength != IDENTICAL)) {\n            throw new IllegalArgumentException(\"Incorrect comparison level.\");\n        }\n        strength = newStrength;\n    }"}
{"Number":"560","API Relative Path":"java.text.DateFormat.java-format(Object-StringBuffer-FieldPosition)","Corresponding Source":"/**\n     * Overrides Format.\n     * Formats a time object into a time string. Examples of time objects\n     * are a time value expressed in milliseconds and a Date object.\n     * @param obj must be a Number or a Date.\n     * @param toAppendTo the string buffer for the returning time string.\n     * @return the string buffer passed in as toAppendTo, with formatted text appended.\n     * @param fieldPosition keeps track of the position of the field\n     * within the returned string.\n     * On input: an alignment field,\n     * if desired. On output: the offsets of the alignment field. For\n     * example, given a time text \"1996.07.10 AD at 15:08:56 PDT\",\n     * if the given fieldPosition is DateFormat.YEAR_FIELD, the\n     * begin index and end index of fieldPosition will be set to\n     * 0 and 4, respectively.\n     * Notice that if the same time field appears\n     * more than once in a pattern, the fieldPosition will be set for the first\n     * occurrence of that time field. For instance, formatting a Date to\n     * the time string \"1 PM PDT (Pacific Daylight Time)\" using the pattern\n     * \"h a z (zzzz)\" and the alignment field DateFormat.TIMEZONE_FIELD,\n     * the begin index and end index of fieldPosition will be set to\n     * 5 and 8, respectively, for the first occurrence of the timezone\n     * pattern character 'z'.\n     * @see java.text.Format\n     */\n    public final StringBuffer format(Object obj, StringBuffer toAppendTo,\n                                     FieldPosition fieldPosition)\n    {\n        if (obj instanceof Date)\n            return format( (Date)obj, toAppendTo, fieldPosition );\n        else if (obj instanceof Number)\n            return format( new Date(((Number)obj).longValue()),\n                          toAppendTo, fieldPosition );\n        else\n            throw new IllegalArgumentException(\"Cannot format given Object as a Date\");\n    }"}
{"Number":"561","API Relative Path":"java.text.DateFormat.java-getDateInstance(int)","Corresponding Source":"/**\n     * Gets the date formatter with the given formatting style\n     * for the default {@link java.util.Locale.Category#FORMAT FORMAT} locale.\n     * <p>This is equivalent to calling\n     * {@link #getDateInstance(int, Locale) getDateInstance(style,\n     *     Locale.getDefault(Locale.Category.FORMAT))}.\n     * @see java.util.Locale#getDefault(java.util.Locale.Category)\n     * @see java.util.Locale.Category#FORMAT\n     * @param style the given formatting style. For example,\n     * SHORT for \"M/d/yy\" in the US locale.\n     * @return a date formatter.\n     */\n    public final static DateFormat getDateInstance(int style)\n    {\n        return get(0, style, 2, Locale.getDefault(Locale.Category.FORMAT));\n    }"}
{"Number":"562","API Relative Path":"java.text.DateFormat.java-getDateInstance(int-Locale)","Corresponding Source":"/**\n     * Gets the date formatter with the given formatting style\n     * for the given locale.\n     * @param style the given formatting style. For example,\n     * SHORT for \"M/d/yy\" in the US locale.\n     * @param aLocale the given locale.\n     * @return a date formatter.\n     */\n    public final static DateFormat getDateInstance(int style,\n                                                 Locale aLocale)\n    {\n        return get(0, style, 2, aLocale);\n    }"}
{"Number":"563","API Relative Path":"java.text.DateFormat.java-getDateTimeInstance(int-int)","Corresponding Source":"/**\n     * Gets the date/time formatter with the given date and time\n     * formatting styles for the default {@link java.util.Locale.Category#FORMAT FORMAT} locale.\n     * <p>This is equivalent to calling\n     * {@link #getDateTimeInstance(int, int, Locale) getDateTimeInstance(dateStyle,\n     *     timeStyle, Locale.getDefault(Locale.Category.FORMAT))}.\n     * @see java.util.Locale#getDefault(java.util.Locale.Category)\n     * @see java.util.Locale.Category#FORMAT\n     * @param dateStyle the given date formatting style. For example,\n     * SHORT for \"M/d/yy\" in the US locale.\n     * @param timeStyle the given time formatting style. For example,\n     * SHORT for \"h:mm a\" in the US locale.\n     * @return a date/time formatter.\n     */\n    public final static DateFormat getDateTimeInstance(int dateStyle,\n                                                       int timeStyle)\n    {\n        return get(timeStyle, dateStyle, 3, Locale.getDefault(Locale.Category.FORMAT));\n    }"}
{"Number":"564","API Relative Path":"java.text.DateFormat.java-getDateTimeInstance(int-int)","Corresponding Source":"/**\n     * Gets the date/time formatter with the given date and time\n     * formatting styles for the default {@link java.util.Locale.Category#FORMAT FORMAT} locale.\n     * <p>This is equivalent to calling\n     * {@link #getDateTimeInstance(int, int, Locale) getDateTimeInstance(dateStyle,\n     *     timeStyle, Locale.getDefault(Locale.Category.FORMAT))}.\n     * @see java.util.Locale#getDefault(java.util.Locale.Category)\n     * @see java.util.Locale.Category#FORMAT\n     * @param dateStyle the given date formatting style. For example,\n     * SHORT for \"M/d/yy\" in the US locale.\n     * @param timeStyle the given time formatting style. For example,\n     * SHORT for \"h:mm a\" in the US locale.\n     * @return a date/time formatter.\n     */\n    public final static DateFormat getDateTimeInstance(int dateStyle,\n                                                       int timeStyle)\n    {\n        return get(timeStyle, dateStyle, 3, Locale.getDefault(Locale.Category.FORMAT));\n    }"}
{"Number":"565","API Relative Path":"java.text.DateFormat.java-getDateTimeInstance(int-int-Locale)","Corresponding Source":"/**\n     * Gets the date/time formatter with the given formatting styles\n     * for the given locale.\n     * @param dateStyle the given date formatting style.\n     * @param timeStyle the given time formatting style.\n     * @param aLocale the given locale.\n     * @return a date/time formatter.\n     */\n    public final static DateFormat\n        getDateTimeInstance(int dateStyle, int timeStyle, Locale aLocale)\n    {\n        return get(timeStyle, dateStyle, 3, aLocale);\n    }"}
{"Number":"566","API Relative Path":"java.text.DateFormat.java-getDateTimeInstance(int-int-Locale)","Corresponding Source":"/**\n     * Gets the date/time formatter with the given formatting styles\n     * for the given locale.\n     * @param dateStyle the given date formatting style.\n     * @param timeStyle the given time formatting style.\n     * @param aLocale the given locale.\n     * @return a date/time formatter.\n     */\n    public final static DateFormat\n        getDateTimeInstance(int dateStyle, int timeStyle, Locale aLocale)\n    {\n        return get(timeStyle, dateStyle, 3, aLocale);\n    }"}
{"Number":"567","API Relative Path":"java.text.DateFormat.java-getTimeInstance(int)","Corresponding Source":"/**\n     * Gets the time formatter with the given formatting style\n     * for the default {@link java.util.Locale.Category#FORMAT FORMAT} locale.\n     * <p>This is equivalent to calling\n     * {@link #getTimeInstance(int, Locale) getTimeInstance(style,\n     *     Locale.getDefault(Locale.Category.FORMAT))}.\n     * @see java.util.Locale#getDefault(java.util.Locale.Category)\n     * @see java.util.Locale.Category#FORMAT\n     * @param style the given formatting style. For example,\n     * SHORT for \"h:mm a\" in the US locale.\n     * @return a time formatter.\n     */\n    public final static DateFormat getTimeInstance(int style)\n    {\n        return get(style, 0, 1, Locale.getDefault(Locale.Category.FORMAT));\n    }"}
{"Number":"568","API Relative Path":"java.text.DateFormat.java-getTimeInstance(int-Locale)","Corresponding Source":"/**\n     * Gets the time formatter with the given formatting style\n     * for the given locale.\n     * @param style the given formatting style. For example,\n     * SHORT for \"h:mm a\" in the US locale.\n     * @param aLocale the given locale.\n     * @return a time formatter.\n     */\n    public final static DateFormat getTimeInstance(int style,\n                                                 Locale aLocale)\n    {\n        return get(style, 0, 1, aLocale);\n    }"}
{"Number":"569","API Relative Path":"java.text.DecimalFormat.java-format(Object-StringBuffer-FieldPosition)","Corresponding Source":"// Overrides\n    /**\n     * Formats a number and appends the resulting text to the given string\n     * buffer.\n     * The number can be of any subclass of {@link java.lang.Number}.\n     * <p>\n     * This implementation uses the maximum precision permitted.\n     * @param number     the number to format\n     * @param toAppendTo the <code>StringBuffer<\/code> to which the formatted\n     *                   text is to be appended\n     * @param pos        On input: an alignment field, if desired.\n     *                   On output: the offsets of the alignment field.\n     * @return           the value passed in as <code>toAppendTo<\/code>\n     * @exception        IllegalArgumentException if <code>number<\/code> is\n     *                   null or not an instance of <code>Number<\/code>.\n     * @exception        NullPointerException if <code>toAppendTo<\/code> or\n     *                   <code>pos<\/code> is null\n     * @exception        ArithmeticException if rounding is needed with rounding\n     *                   mode being set to RoundingMode.UNNECESSARY\n     * @see              java.text.FieldPosition\n     */\n    @Override\n    public final StringBuffer format(Object number,\n                                     StringBuffer toAppendTo,\n                                     FieldPosition pos) {\n        if (number instanceof Long || number instanceof Integer ||\n                   number instanceof Short || number instanceof Byte ||\n                   number instanceof AtomicInteger ||\n                   number instanceof AtomicLong ||\n                   (number instanceof BigInteger &&\n                    ((BigInteger)number).bitLength () < 64)) {\n            return format(((Number)number).longValue(), toAppendTo, pos);\n        } else if (number instanceof BigDecimal) {\n            return format((BigDecimal)number, toAppendTo, pos);\n        } else if (number instanceof BigInteger) {\n            return format((BigInteger)number, toAppendTo, pos);\n        } else if (number instanceof Number) {\n            return format(((Number)number).doubleValue(), toAppendTo, pos);\n        } else {\n            throw new IllegalArgumentException(\"Cannot format given Object as a Number\");\n        }\n    }"}
{"Number":"570","API Relative Path":"java.text.DecimalFormat.java-formatToCharacterIterator(Object)","Corresponding Source":"/**\n     * Formats an Object producing an <code>AttributedCharacterIterator<\/code>.\n     * You can use the returned <code>AttributedCharacterIterator<\/code>\n     * to build the resulting String, as well as to determine information\n     * about the resulting String.\n     * <p>\n     * Each attribute key of the AttributedCharacterIterator will be of type\n     * <code>NumberFormat.Field<\/code>, with the attribute value being the\n     * same as the attribute key.\n     *\n     * @exception NullPointerException if obj is null.\n     * @exception IllegalArgumentException when the Format cannot format the\n     *            given object.\n     * @exception        ArithmeticException if rounding is needed with rounding\n     *                   mode being set to RoundingMode.UNNECESSARY\n     * @param obj The object to format\n     * @return AttributedCharacterIterator describing the formatted value.\n     * @since 1.4\n     */\n    @Override\n    public AttributedCharacterIterator formatToCharacterIterator(Object obj) {\n        CharacterIteratorFieldDelegate delegate =\n                         new CharacterIteratorFieldDelegate();\n        StringBuffer sb = new StringBuffer();\n\n        if (obj instanceof Double || obj instanceof Float) {\n            format(((Number)obj).doubleValue(), sb, delegate);\n        } else if (obj instanceof Long || obj instanceof Integer ||\n                   obj instanceof Short || obj instanceof Byte ||\n                   obj instanceof AtomicInteger || obj instanceof AtomicLong) {\n            format(((Number)obj).longValue(), sb, delegate);\n        } else if (obj instanceof BigDecimal) {\n            format((BigDecimal)obj, sb, delegate);\n        } else if (obj instanceof BigInteger) {\n            format((BigInteger)obj, sb, delegate, false);\n        } else if (obj == null) {\n            throw new NullPointerException(\n                \"formatToCharacterIterator must be passed non-null object\");\n        } else {\n            throw new IllegalArgumentException(\n                \"Cannot format given Object as a Number\");\n        }\n        return delegate.getIterator(sb.toString());\n    }"}
{"Number":"571","API Relative Path":"java.text.DecimalFormatSymbols.java-setInternationalCurrencySymbol(String)","Corresponding Source":"/**\n     * Sets the ISO 4217 currency code of the currency of these\n     * DecimalFormatSymbols.\n     * If the currency code is valid (as defined by\n     * {@link java.util.Currency#getInstance(java.lang.String) Currency.getInstance}),\n     * this also sets the currency attribute to the corresponding Currency\n     * instance and the currency symbol attribute to the currency's symbol\n     * in the DecimalFormatSymbols' locale. If the currency code is not valid,\n     * then the currency attribute is set to null and the currency symbol\n     * attribute is not modified.\n     *\n     * @param currencyCode the currency code\n     * @see #setCurrency\n     * @see #setCurrencySymbol\n     * @since 1.2\n     */\n    public void setInternationalCurrencySymbol(String currencyCode)\n    {\n        intlCurrencySymbol = currencyCode;\n        currency = null;\n        if (currencyCode != null) {\n            try {\n                currency = Currency.getInstance(currencyCode);\n                currencySymbol = currency.getSymbol();\n            } catch (IllegalArgumentException e) {\n            }\n        }\n    }"}
{"Number":"572","API Relative Path":"java.text.Format.java-createAttributedCharacterIterator(AttributedCharacterIterator[])","Corresponding Source":"/**\n     * Creates an <code>AttributedCharacterIterator<\/code> containing the\n     * concatenated contents of the passed in\n     * <code>AttributedCharacterIterator<\/code>s.\n     *\n     * @param iterators AttributedCharacterIterators used to create resulting\n     *                  AttributedCharacterIterators\n     * @return AttributedCharacterIterator wrapping passed in\n     *         AttributedCharacterIterators\n     */\n    AttributedCharacterIterator createAttributedCharacterIterator(\n                       AttributedCharacterIterator[] iterators) {\n        AttributedString as = new AttributedString(iterators);\n\n        return as.getIterator();\n    }"}
{"Number":"573","API Relative Path":"java.text.Format.java-createAttributedCharacterIterator(String)","Corresponding Source":"//\n    // Convenience methods for creating AttributedCharacterIterators from\n    // different parameters.\n    //\n\n    /**\n     * Creates an <code>AttributedCharacterIterator<\/code> for the String\n     * <code>s<\/code>.\n     *\n     * @param s String to create AttributedCharacterIterator from\n     * @return AttributedCharacterIterator wrapping s\n     */\n    AttributedCharacterIterator createAttributedCharacterIterator(String s) {\n        AttributedString as = new AttributedString(s);\n\n        return as.getIterator();\n    }"}
{"Number":"574","API Relative Path":"java.text.MergeCollation.java-addPattern(String)","Corresponding Source":"/**\n     * adds a pattern to the current one.\n     * @param pattern the new pattern to be added\n     */\n    public void addPattern(String pattern) throws ParseException\n    {\n        if (pattern == null)\n            return;\n\n        PatternEntry.Parser parser = new PatternEntry.Parser(pattern);\n\n        PatternEntry entry = parser.next();\n        while (entry != null) {\n            fixEntry(entry);\n            entry = parser.next();\n        }\n    }"}
{"Number":"575","API Relative Path":"java.text.MergeCollation.java-getItemAt(int)","Corresponding Source":"/**\n     * gets count of separate entries\n     * @param index the offset of the desired pattern entry\n     * @return the requested pattern entry\n     */\n    public PatternEntry getItemAt(int index) {\n        return patterns.get(index);\n    }"}
{"Number":"576","API Relative Path":"java.text.MergeCollation.java-MergeCollation(String)","Corresponding Source":"/**\n     * Creates from a pattern\n     * @exception ParseException If the input pattern is incorrect.\n     */\n    public MergeCollation(String pattern) throws ParseException\n    {\n        for (int i = 0; i < statusArray.length; i++)\n            statusArray[i] = 0;\n        setPattern(pattern);\n    }"}
{"Number":"577","API Relative Path":"java.text.MergeCollation.java-setPattern(String)","Corresponding Source":"/**\n     * sets the pattern.\n     */\n    public void setPattern(String pattern) throws ParseException\n    {\n        patterns.clear();\n        addPattern(pattern);\n    }"}
{"Number":"578","API Relative Path":"java.text.NumberFormat.java-format(Object-StringBuffer-FieldPosition)","Corresponding Source":"/**\n     * Formats a number and appends the resulting text to the given string\n     * buffer.\n     * The number can be of any subclass of {@link java.lang.Number}.\n     * <p>\n     * This implementation extracts the number's value using\n     * {@link java.lang.Number#longValue()} for all integral type values that\n     * can be converted to <code>long<\/code> without loss of information,\n     * including <code>BigInteger<\/code> values with a\n     * {@link java.math.BigInteger#bitLength() bit length} of less than 64,\n     * and {@link java.lang.Number#doubleValue()} for all other types. It\n     * then calls\n     * {@link #format(long,java.lang.StringBuffer,java.text.FieldPosition)}\n     * or {@link #format(double,java.lang.StringBuffer,java.text.FieldPosition)}.\n     * This may result in loss of magnitude information and precision for\n     * <code>BigInteger<\/code> and <code>BigDecimal<\/code> values.\n     * @param number     the number to format\n     * @param toAppendTo the <code>StringBuffer<\/code> to which the formatted\n     *                   text is to be appended\n     * @param pos        On input: an alignment field, if desired.\n     *                   On output: the offsets of the alignment field.\n     * @return           the value passed in as <code>toAppendTo<\/code>\n     * @exception        IllegalArgumentException if <code>number<\/code> is\n     *                   null or not an instance of <code>Number<\/code>.\n     * @exception        NullPointerException if <code>toAppendTo<\/code> or\n     *                   <code>pos<\/code> is null\n     * @exception        ArithmeticException if rounding is needed with rounding\n     *                   mode being set to RoundingMode.UNNECESSARY\n     * @see              java.text.FieldPosition\n     */\n    @Override\n    public StringBuffer format(Object number,\n                               StringBuffer toAppendTo,\n                               FieldPosition pos) {\n        if (number instanceof Long || number instanceof Integer ||\n            number instanceof Short || number instanceof Byte ||\n            number instanceof AtomicInteger || number instanceof AtomicLong ||\n            (number instanceof BigInteger &&\n             ((BigInteger)number).bitLength() < 64)) {\n            return format(((Number)number).longValue(), toAppendTo, pos);\n        } else if (number instanceof Number) {\n            return format(((Number)number).doubleValue(), toAppendTo, pos);\n        } else {\n            throw new IllegalArgumentException(\"Cannot format given Object as a Number\");\n        }\n    }"}
{"Number":"579","API Relative Path":"java.text.RBTableBuilder.java-build(String-int)","Corresponding Source":"/**\n     * Create a table-based collation object with the given rules.\n     * This is the main function that actually builds the tables and\n     * stores them back in the RBCollationTables object.  It is called\n     * ONLY by the RBCollationTables constructor.\n     * @see RuleBasedCollator#RuleBasedCollator\n     * @exception ParseException If the rules format is incorrect.\n     */\n\n    public void build(String pattern, int decmp) throws ParseException\n    {\n        boolean isSource = true;\n        int i = 0;\n        String expChars;\n        String groupChars;\n        if (pattern.length() == 0)\n            throw new ParseException(\"Build rules empty.\", 0);\n\n        // This array maps Unicode characters to their collation ordering\n        mapping = new UCompactIntArray(RBCollationTables.UNMAPPED);\n        // Normalize the build rules.  Find occurances of all decomposed characters\n        // and normalize the rules before feeding into the builder.  By \"normalize\",\n        // we mean that all precomposed Unicode characters must be converted into\n        // a base character and one or more combining characters (such as accents).\n        // When there are multiple combining characters attached to a base character,\n        // the combining characters must be in their canonical order\n        //\n        // sherman/Note:\n        //(1)decmp will be NO_DECOMPOSITION only in ko locale to prevent decompose\n        //hangual syllables to jamos, so we can actually just call decompose with\n        //normalizer's IGNORE_HANGUL option turned on\n        //\n        //(2)just call the \"special version\" in NormalizerImpl directly\n        //pattern = Normalizer.decompose(pattern, false, Normalizer.IGNORE_HANGUL, true);\n        //\n        //Normalizer.Mode mode = CollatorUtilities.toNormalizerMode(decmp);\n        //pattern = Normalizer.normalize(pattern, mode, 0, true);\n\n        pattern = NormalizerImpl.canonicalDecomposeWithSingleQuotation(pattern);\n\n        // Build the merged collation entries\n        // Since rules can be specified in any order in the string\n        // (e.g. \"c , C < d , D < e , E .... C < CH\")\n        // this splits all of the rules in the string out into separate\n        // objects and then sorts them.  In the above example, it merges the\n        // \"C < CH\" rule in just before the \"C < D\" rule.\n        //\n\n        mPattern = new MergeCollation(pattern);\n\n        int order = 0;\n\n        // Now walk though each entry and add it to my own tables\n        for (i = 0; i < mPattern.getCount(); ++i)\n        {\n            PatternEntry entry = mPattern.getItemAt(i);\n            if (entry != null) {\n                groupChars = entry.getChars();\n                if (groupChars.length() > 1) {\n                    switch(groupChars.charAt(groupChars.length()-1)) {\n                    case '@':\n                        frenchSec = true;\n                        groupChars = groupChars.substring(0, groupChars.length()-1);\n                        break;\n                    case '!':\n                        seAsianSwapping = true;\n                        groupChars = groupChars.substring(0, groupChars.length()-1);\n                        break;\n                    }\n                }\n\n                order = increment(entry.getStrength(), order);\n                expChars = entry.getExtension();\n\n                if (expChars.length() != 0) {\n                    addExpandOrder(groupChars, expChars, order);\n                } else if (groupChars.length() > 1) {\n                    char ch = groupChars.charAt(0);\n                    if (Character.isHighSurrogate(ch) && groupChars.length() == 2) {\n                        addOrder(Character.toCodePoint(ch, groupChars.charAt(1)), order);\n                    } else {\n                        addContractOrder(groupChars, order);\n                    }\n                } else {\n                    char ch = groupChars.charAt(0);\n                    addOrder(ch, order);\n                }\n            }\n        }\n        addComposedChars();\n\n        commit();\n        mapping.compact();\n        /*\n        System.out.println(\"mappingSize=\" + mapping.getKSize());\n        for (int j = 0; j < 0xffff; j++) {\n            int value = mapping.elementAt(j);\n            if (value != RBCollationTables.UNMAPPED)\n                System.out.println(\"index=\" + Integer.toString(j, 16)\n                           + \", value=\" + Integer.toString(value, 16));\n        }\n        */\n        tables.fillInTables(frenchSec, seAsianSwapping, mapping, contractTable, expandTable,\n                    contractFlags, maxSecOrder, maxTerOrder);\n    }"}
{"Number":"580","API Relative Path":"java.text.RuleBasedCollator.java-compare(String-String)","Corresponding Source":"/**\n     * Compares the character data stored in two different strings based on the\n     * collation rules.  Returns information about whether a string is less\n     * than, greater than or equal to another string in a language.\n     * This can be overriden in a subclass.\n     *\n     * @exception NullPointerException if <code>source<\/code> or <code>target<\/code> is null.\n     */\n    public synchronized int compare(String source, String target)\n    {\n        if (source == null || target == null) {\n            throw new NullPointerException();\n        }\n\n        // The basic algorithm here is that we use CollationElementIterators\n        // to step through both the source and target strings.  We compare each\n        // collation element in the source string against the corresponding one\n        // in the target, checking for differences.\n        //\n        // If a difference is found, we set <result> to LESS or GREATER to\n        // indicate whether the source string is less or greater than the target.\n        //\n        // However, it's not that simple.  If we find a tertiary difference\n        // (e.g. 'A' vs. 'a') near the beginning of a string, it can be\n        // overridden by a primary difference (e.g. \"A\" vs. \"B\") later in\n        // the string.  For example, \"AA\" < \"aB\", even though 'A' > 'a'.\n        //\n        // To keep track of this, we use strengthResult to keep track of the\n        // strength of the most significant difference that has been found\n        // so far.  When we find a difference whose strength is greater than\n        // strengthResult, it overrides the last difference (if any) that\n        // was found.\n\n        int result = Collator.EQUAL;\n\n        if (sourceCursor == null) {\n            sourceCursor = getCollationElementIterator(source);\n        } else {\n            sourceCursor.setText(source);\n        }\n        if (targetCursor == null) {\n            targetCursor = getCollationElementIterator(target);\n        } else {\n            targetCursor.setText(target);\n        }\n\n        int sOrder = 0, tOrder = 0;\n\n        boolean initialCheckSecTer = getStrength() >= Collator.SECONDARY;\n        boolean checkSecTer = initialCheckSecTer;\n        boolean checkTertiary = getStrength() >= Collator.TERTIARY;\n\n        boolean gets = true, gett = true;\n\n        while(true) {\n            // Get the next collation element in each of the strings, unless\n            // we've been requested to skip it.\n            if (gets) sOrder = sourceCursor.next(); else gets = true;\n            if (gett) tOrder = targetCursor.next(); else gett = true;\n\n            // If we've hit the end of one of the strings, jump out of the loop\n            if ((sOrder == CollationElementIterator.NULLORDER)||\n                (tOrder == CollationElementIterator.NULLORDER))\n                break;\n\n            int pSOrder = CollationElementIterator.primaryOrder(sOrder);\n            int pTOrder = CollationElementIterator.primaryOrder(tOrder);\n\n            // If there's no difference at this position, we can skip it\n            if (sOrder == tOrder) {\n                if (tables.isFrenchSec() && pSOrder != 0) {\n                    if (!checkSecTer) {\n                        // in french, a secondary difference more to the right is stronger,\n                        // so accents have to be checked with each base element\n                        checkSecTer = initialCheckSecTer;\n                        // but tertiary differences are less important than the first\n                        // secondary difference, so checking tertiary remains disabled\n                        checkTertiary = false;\n                    }\n                }\n                continue;\n            }\n\n            // Compare primary differences first.\n            if ( pSOrder != pTOrder )\n            {\n                if (sOrder == 0) {\n                    // The entire source element is ignorable.\n                    // Skip to the next source element, but don't fetch another target element.\n                    gett = false;\n                    continue;\n                }\n                if (tOrder == 0) {\n                    gets = false;\n                    continue;\n                }\n\n                // The source and target elements aren't ignorable, but it's still possible\n                // for the primary component of one of the elements to be ignorable....\n\n                if (pSOrder == 0)  // primary order in source is ignorable\n                {\n                    // The source's primary is ignorable, but the target's isn't.  We treat ignorables\n                    // as a secondary difference, so remember that we found one.\n                    if (checkSecTer) {\n                        result = Collator.GREATER;  // (strength is SECONDARY)\n                        checkSecTer = false;\n                    }\n                    // Skip to the next source element, but don't fetch another target element.\n                    gett = false;\n                }\n                else if (pTOrder == 0)\n                {\n                    // record differences - see the comment above.\n                    if (checkSecTer) {\n                        result = Collator.LESS;  // (strength is SECONDARY)\n                        checkSecTer = false;\n                    }\n                    // Skip to the next source element, but don't fetch another target element.\n                    gets = false;\n                } else {\n                    // Neither of the orders is ignorable, and we already know that the primary\n                    // orders are different because of the (pSOrder != pTOrder) test above.\n                    // Record the difference and stop the comparison.\n                    if (pSOrder < pTOrder) {\n                        return Collator.LESS;  // (strength is PRIMARY)\n                    } else {\n                        return Collator.GREATER;  // (strength is PRIMARY)\n                    }\n                }\n            } else { // else of if ( pSOrder != pTOrder )\n                // primary order is the same, but complete order is different. So there\n                // are no base elements at this point, only ignorables (Since the strings are\n                // normalized)\n\n                if (checkSecTer) {\n                    // a secondary or tertiary difference may still matter\n                    short secSOrder = CollationElementIterator.secondaryOrder(sOrder);\n                    short secTOrder = CollationElementIterator.secondaryOrder(tOrder);\n                    if (secSOrder != secTOrder) {\n                        // there is a secondary difference\n                        result = (secSOrder < secTOrder) ? Collator.LESS : Collator.GREATER;\n                                                // (strength is SECONDARY)\n                        checkSecTer = false;\n                        // (even in french, only the first secondary difference within\n                        //  a base character matters)\n                    } else {\n                        if (checkTertiary) {\n                            // a tertiary difference may still matter\n                            short terSOrder = CollationElementIterator.tertiaryOrder(sOrder);\n                            short terTOrder = CollationElementIterator.tertiaryOrder(tOrder);\n                            if (terSOrder != terTOrder) {\n                                // there is a tertiary difference\n                                result = (terSOrder < terTOrder) ? Collator.LESS : Collator.GREATER;\n                                                // (strength is TERTIARY)\n                                checkTertiary = false;\n                            }\n                        }\n                    }\n                } // if (checkSecTer)\n\n            }  // if ( pSOrder != pTOrder )\n        } // while()\n\n        if (sOrder != CollationElementIterator.NULLORDER) {\n            // (tOrder must be CollationElementIterator::NULLORDER,\n            //  since this point is only reached when sOrder or tOrder is NULLORDER.)\n            // The source string has more elements, but the target string hasn't.\n            do {\n                if (CollationElementIterator.primaryOrder(sOrder) != 0) {\n                    // We found an additional non-ignorable base character in the source string.\n                    // This is a primary difference, so the source is greater\n                    return Collator.GREATER; // (strength is PRIMARY)\n                }\n                else if (CollationElementIterator.secondaryOrder(sOrder) != 0) {\n                    // Additional secondary elements mean the source string is greater\n                    if (checkSecTer) {\n                        result = Collator.GREATER;  // (strength is SECONDARY)\n                        checkSecTer = false;\n                    }\n                }\n            } while ((sOrder = sourceCursor.next()) != CollationElementIterator.NULLORDER);\n        }\n        else if (tOrder != CollationElementIterator.NULLORDER) {\n            // The target string has more elements, but the source string hasn't.\n            do {\n                if (CollationElementIterator.primaryOrder(tOrder) != 0)\n                    // We found an additional non-ignorable base character in the target string.\n                    // This is a primary difference, so the source is less\n                    return Collator.LESS; // (strength is PRIMARY)\n                else if (CollationElementIterator.secondaryOrder(tOrder) != 0) {\n                    // Additional secondary elements in the target mean the source string is less\n                    if (checkSecTer) {\n                        result = Collator.LESS;  // (strength is SECONDARY)\n                        checkSecTer = false;\n                    }\n                }\n            } while ((tOrder = targetCursor.next()) != CollationElementIterator.NULLORDER);\n        }\n\n        // For IDENTICAL comparisons, we use a bitwise character comparison\n        // as a tiebreaker if all else is equal\n        if (result == 0 && getStrength() == IDENTICAL) {\n            int mode = getDecomposition();\n            Normalizer.Form form;\n            if (mode == CANONICAL_DECOMPOSITION) {\n                form = Normalizer.Form.NFD;\n            } else if (mode == FULL_DECOMPOSITION) {\n                form = Normalizer.Form.NFKD;\n            } else {\n                return source.compareTo(target);\n            }\n\n            String sourceDecomposition = Normalizer.normalize(source, form);\n            String targetDecomposition = Normalizer.normalize(target, form);\n            return sourceDecomposition.compareTo(targetDecomposition);\n        }\n        return result;\n    }"}
{"Number":"581","API Relative Path":"java.text.RuleBasedCollator.java-getCollationKey(String)","Corresponding Source":"/**\n     * Transforms the string into a series of characters that can be compared\n     * with CollationKey.compareTo. This overrides java.text.Collator.getCollationKey.\n     * It can be overriden in a subclass.\n     */\n    public synchronized CollationKey getCollationKey(String source)\n    {\n        //\n        // The basic algorithm here is to find all of the collation elements for each\n        // character in the source string, convert them to a char representation,\n        // and put them into the collation key.  But it's trickier than that.\n        // Each collation element in a string has three components: primary (A vs B),\n        // secondary (A vs A-acute), and tertiary (A' vs a); and a primary difference\n        // at the end of a string takes precedence over a secondary or tertiary\n        // difference earlier in the string.\n        //\n        // To account for this, we put all of the primary orders at the beginning of the\n        // string, followed by the secondary and tertiary orders, separated by nulls.\n        //\n        // Here's a hypothetical example, with the collation element represented as\n        // a three-digit number, one digit for primary, one for secondary, etc.\n        //\n        // String:              A     a     B   \\u00e9 <--(e-acute)\n        // Collation Elements: 101   100   201  510\n        //\n        // Collation Key:      1125<null>0001<null>1010\n        //\n        // To make things even trickier, secondary differences (accent marks) are compared\n        // starting at the *end* of the string in languages with French secondary ordering.\n        // But when comparing the accent marks on a single base character, they are compared\n        // from the beginning.  To handle this, we reverse all of the accents that belong\n        // to each base character, then we reverse the entire string of secondary orderings\n        // at the end.  Taking the same example above, a French collator might return\n        // this instead:\n        //\n        // Collation Key:      1125<null>1000<null>1010\n        //\n        if (source == null)\n            return null;\n\n        if (primResult == null) {\n            primResult = new StringBuffer();\n            secResult = new StringBuffer();\n            terResult = new StringBuffer();\n        } else {\n            primResult.setLength(0);\n            secResult.setLength(0);\n            terResult.setLength(0);\n        }\n        int order = 0;\n        boolean compareSec = (getStrength() >= Collator.SECONDARY);\n        boolean compareTer = (getStrength() >= Collator.TERTIARY);\n        int secOrder = CollationElementIterator.NULLORDER;\n        int terOrder = CollationElementIterator.NULLORDER;\n        int preSecIgnore = 0;\n\n        if (sourceCursor == null) {\n            sourceCursor = getCollationElementIterator(source);\n        } else {\n            sourceCursor.setText(source);\n        }\n\n        // walk through each character\n        while ((order = sourceCursor.next()) !=\n               CollationElementIterator.NULLORDER)\n        {\n            secOrder = CollationElementIterator.secondaryOrder(order);\n            terOrder = CollationElementIterator.tertiaryOrder(order);\n            if (!CollationElementIterator.isIgnorable(order))\n            {\n                primResult.append((char) (CollationElementIterator.primaryOrder(order)\n                                    + COLLATIONKEYOFFSET));\n\n                if (compareSec) {\n                    //\n                    // accumulate all of the ignorable/secondary characters attached\n                    // to a given base character\n                    //\n                    if (tables.isFrenchSec() && preSecIgnore < secResult.length()) {\n                        //\n                        // We're doing reversed secondary ordering and we've hit a base\n                        // (non-ignorable) character.  Reverse any secondary orderings\n                        // that applied to the last base character.  (see block comment above.)\n                        //\n                        RBCollationTables.reverse(secResult, preSecIgnore, secResult.length());\n                    }\n                    // Remember where we are in the secondary orderings - this is how far\n                    // back to go if we need to reverse them later.\n                    secResult.append((char)(secOrder+ COLLATIONKEYOFFSET));\n                    preSecIgnore = secResult.length();\n                }\n                if (compareTer) {\n                    terResult.append((char)(terOrder+ COLLATIONKEYOFFSET));\n                }\n            }\n            else\n            {\n                if (compareSec && secOrder != 0)\n                    secResult.append((char)\n                        (secOrder + tables.getMaxSecOrder() + COLLATIONKEYOFFSET));\n                if (compareTer && terOrder != 0)\n                    terResult.append((char)\n                        (terOrder + tables.getMaxTerOrder() + COLLATIONKEYOFFSET));\n            }\n        }\n        if (tables.isFrenchSec())\n        {\n            if (preSecIgnore < secResult.length()) {\n                // If we've accumulated any secondary characters after the last base character,\n                // reverse them.\n                RBCollationTables.reverse(secResult, preSecIgnore, secResult.length());\n            }\n            // And now reverse the entire secResult to get French secondary ordering.\n            RBCollationTables.reverse(secResult, 0, secResult.length());\n        }\n        primResult.append((char)0);\n        secResult.append((char)0);\n        secResult.append(terResult.toString());\n        primResult.append(secResult.toString());\n\n        if (getStrength() == IDENTICAL) {\n            primResult.append((char)0);\n            int mode = getDecomposition();\n            if (mode == CANONICAL_DECOMPOSITION) {\n                primResult.append(Normalizer.normalize(source, Normalizer.Form.NFD));\n            } else if (mode == FULL_DECOMPOSITION) {\n                primResult.append(Normalizer.normalize(source, Normalizer.Form.NFKD));\n            } else {\n                primResult.append(source);\n            }\n        }\n        return new RuleBasedCollationKey(source, primResult.toString());\n    }"}
{"Number":"582","API Relative Path":"java.text.RuleBasedCollator.java-RuleBasedCollator(String-int)","Corresponding Source":"/**\n     * RuleBasedCollator constructor.  This takes the table rules and builds\n     * a collation table out of them.  Please see RuleBasedCollator class\n     * description for more details on the collation rule syntax.\n     * @see java.util.Locale\n     * @param rules the collation rules to build the collation table from.\n     * @param decomp the decomposition strength used to build the\n     * collation table and to perform comparisons.\n     * @exception ParseException A format exception\n     * will be thrown if the build process of the rules fails. For\n     * example, build rule \"a < ? < d\" will cause the constructor to\n     * throw the ParseException because the '?' is not quoted.\n     */\n    RuleBasedCollator(String rules, int decomp) throws ParseException {\n        setStrength(Collator.TERTIARY);\n        setDecomposition(decomp);\n        tables = new RBCollationTables(rules, decomp);\n    }"}
{"Number":"583","API Relative Path":"java.text.SimpleDateFormat.java-formatToCharacterIterator(Object)","Corresponding Source":"/**\n     * Formats an Object producing an <code>AttributedCharacterIterator<\/code>.\n     * You can use the returned <code>AttributedCharacterIterator<\/code>\n     * to build the resulting String, as well as to determine information\n     * about the resulting String.\n     * <p>\n     * Each attribute key of the AttributedCharacterIterator will be of type\n     * <code>DateFormat.Field<\/code>, with the corresponding attribute value\n     * being the same as the attribute key.\n     *\n     * @exception NullPointerException if obj is null.\n     * @exception IllegalArgumentException if the Format cannot format the\n     *            given object, or if the Format's pattern string is invalid.\n     * @param obj The object to format\n     * @return AttributedCharacterIterator describing the formatted value.\n     * @since 1.4\n     */\n    @Override\n    public AttributedCharacterIterator formatToCharacterIterator(Object obj) {\n        StringBuffer sb = new StringBuffer();\n        CharacterIteratorFieldDelegate delegate = new\n                         CharacterIteratorFieldDelegate();\n\n        if (obj instanceof Date) {\n            format((Date)obj, sb, delegate);\n        }\n        else if (obj instanceof Number) {\n            format(new Date(((Number)obj).longValue()), sb, delegate);\n        }\n        else if (obj == null) {\n            throw new NullPointerException(\n                   \"formatToCharacterIterator must be passed non-null object\");\n        }\n        else {\n            throw new IllegalArgumentException(\n                             \"Cannot format given Object as a Date\");\n        }\n        return delegate.getIterator(sb.toString());\n    }"}
{"Number":"584","API Relative Path":"java.text.SimpleDateFormat.java-SimpleDateFormat(String-DateFormatSymbols)","Corresponding Source":"/**\n     * Constructs a <code>SimpleDateFormat<\/code> using the given pattern and\n     * date format symbols.\n     *\n     * @param pattern the pattern describing the date and time format\n     * @param formatSymbols the date format symbols to be used for formatting\n     * @exception NullPointerException if the given pattern or formatSymbols is null\n     * @exception IllegalArgumentException if the given pattern is invalid\n     */\n    public SimpleDateFormat(String pattern, DateFormatSymbols formatSymbols)\n    {\n        if (pattern == null || formatSymbols == null) {\n            throw new NullPointerException();\n        }\n\n        this.pattern = pattern;\n        this.formatData = (DateFormatSymbols) formatSymbols.clone();\n        this.locale = Locale.getDefault(Locale.Category.FORMAT);\n        initializeCalendar(this.locale);\n        initialize(this.locale);\n        useDateFormatSymbols = true;\n    }"}
{"Number":"585","API Relative Path":"java.text.SimpleDateFormat.java-SimpleDateFormat(String-Locale)","Corresponding Source":"/**\n     * Constructs a <code>SimpleDateFormat<\/code> using the given pattern and\n     * the default date format symbols for the given locale.\n     * <b>Note:<\/b> This constructor may not support all locales.\n     * For full coverage, use the factory methods in the {@link DateFormat}\n     * class.\n     *\n     * @param pattern the pattern describing the date and time format\n     * @param locale the locale whose date format symbols should be used\n     * @exception NullPointerException if the given pattern or locale is null\n     * @exception IllegalArgumentException if the given pattern is invalid\n     */\n    public SimpleDateFormat(String pattern, Locale locale)\n    {\n        if (pattern == null || locale == null) {\n            throw new NullPointerException();\n        }\n\n        initializeCalendar(locale);\n        this.pattern = pattern;\n        this.formatData = DateFormatSymbols.getInstanceRef(locale);\n        this.locale = locale;\n        initialize(locale);\n    }"}
{"Number":"586","API Relative Path":"java.text.StringCharacterIterator.java-setIndex(int)","Corresponding Source":"/**\n     * Implements CharacterIterator.setIndex() for String.\n     * @see CharacterIterator#setIndex\n     */\n    public char setIndex(int p)\n    {\n    if (p < begin || p > end)\n            throw new IllegalArgumentException(\"Invalid index\");\n        pos = p;\n        return current();\n    }"}
{"Number":"587","API Relative Path":"java.text.StringCharacterIterator.java-setText(String)","Corresponding Source":"/**\n     * Reset this iterator to point to a new string.  This package-visible\n     * method is used by other java.text classes that want to avoid allocating\n     * new StringCharacterIterator objects every time their setText method\n     * is called.\n     *\n     * @param  text   The String to be iterated over\n     * @since 1.2\n     */\n    public void setText(String text) {\n        if (text == null)\n            throw new NullPointerException();\n        this.text = text;\n        this.begin = 0;\n        this.end = text.length();\n        this.pos = 0;\n    }"}
{"Number":"588","API Relative Path":"java.text.StringCharacterIterator.java-StringCharacterIterator(String-int-int-int)","Corresponding Source":"/**\n     * Constructs an iterator over the given range of the given string, with the\n     * index set at the specified position.\n     *\n     * @param  text   The String to be iterated over\n     * @param  begin  Index of the first character\n     * @param  end    Index of the character following the last character\n     * @param  pos    Initial iterator position\n     */\n    public StringCharacterIterator(String text, int begin, int end, int pos) {\n        if (text == null)\n            throw new NullPointerException();\n        this.text = text;\n\n        if (begin < 0 || begin > end || end > text.length())\n            throw new IllegalArgumentException(\"Invalid substring range\");\n\n        if (pos < begin || pos > end)\n            throw new IllegalArgumentException(\"Invalid position\");\n\n        this.begin = begin;\n        this.end = end;\n        this.pos = pos;\n    }"}
{"Number":"589","API Relative Path":"java.text.StringCharacterIterator.java-StringCharacterIterator(String-int-int-int)","Corresponding Source":"/**\n     * Constructs an iterator over the given range of the given string, with the\n     * index set at the specified position.\n     *\n     * @param  text   The String to be iterated over\n     * @param  begin  Index of the first character\n     * @param  end    Index of the character following the last character\n     * @param  pos    Initial iterator position\n     */\n    public StringCharacterIterator(String text, int begin, int end, int pos) {\n        if (text == null)\n            throw new NullPointerException();\n        this.text = text;\n\n        if (begin < 0 || begin > end || end > text.length())\n            throw new IllegalArgumentException(\"Invalid substring range\");\n\n        if (pos < begin || pos > end)\n            throw new IllegalArgumentException(\"Invalid position\");\n\n        this.begin = begin;\n        this.end = end;\n        this.pos = pos;\n    }"}
{"Number":"590","API Relative Path":"java.text.StringCharacterIterator.java-StringCharacterIterator(String-int-int-int)","Corresponding Source":"/**\n     * Constructs an iterator over the given range of the given string, with the\n     * index set at the specified position.\n     *\n     * @param  text   The String to be iterated over\n     * @param  begin  Index of the first character\n     * @param  end    Index of the character following the last character\n     * @param  pos    Initial iterator position\n     */\n    public StringCharacterIterator(String text, int begin, int end, int pos) {\n        if (text == null)\n            throw new NullPointerException();\n        this.text = text;\n\n        if (begin < 0 || begin > end || end > text.length())\n            throw new IllegalArgumentException(\"Invalid substring range\");\n\n        if (pos < begin || pos > end)\n            throw new IllegalArgumentException(\"Invalid position\");\n\n        this.begin = begin;\n        this.end = end;\n        this.pos = pos;\n    }"}
{"Number":"591","API Relative Path":"java.time.chrono.AbstractChronology.java-addFieldValue(Map-ChronoField-long)","Corresponding Source":"/**\n     * Adds a field-value pair to the map, checking for conflicts.\n     * <p>\n     * If the field is not already present, then the field-value pair is added to the map.\n     * If the field is already present and it has the same value as that specified, no action occurs.\n     * If the field is already present and it has a different value to that specified, then\n     * an exception is thrown.\n     *\n     * @param field  the field to add, not null\n     * @param value  the value to add, not null\n     * @throws java.time.DateTimeException if the field is already present with a different value\n     */\n    void addFieldValue(Map<TemporalField, Long> fieldValues, ChronoField field, long value) {\n        Long old = fieldValues.get(field);  // check first for better error message\n        if (old != null && old.longValue() != value) {\n            throw new DateTimeException(\"Conflict found: \" + field + \" \" + old + \" differs from \" + field + \" \" + value);\n        }\n        fieldValues.put(field, value);\n    }"}
{"Number":"592","API Relative Path":"java.time.chrono.AbstractChronology.java-resolveDate(Map-ResolverStyle)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Resolves parsed {@code ChronoField} values into a date during parsing.\n     * <p>\n     * Most {@code TemporalField} implementations are resolved using the\n     * resolve method on the field. By contrast, the {@code ChronoField} class\n     * defines fields that only have meaning relative to the chronology.\n     * As such, {@code ChronoField} date fields are resolved here in the\n     * context of a specific chronology.\n     * <p>\n     * {@code ChronoField} instances are resolved by this method, which may\n     * be overridden in subclasses.\n     * <ul>\n     * <li>{@code EPOCH_DAY} - If present, this is converted to a date and\n     *  all other date fields are then cross-checked against the date.\n     * <li>{@code PROLEPTIC_MONTH} - If present, then it is split into the\n     *  {@code YEAR} and {@code MONTH_OF_YEAR}. If the mode is strict or smart\n     *  then the field is validated.\n     * <li>{@code YEAR_OF_ERA} and {@code ERA} - If both are present, then they\n     *  are combined to form a {@code YEAR}. In lenient mode, the {@code YEAR_OF_ERA}\n     *  range is not validated, in smart and strict mode it is. The {@code ERA} is\n     *  validated for range in all three modes. If only the {@code YEAR_OF_ERA} is\n     *  present, and the mode is smart or lenient, then the last available era\n     *  is assumed. In strict mode, no era is assumed and the {@code YEAR_OF_ERA} is\n     *  left untouched. If only the {@code ERA} is present, then it is left untouched.\n     * <li>{@code YEAR}, {@code MONTH_OF_YEAR} and {@code DAY_OF_MONTH} -\n     *  If all three are present, then they are combined to form a date.\n     *  In all three modes, the {@code YEAR} is validated.\n     *  If the mode is smart or strict, then the month and day are validated.\n     *  If the mode is lenient, then the date is combined in a manner equivalent to\n     *  creating a date on the first day of the first month in the requested year,\n     *  then adding the difference in months, then the difference in days.\n     *  If the mode is smart, and the day-of-month is greater than the maximum for\n     *  the year-month, then the day-of-month is adjusted to the last day-of-month.\n     *  If the mode is strict, then the three fields must form a valid date.\n     * <li>{@code YEAR} and {@code DAY_OF_YEAR} -\n     *  If both are present, then they are combined to form a date.\n     *  In all three modes, the {@code YEAR} is validated.\n     *  If the mode is lenient, then the date is combined in a manner equivalent to\n     *  creating a date on the first day of the requested year, then adding\n     *  the difference in days.\n     *  If the mode is smart or strict, then the two fields must form a valid date.\n     * <li>{@code YEAR}, {@code MONTH_OF_YEAR}, {@code ALIGNED_WEEK_OF_MONTH} and\n     *  {@code ALIGNED_DAY_OF_WEEK_IN_MONTH} -\n     *  If all four are present, then they are combined to form a date.\n     *  In all three modes, the {@code YEAR} is validated.\n     *  If the mode is lenient, then the date is combined in a manner equivalent to\n     *  creating a date on the first day of the first month in the requested year, then adding\n     *  the difference in months, then the difference in weeks, then in days.\n     *  If the mode is smart or strict, then the all four fields are validated to\n     *  their outer ranges. The date is then combined in a manner equivalent to\n     *  creating a date on the first day of the requested year and month, then adding\n     *  the amount in weeks and days to reach their values. If the mode is strict,\n     *  the date is additionally validated to check that the day and week adjustment\n     *  did not change the month.\n     * <li>{@code YEAR}, {@code MONTH_OF_YEAR}, {@code ALIGNED_WEEK_OF_MONTH} and\n     *  {@code DAY_OF_WEEK} - If all four are present, then they are combined to\n     *  form a date. The approach is the same as described above for\n     *  years, months and weeks in {@code ALIGNED_DAY_OF_WEEK_IN_MONTH}.\n     *  The day-of-week is adjusted as the next or same matching day-of-week once\n     *  the years, months and weeks have been handled.\n     * <li>{@code YEAR}, {@code ALIGNED_WEEK_OF_YEAR} and {@code ALIGNED_DAY_OF_WEEK_IN_YEAR} -\n     *  If all three are present, then they are combined to form a date.\n     *  In all three modes, the {@code YEAR} is validated.\n     *  If the mode is lenient, then the date is combined in a manner equivalent to\n     *  creating a date on the first day of the requested year, then adding\n     *  the difference in weeks, then in days.\n     *  If the mode is smart or strict, then the all three fields are validated to\n     *  their outer ranges. The date is then combined in a manner equivalent to\n     *  creating a date on the first day of the requested year, then adding\n     *  the amount in weeks and days to reach their values. If the mode is strict,\n     *  the date is additionally validated to check that the day and week adjustment\n     *  did not change the year.\n     * <li>{@code YEAR}, {@code ALIGNED_WEEK_OF_YEAR} and {@code DAY_OF_WEEK} -\n     *  If all three are present, then they are combined to form a date.\n     *  The approach is the same as described above for years and weeks in\n     *  {@code ALIGNED_DAY_OF_WEEK_IN_YEAR}. The day-of-week is adjusted as the\n     *  next or same matching day-of-week once the years and weeks have been handled.\n     * <\/ul>\n     * <p>\n     * The default implementation is suitable for most calendar systems.\n     * If {@link java.time.temporal.ChronoField#YEAR_OF_ERA} is found without an {@link java.time.temporal.ChronoField#ERA}\n     * then the last era in {@link #eras()} is used.\n     * The implementation assumes a 7 day week, that the first day-of-month\n     * has the value 1, that first day-of-year has the value 1, and that the\n     * first of the month and year always exists.\n     *\n     * @param fieldValues  the map of fields to values, which can be updated, not null\n     * @param resolverStyle  the requested type of resolve, not null\n     * @return the resolved date, null if insufficient information to create a date\n     * @throws java.time.DateTimeException if the date cannot be resolved, typically\n     *  because of a conflict in the input data\n     */\n    @Override\n    public ChronoLocalDate resolveDate(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle) {\n        // check epoch-day before inventing era\n        if (fieldValues.containsKey(EPOCH_DAY)) {\n            return dateEpochDay(fieldValues.remove(EPOCH_DAY));\n        }\n\n        // fix proleptic month before inventing era\n        resolveProlepticMonth(fieldValues, resolverStyle);\n\n        // invent era if necessary to resolve year-of-era\n        ChronoLocalDate resolved = resolveYearOfEra(fieldValues, resolverStyle);\n        if (resolved != null) {\n            return resolved;\n        }\n\n        // build date\n        if (fieldValues.containsKey(YEAR)) {\n            if (fieldValues.containsKey(MONTH_OF_YEAR)) {\n                if (fieldValues.containsKey(DAY_OF_MONTH)) {\n                    return resolveYMD(fieldValues, resolverStyle);\n                }\n                if (fieldValues.containsKey(ALIGNED_WEEK_OF_MONTH)) {\n                    if (fieldValues.containsKey(ALIGNED_DAY_OF_WEEK_IN_MONTH)) {\n                        return resolveYMAA(fieldValues, resolverStyle);\n                    }\n                    if (fieldValues.containsKey(DAY_OF_WEEK)) {\n                        return resolveYMAD(fieldValues, resolverStyle);\n                    }\n                }\n            }\n            if (fieldValues.containsKey(DAY_OF_YEAR)) {\n                return resolveYD(fieldValues, resolverStyle);\n            }\n            if (fieldValues.containsKey(ALIGNED_WEEK_OF_YEAR)) {\n                if (fieldValues.containsKey(ALIGNED_DAY_OF_WEEK_IN_YEAR)) {\n                    return resolveYAA(fieldValues, resolverStyle);\n                }\n                if (fieldValues.containsKey(DAY_OF_WEEK)) {\n                    return resolveYAD(fieldValues, resolverStyle);\n                }\n            }\n        }\n        return null;\n    }"}
{"Number":"593","API Relative Path":"java.time.chrono.AbstractChronology.java-resolveDate(Map-ResolverStyle)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Resolves parsed {@code ChronoField} values into a date during parsing.\n     * <p>\n     * Most {@code TemporalField} implementations are resolved using the\n     * resolve method on the field. By contrast, the {@code ChronoField} class\n     * defines fields that only have meaning relative to the chronology.\n     * As such, {@code ChronoField} date fields are resolved here in the\n     * context of a specific chronology.\n     * <p>\n     * {@code ChronoField} instances are resolved by this method, which may\n     * be overridden in subclasses.\n     * <ul>\n     * <li>{@code EPOCH_DAY} - If present, this is converted to a date and\n     *  all other date fields are then cross-checked against the date.\n     * <li>{@code PROLEPTIC_MONTH} - If present, then it is split into the\n     *  {@code YEAR} and {@code MONTH_OF_YEAR}. If the mode is strict or smart\n     *  then the field is validated.\n     * <li>{@code YEAR_OF_ERA} and {@code ERA} - If both are present, then they\n     *  are combined to form a {@code YEAR}. In lenient mode, the {@code YEAR_OF_ERA}\n     *  range is not validated, in smart and strict mode it is. The {@code ERA} is\n     *  validated for range in all three modes. If only the {@code YEAR_OF_ERA} is\n     *  present, and the mode is smart or lenient, then the last available era\n     *  is assumed. In strict mode, no era is assumed and the {@code YEAR_OF_ERA} is\n     *  left untouched. If only the {@code ERA} is present, then it is left untouched.\n     * <li>{@code YEAR}, {@code MONTH_OF_YEAR} and {@code DAY_OF_MONTH} -\n     *  If all three are present, then they are combined to form a date.\n     *  In all three modes, the {@code YEAR} is validated.\n     *  If the mode is smart or strict, then the month and day are validated.\n     *  If the mode is lenient, then the date is combined in a manner equivalent to\n     *  creating a date on the first day of the first month in the requested year,\n     *  then adding the difference in months, then the difference in days.\n     *  If the mode is smart, and the day-of-month is greater than the maximum for\n     *  the year-month, then the day-of-month is adjusted to the last day-of-month.\n     *  If the mode is strict, then the three fields must form a valid date.\n     * <li>{@code YEAR} and {@code DAY_OF_YEAR} -\n     *  If both are present, then they are combined to form a date.\n     *  In all three modes, the {@code YEAR} is validated.\n     *  If the mode is lenient, then the date is combined in a manner equivalent to\n     *  creating a date on the first day of the requested year, then adding\n     *  the difference in days.\n     *  If the mode is smart or strict, then the two fields must form a valid date.\n     * <li>{@code YEAR}, {@code MONTH_OF_YEAR}, {@code ALIGNED_WEEK_OF_MONTH} and\n     *  {@code ALIGNED_DAY_OF_WEEK_IN_MONTH} -\n     *  If all four are present, then they are combined to form a date.\n     *  In all three modes, the {@code YEAR} is validated.\n     *  If the mode is lenient, then the date is combined in a manner equivalent to\n     *  creating a date on the first day of the first month in the requested year, then adding\n     *  the difference in months, then the difference in weeks, then in days.\n     *  If the mode is smart or strict, then the all four fields are validated to\n     *  their outer ranges. The date is then combined in a manner equivalent to\n     *  creating a date on the first day of the requested year and month, then adding\n     *  the amount in weeks and days to reach their values. If the mode is strict,\n     *  the date is additionally validated to check that the day and week adjustment\n     *  did not change the month.\n     * <li>{@code YEAR}, {@code MONTH_OF_YEAR}, {@code ALIGNED_WEEK_OF_MONTH} and\n     *  {@code DAY_OF_WEEK} - If all four are present, then they are combined to\n     *  form a date. The approach is the same as described above for\n     *  years, months and weeks in {@code ALIGNED_DAY_OF_WEEK_IN_MONTH}.\n     *  The day-of-week is adjusted as the next or same matching day-of-week once\n     *  the years, months and weeks have been handled.\n     * <li>{@code YEAR}, {@code ALIGNED_WEEK_OF_YEAR} and {@code ALIGNED_DAY_OF_WEEK_IN_YEAR} -\n     *  If all three are present, then they are combined to form a date.\n     *  In all three modes, the {@code YEAR} is validated.\n     *  If the mode is lenient, then the date is combined in a manner equivalent to\n     *  creating a date on the first day of the requested year, then adding\n     *  the difference in weeks, then in days.\n     *  If the mode is smart or strict, then the all three fields are validated to\n     *  their outer ranges. The date is then combined in a manner equivalent to\n     *  creating a date on the first day of the requested year, then adding\n     *  the amount in weeks and days to reach their values. If the mode is strict,\n     *  the date is additionally validated to check that the day and week adjustment\n     *  did not change the year.\n     * <li>{@code YEAR}, {@code ALIGNED_WEEK_OF_YEAR} and {@code DAY_OF_WEEK} -\n     *  If all three are present, then they are combined to form a date.\n     *  The approach is the same as described above for years and weeks in\n     *  {@code ALIGNED_DAY_OF_WEEK_IN_YEAR}. The day-of-week is adjusted as the\n     *  next or same matching day-of-week once the years and weeks have been handled.\n     * <\/ul>\n     * <p>\n     * The default implementation is suitable for most calendar systems.\n     * If {@link java.time.temporal.ChronoField#YEAR_OF_ERA} is found without an {@link java.time.temporal.ChronoField#ERA}\n     * then the last era in {@link #eras()} is used.\n     * The implementation assumes a 7 day week, that the first day-of-month\n     * has the value 1, that first day-of-year has the value 1, and that the\n     * first of the month and year always exists.\n     *\n     * @param fieldValues  the map of fields to values, which can be updated, not null\n     * @param resolverStyle  the requested type of resolve, not null\n     * @return the resolved date, null if insufficient information to create a date\n     * @throws java.time.DateTimeException if the date cannot be resolved, typically\n     *  because of a conflict in the input data\n     */\n    @Override\n    public ChronoLocalDate resolveDate(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle) {\n        // check epoch-day before inventing era\n        if (fieldValues.containsKey(EPOCH_DAY)) {\n            return dateEpochDay(fieldValues.remove(EPOCH_DAY));\n        }\n\n        // fix proleptic month before inventing era\n        resolveProlepticMonth(fieldValues, resolverStyle);\n\n        // invent era if necessary to resolve year-of-era\n        ChronoLocalDate resolved = resolveYearOfEra(fieldValues, resolverStyle);\n        if (resolved != null) {\n            return resolved;\n        }\n\n        // build date\n        if (fieldValues.containsKey(YEAR)) {\n            if (fieldValues.containsKey(MONTH_OF_YEAR)) {\n                if (fieldValues.containsKey(DAY_OF_MONTH)) {\n                    return resolveYMD(fieldValues, resolverStyle);\n                }\n                if (fieldValues.containsKey(ALIGNED_WEEK_OF_MONTH)) {\n                    if (fieldValues.containsKey(ALIGNED_DAY_OF_WEEK_IN_MONTH)) {\n                        return resolveYMAA(fieldValues, resolverStyle);\n                    }\n                    if (fieldValues.containsKey(DAY_OF_WEEK)) {\n                        return resolveYMAD(fieldValues, resolverStyle);\n                    }\n                }\n            }\n            if (fieldValues.containsKey(DAY_OF_YEAR)) {\n                return resolveYD(fieldValues, resolverStyle);\n            }\n            if (fieldValues.containsKey(ALIGNED_WEEK_OF_YEAR)) {\n                if (fieldValues.containsKey(ALIGNED_DAY_OF_WEEK_IN_YEAR)) {\n                    return resolveYAA(fieldValues, resolverStyle);\n                }\n                if (fieldValues.containsKey(DAY_OF_WEEK)) {\n                    return resolveYAD(fieldValues, resolverStyle);\n                }\n            }\n        }\n        return null;\n    }"}
{"Number":"594","API Relative Path":"java.time.chrono.AbstractChronology.java-resolveDate(Map-ResolverStyle)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Resolves parsed {@code ChronoField} values into a date during parsing.\n     * <p>\n     * Most {@code TemporalField} implementations are resolved using the\n     * resolve method on the field. By contrast, the {@code ChronoField} class\n     * defines fields that only have meaning relative to the chronology.\n     * As such, {@code ChronoField} date fields are resolved here in the\n     * context of a specific chronology.\n     * <p>\n     * {@code ChronoField} instances are resolved by this method, which may\n     * be overridden in subclasses.\n     * <ul>\n     * <li>{@code EPOCH_DAY} - If present, this is converted to a date and\n     *  all other date fields are then cross-checked against the date.\n     * <li>{@code PROLEPTIC_MONTH} - If present, then it is split into the\n     *  {@code YEAR} and {@code MONTH_OF_YEAR}. If the mode is strict or smart\n     *  then the field is validated.\n     * <li>{@code YEAR_OF_ERA} and {@code ERA} - If both are present, then they\n     *  are combined to form a {@code YEAR}. In lenient mode, the {@code YEAR_OF_ERA}\n     *  range is not validated, in smart and strict mode it is. The {@code ERA} is\n     *  validated for range in all three modes. If only the {@code YEAR_OF_ERA} is\n     *  present, and the mode is smart or lenient, then the last available era\n     *  is assumed. In strict mode, no era is assumed and the {@code YEAR_OF_ERA} is\n     *  left untouched. If only the {@code ERA} is present, then it is left untouched.\n     * <li>{@code YEAR}, {@code MONTH_OF_YEAR} and {@code DAY_OF_MONTH} -\n     *  If all three are present, then they are combined to form a date.\n     *  In all three modes, the {@code YEAR} is validated.\n     *  If the mode is smart or strict, then the month and day are validated.\n     *  If the mode is lenient, then the date is combined in a manner equivalent to\n     *  creating a date on the first day of the first month in the requested year,\n     *  then adding the difference in months, then the difference in days.\n     *  If the mode is smart, and the day-of-month is greater than the maximum for\n     *  the year-month, then the day-of-month is adjusted to the last day-of-month.\n     *  If the mode is strict, then the three fields must form a valid date.\n     * <li>{@code YEAR} and {@code DAY_OF_YEAR} -\n     *  If both are present, then they are combined to form a date.\n     *  In all three modes, the {@code YEAR} is validated.\n     *  If the mode is lenient, then the date is combined in a manner equivalent to\n     *  creating a date on the first day of the requested year, then adding\n     *  the difference in days.\n     *  If the mode is smart or strict, then the two fields must form a valid date.\n     * <li>{@code YEAR}, {@code MONTH_OF_YEAR}, {@code ALIGNED_WEEK_OF_MONTH} and\n     *  {@code ALIGNED_DAY_OF_WEEK_IN_MONTH} -\n     *  If all four are present, then they are combined to form a date.\n     *  In all three modes, the {@code YEAR} is validated.\n     *  If the mode is lenient, then the date is combined in a manner equivalent to\n     *  creating a date on the first day of the first month in the requested year, then adding\n     *  the difference in months, then the difference in weeks, then in days.\n     *  If the mode is smart or strict, then the all four fields are validated to\n     *  their outer ranges. The date is then combined in a manner equivalent to\n     *  creating a date on the first day of the requested year and month, then adding\n     *  the amount in weeks and days to reach their values. If the mode is strict,\n     *  the date is additionally validated to check that the day and week adjustment\n     *  did not change the month.\n     * <li>{@code YEAR}, {@code MONTH_OF_YEAR}, {@code ALIGNED_WEEK_OF_MONTH} and\n     *  {@code DAY_OF_WEEK} - If all four are present, then they are combined to\n     *  form a date. The approach is the same as described above for\n     *  years, months and weeks in {@code ALIGNED_DAY_OF_WEEK_IN_MONTH}.\n     *  The day-of-week is adjusted as the next or same matching day-of-week once\n     *  the years, months and weeks have been handled.\n     * <li>{@code YEAR}, {@code ALIGNED_WEEK_OF_YEAR} and {@code ALIGNED_DAY_OF_WEEK_IN_YEAR} -\n     *  If all three are present, then they are combined to form a date.\n     *  In all three modes, the {@code YEAR} is validated.\n     *  If the mode is lenient, then the date is combined in a manner equivalent to\n     *  creating a date on the first day of the requested year, then adding\n     *  the difference in weeks, then in days.\n     *  If the mode is smart or strict, then the all three fields are validated to\n     *  their outer ranges. The date is then combined in a manner equivalent to\n     *  creating a date on the first day of the requested year, then adding\n     *  the amount in weeks and days to reach their values. If the mode is strict,\n     *  the date is additionally validated to check that the day and week adjustment\n     *  did not change the year.\n     * <li>{@code YEAR}, {@code ALIGNED_WEEK_OF_YEAR} and {@code DAY_OF_WEEK} -\n     *  If all three are present, then they are combined to form a date.\n     *  The approach is the same as described above for years and weeks in\n     *  {@code ALIGNED_DAY_OF_WEEK_IN_YEAR}. The day-of-week is adjusted as the\n     *  next or same matching day-of-week once the years and weeks have been handled.\n     * <\/ul>\n     * <p>\n     * The default implementation is suitable for most calendar systems.\n     * If {@link java.time.temporal.ChronoField#YEAR_OF_ERA} is found without an {@link java.time.temporal.ChronoField#ERA}\n     * then the last era in {@link #eras()} is used.\n     * The implementation assumes a 7 day week, that the first day-of-month\n     * has the value 1, that first day-of-year has the value 1, and that the\n     * first of the month and year always exists.\n     *\n     * @param fieldValues  the map of fields to values, which can be updated, not null\n     * @param resolverStyle  the requested type of resolve, not null\n     * @return the resolved date, null if insufficient information to create a date\n     * @throws java.time.DateTimeException if the date cannot be resolved, typically\n     *  because of a conflict in the input data\n     */\n    @Override\n    public ChronoLocalDate resolveDate(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle) {\n        // check epoch-day before inventing era\n        if (fieldValues.containsKey(EPOCH_DAY)) {\n            return dateEpochDay(fieldValues.remove(EPOCH_DAY));\n        }\n\n        // fix proleptic month before inventing era\n        resolveProlepticMonth(fieldValues, resolverStyle);\n\n        // invent era if necessary to resolve year-of-era\n        ChronoLocalDate resolved = resolveYearOfEra(fieldValues, resolverStyle);\n        if (resolved != null) {\n            return resolved;\n        }\n\n        // build date\n        if (fieldValues.containsKey(YEAR)) {\n            if (fieldValues.containsKey(MONTH_OF_YEAR)) {\n                if (fieldValues.containsKey(DAY_OF_MONTH)) {\n                    return resolveYMD(fieldValues, resolverStyle);\n                }\n                if (fieldValues.containsKey(ALIGNED_WEEK_OF_MONTH)) {\n                    if (fieldValues.containsKey(ALIGNED_DAY_OF_WEEK_IN_MONTH)) {\n                        return resolveYMAA(fieldValues, resolverStyle);\n                    }\n                    if (fieldValues.containsKey(DAY_OF_WEEK)) {\n                        return resolveYMAD(fieldValues, resolverStyle);\n                    }\n                }\n            }\n            if (fieldValues.containsKey(DAY_OF_YEAR)) {\n                return resolveYD(fieldValues, resolverStyle);\n            }\n            if (fieldValues.containsKey(ALIGNED_WEEK_OF_YEAR)) {\n                if (fieldValues.containsKey(ALIGNED_DAY_OF_WEEK_IN_YEAR)) {\n                    return resolveYAA(fieldValues, resolverStyle);\n                }\n                if (fieldValues.containsKey(DAY_OF_WEEK)) {\n                    return resolveYAD(fieldValues, resolverStyle);\n                }\n            }\n        }\n        return null;\n    }"}
{"Number":"595","API Relative Path":"java.time.chrono.AbstractChronology.java-resolveDate(Map-ResolverStyle)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Resolves parsed {@code ChronoField} values into a date during parsing.\n     * <p>\n     * Most {@code TemporalField} implementations are resolved using the\n     * resolve method on the field. By contrast, the {@code ChronoField} class\n     * defines fields that only have meaning relative to the chronology.\n     * As such, {@code ChronoField} date fields are resolved here in the\n     * context of a specific chronology.\n     * <p>\n     * {@code ChronoField} instances are resolved by this method, which may\n     * be overridden in subclasses.\n     * <ul>\n     * <li>{@code EPOCH_DAY} - If present, this is converted to a date and\n     *  all other date fields are then cross-checked against the date.\n     * <li>{@code PROLEPTIC_MONTH} - If present, then it is split into the\n     *  {@code YEAR} and {@code MONTH_OF_YEAR}. If the mode is strict or smart\n     *  then the field is validated.\n     * <li>{@code YEAR_OF_ERA} and {@code ERA} - If both are present, then they\n     *  are combined to form a {@code YEAR}. In lenient mode, the {@code YEAR_OF_ERA}\n     *  range is not validated, in smart and strict mode it is. The {@code ERA} is\n     *  validated for range in all three modes. If only the {@code YEAR_OF_ERA} is\n     *  present, and the mode is smart or lenient, then the last available era\n     *  is assumed. In strict mode, no era is assumed and the {@code YEAR_OF_ERA} is\n     *  left untouched. If only the {@code ERA} is present, then it is left untouched.\n     * <li>{@code YEAR}, {@code MONTH_OF_YEAR} and {@code DAY_OF_MONTH} -\n     *  If all three are present, then they are combined to form a date.\n     *  In all three modes, the {@code YEAR} is validated.\n     *  If the mode is smart or strict, then the month and day are validated.\n     *  If the mode is lenient, then the date is combined in a manner equivalent to\n     *  creating a date on the first day of the first month in the requested year,\n     *  then adding the difference in months, then the difference in days.\n     *  If the mode is smart, and the day-of-month is greater than the maximum for\n     *  the year-month, then the day-of-month is adjusted to the last day-of-month.\n     *  If the mode is strict, then the three fields must form a valid date.\n     * <li>{@code YEAR} and {@code DAY_OF_YEAR} -\n     *  If both are present, then they are combined to form a date.\n     *  In all three modes, the {@code YEAR} is validated.\n     *  If the mode is lenient, then the date is combined in a manner equivalent to\n     *  creating a date on the first day of the requested year, then adding\n     *  the difference in days.\n     *  If the mode is smart or strict, then the two fields must form a valid date.\n     * <li>{@code YEAR}, {@code MONTH_OF_YEAR}, {@code ALIGNED_WEEK_OF_MONTH} and\n     *  {@code ALIGNED_DAY_OF_WEEK_IN_MONTH} -\n     *  If all four are present, then they are combined to form a date.\n     *  In all three modes, the {@code YEAR} is validated.\n     *  If the mode is lenient, then the date is combined in a manner equivalent to\n     *  creating a date on the first day of the first month in the requested year, then adding\n     *  the difference in months, then the difference in weeks, then in days.\n     *  If the mode is smart or strict, then the all four fields are validated to\n     *  their outer ranges. The date is then combined in a manner equivalent to\n     *  creating a date on the first day of the requested year and month, then adding\n     *  the amount in weeks and days to reach their values. If the mode is strict,\n     *  the date is additionally validated to check that the day and week adjustment\n     *  did not change the month.\n     * <li>{@code YEAR}, {@code MONTH_OF_YEAR}, {@code ALIGNED_WEEK_OF_MONTH} and\n     *  {@code DAY_OF_WEEK} - If all four are present, then they are combined to\n     *  form a date. The approach is the same as described above for\n     *  years, months and weeks in {@code ALIGNED_DAY_OF_WEEK_IN_MONTH}.\n     *  The day-of-week is adjusted as the next or same matching day-of-week once\n     *  the years, months and weeks have been handled.\n     * <li>{@code YEAR}, {@code ALIGNED_WEEK_OF_YEAR} and {@code ALIGNED_DAY_OF_WEEK_IN_YEAR} -\n     *  If all three are present, then they are combined to form a date.\n     *  In all three modes, the {@code YEAR} is validated.\n     *  If the mode is lenient, then the date is combined in a manner equivalent to\n     *  creating a date on the first day of the requested year, then adding\n     *  the difference in weeks, then in days.\n     *  If the mode is smart or strict, then the all three fields are validated to\n     *  their outer ranges. The date is then combined in a manner equivalent to\n     *  creating a date on the first day of the requested year, then adding\n     *  the amount in weeks and days to reach their values. If the mode is strict,\n     *  the date is additionally validated to check that the day and week adjustment\n     *  did not change the year.\n     * <li>{@code YEAR}, {@code ALIGNED_WEEK_OF_YEAR} and {@code DAY_OF_WEEK} -\n     *  If all three are present, then they are combined to form a date.\n     *  The approach is the same as described above for years and weeks in\n     *  {@code ALIGNED_DAY_OF_WEEK_IN_YEAR}. The day-of-week is adjusted as the\n     *  next or same matching day-of-week once the years and weeks have been handled.\n     * <\/ul>\n     * <p>\n     * The default implementation is suitable for most calendar systems.\n     * If {@link java.time.temporal.ChronoField#YEAR_OF_ERA} is found without an {@link java.time.temporal.ChronoField#ERA}\n     * then the last era in {@link #eras()} is used.\n     * The implementation assumes a 7 day week, that the first day-of-month\n     * has the value 1, that first day-of-year has the value 1, and that the\n     * first of the month and year always exists.\n     *\n     * @param fieldValues  the map of fields to values, which can be updated, not null\n     * @param resolverStyle  the requested type of resolve, not null\n     * @return the resolved date, null if insufficient information to create a date\n     * @throws java.time.DateTimeException if the date cannot be resolved, typically\n     *  because of a conflict in the input data\n     */\n    @Override\n    public ChronoLocalDate resolveDate(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle) {\n        // check epoch-day before inventing era\n        if (fieldValues.containsKey(EPOCH_DAY)) {\n            return dateEpochDay(fieldValues.remove(EPOCH_DAY));\n        }\n\n        // fix proleptic month before inventing era\n        resolveProlepticMonth(fieldValues, resolverStyle);\n\n        // invent era if necessary to resolve year-of-era\n        ChronoLocalDate resolved = resolveYearOfEra(fieldValues, resolverStyle);\n        if (resolved != null) {\n            return resolved;\n        }\n\n        // build date\n        if (fieldValues.containsKey(YEAR)) {\n            if (fieldValues.containsKey(MONTH_OF_YEAR)) {\n                if (fieldValues.containsKey(DAY_OF_MONTH)) {\n                    return resolveYMD(fieldValues, resolverStyle);\n                }\n                if (fieldValues.containsKey(ALIGNED_WEEK_OF_MONTH)) {\n                    if (fieldValues.containsKey(ALIGNED_DAY_OF_WEEK_IN_MONTH)) {\n                        return resolveYMAA(fieldValues, resolverStyle);\n                    }\n                    if (fieldValues.containsKey(DAY_OF_WEEK)) {\n                        return resolveYMAD(fieldValues, resolverStyle);\n                    }\n                }\n            }\n            if (fieldValues.containsKey(DAY_OF_YEAR)) {\n                return resolveYD(fieldValues, resolverStyle);\n            }\n            if (fieldValues.containsKey(ALIGNED_WEEK_OF_YEAR)) {\n                if (fieldValues.containsKey(ALIGNED_DAY_OF_WEEK_IN_YEAR)) {\n                    return resolveYAA(fieldValues, resolverStyle);\n                }\n                if (fieldValues.containsKey(DAY_OF_WEEK)) {\n                    return resolveYAD(fieldValues, resolverStyle);\n                }\n            }\n        }\n        return null;\n    }"}
{"Number":"596","API Relative Path":"java.time.chrono.ChronoLocalDateImpl.java-plusWeeks(long)","Corresponding Source":"/**\n     * Returns a copy of this date with the specified number of weeks added.\n     * <p>\n     * This adds the specified period in weeks to the date.\n     * In some cases, adding weeks can cause the resulting date to become invalid.\n     * If this occurs, then other fields will be adjusted to ensure that the result is valid.\n     * <p>\n     * The default implementation uses {@link #plusDays(long)} using a 7 day week.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param weeksToAdd  the weeks to add, may be negative\n     * @return a date based on this one with the weeks added, not null\n     * @throws DateTimeException if the result exceeds the supported date range\n     */\n    D plusWeeks(long weeksToAdd) {\n        return plusDays(Math.multiplyExact(weeksToAdd, 7));\n    }"}
{"Number":"597","API Relative Path":"java.time.chrono.ChronoPeriodImpl.java-ChronoPeriodImpl(Chronology-int-int-int)","Corresponding Source":"/**\n     * Creates an instance.\n     */\n    ChronoPeriodImpl(Chronology chrono, int years, int months, int days) {\n        Objects.requireNonNull(chrono, \"chrono\");\n        this.chrono = chrono;\n        this.years = years;\n        this.months = months;\n        this.days = days;\n    }"}
{"Number":"598","API Relative Path":"java.time.chrono.HijrahChronology.java-date(Era-int-int-int)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Obtains a local date in Hijrah calendar system from the\n     * era, year-of-era, month-of-year and day-of-month fields.\n     *\n     * @param era  the Hijrah era, not null\n     * @param yearOfEra  the year-of-era\n     * @param month  the month-of-year\n     * @param dayOfMonth  the day-of-month\n     * @return the Hijrah local date, not null\n     * @throws DateTimeException if unable to create the date\n     * @throws ClassCastException if the {@code era} is not a {@code HijrahEra}\n     */\n    @Override\n    public HijrahDate date(Era era, int yearOfEra, int month, int dayOfMonth) {\n        return date(prolepticYear(era, yearOfEra), month, dayOfMonth);\n    }"}
{"Number":"599","API Relative Path":"java.time.chrono.HijrahChronology.java-date(int-int-int)","Corresponding Source":"/**\n     * Obtains a local date in Hijrah calendar system from the\n     * proleptic-year, month-of-year and day-of-month fields.\n     *\n     * @param prolepticYear  the proleptic-year\n     * @param month  the month-of-year\n     * @param dayOfMonth  the day-of-month\n     * @return the Hijrah local date, not null\n     * @throws DateTimeException if unable to create the date\n     */\n    @Override\n    public HijrahDate date(int prolepticYear, int month, int dayOfMonth) {\n        return HijrahDate.of(this, prolepticYear, month, dayOfMonth);\n    }"}
{"Number":"600","API Relative Path":"java.time.chrono.HijrahChronology.java-dateYearDay(Era-int-int)","Corresponding Source":"/**\n     * Obtains a local date in Hijrah calendar system from the\n     * era, year-of-era and day-of-year fields.\n     *\n     * @param era  the Hijrah era, not null\n     * @param yearOfEra  the year-of-era\n     * @param dayOfYear  the day-of-year\n     * @return the Hijrah local date, not null\n     * @throws DateTimeException if unable to create the date\n     * @throws ClassCastException if the {@code era} is not a {@code HijrahEra}\n     */\n    @Override\n    public HijrahDate dateYearDay(Era era, int yearOfEra, int dayOfYear) {\n        return dateYearDay(prolepticYear(era, yearOfEra), dayOfYear);\n    }"}
{"Number":"601","API Relative Path":"java.time.chrono.HijrahChronology.java-dateYearDay(int-int)","Corresponding Source":"/**\n     * Obtains a local date in Hijrah calendar system from the\n     * proleptic-year and day-of-year fields.\n     *\n     * @param prolepticYear  the proleptic-year\n     * @param dayOfYear  the day-of-year\n     * @return the Hijrah local date, not null\n     * @throws DateTimeException if the value of the year is out of range,\n     *  or if the day-of-year is invalid for the year\n     */\n    @Override\n    public HijrahDate dateYearDay(int prolepticYear, int dayOfYear) {\n        HijrahDate date = HijrahDate.of(this, prolepticYear, 1, 1);\n        if (dayOfYear > date.lengthOfYear()) {\n            throw new DateTimeException(\"Invalid dayOfYear: \" + dayOfYear);\n        }\n        return date.plusDays(dayOfYear - 1);\n    }"}
{"Number":"602","API Relative Path":"java.time.chrono.HijrahChronology.java-getEpochDay(int-int-int)","Corresponding Source":"/**\n     * Return the epoch day computed from Hijrah year, month, and day.\n     *\n     * @param prolepticYear the year to represent, 0-origin\n     * @param monthOfYear the month-of-year to represent, 1-origin\n     * @param dayOfMonth the day-of-month to represent, 1-origin\n     * @return the epoch day\n     */\n    long getEpochDay(int prolepticYear, int monthOfYear, int dayOfMonth) {\n        checkCalendarInit();    // ensure that the chronology is initialized\n        checkValidMonth(monthOfYear);\n        int epochMonth = yearToEpochMonth(prolepticYear) + (monthOfYear - 1);\n        if (epochMonth < 0 || epochMonth >= hijrahEpochMonthStartDays.length) {\n            throw new DateTimeException(\"Invalid Hijrah date, year: \" +\n                    prolepticYear +  \", month: \" + monthOfYear);\n        }\n        if (dayOfMonth < 1 || dayOfMonth > getMonthLength(prolepticYear, monthOfYear)) {\n            throw new DateTimeException(\"Invalid Hijrah day of month: \" + dayOfMonth);\n        }\n        return epochMonthToEpochDay(epochMonth) + (dayOfMonth - 1);\n    }"}
{"Number":"603","API Relative Path":"java.time.chrono.HijrahChronology.java-getEpochDay(int-int-int)","Corresponding Source":"/**\n     * Return the epoch day computed from Hijrah year, month, and day.\n     *\n     * @param prolepticYear the year to represent, 0-origin\n     * @param monthOfYear the month-of-year to represent, 1-origin\n     * @param dayOfMonth the day-of-month to represent, 1-origin\n     * @return the epoch day\n     */\n    long getEpochDay(int prolepticYear, int monthOfYear, int dayOfMonth) {\n        checkCalendarInit();    // ensure that the chronology is initialized\n        checkValidMonth(monthOfYear);\n        int epochMonth = yearToEpochMonth(prolepticYear) + (monthOfYear - 1);\n        if (epochMonth < 0 || epochMonth >= hijrahEpochMonthStartDays.length) {\n            throw new DateTimeException(\"Invalid Hijrah date, year: \" +\n                    prolepticYear +  \", month: \" + monthOfYear);\n        }\n        if (dayOfMonth < 1 || dayOfMonth > getMonthLength(prolepticYear, monthOfYear)) {\n            throw new DateTimeException(\"Invalid Hijrah day of month: \" + dayOfMonth);\n        }\n        return epochMonthToEpochDay(epochMonth) + (dayOfMonth - 1);\n    }"}
{"Number":"604","API Relative Path":"java.time.chrono.HijrahChronology.java-getHijrahDateInfo(int)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Returns an array containing the Hijrah year, month and day\n     * computed from the epoch day.\n     *\n     * @param epochDay  the EpochDay\n     * @return int[0] = YEAR, int[1] = MONTH, int[2] = DATE\n     */\n    int[] getHijrahDateInfo(int epochDay) {\n        checkCalendarInit();    // ensure that the chronology is initialized\n        if (epochDay < minEpochDay || epochDay >= maxEpochDay) {\n            throw new DateTimeException(\"Hijrah date out of range\");\n        }\n\n        int epochMonth = epochDayToEpochMonth(epochDay);\n        int year = epochMonthToYear(epochMonth);\n        int month = epochMonthToMonth(epochMonth);\n        int day1 = epochMonthToEpochDay(epochMonth);\n        int date = epochDay - day1; // epochDay - dayOfEpoch(year, month);\n\n        int dateInfo[] = new int[3];\n        dateInfo[0] = year;\n        dateInfo[1] = month + 1; // change to 1-based.\n        dateInfo[2] = date + 1; // change to 1-based.\n        return dateInfo;\n    }"}
{"Number":"605","API Relative Path":"java.time.chrono.HijrahDate.java-of(HijrahChronology-int-int-int)","Corresponding Source":"//-------------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@code HijrahDate} from the Hijrah proleptic year,\n     * month-of-year and day-of-month.\n     *\n     * @param prolepticYear  the proleptic year to represent in the Hijrah calendar\n     * @param monthOfYear  the month-of-year to represent, from 1 to 12\n     * @param dayOfMonth  the day-of-month to represent, from 1 to 30\n     * @return the Hijrah date, never null\n     * @throws DateTimeException if the value of any field is out of range\n     */\n    static HijrahDate of(HijrahChronology chrono, int prolepticYear, int monthOfYear, int dayOfMonth) {\n        return new HijrahDate(chrono, prolepticYear, monthOfYear, dayOfMonth);\n    }"}
{"Number":"606","API Relative Path":"java.time.chrono.HijrahDate.java-of(HijrahChronology-int-int-int)","Corresponding Source":"//-------------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@code HijrahDate} from the Hijrah proleptic year,\n     * month-of-year and day-of-month.\n     *\n     * @param prolepticYear  the proleptic year to represent in the Hijrah calendar\n     * @param monthOfYear  the month-of-year to represent, from 1 to 12\n     * @param dayOfMonth  the day-of-month to represent, from 1 to 30\n     * @return the Hijrah date, never null\n     * @throws DateTimeException if the value of any field is out of range\n     */\n    static HijrahDate of(HijrahChronology chrono, int prolepticYear, int monthOfYear, int dayOfMonth) {\n        return new HijrahDate(chrono, prolepticYear, monthOfYear, dayOfMonth);\n    }"}
{"Number":"607","API Relative Path":"java.time.chrono.IsoChronology.java-date(Era-int-int-int)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Obtains an ISO local date from the era, year-of-era, month-of-year\n     * and day-of-month fields.\n     *\n     * @param era  the ISO era, not null\n     * @param yearOfEra  the ISO year-of-era\n     * @param month  the ISO month-of-year\n     * @param dayOfMonth  the ISO day-of-month\n     * @return the ISO local date, not null\n     * @throws DateTimeException if unable to create the date\n     * @throws ClassCastException if the type of {@code era} is not {@code IsoEra}\n     */\n    @Override  // override with covariant return type\n    public LocalDate date(Era era, int yearOfEra, int month, int dayOfMonth) {\n        return date(prolepticYear(era, yearOfEra), month, dayOfMonth);\n    }"}
{"Number":"608","API Relative Path":"java.time.chrono.IsoChronology.java-date(int-int-int)","Corresponding Source":"/**\n     * Obtains an ISO local date from the proleptic-year, month-of-year\n     * and day-of-month fields.\n     * <p>\n     * This is equivalent to {@link LocalDate#of(int, int, int)}.\n     *\n     * @param prolepticYear  the ISO proleptic-year\n     * @param month  the ISO month-of-year\n     * @param dayOfMonth  the ISO day-of-month\n     * @return the ISO local date, not null\n     * @throws DateTimeException if unable to create the date\n     */\n    @Override  // override with covariant return type\n    public LocalDate date(int prolepticYear, int month, int dayOfMonth) {\n        return LocalDate.of(prolepticYear, month, dayOfMonth);\n    }"}
{"Number":"609","API Relative Path":"java.time.chrono.IsoChronology.java-date(int-int-int)","Corresponding Source":"/**\n     * Obtains an ISO local date from the proleptic-year, month-of-year\n     * and day-of-month fields.\n     * <p>\n     * This is equivalent to {@link LocalDate#of(int, int, int)}.\n     *\n     * @param prolepticYear  the ISO proleptic-year\n     * @param month  the ISO month-of-year\n     * @param dayOfMonth  the ISO day-of-month\n     * @return the ISO local date, not null\n     * @throws DateTimeException if unable to create the date\n     */\n    @Override  // override with covariant return type\n    public LocalDate date(int prolepticYear, int month, int dayOfMonth) {\n        return LocalDate.of(prolepticYear, month, dayOfMonth);\n    }"}
{"Number":"610","API Relative Path":"java.time.chrono.IsoChronology.java-dateNow(ZoneId)","Corresponding Source":"/**\n     * Obtains the current ISO local date from the system clock in the specified time-zone.\n     * <p>\n     * This will query the {@link Clock#system(ZoneId) system clock} to obtain the current date.\n     * Specifying the time-zone avoids dependence on the default time-zone.\n     * <p>\n     * Using this method will prevent the ability to use an alternate clock for testing\n     * because the clock is hard-coded.\n     *\n     * @return the current ISO local date using the system clock, not null\n     * @throws DateTimeException if unable to create the date\n     */\n    @Override  // override with covariant return type\n    public LocalDate dateNow(ZoneId zone) {\n        return dateNow(Clock.system(zone));\n    }"}
{"Number":"611","API Relative Path":"java.time.chrono.IsoChronology.java-dateYearDay(Era-int-int)","Corresponding Source":"/**\n     * Obtains an ISO local date from the era, year-of-era and day-of-year fields.\n     *\n     * @param era  the ISO era, not null\n     * @param yearOfEra  the ISO year-of-era\n     * @param dayOfYear  the ISO day-of-year\n     * @return the ISO local date, not null\n     * @throws DateTimeException if unable to create the date\n     */\n    @Override  // override with covariant return type\n    public LocalDate dateYearDay(Era era, int yearOfEra, int dayOfYear) {\n        return dateYearDay(prolepticYear(era, yearOfEra), dayOfYear);\n    }"}
{"Number":"612","API Relative Path":"java.time.chrono.IsoChronology.java-dateYearDay(int-int)","Corresponding Source":"/**\n     * Obtains an ISO local date from the proleptic-year and day-of-year fields.\n     * <p>\n     * This is equivalent to {@link LocalDate#ofYearDay(int, int)}.\n     *\n     * @param prolepticYear  the ISO proleptic-year\n     * @param dayOfYear  the ISO day-of-year\n     * @return the ISO local date, not null\n     * @throws DateTimeException if unable to create the date\n     */\n    @Override  // override with covariant return type\n    public LocalDate dateYearDay(int prolepticYear, int dayOfYear) {\n        return LocalDate.ofYearDay(prolepticYear, dayOfYear);\n    }"}
{"Number":"613","API Relative Path":"java.time.chrono.JapaneseChronology.java-date(Era-int-int-int)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Obtains a local date in Japanese calendar system from the\n     * era, year-of-era, month-of-year and day-of-month fields.\n     * <p>\n     * The Japanese month and day-of-month are the same as those in the\n     * ISO calendar system. They are not reset when the era changes.\n     * For example:\n     * <pre>\n     *  6th Jan Showa 64 = ISO 1989-01-06\n     *  7th Jan Showa 64 = ISO 1989-01-07\n     *  8th Jan Heisei 1 = ISO 1989-01-08\n     *  9th Jan Heisei 1 = ISO 1989-01-09\n     * <\/pre>\n     *\n     * @param era  the Japanese era, not null\n     * @param yearOfEra  the year-of-era\n     * @param month  the month-of-year\n     * @param dayOfMonth  the day-of-month\n     * @return the Japanese local date, not null\n     * @throws DateTimeException if unable to create the date\n     * @throws ClassCastException if the {@code era} is not a {@code JapaneseEra}\n     */\n    @Override\n    public JapaneseDate date(Era era, int yearOfEra, int month, int dayOfMonth) {\n        if (era instanceof JapaneseEra == false) {\n            throw new ClassCastException(\"Era must be JapaneseEra\");\n        }\n        return JapaneseDate.of((JapaneseEra) era, yearOfEra, month, dayOfMonth);\n    }"}
{"Number":"614","API Relative Path":"java.time.chrono.JapaneseChronology.java-date(int-int-int)","Corresponding Source":"/**\n     * Obtains a local date in Japanese calendar system from the\n     * proleptic-year, month-of-year and day-of-month fields.\n     * <p>\n     * The Japanese proleptic year, month and day-of-month are the same as those\n     * in the ISO calendar system. They are not reset when the era changes.\n     *\n     * @param prolepticYear  the proleptic-year\n     * @param month  the month-of-year\n     * @param dayOfMonth  the day-of-month\n     * @return the Japanese local date, not null\n     * @throws DateTimeException if unable to create the date\n     */\n    @Override\n    public JapaneseDate date(int prolepticYear, int month, int dayOfMonth) {\n        return new JapaneseDate(LocalDate.of(prolepticYear, month, dayOfMonth));\n    }"}
{"Number":"615","API Relative Path":"java.time.chrono.JapaneseChronology.java-date(int-int-int)","Corresponding Source":"/**\n     * Obtains a local date in Japanese calendar system from the\n     * proleptic-year, month-of-year and day-of-month fields.\n     * <p>\n     * The Japanese proleptic year, month and day-of-month are the same as those\n     * in the ISO calendar system. They are not reset when the era changes.\n     *\n     * @param prolepticYear  the proleptic-year\n     * @param month  the month-of-year\n     * @param dayOfMonth  the day-of-month\n     * @return the Japanese local date, not null\n     * @throws DateTimeException if unable to create the date\n     */\n    @Override\n    public JapaneseDate date(int prolepticYear, int month, int dayOfMonth) {\n        return new JapaneseDate(LocalDate.of(prolepticYear, month, dayOfMonth));\n    }"}
{"Number":"616","API Relative Path":"java.time.chrono.JapaneseChronology.java-dateYearDay(int-int)","Corresponding Source":"/**\n     * Obtains a local date in Japanese calendar system from the\n     * proleptic-year and day-of-year fields.\n     * <p>\n     * The day-of-year in this factory is expressed relative to the start of the proleptic year.\n     * The Japanese proleptic year and day-of-year are the same as those in the ISO calendar system.\n     * They are not reset when the era changes.\n     *\n     * @param prolepticYear  the proleptic-year\n     * @param dayOfYear  the day-of-year\n     * @return the Japanese local date, not null\n     * @throws DateTimeException if unable to create the date\n     */\n    @Override\n    public JapaneseDate dateYearDay(int prolepticYear, int dayOfYear) {\n        return new JapaneseDate(LocalDate.ofYearDay(prolepticYear, dayOfYear));\n    }"}
{"Number":"617","API Relative Path":"java.time.chrono.JapaneseChronology.java-eraOf(int)","Corresponding Source":"/**\n     * Returns the calendar system era object from the given numeric value.\n     *\n     * See the description of each Era for the numeric values of:\n     * {@link JapaneseEra#HEISEI}, {@link JapaneseEra#SHOWA},{@link JapaneseEra#TAISHO},\n     * {@link JapaneseEra#MEIJI}), only Meiji and later eras are supported.\n     *\n     * @param eraValue  the era value\n     * @return the Japanese {@code Era} for the given numeric era value\n     * @throws DateTimeException if {@code eraValue} is invalid\n     */\n    @Override\n    public JapaneseEra eraOf(int eraValue) {\n        return JapaneseEra.of(eraValue);\n    }"}
{"Number":"618","API Relative Path":"java.time.chrono.JapaneseEra.java-of(int)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@code JapaneseEra} from an {@code int} value.\n     * <p>\n     * The {@link #SHOWA} era that contains 1970-01-01 (ISO calendar system) has the value 1\n     * Later era is numbered 2 ({@link #HEISEI}). Earlier eras are numbered 0 ({@link #TAISHO}),\n     * -1 ({@link #MEIJI}), only Meiji and later eras are supported.\n     *\n     * @param japaneseEra  the era to represent\n     * @return the {@code JapaneseEra} singleton, not null\n     * @throws DateTimeException if the value is invalid\n     */\n    public static JapaneseEra of(int japaneseEra) {\n        if (japaneseEra < MEIJI.eraValue || japaneseEra + ERA_OFFSET > KNOWN_ERAS.length) {\n            throw new DateTimeException(\"Invalid era: \" + japaneseEra);\n        }\n        return KNOWN_ERAS[ordinal(japaneseEra)];\n    }"}
{"Number":"619","API Relative Path":"java.time.chrono.MinguoChronology.java-date(Era-int-int-int)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Obtains a local date in Minguo calendar system from the\n     * era, year-of-era, month-of-year and day-of-month fields.\n     *\n     * @param era  the Minguo era, not null\n     * @param yearOfEra  the year-of-era\n     * @param month  the month-of-year\n     * @param dayOfMonth  the day-of-month\n     * @return the Minguo local date, not null\n     * @throws DateTimeException if unable to create the date\n     * @throws ClassCastException if the {@code era} is not a {@code MinguoEra}\n     */\n    @Override\n    public MinguoDate date(Era era, int yearOfEra, int month, int dayOfMonth) {\n        return date(prolepticYear(era, yearOfEra), month, dayOfMonth);\n    }"}
{"Number":"620","API Relative Path":"java.time.chrono.MinguoChronology.java-date(int-int-int)","Corresponding Source":"/**\n     * Obtains a local date in Minguo calendar system from the\n     * proleptic-year, month-of-year and day-of-month fields.\n     *\n     * @param prolepticYear  the proleptic-year\n     * @param month  the month-of-year\n     * @param dayOfMonth  the day-of-month\n     * @return the Minguo local date, not null\n     * @throws DateTimeException if unable to create the date\n     */\n    @Override\n    public MinguoDate date(int prolepticYear, int month, int dayOfMonth) {\n        return new MinguoDate(LocalDate.of(prolepticYear + YEARS_DIFFERENCE, month, dayOfMonth));\n    }"}
{"Number":"621","API Relative Path":"java.time.chrono.MinguoChronology.java-date(int-int-int)","Corresponding Source":"/**\n     * Obtains a local date in Minguo calendar system from the\n     * proleptic-year, month-of-year and day-of-month fields.\n     *\n     * @param prolepticYear  the proleptic-year\n     * @param month  the month-of-year\n     * @param dayOfMonth  the day-of-month\n     * @return the Minguo local date, not null\n     * @throws DateTimeException if unable to create the date\n     */\n    @Override\n    public MinguoDate date(int prolepticYear, int month, int dayOfMonth) {\n        return new MinguoDate(LocalDate.of(prolepticYear + YEARS_DIFFERENCE, month, dayOfMonth));\n    }"}
{"Number":"622","API Relative Path":"java.time.chrono.MinguoChronology.java-dateYearDay(Era-int-int)","Corresponding Source":"/**\n     * Obtains a local date in Minguo calendar system from the\n     * era, year-of-era and day-of-year fields.\n     *\n     * @param era  the Minguo era, not null\n     * @param yearOfEra  the year-of-era\n     * @param dayOfYear  the day-of-year\n     * @return the Minguo local date, not null\n     * @throws DateTimeException if unable to create the date\n     * @throws ClassCastException if the {@code era} is not a {@code MinguoEra}\n     */\n    @Override\n    public MinguoDate dateYearDay(Era era, int yearOfEra, int dayOfYear) {\n        return dateYearDay(prolepticYear(era, yearOfEra), dayOfYear);\n    }"}
{"Number":"623","API Relative Path":"java.time.chrono.MinguoChronology.java-dateYearDay(int-int)","Corresponding Source":"/**\n     * Obtains a local date in Minguo calendar system from the\n     * proleptic-year and day-of-year fields.\n     *\n     * @param prolepticYear  the proleptic-year\n     * @param dayOfYear  the day-of-year\n     * @return the Minguo local date, not null\n     * @throws DateTimeException if unable to create the date\n     */\n    @Override\n    public MinguoDate dateYearDay(int prolepticYear, int dayOfYear) {\n        return new MinguoDate(LocalDate.ofYearDay(prolepticYear + YEARS_DIFFERENCE, dayOfYear));\n    }"}
{"Number":"624","API Relative Path":"java.time.chrono.ThaiBuddhistChronology.java-date(Era-int-int-int)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Obtains a local date in Thai Buddhist calendar system from the\n     * era, year-of-era, month-of-year and day-of-month fields.\n     *\n     * @param era  the Thai Buddhist era, not null\n     * @param yearOfEra  the year-of-era\n     * @param month  the month-of-year\n     * @param dayOfMonth  the day-of-month\n     * @return the Thai Buddhist local date, not null\n     * @throws DateTimeException if unable to create the date\n     * @throws ClassCastException if the {@code era} is not a {@code ThaiBuddhistEra}\n     */\n    @Override\n    public ThaiBuddhistDate date(Era era, int yearOfEra, int month, int dayOfMonth) {\n        return date(prolepticYear(era, yearOfEra), month, dayOfMonth);\n    }"}
{"Number":"625","API Relative Path":"java.time.chrono.ThaiBuddhistChronology.java-date(int-int-int)","Corresponding Source":"/**\n     * Obtains a local date in Thai Buddhist calendar system from the\n     * proleptic-year, month-of-year and day-of-month fields.\n     *\n     * @param prolepticYear  the proleptic-year\n     * @param month  the month-of-year\n     * @param dayOfMonth  the day-of-month\n     * @return the Thai Buddhist local date, not null\n     * @throws DateTimeException if unable to create the date\n     */\n    @Override\n    public ThaiBuddhistDate date(int prolepticYear, int month, int dayOfMonth) {\n        return new ThaiBuddhistDate(LocalDate.of(prolepticYear - YEARS_DIFFERENCE, month, dayOfMonth));\n    }"}
{"Number":"626","API Relative Path":"java.time.chrono.ThaiBuddhistChronology.java-date(int-int-int)","Corresponding Source":"/**\n     * Obtains a local date in Thai Buddhist calendar system from the\n     * proleptic-year, month-of-year and day-of-month fields.\n     *\n     * @param prolepticYear  the proleptic-year\n     * @param month  the month-of-year\n     * @param dayOfMonth  the day-of-month\n     * @return the Thai Buddhist local date, not null\n     * @throws DateTimeException if unable to create the date\n     */\n    @Override\n    public ThaiBuddhistDate date(int prolepticYear, int month, int dayOfMonth) {\n        return new ThaiBuddhistDate(LocalDate.of(prolepticYear - YEARS_DIFFERENCE, month, dayOfMonth));\n    }"}
{"Number":"627","API Relative Path":"java.time.chrono.ThaiBuddhistChronology.java-dateYearDay(Era-int-int)","Corresponding Source":"/**\n     * Obtains a local date in Thai Buddhist calendar system from the\n     * era, year-of-era and day-of-year fields.\n     *\n     * @param era  the Thai Buddhist era, not null\n     * @param yearOfEra  the year-of-era\n     * @param dayOfYear  the day-of-year\n     * @return the Thai Buddhist local date, not null\n     * @throws DateTimeException if unable to create the date\n     * @throws ClassCastException if the {@code era} is not a {@code ThaiBuddhistEra}\n     */\n    @Override\n    public ThaiBuddhistDate dateYearDay(Era era, int yearOfEra, int dayOfYear) {\n        return dateYearDay(prolepticYear(era, yearOfEra), dayOfYear);\n    }"}
{"Number":"628","API Relative Path":"java.time.chrono.ThaiBuddhistChronology.java-dateYearDay(int-int)","Corresponding Source":"/**\n     * Obtains a local date in Thai Buddhist calendar system from the\n     * proleptic-year and day-of-year fields.\n     *\n     * @param prolepticYear  the proleptic-year\n     * @param dayOfYear  the day-of-year\n     * @return the Thai Buddhist local date, not null\n     * @throws DateTimeException if unable to create the date\n     */\n    @Override\n    public ThaiBuddhistDate dateYearDay(int prolepticYear, int dayOfYear) {\n        return new ThaiBuddhistDate(LocalDate.ofYearDay(prolepticYear - YEARS_DIFFERENCE, dayOfYear));\n    }"}
{"Number":"629","API Relative Path":"java.time.Duration.java-dividedBy(long)","Corresponding Source":"/**\n     * Returns a copy of this duration divided by the specified value.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param divisor  the value to divide the duration by, positive or negative, not zero\n     * @return a {@code Duration} based on this duration divided by the specified divisor, not null\n     * @throws ArithmeticException if the divisor is zero or if numeric overflow occurs\n     */\n    public Duration dividedBy(long divisor) {\n        if (divisor == 0) {\n            throw new ArithmeticException(\"Cannot divide by zero\");\n        }\n        if (divisor == 1) {\n            return this;\n        }\n        return create(toSeconds().divide(BigDecimal.valueOf(divisor), RoundingMode.DOWN));\n     }"}
{"Number":"630","API Relative Path":"java.time.Duration.java-get(TemporalUnit)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Gets the value of the requested unit.\n     * <p>\n     * This returns a value for each of the two supported units,\n     * {@link ChronoUnit#SECONDS SECONDS} and {@link ChronoUnit#NANOS NANOS}.\n     * All other units throw an exception.\n     *\n     * @param unit the {@code TemporalUnit} for which to return the value\n     * @return the long value of the unit\n     * @throws DateTimeException if the unit is not supported\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     */\n    @Override\n    public long get(TemporalUnit unit) {\n        if (unit == SECONDS) {\n            return seconds;\n        } else if (unit == NANOS) {\n            return nanos;\n        } else {\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n    }"}
{"Number":"631","API Relative Path":"java.time.Duration.java-of(long-TemporalUnit)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Obtains a {@code Duration} representing an amount in the specified unit.\n     * <p>\n     * The parameters represent the two parts of a phrase like '6 Hours'. For example:\n     * <pre>\n     *  Duration.of(3, SECONDS);\n     *  Duration.of(465, HOURS);\n     * <\/pre>\n     * Only a subset of units are accepted by this method.\n     * The unit must either have an {@linkplain TemporalUnit#isDurationEstimated() exact duration} or\n     * be {@link ChronoUnit#DAYS} which is treated as 24 hours. Other units throw an exception.\n     *\n     * @param amount  the amount of the duration, measured in terms of the unit, positive or negative\n     * @param unit  the unit that the duration is measured in, must have an exact duration, not null\n     * @return a {@code Duration}, not null\n     * @throws DateTimeException if the period unit has an estimated duration\n     * @throws ArithmeticException if a numeric overflow occurs\n     */\n    public static Duration of(long amount, TemporalUnit unit) {\n        return ZERO.plus(amount, unit);\n    }"}
{"Number":"632","API Relative Path":"java.time.Duration.java-ofDays(long)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Obtains a {@code Duration} representing a number of standard 24 hour days.\n     * <p>\n     * The seconds are calculated based on the standard definition of a day,\n     * where each day is 86400 seconds which implies a 24 hour day.\n     * The nanosecond in second field is set to zero.\n     *\n     * @param days  the number of days, positive or negative\n     * @return a {@code Duration}, not null\n     * @throws ArithmeticException if the input days exceeds the capacity of {@code Duration}\n     */\n    public static Duration ofDays(long days) {\n        return create(Math.multiplyExact(days, SECONDS_PER_DAY), 0);\n    }"}
{"Number":"633","API Relative Path":"java.time.Duration.java-ofHours(long)","Corresponding Source":"/**\n     * Obtains a {@code Duration} representing a number of standard hours.\n     * <p>\n     * The seconds are calculated based on the standard definition of an hour,\n     * where each hour is 3600 seconds.\n     * The nanosecond in second field is set to zero.\n     *\n     * @param hours  the number of hours, positive or negative\n     * @return a {@code Duration}, not null\n     * @throws ArithmeticException if the input hours exceeds the capacity of {@code Duration}\n     */\n    public static Duration ofHours(long hours) {\n        return create(Math.multiplyExact(hours, SECONDS_PER_HOUR), 0);\n    }"}
{"Number":"634","API Relative Path":"java.time.Duration.java-ofMinutes(long)","Corresponding Source":"/**\n     * Obtains a {@code Duration} representing a number of standard minutes.\n     * <p>\n     * The seconds are calculated based on the standard definition of a minute,\n     * where each minute is 60 seconds.\n     * The nanosecond in second field is set to zero.\n     *\n     * @param minutes  the number of minutes, positive or negative\n     * @return a {@code Duration}, not null\n     * @throws ArithmeticException if the input minutes exceeds the capacity of {@code Duration}\n     */\n    public static Duration ofMinutes(long minutes) {\n        return create(Math.multiplyExact(minutes, SECONDS_PER_MINUTE), 0);\n    }"}
{"Number":"635","API Relative Path":"java.time.Duration.java-ofSeconds(long-long)","Corresponding Source":"/**\n     * Obtains a {@code Duration} representing a number of seconds and an\n     * adjustment in nanoseconds.\n     * <p>\n     * This method allows an arbitrary number of nanoseconds to be passed in.\n     * The factory will alter the values of the second and nanosecond in order\n     * to ensure that the stored nanosecond is in the range 0 to 999,999,999.\n     * For example, the following will result in the exactly the same duration:\n     * <pre>\n     *  Duration.ofSeconds(3, 1);\n     *  Duration.ofSeconds(4, -999_999_999);\n     *  Duration.ofSeconds(2, 1000_000_001);\n     * <\/pre>\n     *\n     * @param seconds  the number of seconds, positive or negative\n     * @param nanoAdjustment  the nanosecond adjustment to the number of seconds, positive or negative\n     * @return a {@code Duration}, not null\n     * @throws ArithmeticException if the adjustment causes the seconds to exceed the capacity of {@code Duration}\n     */\n    public static Duration ofSeconds(long seconds, long nanoAdjustment) {\n        long secs = Math.addExact(seconds, Math.floorDiv(nanoAdjustment, NANOS_PER_SECOND));\n        int nos = (int) Math.floorMod(nanoAdjustment, NANOS_PER_SECOND);\n        return create(secs, nos);\n    }"}
{"Number":"636","API Relative Path":"java.time.Duration.java-plus(long-TemporalUnit)","Corresponding Source":"/**\n     * Returns a copy of this duration with the specified duration added.\n     * <p>\n     * The duration amount is measured in terms of the specified unit.\n     * Only a subset of units are accepted by this method.\n     * The unit must either have an {@linkplain TemporalUnit#isDurationEstimated() exact duration} or\n     * be {@link ChronoUnit#DAYS} which is treated as 24 hours. Other units throw an exception.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param amountToAdd  the amount to add, measured in terms of the unit, positive or negative\n     * @param unit  the unit that the amount is measured in, must have an exact duration, not null\n     * @return a {@code Duration} based on this duration with the specified duration added, not null\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    public Duration plus(long amountToAdd, TemporalUnit unit) {\n        Objects.requireNonNull(unit, \"unit\");\n        if (unit == DAYS) {\n            return plus(Math.multiplyExact(amountToAdd, SECONDS_PER_DAY), 0);\n        }\n        if (unit.isDurationEstimated()) {\n            throw new UnsupportedTemporalTypeException(\"Unit must not have an estimated duration\");\n        }\n        if (amountToAdd == 0) {\n            return this;\n        }\n        if (unit instanceof ChronoUnit) {\n            switch ((ChronoUnit) unit) {\n                case NANOS: return plusNanos(amountToAdd);\n                case MICROS: return plusSeconds((amountToAdd / (1000_000L * 1000)) * 1000).plusNanos((amountToAdd % (1000_000L * 1000)) * 1000);\n                case MILLIS: return plusMillis(amountToAdd);\n                case SECONDS: return plusSeconds(amountToAdd);\n            }\n            return plusSeconds(Math.multiplyExact(unit.getDuration().seconds, amountToAdd));\n        }\n        Duration duration = unit.getDuration().multipliedBy(amountToAdd);\n        return plusSeconds(duration.getSeconds()).plusNanos(duration.getNano());\n    }"}
{"Number":"637","API Relative Path":"java.time.Duration.java-plus(long-TemporalUnit)","Corresponding Source":"/**\n     * Returns a copy of this duration with the specified duration added.\n     * <p>\n     * The duration amount is measured in terms of the specified unit.\n     * Only a subset of units are accepted by this method.\n     * The unit must either have an {@linkplain TemporalUnit#isDurationEstimated() exact duration} or\n     * be {@link ChronoUnit#DAYS} which is treated as 24 hours. Other units throw an exception.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param amountToAdd  the amount to add, measured in terms of the unit, positive or negative\n     * @param unit  the unit that the amount is measured in, must have an exact duration, not null\n     * @return a {@code Duration} based on this duration with the specified duration added, not null\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    public Duration plus(long amountToAdd, TemporalUnit unit) {\n        Objects.requireNonNull(unit, \"unit\");\n        if (unit == DAYS) {\n            return plus(Math.multiplyExact(amountToAdd, SECONDS_PER_DAY), 0);\n        }\n        if (unit.isDurationEstimated()) {\n            throw new UnsupportedTemporalTypeException(\"Unit must not have an estimated duration\");\n        }\n        if (amountToAdd == 0) {\n            return this;\n        }\n        if (unit instanceof ChronoUnit) {\n            switch ((ChronoUnit) unit) {\n                case NANOS: return plusNanos(amountToAdd);\n                case MICROS: return plusSeconds((amountToAdd / (1000_000L * 1000)) * 1000).plusNanos((amountToAdd % (1000_000L * 1000)) * 1000);\n                case MILLIS: return plusMillis(amountToAdd);\n                case SECONDS: return plusSeconds(amountToAdd);\n            }\n            return plusSeconds(Math.multiplyExact(unit.getDuration().seconds, amountToAdd));\n        }\n        Duration duration = unit.getDuration().multipliedBy(amountToAdd);\n        return plusSeconds(duration.getSeconds()).plusNanos(duration.getNano());\n    }"}
{"Number":"638","API Relative Path":"java.time.Duration.java-plusDays(long)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this duration with the specified duration in standard 24 hour days added.\n     * <p>\n     * The number of days is multiplied by 86400 to obtain the number of seconds to add.\n     * This is based on the standard definition of a day as 24 hours.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param daysToAdd  the days to add, positive or negative\n     * @return a {@code Duration} based on this duration with the specified days added, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    public Duration plusDays(long daysToAdd) {\n        return plus(Math.multiplyExact(daysToAdd, SECONDS_PER_DAY), 0);\n    }"}
{"Number":"639","API Relative Path":"java.time.Duration.java-plusHours(long)","Corresponding Source":"/**\n     * Returns a copy of this duration with the specified duration in hours added.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param hoursToAdd  the hours to add, positive or negative\n     * @return a {@code Duration} based on this duration with the specified hours added, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    public Duration plusHours(long hoursToAdd) {\n        return plus(Math.multiplyExact(hoursToAdd, SECONDS_PER_HOUR), 0);\n    }"}
{"Number":"640","API Relative Path":"java.time.Duration.java-plusMinutes(long)","Corresponding Source":"/**\n     * Returns a copy of this duration with the specified duration in minutes added.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param minutesToAdd  the minutes to add, positive or negative\n     * @return a {@code Duration} based on this duration with the specified minutes added, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    public Duration plusMinutes(long minutesToAdd) {\n        return plus(Math.multiplyExact(minutesToAdd, SECONDS_PER_MINUTE), 0);\n    }"}
{"Number":"641","API Relative Path":"java.time.Duration.java-plusSeconds(long)","Corresponding Source":"/**\n     * Returns a copy of this duration with the specified duration in seconds added.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param secondsToAdd  the seconds to add, positive or negative\n     * @return a {@code Duration} based on this duration with the specified seconds added, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    public Duration plusSeconds(long secondsToAdd) {\n        return plus(secondsToAdd, 0);\n    }"}
{"Number":"642","API Relative Path":"java.time.format.DateTimeFormatter.java-ofLocalizedDateTime(FormatStyle-FormatStyle)","Corresponding Source":"/**\n     * Returns a locale specific date and time format for the ISO chronology.\n     * <p>\n     * This returns a formatter that will format or parse a date-time.\n     * The exact format pattern used varies by locale.\n     * <p>\n     * The locale is determined from the formatter. The formatter returned directly by\n     * this method will use the {@link Locale#getDefault() default FORMAT locale}.\n     * The locale can be controlled using {@link DateTimeFormatter#withLocale(Locale) withLocale(Locale)}\n     * on the result of this method.\n     * <p>\n     * Note that the localized pattern is looked up lazily.\n     * This {@code DateTimeFormatter} holds the style required and the locale,\n     * looking up the pattern required on demand.\n     * <p>\n     * The returned formatter has a chronology of ISO set to ensure dates in\n     * other calendar systems are correctly converted.\n     * It has no override zone and uses the {@link ResolverStyle#SMART SMART} resolver style.\n     *\n     * @param dateStyle  the date formatter style to obtain, not null\n     * @param timeStyle  the time formatter style to obtain, not null\n     * @return the date, time or date-time formatter, not null\n     */\n    public static DateTimeFormatter ofLocalizedDateTime(FormatStyle dateStyle, FormatStyle timeStyle) {\n        Objects.requireNonNull(dateStyle, \"dateStyle\");\n        Objects.requireNonNull(timeStyle, \"timeStyle\");\n        return new DateTimeFormatterBuilder().appendLocalized(dateStyle, timeStyle)\n                .toFormatter(ResolverStyle.SMART, IsoChronology.INSTANCE);\n    }"}
{"Number":"643","API Relative Path":"java.time.format.DateTimeFormatter.java-parseBest(CharSequence-TemporalQuery)","Corresponding Source":"/**\n     * Fully parses the text producing an object of one of the specified types.\n     * <p>\n     * This parse method is convenient for use when the parser can handle optional elements.\n     * For example, a pattern of 'uuuu-MM-dd HH.mm[ VV]' can be fully parsed to a {@code ZonedDateTime},\n     * or partially parsed to a {@code LocalDateTime}.\n     * The queries must be specified in order, starting from the best matching full-parse option\n     * and ending with the worst matching minimal parse option.\n     * The query is typically a method reference to a {@code from(TemporalAccessor)} method.\n     * <p>\n     * The result is associated with the first type that successfully parses.\n     * Normally, applications will use {@code instanceof} to check the result.\n     * For example:\n     * <pre>\n     *  TemporalAccessor dt = parser.parseBest(str, ZonedDateTime::from, LocalDateTime::from);\n     *  if (dt instanceof ZonedDateTime) {\n     *   ...\n     *  } else {\n     *   ...\n     *  }\n     * <\/pre>\n     * If the parse completes without reading the entire length of the text,\n     * or a problem occurs during parsing or merging, then an exception is thrown.\n     *\n     * @param text  the text to parse, not null\n     * @param queries  the queries defining the types to attempt to parse to,\n     *  must implement {@code TemporalAccessor}, not null\n     * @return the parsed date-time, not null\n     * @throws IllegalArgumentException if less than 2 types are specified\n     * @throws DateTimeParseException if unable to parse the requested result\n     */\n    public TemporalAccessor parseBest(CharSequence text, TemporalQuery<?>... queries) {\n        Objects.requireNonNull(text, \"text\");\n        Objects.requireNonNull(queries, \"queries\");\n        if (queries.length < 2) {\n            throw new IllegalArgumentException(\"At least two queries must be specified\");\n        }\n        try {\n            TemporalAccessor resolved = parseResolved0(text, null);\n            for (TemporalQuery<?> query : queries) {\n                try {\n                    return (TemporalAccessor) resolved.query(query);\n                } catch (RuntimeException ex) {\n                    // continue\n                }\n            }\n            throw new DateTimeException(\"Unable to convert parsed text using any of the specified queries\");\n        } catch (DateTimeParseException ex) {\n            throw ex;\n        } catch (RuntimeException ex) {\n            throw createError(text, ex);\n        }\n    }"}
{"Number":"644","API Relative Path":"java.time.format.DateTimeFormatterBuilder.java-appendInstant(int)","Corresponding Source":"/**\n     * Appends an instant using ISO-8601 to the formatter with control over\n     * the number of fractional digits.\n     * <p>\n     * Instants have a fixed output format, although this method provides some\n     * control over the fractional digits. They are converted to a date-time\n     * with a zone-offset of UTC and printed using the standard ISO-8601 format.\n     * The localized decimal style is not used.\n     * <p>\n     * The {@code fractionalDigits} parameter allows the output of the fractional\n     * second to be controlled. Specifying zero will cause no fractional digits\n     * to be output. From 1 to 9 will output an increasing number of digits, using\n     * zero right-padding if necessary. The special value -1 is used to output as\n     * many digits as necessary to avoid any trailing zeroes.\n     * <p>\n     * When parsing in strict mode, the number of parsed digits must match the\n     * fractional digits. When parsing in lenient mode, any number of fractional\n     * digits from zero to nine are accepted.\n     * <p>\n     * The instant is obtained using {@link ChronoField#INSTANT_SECONDS INSTANT_SECONDS}\n     * and optionally (@code NANO_OF_SECOND). The value of {@code INSTANT_SECONDS}\n     * may be outside the maximum range of {@code LocalDateTime}.\n     * <p>\n     * The {@linkplain ResolverStyle resolver style} has no effect on instant parsing.\n     * The end-of-day time of '24:00' is handled as midnight at the start of the following day.\n     * The leap-second time of '23:59:60' is handled to some degree, see\n     * {@link DateTimeFormatter#parsedLeapSecond()} for full details.\n     * <p>\n     * An alternative to this method is to format/parse the instant as a single\n     * epoch-seconds value. That is achieved using {@code appendValue(INSTANT_SECONDS)}.\n     *\n     * @param fractionalDigits  the number of fractional second digits to format with,\n     *  from 0 to 9, or -1 to use as many digits as necessary\n     * @return this, for chaining, not null\n     */\n    public DateTimeFormatterBuilder appendInstant(int fractionalDigits) {\n        if (fractionalDigits < -1 || fractionalDigits > 9) {\n            throw new IllegalArgumentException(\"The fractional digits must be from -1 to 9 inclusive but was \" + fractionalDigits);\n        }\n        appendInternal(new InstantPrinterParser(fractionalDigits));\n        return this;\n    }"}
{"Number":"645","API Relative Path":"java.time.format.DateTimeFormatterBuilder.java-appendLocalized(FormatStyle-FormatStyle)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Appends a localized date-time pattern to the formatter.\n     * <p>\n     * This appends a localized section to the builder, suitable for outputting\n     * a date, time or date-time combination. The format of the localized\n     * section is lazily looked up based on four items:\n     * <ul>\n     * <li>the {@code dateStyle} specified to this method\n     * <li>the {@code timeStyle} specified to this method\n     * <li>the {@code Locale} of the {@code DateTimeFormatter}\n     * <li>the {@code Chronology}, selecting the best available\n     * <\/ul>\n     * During formatting, the chronology is obtained from the temporal object\n     * being formatted, which may have been overridden by\n     * {@link DateTimeFormatter#withChronology(Chronology)}.\n     * <p>\n     * During parsing, if a chronology has already been parsed, then it is used.\n     * Otherwise the default from {@code DateTimeFormatter.withChronology(Chronology)}\n     * is used, with {@code IsoChronology} as the fallback.\n     * <p>\n     * Note that this method provides similar functionality to methods on\n     * {@code DateFormat} such as {@link java.text.DateFormat#getDateTimeInstance(int, int)}.\n     *\n     * @param dateStyle  the date style to use, null means no date required\n     * @param timeStyle  the time style to use, null means no time required\n     * @return this, for chaining, not null\n     * @throws IllegalArgumentException if both the date and time styles are null\n     */\n    public DateTimeFormatterBuilder appendLocalized(FormatStyle dateStyle, FormatStyle timeStyle) {\n        if (dateStyle == null && timeStyle == null) {\n            throw new IllegalArgumentException(\"Either the date or time style must be non-null\");\n        }\n        appendInternal(new LocalizedPrinterParser(dateStyle, timeStyle));\n        return this;\n    }"}
{"Number":"646","API Relative Path":"java.time.format.DateTimeFormatterBuilder.java-appendLocalizedOffset(TextStyle)","Corresponding Source":"/**\n     * Appends the localized zone offset, such as 'GMT+01:00', to the formatter.\n     * <p>\n     * This appends a localized zone offset to the builder, the format of the\n     * localized offset is controlled by the specified {@link FormatStyle style}\n     * to this method:\n     * <ul>\n     * <li>{@link TextStyle#FULL full} - formats with localized offset text, such\n     * as 'GMT, 2-digit hour and minute field, optional second field if non-zero,\n     * and colon.\n     * <li>{@link TextStyle#SHORT short} - formats with localized offset text,\n     * such as 'GMT, hour without leading zero, optional 2-digit minute and\n     * second if non-zero, and colon.\n     * <\/ul>\n     * <p>\n     * During formatting, the offset is obtained using a mechanism equivalent\n     * to querying the temporal with {@link TemporalQueries#offset()}.\n     * If the offset cannot be obtained then an exception is thrown unless the\n     * section of the formatter is optional.\n     * <p>\n     * During parsing, the offset is parsed using the format defined above.\n     * If the offset cannot be parsed then an exception is thrown unless the\n     * section of the formatter is optional.\n     * <p>\n     * @param style  the format style to use, not null\n     * @return this, for chaining, not null\n     * @throws IllegalArgumentException if style is neither {@link TextStyle#FULL\n     * full} nor {@link TextStyle#SHORT short}\n     */\n    public DateTimeFormatterBuilder appendLocalizedOffset(TextStyle style) {\n        Objects.requireNonNull(style, \"style\");\n        if (style != TextStyle.FULL && style != TextStyle.SHORT) {\n            throw new IllegalArgumentException(\"Style must be either full or short\");\n        }\n        appendInternal(new LocalizedOffsetIdPrinterParser(style));\n        return this;\n    }"}
{"Number":"647","API Relative Path":"java.time.format.DateTimeFormatterBuilder.java-appendValue(TemporalField-int)","Corresponding Source":"/**\n     * Appends the value of a date-time field to the formatter using a fixed\n     * width, zero-padded approach.\n     * <p>\n     * The value of the field will be output during a format.\n     * If the value cannot be obtained then an exception will be thrown.\n     * <p>\n     * The value will be zero-padded on the left. If the size of the value\n     * means that it cannot be printed within the width then an exception is thrown.\n     * If the value of the field is negative then an exception is thrown during formatting.\n     * <p>\n     * This method supports a special technique of parsing known as 'adjacent value parsing'.\n     * This technique solves the problem where a value, variable or fixed width, is followed by one or more\n     * fixed length values. The standard parser is greedy, and thus it would normally\n     * steal the digits that are needed by the fixed width value parsers that follow the\n     * variable width one.\n     * <p>\n     * No action is required to initiate 'adjacent value parsing'.\n     * When a call to {@code appendValue} is made, the builder\n     * enters adjacent value parsing setup mode. If the immediately subsequent method\n     * call or calls on the same builder are for a fixed width value, then the parser will reserve\n     * space so that the fixed width values can be parsed.\n     * <p>\n     * For example, consider {@code builder.appendValue(YEAR).appendValue(MONTH_OF_YEAR, 2);}\n     * The year is a variable width parse of between 1 and 19 digits.\n     * The month is a fixed width parse of 2 digits.\n     * Because these were appended to the same builder immediately after one another,\n     * the year parser will reserve two digits for the month to parse.\n     * Thus, the text '201106' will correctly parse to a year of 2011 and a month of 6.\n     * Without adjacent value parsing, the year would greedily parse all six digits and leave\n     * nothing for the month.\n     * <p>\n     * Adjacent value parsing applies to each set of fixed width not-negative values in the parser\n     * that immediately follow any kind of value, variable or fixed width.\n     * Calling any other append method will end the setup of adjacent value parsing.\n     * Thus, in the unlikely event that you need to avoid adjacent value parsing behavior,\n     * simply add the {@code appendValue} to another {@code DateTimeFormatterBuilder}\n     * and add that to this builder.\n     * <p>\n     * If adjacent parsing is active, then parsing must match exactly the specified\n     * number of digits in both strict and lenient modes.\n     * In addition, no positive or negative sign is permitted.\n     *\n     * @param field  the field to append, not null\n     * @param width  the width of the printed field, from 1 to 19\n     * @return this, for chaining, not null\n     * @throws IllegalArgumentException if the width is invalid\n     */\n    public DateTimeFormatterBuilder appendValue(TemporalField field, int width) {\n        Objects.requireNonNull(field, \"field\");\n        if (width < 1 || width > 19) {\n            throw new IllegalArgumentException(\"The width must be from 1 to 19 inclusive but was \" + width);\n        }\n        NumberPrinterParser pp = new NumberPrinterParser(field, width, width, SignStyle.NOT_NEGATIVE);\n        appendValue(pp);\n        return this;\n    }"}
{"Number":"648","API Relative Path":"java.time.format.DateTimeFormatterBuilder.java-appendValue(TemporalField-int-int-SignStyle)","Corresponding Source":"/**\n     * Appends the value of a date-time field to the formatter providing full\n     * control over formatting.\n     * <p>\n     * The value of the field will be output during a format.\n     * If the value cannot be obtained then an exception will be thrown.\n     * <p>\n     * This method provides full control of the numeric formatting, including\n     * zero-padding and the positive/negative sign.\n     * <p>\n     * The parser for a variable width value such as this normally behaves greedily,\n     * accepting as many digits as possible.\n     * This behavior can be affected by 'adjacent value parsing'.\n     * See {@link #appendValue(java.time.temporal.TemporalField, int)} for full details.\n     * <p>\n     * In strict parsing mode, the minimum number of parsed digits is {@code minWidth}\n     * and the maximum is {@code maxWidth}.\n     * In lenient parsing mode, the minimum number of parsed digits is one\n     * and the maximum is 19 (except as limited by adjacent value parsing).\n     * <p>\n     * If this method is invoked with equal minimum and maximum widths and a sign style of\n     * {@code NOT_NEGATIVE} then it delegates to {@code appendValue(TemporalField,int)}.\n     * In this scenario, the formatting and parsing behavior described there occur.\n     *\n     * @param field  the field to append, not null\n     * @param minWidth  the minimum field width of the printed field, from 1 to 19\n     * @param maxWidth  the maximum field width of the printed field, from 1 to 19\n     * @param signStyle  the positive/negative output style, not null\n     * @return this, for chaining, not null\n     * @throws IllegalArgumentException if the widths are invalid\n     */\n    public DateTimeFormatterBuilder appendValue(\n            TemporalField field, int minWidth, int maxWidth, SignStyle signStyle) {\n        if (minWidth == maxWidth && signStyle == SignStyle.NOT_NEGATIVE) {\n            return appendValue(field, maxWidth);\n        }\n        Objects.requireNonNull(field, \"field\");\n        Objects.requireNonNull(signStyle, \"signStyle\");\n        if (minWidth < 1 || minWidth > 19) {\n            throw new IllegalArgumentException(\"The minimum width must be from 1 to 19 inclusive but was \" + minWidth);\n        }\n        if (maxWidth < 1 || maxWidth > 19) {\n            throw new IllegalArgumentException(\"The maximum width must be from 1 to 19 inclusive but was \" + maxWidth);\n        }\n        if (maxWidth < minWidth) {\n            throw new IllegalArgumentException(\"The maximum width must exceed or equal the minimum width but \" +\n                    maxWidth + \" < \" + minWidth);\n        }\n        NumberPrinterParser pp = new NumberPrinterParser(field, minWidth, maxWidth, signStyle);\n        appendValue(pp);\n        return this;\n    }"}
{"Number":"649","API Relative Path":"java.time.format.DateTimeFormatterBuilder.java-appendValue(TemporalField-int-int-SignStyle)","Corresponding Source":"/**\n     * Appends the value of a date-time field to the formatter providing full\n     * control over formatting.\n     * <p>\n     * The value of the field will be output during a format.\n     * If the value cannot be obtained then an exception will be thrown.\n     * <p>\n     * This method provides full control of the numeric formatting, including\n     * zero-padding and the positive/negative sign.\n     * <p>\n     * The parser for a variable width value such as this normally behaves greedily,\n     * accepting as many digits as possible.\n     * This behavior can be affected by 'adjacent value parsing'.\n     * See {@link #appendValue(java.time.temporal.TemporalField, int)} for full details.\n     * <p>\n     * In strict parsing mode, the minimum number of parsed digits is {@code minWidth}\n     * and the maximum is {@code maxWidth}.\n     * In lenient parsing mode, the minimum number of parsed digits is one\n     * and the maximum is 19 (except as limited by adjacent value parsing).\n     * <p>\n     * If this method is invoked with equal minimum and maximum widths and a sign style of\n     * {@code NOT_NEGATIVE} then it delegates to {@code appendValue(TemporalField,int)}.\n     * In this scenario, the formatting and parsing behavior described there occur.\n     *\n     * @param field  the field to append, not null\n     * @param minWidth  the minimum field width of the printed field, from 1 to 19\n     * @param maxWidth  the maximum field width of the printed field, from 1 to 19\n     * @param signStyle  the positive/negative output style, not null\n     * @return this, for chaining, not null\n     * @throws IllegalArgumentException if the widths are invalid\n     */\n    public DateTimeFormatterBuilder appendValue(\n            TemporalField field, int minWidth, int maxWidth, SignStyle signStyle) {\n        if (minWidth == maxWidth && signStyle == SignStyle.NOT_NEGATIVE) {\n            return appendValue(field, maxWidth);\n        }\n        Objects.requireNonNull(field, \"field\");\n        Objects.requireNonNull(signStyle, \"signStyle\");\n        if (minWidth < 1 || minWidth > 19) {\n            throw new IllegalArgumentException(\"The minimum width must be from 1 to 19 inclusive but was \" + minWidth);\n        }\n        if (maxWidth < 1 || maxWidth > 19) {\n            throw new IllegalArgumentException(\"The maximum width must be from 1 to 19 inclusive but was \" + maxWidth);\n        }\n        if (maxWidth < minWidth) {\n            throw new IllegalArgumentException(\"The maximum width must exceed or equal the minimum width but \" +\n                    maxWidth + \" < \" + minWidth);\n        }\n        NumberPrinterParser pp = new NumberPrinterParser(field, minWidth, maxWidth, signStyle);\n        appendValue(pp);\n        return this;\n    }"}
{"Number":"650","API Relative Path":"java.time.format.DateTimeFormatterBuilder.java-appendValue(TemporalField-int-int-SignStyle)","Corresponding Source":"/**\n     * Appends the value of a date-time field to the formatter providing full\n     * control over formatting.\n     * <p>\n     * The value of the field will be output during a format.\n     * If the value cannot be obtained then an exception will be thrown.\n     * <p>\n     * This method provides full control of the numeric formatting, including\n     * zero-padding and the positive/negative sign.\n     * <p>\n     * The parser for a variable width value such as this normally behaves greedily,\n     * accepting as many digits as possible.\n     * This behavior can be affected by 'adjacent value parsing'.\n     * See {@link #appendValue(java.time.temporal.TemporalField, int)} for full details.\n     * <p>\n     * In strict parsing mode, the minimum number of parsed digits is {@code minWidth}\n     * and the maximum is {@code maxWidth}.\n     * In lenient parsing mode, the minimum number of parsed digits is one\n     * and the maximum is 19 (except as limited by adjacent value parsing).\n     * <p>\n     * If this method is invoked with equal minimum and maximum widths and a sign style of\n     * {@code NOT_NEGATIVE} then it delegates to {@code appendValue(TemporalField,int)}.\n     * In this scenario, the formatting and parsing behavior described there occur.\n     *\n     * @param field  the field to append, not null\n     * @param minWidth  the minimum field width of the printed field, from 1 to 19\n     * @param maxWidth  the maximum field width of the printed field, from 1 to 19\n     * @param signStyle  the positive/negative output style, not null\n     * @return this, for chaining, not null\n     * @throws IllegalArgumentException if the widths are invalid\n     */\n    public DateTimeFormatterBuilder appendValue(\n            TemporalField field, int minWidth, int maxWidth, SignStyle signStyle) {\n        if (minWidth == maxWidth && signStyle == SignStyle.NOT_NEGATIVE) {\n            return appendValue(field, maxWidth);\n        }\n        Objects.requireNonNull(field, \"field\");\n        Objects.requireNonNull(signStyle, \"signStyle\");\n        if (minWidth < 1 || minWidth > 19) {\n            throw new IllegalArgumentException(\"The minimum width must be from 1 to 19 inclusive but was \" + minWidth);\n        }\n        if (maxWidth < 1 || maxWidth > 19) {\n            throw new IllegalArgumentException(\"The maximum width must be from 1 to 19 inclusive but was \" + maxWidth);\n        }\n        if (maxWidth < minWidth) {\n            throw new IllegalArgumentException(\"The maximum width must exceed or equal the minimum width but \" +\n                    maxWidth + \" < \" + minWidth);\n        }\n        NumberPrinterParser pp = new NumberPrinterParser(field, minWidth, maxWidth, signStyle);\n        appendValue(pp);\n        return this;\n    }"}
{"Number":"651","API Relative Path":"java.time.format.DateTimeFormatterBuilder.java-padNext(int-char)","Corresponding Source":"/**\n     * Causes the next added printer/parser to pad to a fixed width.\n     * <p>\n     * This padding is intended for padding other than zero-padding.\n     * Zero-padding should be achieved using the appendValue methods.\n     * <p>\n     * During formatting, the decorated element will be output and then padded\n     * to the specified width. An exception will be thrown during formatting if\n     * the pad width is exceeded.\n     * <p>\n     * During parsing, the padding and decorated element are parsed.\n     * If parsing is lenient, then the pad width is treated as a maximum.\n     * If parsing is case insensitive, then the pad character is matched ignoring case.\n     * The padding is parsed greedily. Thus, if the decorated element starts with\n     * the pad character, it will not be parsed.\n     *\n     * @param padWidth  the pad width, 1 or greater\n     * @param padChar  the pad character\n     * @return this, for chaining, not null\n     * @throws IllegalArgumentException if pad width is too small\n     */\n    public DateTimeFormatterBuilder padNext(int padWidth, char padChar) {\n        if (padWidth < 1) {\n            throw new IllegalArgumentException(\"The pad width must be at least one but was \" + padWidth);\n        }\n        active.padNextWidth = padWidth;\n        active.padNextChar = padChar;\n        active.valueParserIndex = -1;\n        return this;\n    }"}
{"Number":"652","API Relative Path":"java.time.Instant.java-get(TemporalField)","Corresponding Source":"/**\n     * Gets the value of the specified field from this instant as an {@code int}.\n     * <p>\n     * This queries this instant for the value of the specified field.\n     * The returned value will always be within the valid range of values for the field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The {@link #isSupported(TemporalField) supported fields} will return valid\n     * values based on this date-time, except {@code INSTANT_SECONDS} which is too\n     * large to fit in an {@code int} and throws a {@code DateTimeException}.\n     * All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n     * passing {@code this} as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param field  the field to get, not null\n     * @return the value for the field\n     * @throws DateTimeException if a value for the field cannot be obtained or\n     *         the value is outside the range of valid values for the field\n     * @throws UnsupportedTemporalTypeException if the field is not supported or\n     *         the range of values exceeds an {@code int}\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override  // override for Javadoc and performance\n    public int get(TemporalField field) {\n        if (field instanceof ChronoField) {\n            switch ((ChronoField) field) {\n                case NANO_OF_SECOND: return nanos;\n                case MICRO_OF_SECOND: return nanos / 1000;\n                case MILLI_OF_SECOND: return nanos / 1000_000;\n                case INSTANT_SECONDS: INSTANT_SECONDS.checkValidIntValue(seconds);\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return range(field).checkValidIntValue(field.getFrom(this), field);\n    }"}
{"Number":"653","API Relative Path":"java.time.Instant.java-getLong(TemporalField)","Corresponding Source":"/**\n     * Gets the value of the specified field from this instant as a {@code long}.\n     * <p>\n     * This queries this instant for the value of the specified field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The {@link #isSupported(TemporalField) supported fields} will return valid\n     * values based on this date-time.\n     * All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n     * passing {@code this} as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param field  the field to get, not null\n     * @return the value for the field\n     * @throws DateTimeException if a value for the field cannot be obtained\n     * @throws UnsupportedTemporalTypeException if the field is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public long getLong(TemporalField field) {\n        if (field instanceof ChronoField) {\n            switch ((ChronoField) field) {\n                case NANO_OF_SECOND: return nanos;\n                case MICRO_OF_SECOND: return nanos / 1000;\n                case MILLI_OF_SECOND: return nanos / 1000_000;\n                case INSTANT_SECONDS: return seconds;\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return field.getFrom(this);\n    }"}
{"Number":"654","API Relative Path":"java.time.Instant.java-minus(long-TemporalUnit)","Corresponding Source":"/**\n     * Returns a copy of this instant with the specified amount subtracted.\n     * <p>\n     * This returns a {@code Instant}, based on this one, with the amount\n     * in terms of the unit subtracted. If it is not possible to subtract the amount,\n     * because the unit is not supported or for some other reason, an exception is thrown.\n     * <p>\n     * This method is equivalent to {@link #plus(long, TemporalUnit)} with the amount negated.\n     * See that method for a full description of how addition, and thus subtraction, works.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param amountToSubtract  the amount of the unit to subtract from the result, may be negative\n     * @param unit  the unit of the amount to subtract, not null\n     * @return an {@code Instant} based on this instant with the specified amount subtracted, not null\n     * @throws DateTimeException if the subtraction cannot be made\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public Instant minus(long amountToSubtract, TemporalUnit unit) {\n        return (amountToSubtract == Long.MIN_VALUE ? plus(Long.MAX_VALUE, unit).plus(1, unit) : plus(-amountToSubtract, unit));\n    }"}
{"Number":"655","API Relative Path":"java.time.Instant.java-ofEpochSecond(long)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@code Instant} using seconds from the\n     * epoch of 1970-01-01T00:00:00Z.\n     * <p>\n     * The nanosecond field is set to zero.\n     *\n     * @param epochSecond  the number of seconds from 1970-01-01T00:00:00Z\n     * @return an instant, not null\n     * @throws DateTimeException if the instant exceeds the maximum or minimum instant\n     */\n    public static Instant ofEpochSecond(long epochSecond) {\n        return create(epochSecond, 0);\n    }"}
{"Number":"656","API Relative Path":"java.time.Instant.java-ofEpochSecond(long-long)","Corresponding Source":"/**\n     * Obtains an instance of {@code Instant} using seconds from the\n     * epoch of 1970-01-01T00:00:00Z and nanosecond fraction of second.\n     * <p>\n     * This method allows an arbitrary number of nanoseconds to be passed in.\n     * The factory will alter the values of the second and nanosecond in order\n     * to ensure that the stored nanosecond is in the range 0 to 999,999,999.\n     * For example, the following will result in the exactly the same instant:\n     * <pre>\n     *  Instant.ofEpochSecond(3, 1);\n     *  Instant.ofEpochSecond(4, -999_999_999);\n     *  Instant.ofEpochSecond(2, 1000_000_001);\n     * <\/pre>\n     *\n     * @param epochSecond  the number of seconds from 1970-01-01T00:00:00Z\n     * @param nanoAdjustment  the nanosecond adjustment to the number of seconds, positive or negative\n     * @return an instant, not null\n     * @throws DateTimeException if the instant exceeds the maximum or minimum instant\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    public static Instant ofEpochSecond(long epochSecond, long nanoAdjustment) {\n        long secs = Math.addExact(epochSecond, Math.floorDiv(nanoAdjustment, NANOS_PER_SECOND));\n        int nos = (int)Math.floorMod(nanoAdjustment, NANOS_PER_SECOND);\n        return create(secs, nos);\n    }"}
{"Number":"657","API Relative Path":"java.time.Instant.java-plus(long-TemporalUnit)","Corresponding Source":"/**\n     * Returns a copy of this instant with the specified amount added.\n     * <p>\n     * This returns an {@code Instant}, based on this one, with the amount\n     * in terms of the unit added. If it is not possible to add the amount, because the\n     * unit is not supported or for some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoUnit} then the addition is implemented here.\n     * The supported fields behave as follows:\n     * <ul>\n     * <li>{@code NANOS} -\n     *  Returns a {@code Instant} with the specified number of nanoseconds added.\n     *  This is equivalent to {@link #plusNanos(long)}.\n     * <li>{@code MICROS} -\n     *  Returns a {@code Instant} with the specified number of microseconds added.\n     *  This is equivalent to {@link #plusNanos(long)} with the amount\n     *  multiplied by 1,000.\n     * <li>{@code MILLIS} -\n     *  Returns a {@code Instant} with the specified number of milliseconds added.\n     *  This is equivalent to {@link #plusNanos(long)} with the amount\n     *  multiplied by 1,000,000.\n     * <li>{@code SECONDS} -\n     *  Returns a {@code Instant} with the specified number of seconds added.\n     *  This is equivalent to {@link #plusSeconds(long)}.\n     * <li>{@code MINUTES} -\n     *  Returns a {@code Instant} with the specified number of minutes added.\n     *  This is equivalent to {@link #plusSeconds(long)} with the amount\n     *  multiplied by 60.\n     * <li>{@code HOURS} -\n     *  Returns a {@code Instant} with the specified number of hours added.\n     *  This is equivalent to {@link #plusSeconds(long)} with the amount\n     *  multiplied by 3,600.\n     * <li>{@code HALF_DAYS} -\n     *  Returns a {@code Instant} with the specified number of half-days added.\n     *  This is equivalent to {@link #plusSeconds(long)} with the amount\n     *  multiplied by 43,200 (12 hours).\n     * <li>{@code DAYS} -\n     *  Returns a {@code Instant} with the specified number of days added.\n     *  This is equivalent to {@link #plusSeconds(long)} with the amount\n     *  multiplied by 86,400 (24 hours).\n     * <\/ul>\n     * <p>\n     * All other {@code ChronoUnit} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoUnit}, then the result of this method\n     * is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}\n     * passing {@code this} as the argument. In this case, the unit determines\n     * whether and how to perform the addition.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param amountToAdd  the amount of the unit to add to the result, may be negative\n     * @param unit  the unit of the amount to add, not null\n     * @return an {@code Instant} based on this instant with the specified amount added, not null\n     * @throws DateTimeException if the addition cannot be made\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public Instant plus(long amountToAdd, TemporalUnit unit) {\n        if (unit instanceof ChronoUnit) {\n            switch ((ChronoUnit) unit) {\n                case NANOS: return plusNanos(amountToAdd);\n                case MICROS: return plus(amountToAdd / 1000_000, (amountToAdd % 1000_000) * 1000);\n                case MILLIS: return plusMillis(amountToAdd);\n                case SECONDS: return plusSeconds(amountToAdd);\n                case MINUTES: return plusSeconds(Math.multiplyExact(amountToAdd, SECONDS_PER_MINUTE));\n                case HOURS: return plusSeconds(Math.multiplyExact(amountToAdd, SECONDS_PER_HOUR));\n                case HALF_DAYS: return plusSeconds(Math.multiplyExact(amountToAdd, SECONDS_PER_DAY / 2));\n                case DAYS: return plusSeconds(Math.multiplyExact(amountToAdd, SECONDS_PER_DAY));\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.addTo(this, amountToAdd);\n    }"}
{"Number":"658","API Relative Path":"java.time.Instant.java-plus(long-TemporalUnit)","Corresponding Source":"/**\n     * Returns a copy of this instant with the specified amount added.\n     * <p>\n     * This returns an {@code Instant}, based on this one, with the amount\n     * in terms of the unit added. If it is not possible to add the amount, because the\n     * unit is not supported or for some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoUnit} then the addition is implemented here.\n     * The supported fields behave as follows:\n     * <ul>\n     * <li>{@code NANOS} -\n     *  Returns a {@code Instant} with the specified number of nanoseconds added.\n     *  This is equivalent to {@link #plusNanos(long)}.\n     * <li>{@code MICROS} -\n     *  Returns a {@code Instant} with the specified number of microseconds added.\n     *  This is equivalent to {@link #plusNanos(long)} with the amount\n     *  multiplied by 1,000.\n     * <li>{@code MILLIS} -\n     *  Returns a {@code Instant} with the specified number of milliseconds added.\n     *  This is equivalent to {@link #plusNanos(long)} with the amount\n     *  multiplied by 1,000,000.\n     * <li>{@code SECONDS} -\n     *  Returns a {@code Instant} with the specified number of seconds added.\n     *  This is equivalent to {@link #plusSeconds(long)}.\n     * <li>{@code MINUTES} -\n     *  Returns a {@code Instant} with the specified number of minutes added.\n     *  This is equivalent to {@link #plusSeconds(long)} with the amount\n     *  multiplied by 60.\n     * <li>{@code HOURS} -\n     *  Returns a {@code Instant} with the specified number of hours added.\n     *  This is equivalent to {@link #plusSeconds(long)} with the amount\n     *  multiplied by 3,600.\n     * <li>{@code HALF_DAYS} -\n     *  Returns a {@code Instant} with the specified number of half-days added.\n     *  This is equivalent to {@link #plusSeconds(long)} with the amount\n     *  multiplied by 43,200 (12 hours).\n     * <li>{@code DAYS} -\n     *  Returns a {@code Instant} with the specified number of days added.\n     *  This is equivalent to {@link #plusSeconds(long)} with the amount\n     *  multiplied by 86,400 (24 hours).\n     * <\/ul>\n     * <p>\n     * All other {@code ChronoUnit} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoUnit}, then the result of this method\n     * is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}\n     * passing {@code this} as the argument. In this case, the unit determines\n     * whether and how to perform the addition.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param amountToAdd  the amount of the unit to add to the result, may be negative\n     * @param unit  the unit of the amount to add, not null\n     * @return an {@code Instant} based on this instant with the specified amount added, not null\n     * @throws DateTimeException if the addition cannot be made\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public Instant plus(long amountToAdd, TemporalUnit unit) {\n        if (unit instanceof ChronoUnit) {\n            switch ((ChronoUnit) unit) {\n                case NANOS: return plusNanos(amountToAdd);\n                case MICROS: return plus(amountToAdd / 1000_000, (amountToAdd % 1000_000) * 1000);\n                case MILLIS: return plusMillis(amountToAdd);\n                case SECONDS: return plusSeconds(amountToAdd);\n                case MINUTES: return plusSeconds(Math.multiplyExact(amountToAdd, SECONDS_PER_MINUTE));\n                case HOURS: return plusSeconds(Math.multiplyExact(amountToAdd, SECONDS_PER_HOUR));\n                case HALF_DAYS: return plusSeconds(Math.multiplyExact(amountToAdd, SECONDS_PER_DAY / 2));\n                case DAYS: return plusSeconds(Math.multiplyExact(amountToAdd, SECONDS_PER_DAY));\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.addTo(this, amountToAdd);\n    }"}
{"Number":"659","API Relative Path":"java.time.Instant.java-plus(long-TemporalUnit)","Corresponding Source":"/**\n     * Returns a copy of this instant with the specified amount added.\n     * <p>\n     * This returns an {@code Instant}, based on this one, with the amount\n     * in terms of the unit added. If it is not possible to add the amount, because the\n     * unit is not supported or for some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoUnit} then the addition is implemented here.\n     * The supported fields behave as follows:\n     * <ul>\n     * <li>{@code NANOS} -\n     *  Returns a {@code Instant} with the specified number of nanoseconds added.\n     *  This is equivalent to {@link #plusNanos(long)}.\n     * <li>{@code MICROS} -\n     *  Returns a {@code Instant} with the specified number of microseconds added.\n     *  This is equivalent to {@link #plusNanos(long)} with the amount\n     *  multiplied by 1,000.\n     * <li>{@code MILLIS} -\n     *  Returns a {@code Instant} with the specified number of milliseconds added.\n     *  This is equivalent to {@link #plusNanos(long)} with the amount\n     *  multiplied by 1,000,000.\n     * <li>{@code SECONDS} -\n     *  Returns a {@code Instant} with the specified number of seconds added.\n     *  This is equivalent to {@link #plusSeconds(long)}.\n     * <li>{@code MINUTES} -\n     *  Returns a {@code Instant} with the specified number of minutes added.\n     *  This is equivalent to {@link #plusSeconds(long)} with the amount\n     *  multiplied by 60.\n     * <li>{@code HOURS} -\n     *  Returns a {@code Instant} with the specified number of hours added.\n     *  This is equivalent to {@link #plusSeconds(long)} with the amount\n     *  multiplied by 3,600.\n     * <li>{@code HALF_DAYS} -\n     *  Returns a {@code Instant} with the specified number of half-days added.\n     *  This is equivalent to {@link #plusSeconds(long)} with the amount\n     *  multiplied by 43,200 (12 hours).\n     * <li>{@code DAYS} -\n     *  Returns a {@code Instant} with the specified number of days added.\n     *  This is equivalent to {@link #plusSeconds(long)} with the amount\n     *  multiplied by 86,400 (24 hours).\n     * <\/ul>\n     * <p>\n     * All other {@code ChronoUnit} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoUnit}, then the result of this method\n     * is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}\n     * passing {@code this} as the argument. In this case, the unit determines\n     * whether and how to perform the addition.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param amountToAdd  the amount of the unit to add to the result, may be negative\n     * @param unit  the unit of the amount to add, not null\n     * @return an {@code Instant} based on this instant with the specified amount added, not null\n     * @throws DateTimeException if the addition cannot be made\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public Instant plus(long amountToAdd, TemporalUnit unit) {\n        if (unit instanceof ChronoUnit) {\n            switch ((ChronoUnit) unit) {\n                case NANOS: return plusNanos(amountToAdd);\n                case MICROS: return plus(amountToAdd / 1000_000, (amountToAdd % 1000_000) * 1000);\n                case MILLIS: return plusMillis(amountToAdd);\n                case SECONDS: return plusSeconds(amountToAdd);\n                case MINUTES: return plusSeconds(Math.multiplyExact(amountToAdd, SECONDS_PER_MINUTE));\n                case HOURS: return plusSeconds(Math.multiplyExact(amountToAdd, SECONDS_PER_HOUR));\n                case HALF_DAYS: return plusSeconds(Math.multiplyExact(amountToAdd, SECONDS_PER_DAY / 2));\n                case DAYS: return plusSeconds(Math.multiplyExact(amountToAdd, SECONDS_PER_DAY));\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.addTo(this, amountToAdd);\n    }"}
{"Number":"660","API Relative Path":"java.time.Instant.java-plusSeconds(long)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this instant with the specified duration in seconds added.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param secondsToAdd  the seconds to add, positive or negative\n     * @return an {@code Instant} based on this instant with the specified seconds added, not null\n     * @throws DateTimeException if the result exceeds the maximum or minimum instant\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    public Instant plusSeconds(long secondsToAdd) {\n        return plus(secondsToAdd, 0);\n    }"}
{"Number":"661","API Relative Path":"java.time.Instant.java-until(Temporal-TemporalUnit)","Corresponding Source":"/**\n     * Calculates the amount of time until another instant in terms of the specified unit.\n     * <p>\n     * This calculates the amount of time between two {@code Instant}\n     * objects in terms of a single {@code TemporalUnit}.\n     * The start and end points are {@code this} and the specified instant.\n     * The result will be negative if the end is before the start.\n     * The calculation returns a whole number, representing the number of\n     * complete units between the two instants.\n     * The {@code Temporal} passed to this method is converted to a\n     * {@code Instant} using {@link #from(TemporalAccessor)}.\n     * For example, the amount in days between two dates can be calculated\n     * using {@code startInstant.until(endInstant, SECONDS)}.\n     * <p>\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method.\n     * The second is to use {@link TemporalUnit#between(Temporal, Temporal)}:\n     * <pre>\n     *   // these two lines are equivalent\n     *   amount = start.until(end, SECONDS);\n     *   amount = SECONDS.between(start, end);\n     * <\/pre>\n     * The choice should be made based on which makes the code more readable.\n     * <p>\n     * The calculation is implemented in this method for {@link ChronoUnit}.\n     * The units {@code NANOS}, {@code MICROS}, {@code MILLIS}, {@code SECONDS},\n     * {@code MINUTES}, {@code HOURS}, {@code HALF_DAYS} and {@code DAYS}\n     * are supported. Other {@code ChronoUnit} values will throw an exception.\n     * <p>\n     * If the unit is not a {@code ChronoUnit}, then the result of this method\n     * is obtained by invoking {@code TemporalUnit.between(Temporal, Temporal)}\n     * passing {@code this} as the first argument and the converted input temporal\n     * as the second argument.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param endExclusive  the end date, exclusive, which is converted to an {@code Instant}, not null\n     * @param unit  the unit to measure the amount in, not null\n     * @return the amount of time between this instant and the end instant\n     * @throws DateTimeException if the amount cannot be calculated, or the end\n     *  temporal cannot be converted to an {@code Instant}\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public long until(Temporal endExclusive, TemporalUnit unit) {\n        Instant end = Instant.from(endExclusive);\n        if (unit instanceof ChronoUnit) {\n            ChronoUnit f = (ChronoUnit) unit;\n            switch (f) {\n                case NANOS: return nanosUntil(end);\n                case MICROS: return nanosUntil(end) / 1000;\n                case MILLIS: return Math.subtractExact(end.toEpochMilli(), toEpochMilli());\n                case SECONDS: return secondsUntil(end);\n                case MINUTES: return secondsUntil(end) / SECONDS_PER_MINUTE;\n                case HOURS: return secondsUntil(end) / SECONDS_PER_HOUR;\n                case HALF_DAYS: return secondsUntil(end) / (12 * SECONDS_PER_HOUR);\n                case DAYS: return secondsUntil(end) / (SECONDS_PER_DAY);\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.between(this, end);\n    }"}
{"Number":"662","API Relative Path":"java.time.Instant.java-with(TemporalField-long)","Corresponding Source":"/**\n     * Returns a copy of this instant with the specified field set to a new value.\n     * <p>\n     * This returns an {@code Instant}, based on this one, with the value\n     * for the specified field changed.\n     * If it is not possible to set the value, because the field is not supported or for\n     * some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoField} then the adjustment is implemented here.\n     * The supported fields behave as follows:\n     * <ul>\n     * <li>{@code NANO_OF_SECOND} -\n     *  Returns an {@code Instant} with the specified nano-of-second.\n     *  The epoch-second will be unchanged.\n     * <li>{@code MICRO_OF_SECOND} -\n     *  Returns an {@code Instant} with the nano-of-second replaced by the specified\n     *  micro-of-second multiplied by 1,000. The epoch-second will be unchanged.\n     * <li>{@code MILLI_OF_SECOND} -\n     *  Returns an {@code Instant} with the nano-of-second replaced by the specified\n     *  milli-of-second multiplied by 1,000,000. The epoch-second will be unchanged.\n     * <li>{@code INSTANT_SECONDS} -\n     *  Returns an {@code Instant} with the specified epoch-second.\n     *  The nano-of-second will be unchanged.\n     * <\/ul>\n     * <p>\n     * In all cases, if the new value is outside the valid range of values for the field\n     * then a {@code DateTimeException} will be thrown.\n     * <p>\n     * All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.adjustInto(Temporal, long)}\n     * passing {@code this} as the argument. In this case, the field determines\n     * whether and how to adjust the instant.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param field  the field to set in the result, not null\n     * @param newValue  the new value of the field in the result\n     * @return an {@code Instant} based on {@code this} with the specified field set, not null\n     * @throws DateTimeException if the field cannot be set\n     * @throws UnsupportedTemporalTypeException if the field is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public Instant with(TemporalField field, long newValue) {\n        if (field instanceof ChronoField) {\n            ChronoField f = (ChronoField) field;\n            f.checkValidValue(newValue);\n            switch (f) {\n                case MILLI_OF_SECOND: {\n                    int nval = (int) newValue * 1000_000;\n                    return (nval != nanos ? create(seconds, nval) : this);\n                }\n                case MICRO_OF_SECOND: {\n                    int nval = (int) newValue * 1000;\n                    return (nval != nanos ? create(seconds, nval) : this);\n                }\n                case NANO_OF_SECOND: return (newValue != nanos ? create(seconds, (int) newValue) : this);\n                case INSTANT_SECONDS: return (newValue != seconds ? create(newValue, nanos) : this);\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return field.adjustInto(this, newValue);\n    }"}
{"Number":"663","API Relative Path":"java.time.Instant.java-with(TemporalField-long)","Corresponding Source":"/**\n     * Returns a copy of this instant with the specified field set to a new value.\n     * <p>\n     * This returns an {@code Instant}, based on this one, with the value\n     * for the specified field changed.\n     * If it is not possible to set the value, because the field is not supported or for\n     * some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoField} then the adjustment is implemented here.\n     * The supported fields behave as follows:\n     * <ul>\n     * <li>{@code NANO_OF_SECOND} -\n     *  Returns an {@code Instant} with the specified nano-of-second.\n     *  The epoch-second will be unchanged.\n     * <li>{@code MICRO_OF_SECOND} -\n     *  Returns an {@code Instant} with the nano-of-second replaced by the specified\n     *  micro-of-second multiplied by 1,000. The epoch-second will be unchanged.\n     * <li>{@code MILLI_OF_SECOND} -\n     *  Returns an {@code Instant} with the nano-of-second replaced by the specified\n     *  milli-of-second multiplied by 1,000,000. The epoch-second will be unchanged.\n     * <li>{@code INSTANT_SECONDS} -\n     *  Returns an {@code Instant} with the specified epoch-second.\n     *  The nano-of-second will be unchanged.\n     * <\/ul>\n     * <p>\n     * In all cases, if the new value is outside the valid range of values for the field\n     * then a {@code DateTimeException} will be thrown.\n     * <p>\n     * All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.adjustInto(Temporal, long)}\n     * passing {@code this} as the argument. In this case, the field determines\n     * whether and how to adjust the instant.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param field  the field to set in the result, not null\n     * @param newValue  the new value of the field in the result\n     * @return an {@code Instant} based on {@code this} with the specified field set, not null\n     * @throws DateTimeException if the field cannot be set\n     * @throws UnsupportedTemporalTypeException if the field is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public Instant with(TemporalField field, long newValue) {\n        if (field instanceof ChronoField) {\n            ChronoField f = (ChronoField) field;\n            f.checkValidValue(newValue);\n            switch (f) {\n                case MILLI_OF_SECOND: {\n                    int nval = (int) newValue * 1000_000;\n                    return (nval != nanos ? create(seconds, nval) : this);\n                }\n                case MICRO_OF_SECOND: {\n                    int nval = (int) newValue * 1000;\n                    return (nval != nanos ? create(seconds, nval) : this);\n                }\n                case NANO_OF_SECOND: return (newValue != nanos ? create(seconds, (int) newValue) : this);\n                case INSTANT_SECONDS: return (newValue != seconds ? create(newValue, nanos) : this);\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return field.adjustInto(this, newValue);\n    }"}
{"Number":"664","API Relative Path":"java.time.LocalDate.java-minus(long-TemporalUnit)","Corresponding Source":"/**\n     * Returns a copy of this date with the specified amount subtracted.\n     * <p>\n     * This returns a {@code LocalDate}, based on this one, with the amount\n     * in terms of the unit subtracted. If it is not possible to subtract the amount,\n     * because the unit is not supported or for some other reason, an exception is thrown.\n     * <p>\n     * This method is equivalent to {@link #plus(long, TemporalUnit)} with the amount negated.\n     * See that method for a full description of how addition, and thus subtraction, works.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param amountToSubtract  the amount of the unit to subtract from the result, may be negative\n     * @param unit  the unit of the amount to subtract, not null\n     * @return a {@code LocalDate} based on this date with the specified amount subtracted, not null\n     * @throws DateTimeException if the subtraction cannot be made\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public LocalDate minus(long amountToSubtract, TemporalUnit unit) {\n        return (amountToSubtract == Long.MIN_VALUE ? plus(Long.MAX_VALUE, unit).plus(1, unit) : plus(-amountToSubtract, unit));\n    }"}
{"Number":"665","API Relative Path":"java.time.LocalDate.java-of(int-int-int)","Corresponding Source":"/**\n     * Obtains an instance of {@code LocalDate} from a year, month and day.\n     * <p>\n     * This returns a {@code LocalDate} with the specified year, month and day-of-month.\n     * The day must be valid for the year and month, otherwise an exception will be thrown.\n     *\n     * @param year  the year to represent, from MIN_YEAR to MAX_YEAR\n     * @param month  the month-of-year to represent, from 1 (January) to 12 (December)\n     * @param dayOfMonth  the day-of-month to represent, from 1 to 31\n     * @return the local date, not null\n     * @throws DateTimeException if the value of any field is out of range,\n     *  or if the day-of-month is invalid for the month-year\n     */\n    public static LocalDate of(int year, int month, int dayOfMonth) {\n        YEAR.checkValidValue(year);\n        MONTH_OF_YEAR.checkValidValue(month);\n        DAY_OF_MONTH.checkValidValue(dayOfMonth);\n        return create(year, month, dayOfMonth);\n    }"}
{"Number":"666","API Relative Path":"java.time.LocalDate.java-of(int-int-int)","Corresponding Source":"/**\n     * Obtains an instance of {@code LocalDate} from a year, month and day.\n     * <p>\n     * This returns a {@code LocalDate} with the specified year, month and day-of-month.\n     * The day must be valid for the year and month, otherwise an exception will be thrown.\n     *\n     * @param year  the year to represent, from MIN_YEAR to MAX_YEAR\n     * @param month  the month-of-year to represent, from 1 (January) to 12 (December)\n     * @param dayOfMonth  the day-of-month to represent, from 1 to 31\n     * @return the local date, not null\n     * @throws DateTimeException if the value of any field is out of range,\n     *  or if the day-of-month is invalid for the month-year\n     */\n    public static LocalDate of(int year, int month, int dayOfMonth) {\n        YEAR.checkValidValue(year);\n        MONTH_OF_YEAR.checkValidValue(month);\n        DAY_OF_MONTH.checkValidValue(dayOfMonth);\n        return create(year, month, dayOfMonth);\n    }"}
{"Number":"667","API Relative Path":"java.time.LocalDate.java-of(int-Month-int)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@code LocalDate} from a year, month and day.\n     * <p>\n     * This returns a {@code LocalDate} with the specified year, month and day-of-month.\n     * The day must be valid for the year and month, otherwise an exception will be thrown.\n     *\n     * @param year  the year to represent, from MIN_YEAR to MAX_YEAR\n     * @param month  the month-of-year to represent, not null\n     * @param dayOfMonth  the day-of-month to represent, from 1 to 31\n     * @return the local date, not null\n     * @throws DateTimeException if the value of any field is out of range,\n     *  or if the day-of-month is invalid for the month-year\n     */\n    public static LocalDate of(int year, Month month, int dayOfMonth) {\n        YEAR.checkValidValue(year);\n        Objects.requireNonNull(month, \"month\");\n        DAY_OF_MONTH.checkValidValue(dayOfMonth);\n        return create(year, month.getValue(), dayOfMonth);\n    }"}
{"Number":"668","API Relative Path":"java.time.LocalDate.java-of(int-Month-int)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@code LocalDate} from a year, month and day.\n     * <p>\n     * This returns a {@code LocalDate} with the specified year, month and day-of-month.\n     * The day must be valid for the year and month, otherwise an exception will be thrown.\n     *\n     * @param year  the year to represent, from MIN_YEAR to MAX_YEAR\n     * @param month  the month-of-year to represent, not null\n     * @param dayOfMonth  the day-of-month to represent, from 1 to 31\n     * @return the local date, not null\n     * @throws DateTimeException if the value of any field is out of range,\n     *  or if the day-of-month is invalid for the month-year\n     */\n    public static LocalDate of(int year, Month month, int dayOfMonth) {\n        YEAR.checkValidValue(year);\n        Objects.requireNonNull(month, \"month\");\n        DAY_OF_MONTH.checkValidValue(dayOfMonth);\n        return create(year, month.getValue(), dayOfMonth);\n    }"}
{"Number":"669","API Relative Path":"java.time.LocalDate.java-ofYearDay(int-int)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@code LocalDate} from a year and day-of-year.\n     * <p>\n     * This returns a {@code LocalDate} with the specified year and day-of-year.\n     * The day-of-year must be valid for the year, otherwise an exception will be thrown.\n     *\n     * @param year  the year to represent, from MIN_YEAR to MAX_YEAR\n     * @param dayOfYear  the day-of-year to represent, from 1 to 366\n     * @return the local date, not null\n     * @throws DateTimeException if the value of any field is out of range,\n     *  or if the day-of-year is invalid for the year\n     */\n    public static LocalDate ofYearDay(int year, int dayOfYear) {\n        YEAR.checkValidValue(year);\n        DAY_OF_YEAR.checkValidValue(dayOfYear);\n        boolean leap = IsoChronology.INSTANCE.isLeapYear(year);\n        if (dayOfYear == 366 && leap == false) {\n            throw new DateTimeException(\"Invalid date 'DayOfYear 366' as '\" + year + \"' is not a leap year\");\n        }\n        Month moy = Month.of((dayOfYear - 1) / 31 + 1);\n        int monthEnd = moy.firstDayOfYear(leap) + moy.length(leap) - 1;\n        if (dayOfYear > monthEnd) {\n            moy = moy.plus(1);\n        }\n        int dom = dayOfYear - moy.firstDayOfYear(leap) + 1;\n        return new LocalDate(year, moy.getValue(), dom);\n    }"}
{"Number":"670","API Relative Path":"java.time.LocalDate.java-plus(long-TemporalUnit)","Corresponding Source":"/**\n     * Returns a copy of this date with the specified amount added.\n     * <p>\n     * This returns a {@code LocalDate}, based on this one, with the amount\n     * in terms of the unit added. If it is not possible to add the amount, because the\n     * unit is not supported or for some other reason, an exception is thrown.\n     * <p>\n     * In some cases, adding the amount can cause the resulting date to become invalid.\n     * For example, adding one month to 31st January would result in 31st February.\n     * In cases like this, the unit is responsible for resolving the date.\n     * Typically it will choose the previous valid date, which would be the last valid\n     * day of February in this example.\n     * <p>\n     * If the field is a {@link ChronoUnit} then the addition is implemented here.\n     * The supported fields behave as follows:\n     * <ul>\n     * <li>{@code DAYS} -\n     *  Returns a {@code LocalDate} with the specified number of days added.\n     *  This is equivalent to {@link #plusDays(long)}.\n     * <li>{@code WEEKS} -\n     *  Returns a {@code LocalDate} with the specified number of weeks added.\n     *  This is equivalent to {@link #plusWeeks(long)} and uses a 7 day week.\n     * <li>{@code MONTHS} -\n     *  Returns a {@code LocalDate} with the specified number of months added.\n     *  This is equivalent to {@link #plusMonths(long)}.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <li>{@code YEARS} -\n     *  Returns a {@code LocalDate} with the specified number of years added.\n     *  This is equivalent to {@link #plusYears(long)}.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <li>{@code DECADES} -\n     *  Returns a {@code LocalDate} with the specified number of decades added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 10.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <li>{@code CENTURIES} -\n     *  Returns a {@code LocalDate} with the specified number of centuries added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 100.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <li>{@code MILLENNIA} -\n     *  Returns a {@code LocalDate} with the specified number of millennia added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 1,000.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <li>{@code ERAS} -\n     *  Returns a {@code LocalDate} with the specified number of eras added.\n     *  Only two eras are supported so the amount must be one, zero or minus one.\n     *  If the amount is non-zero then the year is changed such that the year-of-era\n     *  is unchanged.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <\/ul>\n     * <p>\n     * All other {@code ChronoUnit} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoUnit}, then the result of this method\n     * is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}\n     * passing {@code this} as the argument. In this case, the unit determines\n     * whether and how to perform the addition.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param amountToAdd  the amount of the unit to add to the result, may be negative\n     * @param unit  the unit of the amount to add, not null\n     * @return a {@code LocalDate} based on this date with the specified amount added, not null\n     * @throws DateTimeException if the addition cannot be made\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public LocalDate plus(long amountToAdd, TemporalUnit unit) {\n        if (unit instanceof ChronoUnit) {\n            ChronoUnit f = (ChronoUnit) unit;\n            switch (f) {\n                case DAYS: return plusDays(amountToAdd);\n                case WEEKS: return plusWeeks(amountToAdd);\n                case MONTHS: return plusMonths(amountToAdd);\n                case YEARS: return plusYears(amountToAdd);\n                case DECADES: return plusYears(Math.multiplyExact(amountToAdd, 10));\n                case CENTURIES: return plusYears(Math.multiplyExact(amountToAdd, 100));\n                case MILLENNIA: return plusYears(Math.multiplyExact(amountToAdd, 1000));\n                case ERAS: return with(ERA, Math.addExact(getLong(ERA), amountToAdd));\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.addTo(this, amountToAdd);\n    }"}
{"Number":"671","API Relative Path":"java.time.LocalDate.java-plus(long-TemporalUnit)","Corresponding Source":"/**\n     * Returns a copy of this date with the specified amount added.\n     * <p>\n     * This returns a {@code LocalDate}, based on this one, with the amount\n     * in terms of the unit added. If it is not possible to add the amount, because the\n     * unit is not supported or for some other reason, an exception is thrown.\n     * <p>\n     * In some cases, adding the amount can cause the resulting date to become invalid.\n     * For example, adding one month to 31st January would result in 31st February.\n     * In cases like this, the unit is responsible for resolving the date.\n     * Typically it will choose the previous valid date, which would be the last valid\n     * day of February in this example.\n     * <p>\n     * If the field is a {@link ChronoUnit} then the addition is implemented here.\n     * The supported fields behave as follows:\n     * <ul>\n     * <li>{@code DAYS} -\n     *  Returns a {@code LocalDate} with the specified number of days added.\n     *  This is equivalent to {@link #plusDays(long)}.\n     * <li>{@code WEEKS} -\n     *  Returns a {@code LocalDate} with the specified number of weeks added.\n     *  This is equivalent to {@link #plusWeeks(long)} and uses a 7 day week.\n     * <li>{@code MONTHS} -\n     *  Returns a {@code LocalDate} with the specified number of months added.\n     *  This is equivalent to {@link #plusMonths(long)}.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <li>{@code YEARS} -\n     *  Returns a {@code LocalDate} with the specified number of years added.\n     *  This is equivalent to {@link #plusYears(long)}.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <li>{@code DECADES} -\n     *  Returns a {@code LocalDate} with the specified number of decades added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 10.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <li>{@code CENTURIES} -\n     *  Returns a {@code LocalDate} with the specified number of centuries added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 100.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <li>{@code MILLENNIA} -\n     *  Returns a {@code LocalDate} with the specified number of millennia added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 1,000.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <li>{@code ERAS} -\n     *  Returns a {@code LocalDate} with the specified number of eras added.\n     *  Only two eras are supported so the amount must be one, zero or minus one.\n     *  If the amount is non-zero then the year is changed such that the year-of-era\n     *  is unchanged.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <\/ul>\n     * <p>\n     * All other {@code ChronoUnit} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoUnit}, then the result of this method\n     * is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}\n     * passing {@code this} as the argument. In this case, the unit determines\n     * whether and how to perform the addition.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param amountToAdd  the amount of the unit to add to the result, may be negative\n     * @param unit  the unit of the amount to add, not null\n     * @return a {@code LocalDate} based on this date with the specified amount added, not null\n     * @throws DateTimeException if the addition cannot be made\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public LocalDate plus(long amountToAdd, TemporalUnit unit) {\n        if (unit instanceof ChronoUnit) {\n            ChronoUnit f = (ChronoUnit) unit;\n            switch (f) {\n                case DAYS: return plusDays(amountToAdd);\n                case WEEKS: return plusWeeks(amountToAdd);\n                case MONTHS: return plusMonths(amountToAdd);\n                case YEARS: return plusYears(amountToAdd);\n                case DECADES: return plusYears(Math.multiplyExact(amountToAdd, 10));\n                case CENTURIES: return plusYears(Math.multiplyExact(amountToAdd, 100));\n                case MILLENNIA: return plusYears(Math.multiplyExact(amountToAdd, 1000));\n                case ERAS: return with(ERA, Math.addExact(getLong(ERA), amountToAdd));\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.addTo(this, amountToAdd);\n    }"}
{"Number":"672","API Relative Path":"java.time.LocalDate.java-plus(long-TemporalUnit)","Corresponding Source":"/**\n     * Returns a copy of this date with the specified amount added.\n     * <p>\n     * This returns a {@code LocalDate}, based on this one, with the amount\n     * in terms of the unit added. If it is not possible to add the amount, because the\n     * unit is not supported or for some other reason, an exception is thrown.\n     * <p>\n     * In some cases, adding the amount can cause the resulting date to become invalid.\n     * For example, adding one month to 31st January would result in 31st February.\n     * In cases like this, the unit is responsible for resolving the date.\n     * Typically it will choose the previous valid date, which would be the last valid\n     * day of February in this example.\n     * <p>\n     * If the field is a {@link ChronoUnit} then the addition is implemented here.\n     * The supported fields behave as follows:\n     * <ul>\n     * <li>{@code DAYS} -\n     *  Returns a {@code LocalDate} with the specified number of days added.\n     *  This is equivalent to {@link #plusDays(long)}.\n     * <li>{@code WEEKS} -\n     *  Returns a {@code LocalDate} with the specified number of weeks added.\n     *  This is equivalent to {@link #plusWeeks(long)} and uses a 7 day week.\n     * <li>{@code MONTHS} -\n     *  Returns a {@code LocalDate} with the specified number of months added.\n     *  This is equivalent to {@link #plusMonths(long)}.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <li>{@code YEARS} -\n     *  Returns a {@code LocalDate} with the specified number of years added.\n     *  This is equivalent to {@link #plusYears(long)}.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <li>{@code DECADES} -\n     *  Returns a {@code LocalDate} with the specified number of decades added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 10.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <li>{@code CENTURIES} -\n     *  Returns a {@code LocalDate} with the specified number of centuries added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 100.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <li>{@code MILLENNIA} -\n     *  Returns a {@code LocalDate} with the specified number of millennia added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 1,000.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <li>{@code ERAS} -\n     *  Returns a {@code LocalDate} with the specified number of eras added.\n     *  Only two eras are supported so the amount must be one, zero or minus one.\n     *  If the amount is non-zero then the year is changed such that the year-of-era\n     *  is unchanged.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <\/ul>\n     * <p>\n     * All other {@code ChronoUnit} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoUnit}, then the result of this method\n     * is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}\n     * passing {@code this} as the argument. In this case, the unit determines\n     * whether and how to perform the addition.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param amountToAdd  the amount of the unit to add to the result, may be negative\n     * @param unit  the unit of the amount to add, not null\n     * @return a {@code LocalDate} based on this date with the specified amount added, not null\n     * @throws DateTimeException if the addition cannot be made\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public LocalDate plus(long amountToAdd, TemporalUnit unit) {\n        if (unit instanceof ChronoUnit) {\n            ChronoUnit f = (ChronoUnit) unit;\n            switch (f) {\n                case DAYS: return plusDays(amountToAdd);\n                case WEEKS: return plusWeeks(amountToAdd);\n                case MONTHS: return plusMonths(amountToAdd);\n                case YEARS: return plusYears(amountToAdd);\n                case DECADES: return plusYears(Math.multiplyExact(amountToAdd, 10));\n                case CENTURIES: return plusYears(Math.multiplyExact(amountToAdd, 100));\n                case MILLENNIA: return plusYears(Math.multiplyExact(amountToAdd, 1000));\n                case ERAS: return with(ERA, Math.addExact(getLong(ERA), amountToAdd));\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.addTo(this, amountToAdd);\n    }"}
{"Number":"673","API Relative Path":"java.time.LocalDate.java-plus(long-TemporalUnit)","Corresponding Source":"/**\n     * Returns a copy of this date with the specified amount added.\n     * <p>\n     * This returns a {@code LocalDate}, based on this one, with the amount\n     * in terms of the unit added. If it is not possible to add the amount, because the\n     * unit is not supported or for some other reason, an exception is thrown.\n     * <p>\n     * In some cases, adding the amount can cause the resulting date to become invalid.\n     * For example, adding one month to 31st January would result in 31st February.\n     * In cases like this, the unit is responsible for resolving the date.\n     * Typically it will choose the previous valid date, which would be the last valid\n     * day of February in this example.\n     * <p>\n     * If the field is a {@link ChronoUnit} then the addition is implemented here.\n     * The supported fields behave as follows:\n     * <ul>\n     * <li>{@code DAYS} -\n     *  Returns a {@code LocalDate} with the specified number of days added.\n     *  This is equivalent to {@link #plusDays(long)}.\n     * <li>{@code WEEKS} -\n     *  Returns a {@code LocalDate} with the specified number of weeks added.\n     *  This is equivalent to {@link #plusWeeks(long)} and uses a 7 day week.\n     * <li>{@code MONTHS} -\n     *  Returns a {@code LocalDate} with the specified number of months added.\n     *  This is equivalent to {@link #plusMonths(long)}.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <li>{@code YEARS} -\n     *  Returns a {@code LocalDate} with the specified number of years added.\n     *  This is equivalent to {@link #plusYears(long)}.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <li>{@code DECADES} -\n     *  Returns a {@code LocalDate} with the specified number of decades added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 10.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <li>{@code CENTURIES} -\n     *  Returns a {@code LocalDate} with the specified number of centuries added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 100.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <li>{@code MILLENNIA} -\n     *  Returns a {@code LocalDate} with the specified number of millennia added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 1,000.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <li>{@code ERAS} -\n     *  Returns a {@code LocalDate} with the specified number of eras added.\n     *  Only two eras are supported so the amount must be one, zero or minus one.\n     *  If the amount is non-zero then the year is changed such that the year-of-era\n     *  is unchanged.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <\/ul>\n     * <p>\n     * All other {@code ChronoUnit} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoUnit}, then the result of this method\n     * is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}\n     * passing {@code this} as the argument. In this case, the unit determines\n     * whether and how to perform the addition.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param amountToAdd  the amount of the unit to add to the result, may be negative\n     * @param unit  the unit of the amount to add, not null\n     * @return a {@code LocalDate} based on this date with the specified amount added, not null\n     * @throws DateTimeException if the addition cannot be made\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public LocalDate plus(long amountToAdd, TemporalUnit unit) {\n        if (unit instanceof ChronoUnit) {\n            ChronoUnit f = (ChronoUnit) unit;\n            switch (f) {\n                case DAYS: return plusDays(amountToAdd);\n                case WEEKS: return plusWeeks(amountToAdd);\n                case MONTHS: return plusMonths(amountToAdd);\n                case YEARS: return plusYears(amountToAdd);\n                case DECADES: return plusYears(Math.multiplyExact(amountToAdd, 10));\n                case CENTURIES: return plusYears(Math.multiplyExact(amountToAdd, 100));\n                case MILLENNIA: return plusYears(Math.multiplyExact(amountToAdd, 1000));\n                case ERAS: return with(ERA, Math.addExact(getLong(ERA), amountToAdd));\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.addTo(this, amountToAdd);\n    }"}
{"Number":"674","API Relative Path":"java.time.LocalDate.java-plus(long-TemporalUnit)","Corresponding Source":"/**\n     * Returns a copy of this date with the specified amount added.\n     * <p>\n     * This returns a {@code LocalDate}, based on this one, with the amount\n     * in terms of the unit added. If it is not possible to add the amount, because the\n     * unit is not supported or for some other reason, an exception is thrown.\n     * <p>\n     * In some cases, adding the amount can cause the resulting date to become invalid.\n     * For example, adding one month to 31st January would result in 31st February.\n     * In cases like this, the unit is responsible for resolving the date.\n     * Typically it will choose the previous valid date, which would be the last valid\n     * day of February in this example.\n     * <p>\n     * If the field is a {@link ChronoUnit} then the addition is implemented here.\n     * The supported fields behave as follows:\n     * <ul>\n     * <li>{@code DAYS} -\n     *  Returns a {@code LocalDate} with the specified number of days added.\n     *  This is equivalent to {@link #plusDays(long)}.\n     * <li>{@code WEEKS} -\n     *  Returns a {@code LocalDate} with the specified number of weeks added.\n     *  This is equivalent to {@link #plusWeeks(long)} and uses a 7 day week.\n     * <li>{@code MONTHS} -\n     *  Returns a {@code LocalDate} with the specified number of months added.\n     *  This is equivalent to {@link #plusMonths(long)}.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <li>{@code YEARS} -\n     *  Returns a {@code LocalDate} with the specified number of years added.\n     *  This is equivalent to {@link #plusYears(long)}.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <li>{@code DECADES} -\n     *  Returns a {@code LocalDate} with the specified number of decades added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 10.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <li>{@code CENTURIES} -\n     *  Returns a {@code LocalDate} with the specified number of centuries added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 100.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <li>{@code MILLENNIA} -\n     *  Returns a {@code LocalDate} with the specified number of millennia added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 1,000.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <li>{@code ERAS} -\n     *  Returns a {@code LocalDate} with the specified number of eras added.\n     *  Only two eras are supported so the amount must be one, zero or minus one.\n     *  If the amount is non-zero then the year is changed such that the year-of-era\n     *  is unchanged.\n     *  The day-of-month will be unchanged unless it would be invalid for the new\n     *  month and year. In that case, the day-of-month is adjusted to the maximum\n     *  valid value for the new month and year.\n     * <\/ul>\n     * <p>\n     * All other {@code ChronoUnit} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoUnit}, then the result of this method\n     * is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}\n     * passing {@code this} as the argument. In this case, the unit determines\n     * whether and how to perform the addition.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param amountToAdd  the amount of the unit to add to the result, may be negative\n     * @param unit  the unit of the amount to add, not null\n     * @return a {@code LocalDate} based on this date with the specified amount added, not null\n     * @throws DateTimeException if the addition cannot be made\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public LocalDate plus(long amountToAdd, TemporalUnit unit) {\n        if (unit instanceof ChronoUnit) {\n            ChronoUnit f = (ChronoUnit) unit;\n            switch (f) {\n                case DAYS: return plusDays(amountToAdd);\n                case WEEKS: return plusWeeks(amountToAdd);\n                case MONTHS: return plusMonths(amountToAdd);\n                case YEARS: return plusYears(amountToAdd);\n                case DECADES: return plusYears(Math.multiplyExact(amountToAdd, 10));\n                case CENTURIES: return plusYears(Math.multiplyExact(amountToAdd, 100));\n                case MILLENNIA: return plusYears(Math.multiplyExact(amountToAdd, 1000));\n                case ERAS: return with(ERA, Math.addExact(getLong(ERA), amountToAdd));\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.addTo(this, amountToAdd);\n    }"}
{"Number":"675","API Relative Path":"java.time.LocalDate.java-plusDays(long)","Corresponding Source":"/**\n     * Returns a copy of this {@code LocalDate} with the specified number of days added.\n     * <p>\n     * This method adds the specified amount to the days field incrementing the\n     * month and year fields as necessary to ensure the result remains valid.\n     * The result is only invalid if the maximum/minimum year is exceeded.\n     * <p>\n     * For example, 2008-12-31 plus one day would result in 2009-01-01.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param daysToAdd  the days to add, may be negative\n     * @return a {@code LocalDate} based on this date with the days added, not null\n     * @throws DateTimeException if the result exceeds the supported date range\n     */\n    public LocalDate plusDays(long daysToAdd) {\n        if (daysToAdd == 0) {\n            return this;\n        }\n        long mjDay = Math.addExact(toEpochDay(), daysToAdd);\n        return LocalDate.ofEpochDay(mjDay);\n    }"}
{"Number":"676","API Relative Path":"java.time.LocalDate.java-plusWeeks(long)","Corresponding Source":"/**\n     * Returns a copy of this {@code LocalDate} with the specified number of weeks added.\n     * <p>\n     * This method adds the specified amount in weeks to the days field incrementing\n     * the month and year fields as necessary to ensure the result remains valid.\n     * The result is only invalid if the maximum/minimum year is exceeded.\n     * <p>\n     * For example, 2008-12-31 plus one week would result in 2009-01-07.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param weeksToAdd  the weeks to add, may be negative\n     * @return a {@code LocalDate} based on this date with the weeks added, not null\n     * @throws DateTimeException if the result exceeds the supported date range\n     */\n    public LocalDate plusWeeks(long weeksToAdd) {\n        return plusDays(Math.multiplyExact(weeksToAdd, 7));\n    }"}
{"Number":"677","API Relative Path":"java.time.LocalDate.java-range(TemporalField)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Gets the range of valid values for the specified field.\n     * <p>\n     * The range object expresses the minimum and maximum valid values for a field.\n     * This date is used to enhance the accuracy of the returned range.\n     * If it is not possible to return the range, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The {@link #isSupported(TemporalField) supported fields} will return\n     * appropriate range instances.\n     * All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}\n     * passing {@code this} as the argument.\n     * Whether the range can be obtained is determined by the field.\n     *\n     * @param field  the field to query the range for, not null\n     * @return the range of valid values for the field, not null\n     * @throws DateTimeException if the range for the field cannot be obtained\n     * @throws UnsupportedTemporalTypeException if the field is not supported\n     */\n    @Override\n    public ValueRange range(TemporalField field) {\n        if (field instanceof ChronoField) {\n            ChronoField f = (ChronoField) field;\n            if (f.isDateBased()) {\n                switch (f) {\n                    case DAY_OF_MONTH: return ValueRange.of(1, lengthOfMonth());\n                    case DAY_OF_YEAR: return ValueRange.of(1, lengthOfYear());\n                    case ALIGNED_WEEK_OF_MONTH: return ValueRange.of(1, getMonth() == Month.FEBRUARY && isLeapYear() == false ? 4 : 5);\n                    case YEAR_OF_ERA:\n                        return (getYear() <= 0 ? ValueRange.of(1, Year.MAX_VALUE + 1) : ValueRange.of(1, Year.MAX_VALUE));\n                }\n                return field.range();\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return field.rangeRefinedBy(this);\n    }"}
{"Number":"678","API Relative Path":"java.time.LocalDate.java-until(Temporal-TemporalUnit)","Corresponding Source":"/**\n     * Calculates the amount of time until another date in terms of the specified unit.\n     * <p>\n     * This calculates the amount of time between two {@code LocalDate}\n     * objects in terms of a single {@code TemporalUnit}.\n     * The start and end points are {@code this} and the specified date.\n     * The result will be negative if the end is before the start.\n     * The {@code Temporal} passed to this method is converted to a\n     * {@code LocalDate} using {@link #from(TemporalAccessor)}.\n     * For example, the amount in days between two dates can be calculated\n     * using {@code startDate.until(endDate, DAYS)}.\n     * <p>\n     * The calculation returns a whole number, representing the number of\n     * complete units between the two dates.\n     * For example, the amount in months between 2012-06-15 and 2012-08-14\n     * will only be one month as it is one day short of two months.\n     * <p>\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method.\n     * The second is to use {@link TemporalUnit#between(Temporal, Temporal)}:\n     * <pre>\n     *   // these two lines are equivalent\n     *   amount = start.until(end, MONTHS);\n     *   amount = MONTHS.between(start, end);\n     * <\/pre>\n     * The choice should be made based on which makes the code more readable.\n     * <p>\n     * The calculation is implemented in this method for {@link ChronoUnit}.\n     * The units {@code DAYS}, {@code WEEKS}, {@code MONTHS}, {@code YEARS},\n     * {@code DECADES}, {@code CENTURIES}, {@code MILLENNIA} and {@code ERAS}\n     * are supported. Other {@code ChronoUnit} values will throw an exception.\n     * <p>\n     * If the unit is not a {@code ChronoUnit}, then the result of this method\n     * is obtained by invoking {@code TemporalUnit.between(Temporal, Temporal)}\n     * passing {@code this} as the first argument and the converted input temporal\n     * as the second argument.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param endExclusive  the end date, exclusive, which is converted to a {@code LocalDate}, not null\n     * @param unit  the unit to measure the amount in, not null\n     * @return the amount of time between this date and the end date\n     * @throws DateTimeException if the amount cannot be calculated, or the end\n     *  temporal cannot be converted to a {@code LocalDate}\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public long until(Temporal endExclusive, TemporalUnit unit) {\n        LocalDate end = LocalDate.from(endExclusive);\n        if (unit instanceof ChronoUnit) {\n            switch ((ChronoUnit) unit) {\n                case DAYS: return daysUntil(end);\n                case WEEKS: return daysUntil(end) / 7;\n                case MONTHS: return monthsUntil(end);\n                case YEARS: return monthsUntil(end) / 12;\n                case DECADES: return monthsUntil(end) / 120;\n                case CENTURIES: return monthsUntil(end) / 1200;\n                case MILLENNIA: return monthsUntil(end) / 12000;\n                case ERAS: return end.getLong(ERA) - getLong(ERA);\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.between(this, end);\n    }"}
{"Number":"679","API Relative Path":"java.time.LocalDate.java-with(TemporalField-long)","Corresponding Source":"/**\n     * Returns a copy of this date with the specified field set to a new value.\n     * <p>\n     * This returns a {@code LocalDate}, based on this one, with the value\n     * for the specified field changed.\n     * This can be used to change any supported field, such as the year, month or day-of-month.\n     * If it is not possible to set the value, because the field is not supported or for\n     * some other reason, an exception is thrown.\n     * <p>\n     * In some cases, changing the specified field can cause the resulting date to become invalid,\n     * such as changing the month from 31st January to February would make the day-of-month invalid.\n     * In cases like this, the field is responsible for resolving the date. Typically it will choose\n     * the previous valid date, which would be the last valid day of February in this example.\n     * <p>\n     * If the field is a {@link ChronoField} then the adjustment is implemented here.\n     * The supported fields behave as follows:\n     * <ul>\n     * <li>{@code DAY_OF_WEEK} -\n     *  Returns a {@code LocalDate} with the specified day-of-week.\n     *  The date is adjusted up to 6 days forward or backward within the boundary\n     *  of a Monday to Sunday week.\n     * <li>{@code ALIGNED_DAY_OF_WEEK_IN_MONTH} -\n     *  Returns a {@code LocalDate} with the specified aligned-day-of-week.\n     *  The date is adjusted to the specified month-based aligned-day-of-week.\n     *  Aligned weeks are counted such that the first week of a given month starts\n     *  on the first day of that month.\n     *  This may cause the date to be moved up to 6 days into the following month.\n     * <li>{@code ALIGNED_DAY_OF_WEEK_IN_YEAR} -\n     *  Returns a {@code LocalDate} with the specified aligned-day-of-week.\n     *  The date is adjusted to the specified year-based aligned-day-of-week.\n     *  Aligned weeks are counted such that the first week of a given year starts\n     *  on the first day of that year.\n     *  This may cause the date to be moved up to 6 days into the following year.\n     * <li>{@code DAY_OF_MONTH} -\n     *  Returns a {@code LocalDate} with the specified day-of-month.\n     *  The month and year will be unchanged. If the day-of-month is invalid for the\n     *  year and month, then a {@code DateTimeException} is thrown.\n     * <li>{@code DAY_OF_YEAR} -\n     *  Returns a {@code LocalDate} with the specified day-of-year.\n     *  The year will be unchanged. If the day-of-year is invalid for the\n     *  year, then a {@code DateTimeException} is thrown.\n     * <li>{@code EPOCH_DAY} -\n     *  Returns a {@code LocalDate} with the specified epoch-day.\n     *  This completely replaces the date and is equivalent to {@link #ofEpochDay(long)}.\n     * <li>{@code ALIGNED_WEEK_OF_MONTH} -\n     *  Returns a {@code LocalDate} with the specified aligned-week-of-month.\n     *  Aligned weeks are counted such that the first week of a given month starts\n     *  on the first day of that month.\n     *  This adjustment moves the date in whole week chunks to match the specified week.\n     *  The result will have the same day-of-week as this date.\n     *  This may cause the date to be moved into the following month.\n     * <li>{@code ALIGNED_WEEK_OF_YEAR} -\n     *  Returns a {@code LocalDate} with the specified aligned-week-of-year.\n     *  Aligned weeks are counted such that the first week of a given year starts\n     *  on the first day of that year.\n     *  This adjustment moves the date in whole week chunks to match the specified week.\n     *  The result will have the same day-of-week as this date.\n     *  This may cause the date to be moved into the following year.\n     * <li>{@code MONTH_OF_YEAR} -\n     *  Returns a {@code LocalDate} with the specified month-of-year.\n     *  The year will be unchanged. The day-of-month will also be unchanged,\n     *  unless it would be invalid for the new month and year. In that case, the\n     *  day-of-month is adjusted to the maximum valid value for the new month and year.\n     * <li>{@code PROLEPTIC_MONTH} -\n     *  Returns a {@code LocalDate} with the specified proleptic-month.\n     *  The day-of-month will be unchanged, unless it would be invalid for the new month\n     *  and year. In that case, the day-of-month is adjusted to the maximum valid value\n     *  for the new month and year.\n     * <li>{@code YEAR_OF_ERA} -\n     *  Returns a {@code LocalDate} with the specified year-of-era.\n     *  The era and month will be unchanged. The day-of-month will also be unchanged,\n     *  unless it would be invalid for the new month and year. In that case, the\n     *  day-of-month is adjusted to the maximum valid value for the new month and year.\n     * <li>{@code YEAR} -\n     *  Returns a {@code LocalDate} with the specified year.\n     *  The month will be unchanged. The day-of-month will also be unchanged,\n     *  unless it would be invalid for the new month and year. In that case, the\n     *  day-of-month is adjusted to the maximum valid value for the new month and year.\n     * <li>{@code ERA} -\n     *  Returns a {@code LocalDate} with the specified era.\n     *  The year-of-era and month will be unchanged. The day-of-month will also be unchanged,\n     *  unless it would be invalid for the new month and year. In that case, the\n     *  day-of-month is adjusted to the maximum valid value for the new month and year.\n     * <\/ul>\n     * <p>\n     * In all cases, if the new value is outside the valid range of values for the field\n     * then a {@code DateTimeException} will be thrown.\n     * <p>\n     * All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.adjustInto(Temporal, long)}\n     * passing {@code this} as the argument. In this case, the field determines\n     * whether and how to adjust the instant.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param field  the field to set in the result, not null\n     * @param newValue  the new value of the field in the result\n     * @return a {@code LocalDate} based on {@code this} with the specified field set, not null\n     * @throws DateTimeException if the field cannot be set\n     * @throws UnsupportedTemporalTypeException if the field is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public LocalDate with(TemporalField field, long newValue) {\n        if (field instanceof ChronoField) {\n            ChronoField f = (ChronoField) field;\n            f.checkValidValue(newValue);\n            switch (f) {\n                case DAY_OF_WEEK: return plusDays(newValue - getDayOfWeek().getValue());\n                case ALIGNED_DAY_OF_WEEK_IN_MONTH: return plusDays(newValue - getLong(ALIGNED_DAY_OF_WEEK_IN_MONTH));\n                case ALIGNED_DAY_OF_WEEK_IN_YEAR: return plusDays(newValue - getLong(ALIGNED_DAY_OF_WEEK_IN_YEAR));\n                case DAY_OF_MONTH: return withDayOfMonth((int) newValue);\n                case DAY_OF_YEAR: return withDayOfYear((int) newValue);\n                case EPOCH_DAY: return LocalDate.ofEpochDay(newValue);\n                case ALIGNED_WEEK_OF_MONTH: return plusWeeks(newValue - getLong(ALIGNED_WEEK_OF_MONTH));\n                case ALIGNED_WEEK_OF_YEAR: return plusWeeks(newValue - getLong(ALIGNED_WEEK_OF_YEAR));\n                case MONTH_OF_YEAR: return withMonth((int) newValue);\n                case PROLEPTIC_MONTH: return plusMonths(newValue - getProlepticMonth());\n                case YEAR_OF_ERA: return withYear((int) (year >= 1 ? newValue : 1 - newValue));\n                case YEAR: return withYear((int) newValue);\n                case ERA: return (getLong(ERA) == newValue ? this : withYear(1 - year));\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return field.adjustInto(this, newValue);\n    }"}
{"Number":"680","API Relative Path":"java.time.LocalDate.java-withDayOfMonth(int)","Corresponding Source":"/**\n     * Returns a copy of this {@code LocalDate} with the day-of-month altered.\n     * <p>\n     * If the resulting date is invalid, an exception is thrown.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param dayOfMonth  the day-of-month to set in the result, from 1 to 28-31\n     * @return a {@code LocalDate} based on this date with the requested day, not null\n     * @throws DateTimeException if the day-of-month value is invalid,\n     *  or if the day-of-month is invalid for the month-year\n     */\n    public LocalDate withDayOfMonth(int dayOfMonth) {\n        if (this.day == dayOfMonth) {\n            return this;\n        }\n        return of(year, month, dayOfMonth);\n    }"}
{"Number":"681","API Relative Path":"java.time.LocalDate.java-withDayOfMonth(int)","Corresponding Source":"/**\n     * Returns a copy of this {@code LocalDate} with the day-of-month altered.\n     * <p>\n     * If the resulting date is invalid, an exception is thrown.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param dayOfMonth  the day-of-month to set in the result, from 1 to 28-31\n     * @return a {@code LocalDate} based on this date with the requested day, not null\n     * @throws DateTimeException if the day-of-month value is invalid,\n     *  or if the day-of-month is invalid for the month-year\n     */\n    public LocalDate withDayOfMonth(int dayOfMonth) {\n        if (this.day == dayOfMonth) {\n            return this;\n        }\n        return of(year, month, dayOfMonth);\n    }"}
{"Number":"682","API Relative Path":"java.time.LocalDate.java-withDayOfYear(int)","Corresponding Source":"/**\n     * Returns a copy of this {@code LocalDate} with the day-of-year altered.\n     * <p>\n     * If the resulting date is invalid, an exception is thrown.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param dayOfYear  the day-of-year to set in the result, from 1 to 365-366\n     * @return a {@code LocalDate} based on this date with the requested day, not null\n     * @throws DateTimeException if the day-of-year value is invalid,\n     *  or if the day-of-year is invalid for the year\n     */\n    public LocalDate withDayOfYear(int dayOfYear) {\n        if (this.getDayOfYear() == dayOfYear) {\n            return this;\n        }\n        return ofYearDay(year, dayOfYear);\n    }"}
{"Number":"683","API Relative Path":"java.time.LocalTime.java-minus(long-TemporalUnit)","Corresponding Source":"/**\n     * Returns a copy of this time with the specified amount subtracted.\n     * <p>\n     * This returns a {@code LocalTime}, based on this one, with the amount\n     * in terms of the unit subtracted. If it is not possible to subtract the amount,\n     * because the unit is not supported or for some other reason, an exception is thrown.\n     * <p>\n     * This method is equivalent to {@link #plus(long, TemporalUnit)} with the amount negated.\n     * See that method for a full description of how addition, and thus subtraction, works.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param amountToSubtract  the amount of the unit to subtract from the result, may be negative\n     * @param unit  the unit of the amount to subtract, not null\n     * @return a {@code LocalTime} based on this time with the specified amount subtracted, not null\n     * @throws DateTimeException if the subtraction cannot be made\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public LocalTime minus(long amountToSubtract, TemporalUnit unit) {\n        return (amountToSubtract == Long.MIN_VALUE ? plus(Long.MAX_VALUE, unit).plus(1, unit) : plus(-amountToSubtract, unit));\n    }"}
{"Number":"684","API Relative Path":"java.time.LocalTime.java-plus(long-TemporalUnit)","Corresponding Source":"/**\n     * Returns a copy of this time with the specified amount added.\n     * <p>\n     * This returns a {@code LocalTime}, based on this one, with the amount\n     * in terms of the unit added. If it is not possible to add the amount, because the\n     * unit is not supported or for some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoUnit} then the addition is implemented here.\n     * The supported fields behave as follows:\n     * <ul>\n     * <li>{@code NANOS} -\n     *  Returns a {@code LocalTime} with the specified number of nanoseconds added.\n     *  This is equivalent to {@link #plusNanos(long)}.\n     * <li>{@code MICROS} -\n     *  Returns a {@code LocalTime} with the specified number of microseconds added.\n     *  This is equivalent to {@link #plusNanos(long)} with the amount\n     *  multiplied by 1,000.\n     * <li>{@code MILLIS} -\n     *  Returns a {@code LocalTime} with the specified number of milliseconds added.\n     *  This is equivalent to {@link #plusNanos(long)} with the amount\n     *  multiplied by 1,000,000.\n     * <li>{@code SECONDS} -\n     *  Returns a {@code LocalTime} with the specified number of seconds added.\n     *  This is equivalent to {@link #plusSeconds(long)}.\n     * <li>{@code MINUTES} -\n     *  Returns a {@code LocalTime} with the specified number of minutes added.\n     *  This is equivalent to {@link #plusMinutes(long)}.\n     * <li>{@code HOURS} -\n     *  Returns a {@code LocalTime} with the specified number of hours added.\n     *  This is equivalent to {@link #plusHours(long)}.\n     * <li>{@code HALF_DAYS} -\n     *  Returns a {@code LocalTime} with the specified number of half-days added.\n     *  This is equivalent to {@link #plusHours(long)} with the amount\n     *  multiplied by 12.\n     * <\/ul>\n     * <p>\n     * All other {@code ChronoUnit} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoUnit}, then the result of this method\n     * is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}\n     * passing {@code this} as the argument. In this case, the unit determines\n     * whether and how to perform the addition.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param amountToAdd  the amount of the unit to add to the result, may be negative\n     * @param unit  the unit of the amount to add, not null\n     * @return a {@code LocalTime} based on this time with the specified amount added, not null\n     * @throws DateTimeException if the addition cannot be made\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public LocalTime plus(long amountToAdd, TemporalUnit unit) {\n        if (unit instanceof ChronoUnit) {\n            switch ((ChronoUnit) unit) {\n                case NANOS: return plusNanos(amountToAdd);\n                case MICROS: return plusNanos((amountToAdd % MICROS_PER_DAY) * 1000);\n                case MILLIS: return plusNanos((amountToAdd % MILLIS_PER_DAY) * 1000_000);\n                case SECONDS: return plusSeconds(amountToAdd);\n                case MINUTES: return plusMinutes(amountToAdd);\n                case HOURS: return plusHours(amountToAdd);\n                case HALF_DAYS: return plusHours((amountToAdd % 2) * 12);\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.addTo(this, amountToAdd);\n    }"}
{"Number":"685","API Relative Path":"java.time.LocalTime.java-until(Temporal-TemporalUnit)","Corresponding Source":"/**\n     * Calculates the amount of time until another time in terms of the specified unit.\n     * <p>\n     * This calculates the amount of time between two {@code LocalTime}\n     * objects in terms of a single {@code TemporalUnit}.\n     * The start and end points are {@code this} and the specified time.\n     * The result will be negative if the end is before the start.\n     * The {@code Temporal} passed to this method is converted to a\n     * {@code LocalTime} using {@link #from(TemporalAccessor)}.\n     * For example, the amount in hours between two times can be calculated\n     * using {@code startTime.until(endTime, HOURS)}.\n     * <p>\n     * The calculation returns a whole number, representing the number of\n     * complete units between the two times.\n     * For example, the amount in hours between 11:30 and 13:29 will only\n     * be one hour as it is one minute short of two hours.\n     * <p>\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method.\n     * The second is to use {@link TemporalUnit#between(Temporal, Temporal)}:\n     * <pre>\n     *   // these two lines are equivalent\n     *   amount = start.until(end, MINUTES);\n     *   amount = MINUTES.between(start, end);\n     * <\/pre>\n     * The choice should be made based on which makes the code more readable.\n     * <p>\n     * The calculation is implemented in this method for {@link ChronoUnit}.\n     * The units {@code NANOS}, {@code MICROS}, {@code MILLIS}, {@code SECONDS},\n     * {@code MINUTES}, {@code HOURS} and {@code HALF_DAYS} are supported.\n     * Other {@code ChronoUnit} values will throw an exception.\n     * <p>\n     * If the unit is not a {@code ChronoUnit}, then the result of this method\n     * is obtained by invoking {@code TemporalUnit.between(Temporal, Temporal)}\n     * passing {@code this} as the first argument and the converted input temporal\n     * as the second argument.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param endExclusive  the end time, exclusive, which is converted to a {@code LocalTime}, not null\n     * @param unit  the unit to measure the amount in, not null\n     * @return the amount of time between this time and the end time\n     * @throws DateTimeException if the amount cannot be calculated, or the end\n     *  temporal cannot be converted to a {@code LocalTime}\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public long until(Temporal endExclusive, TemporalUnit unit) {\n        LocalTime end = LocalTime.from(endExclusive);\n        if (unit instanceof ChronoUnit) {\n            long nanosUntil = end.toNanoOfDay() - toNanoOfDay();  // no overflow\n            switch ((ChronoUnit) unit) {\n                case NANOS: return nanosUntil;\n                case MICROS: return nanosUntil / 1000;\n                case MILLIS: return nanosUntil / 1000_000;\n                case SECONDS: return nanosUntil / NANOS_PER_SECOND;\n                case MINUTES: return nanosUntil / NANOS_PER_MINUTE;\n                case HOURS: return nanosUntil / NANOS_PER_HOUR;\n                case HALF_DAYS: return nanosUntil / (12 * NANOS_PER_HOUR);\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.between(this, end);\n    }"}
{"Number":"686","API Relative Path":"java.time.LocalTime.java-with(TemporalField-long)","Corresponding Source":"/**\n     * Returns a copy of this time with the specified field set to a new value.\n     * <p>\n     * This returns a {@code LocalTime}, based on this one, with the value\n     * for the specified field changed.\n     * This can be used to change any supported field, such as the hour, minute or second.\n     * If it is not possible to set the value, because the field is not supported or for\n     * some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoField} then the adjustment is implemented here.\n     * The supported fields behave as follows:\n     * <ul>\n     * <li>{@code NANO_OF_SECOND} -\n     *  Returns a {@code LocalTime} with the specified nano-of-second.\n     *  The hour, minute and second will be unchanged.\n     * <li>{@code NANO_OF_DAY} -\n     *  Returns a {@code LocalTime} with the specified nano-of-day.\n     *  This completely replaces the time and is equivalent to {@link #ofNanoOfDay(long)}.\n     * <li>{@code MICRO_OF_SECOND} -\n     *  Returns a {@code LocalTime} with the nano-of-second replaced by the specified\n     *  micro-of-second multiplied by 1,000.\n     *  The hour, minute and second will be unchanged.\n     * <li>{@code MICRO_OF_DAY} -\n     *  Returns a {@code LocalTime} with the specified micro-of-day.\n     *  This completely replaces the time and is equivalent to using {@link #ofNanoOfDay(long)}\n     *  with the micro-of-day multiplied by 1,000.\n     * <li>{@code MILLI_OF_SECOND} -\n     *  Returns a {@code LocalTime} with the nano-of-second replaced by the specified\n     *  milli-of-second multiplied by 1,000,000.\n     *  The hour, minute and second will be unchanged.\n     * <li>{@code MILLI_OF_DAY} -\n     *  Returns a {@code LocalTime} with the specified milli-of-day.\n     *  This completely replaces the time and is equivalent to using {@link #ofNanoOfDay(long)}\n     *  with the milli-of-day multiplied by 1,000,000.\n     * <li>{@code SECOND_OF_MINUTE} -\n     *  Returns a {@code LocalTime} with the specified second-of-minute.\n     *  The hour, minute and nano-of-second will be unchanged.\n     * <li>{@code SECOND_OF_DAY} -\n     *  Returns a {@code LocalTime} with the specified second-of-day.\n     *  The nano-of-second will be unchanged.\n     * <li>{@code MINUTE_OF_HOUR} -\n     *  Returns a {@code LocalTime} with the specified minute-of-hour.\n     *  The hour, second-of-minute and nano-of-second will be unchanged.\n     * <li>{@code MINUTE_OF_DAY} -\n     *  Returns a {@code LocalTime} with the specified minute-of-day.\n     *  The second-of-minute and nano-of-second will be unchanged.\n     * <li>{@code HOUR_OF_AMPM} -\n     *  Returns a {@code LocalTime} with the specified hour-of-am-pm.\n     *  The AM/PM, minute-of-hour, second-of-minute and nano-of-second will be unchanged.\n     * <li>{@code CLOCK_HOUR_OF_AMPM} -\n     *  Returns a {@code LocalTime} with the specified clock-hour-of-am-pm.\n     *  The AM/PM, minute-of-hour, second-of-minute and nano-of-second will be unchanged.\n     * <li>{@code HOUR_OF_DAY} -\n     *  Returns a {@code LocalTime} with the specified hour-of-day.\n     *  The minute-of-hour, second-of-minute and nano-of-second will be unchanged.\n     * <li>{@code CLOCK_HOUR_OF_DAY} -\n     *  Returns a {@code LocalTime} with the specified clock-hour-of-day.\n     *  The minute-of-hour, second-of-minute and nano-of-second will be unchanged.\n     * <li>{@code AMPM_OF_DAY} -\n     *  Returns a {@code LocalTime} with the specified AM/PM.\n     *  The hour-of-am-pm, minute-of-hour, second-of-minute and nano-of-second will be unchanged.\n     * <\/ul>\n     * <p>\n     * In all cases, if the new value is outside the valid range of values for the field\n     * then a {@code DateTimeException} will be thrown.\n     * <p>\n     * All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.adjustInto(Temporal, long)}\n     * passing {@code this} as the argument. In this case, the field determines\n     * whether and how to adjust the instant.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param field  the field to set in the result, not null\n     * @param newValue  the new value of the field in the result\n     * @return a {@code LocalTime} based on {@code this} with the specified field set, not null\n     * @throws DateTimeException if the field cannot be set\n     * @throws UnsupportedTemporalTypeException if the field is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public LocalTime with(TemporalField field, long newValue) {\n        if (field instanceof ChronoField) {\n            ChronoField f = (ChronoField) field;\n            f.checkValidValue(newValue);\n            switch (f) {\n                case NANO_OF_SECOND: return withNano((int) newValue);\n                case NANO_OF_DAY: return LocalTime.ofNanoOfDay(newValue);\n                case MICRO_OF_SECOND: return withNano((int) newValue * 1000);\n                case MICRO_OF_DAY: return LocalTime.ofNanoOfDay(newValue * 1000);\n                case MILLI_OF_SECOND: return withNano((int) newValue * 1000_000);\n                case MILLI_OF_DAY: return LocalTime.ofNanoOfDay(newValue * 1000_000);\n                case SECOND_OF_MINUTE: return withSecond((int) newValue);\n                case SECOND_OF_DAY: return plusSeconds(newValue - toSecondOfDay());\n                case MINUTE_OF_HOUR: return withMinute((int) newValue);\n                case MINUTE_OF_DAY: return plusMinutes(newValue - (hour * 60 + minute));\n                case HOUR_OF_AMPM: return plusHours(newValue - (hour % 12));\n                case CLOCK_HOUR_OF_AMPM: return plusHours((newValue == 12 ? 0 : newValue) - (hour % 12));\n                case HOUR_OF_DAY: return withHour((int) newValue);\n                case CLOCK_HOUR_OF_DAY: return withHour((int) (newValue == 24 ? 0 : newValue));\n                case AMPM_OF_DAY: return plusHours((newValue - (hour / 12)) * 12);\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return field.adjustInto(this, newValue);\n    }"}
{"Number":"687","API Relative Path":"java.time.MonthDay.java-get(TemporalField)","Corresponding Source":"/**\n     * Gets the value of the specified field from this month-day as an {@code int}.\n     * <p>\n     * This queries this month-day for the value of the specified field.\n     * The returned value will always be within the valid range of values for the field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The {@link #isSupported(TemporalField) supported fields} will return valid\n     * values based on this month-day.\n     * All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n     * passing {@code this} as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param field  the field to get, not null\n     * @return the value for the field\n     * @throws DateTimeException if a value for the field cannot be obtained or\n     *         the value is outside the range of valid values for the field\n     * @throws UnsupportedTemporalTypeException if the field is not supported or\n     *         the range of values exceeds an {@code int}\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override  // override for Javadoc\n    public int get(TemporalField field) {\n        return range(field).checkValidIntValue(getLong(field), field);\n    }"}
{"Number":"688","API Relative Path":"java.time.MonthDay.java-getLong(TemporalField)","Corresponding Source":"/**\n     * Gets the value of the specified field from this month-day as a {@code long}.\n     * <p>\n     * This queries this month-day for the value of the specified field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The {@link #isSupported(TemporalField) supported fields} will return valid\n     * values based on this month-day.\n     * All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n     * passing {@code this} as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param field  the field to get, not null\n     * @return the value for the field\n     * @throws DateTimeException if a value for the field cannot be obtained\n     * @throws UnsupportedTemporalTypeException if the field is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public long getLong(TemporalField field) {\n        if (field instanceof ChronoField) {\n            switch ((ChronoField) field) {\n                // alignedDOW and alignedWOM not supported because they cannot be set in with()\n                case DAY_OF_MONTH: return day;\n                case MONTH_OF_YEAR: return month;\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return field.getFrom(this);\n    }"}
{"Number":"689","API Relative Path":"java.time.OffsetDateTime.java-with(TemporalField-long)","Corresponding Source":"/**\n     * Returns a copy of this date-time with the specified field set to a new value.\n     * <p>\n     * This returns an {@code OffsetDateTime}, based on this one, with the value\n     * for the specified field changed.\n     * This can be used to change any supported field, such as the year, month or day-of-month.\n     * If it is not possible to set the value, because the field is not supported or for\n     * some other reason, an exception is thrown.\n     * <p>\n     * In some cases, changing the specified field can cause the resulting date-time to become invalid,\n     * such as changing the month from 31st January to February would make the day-of-month invalid.\n     * In cases like this, the field is responsible for resolving the date. Typically it will choose\n     * the previous valid date, which would be the last valid day of February in this example.\n     * <p>\n     * If the field is a {@link ChronoField} then the adjustment is implemented here.\n     * <p>\n     * The {@code INSTANT_SECONDS} field will return a date-time with the specified instant.\n     * The offset and nano-of-second are unchanged.\n     * If the new instant value is outside the valid range then a {@code DateTimeException} will be thrown.\n     * <p>\n     * The {@code OFFSET_SECONDS} field will return a date-time with the specified offset.\n     * The local date-time is unaltered. If the new offset value is outside the valid range\n     * then a {@code DateTimeException} will be thrown.\n     * <p>\n     * The other {@link #isSupported(TemporalField) supported fields} will behave as per\n     * the matching method on {@link LocalDateTime#with(TemporalField, long) LocalDateTime}.\n     * In this case, the offset is not part of the calculation and will be unchanged.\n     * <p>\n     * All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.adjustInto(Temporal, long)}\n     * passing {@code this} as the argument. In this case, the field determines\n     * whether and how to adjust the instant.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param field  the field to set in the result, not null\n     * @param newValue  the new value of the field in the result\n     * @return an {@code OffsetDateTime} based on {@code this} with the specified field set, not null\n     * @throws DateTimeException if the field cannot be set\n     * @throws UnsupportedTemporalTypeException if the field is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public OffsetDateTime with(TemporalField field, long newValue) {\n        if (field instanceof ChronoField) {\n            ChronoField f = (ChronoField) field;\n            switch (f) {\n                case INSTANT_SECONDS: return ofInstant(Instant.ofEpochSecond(newValue, getNano()), offset);\n                case OFFSET_SECONDS: {\n                    return with(dateTime, ZoneOffset.ofTotalSeconds(f.checkValidIntValue(newValue)));\n                }\n            }\n            return with(dateTime.with(field, newValue), offset);\n        }\n        return field.adjustInto(this, newValue);\n    }"}
{"Number":"690","API Relative Path":"java.time.OffsetTime.java-until(Temporal-TemporalUnit)","Corresponding Source":"/**\n     * Calculates the amount of time until another time in terms of the specified unit.\n     * <p>\n     * This calculates the amount of time between two {@code OffsetTime}\n     * objects in terms of a single {@code TemporalUnit}.\n     * The start and end points are {@code this} and the specified time.\n     * The result will be negative if the end is before the start.\n     * For example, the amount in hours between two times can be calculated\n     * using {@code startTime.until(endTime, HOURS)}.\n     * <p>\n     * The {@code Temporal} passed to this method is converted to a\n     * {@code OffsetTime} using {@link #from(TemporalAccessor)}.\n     * If the offset differs between the two times, then the specified\n     * end time is normalized to have the same offset as this time.\n     * <p>\n     * The calculation returns a whole number, representing the number of\n     * complete units between the two times.\n     * For example, the amount in hours between 11:30Z and 13:29Z will only\n     * be one hour as it is one minute short of two hours.\n     * <p>\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method.\n     * The second is to use {@link TemporalUnit#between(Temporal, Temporal)}:\n     * <pre>\n     *   // these two lines are equivalent\n     *   amount = start.until(end, MINUTES);\n     *   amount = MINUTES.between(start, end);\n     * <\/pre>\n     * The choice should be made based on which makes the code more readable.\n     * <p>\n     * The calculation is implemented in this method for {@link ChronoUnit}.\n     * The units {@code NANOS}, {@code MICROS}, {@code MILLIS}, {@code SECONDS},\n     * {@code MINUTES}, {@code HOURS} and {@code HALF_DAYS} are supported.\n     * Other {@code ChronoUnit} values will throw an exception.\n     * <p>\n     * If the unit is not a {@code ChronoUnit}, then the result of this method\n     * is obtained by invoking {@code TemporalUnit.between(Temporal, Temporal)}\n     * passing {@code this} as the first argument and the converted input temporal\n     * as the second argument.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param endExclusive  the end time, exclusive, which is converted to an {@code OffsetTime}, not null\n     * @param unit  the unit to measure the amount in, not null\n     * @return the amount of time between this time and the end time\n     * @throws DateTimeException if the amount cannot be calculated, or the end\n     *  temporal cannot be converted to an {@code OffsetTime}\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public long until(Temporal endExclusive, TemporalUnit unit) {\n        OffsetTime end = OffsetTime.from(endExclusive);\n        if (unit instanceof ChronoUnit) {\n            long nanosUntil = end.toEpochNano() - toEpochNano();  // no overflow\n            switch ((ChronoUnit) unit) {\n                case NANOS: return nanosUntil;\n                case MICROS: return nanosUntil / 1000;\n                case MILLIS: return nanosUntil / 1000_000;\n                case SECONDS: return nanosUntil / NANOS_PER_SECOND;\n                case MINUTES: return nanosUntil / NANOS_PER_MINUTE;\n                case HOURS: return nanosUntil / NANOS_PER_HOUR;\n                case HALF_DAYS: return nanosUntil / (12 * NANOS_PER_HOUR);\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.between(this, end);\n    }"}
{"Number":"691","API Relative Path":"java.time.Period.java-get(TemporalUnit)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Gets the value of the requested unit.\n     * <p>\n     * This returns a value for each of the three supported units,\n     * {@link ChronoUnit#YEARS YEARS}, {@link ChronoUnit#MONTHS MONTHS} and\n     * {@link ChronoUnit#DAYS DAYS}.\n     * All other units throw an exception.\n     *\n     * @param unit the {@code TemporalUnit} for which to return the value\n     * @return the long value of the unit\n     * @throws DateTimeException if the unit is not supported\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     */\n    @Override\n    public long get(TemporalUnit unit) {\n        if (unit == ChronoUnit.YEARS) {\n            return getYears();\n        } else if (unit == ChronoUnit.MONTHS) {\n            return getMonths();\n        } else if (unit == ChronoUnit.DAYS) {\n            return getDays();\n        } else {\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n    }"}
{"Number":"692","API Relative Path":"java.time.Period.java-plusDays(long)","Corresponding Source":"/**\n     * Returns a copy of this period with the specified days added.\n     * <p>\n     * This adds the amount to the days unit in a copy of this period.\n     * The years and months units are unaffected.\n     * For example, \"1 year, 6 months and 3 days\" plus 2 days returns \"1 year, 6 months and 5 days\".\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param daysToAdd  the days to add, positive or negative\n     * @return a {@code Period} based on this period with the specified days added, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    public Period plusDays(long daysToAdd) {\n        if (daysToAdd == 0) {\n            return this;\n        }\n        return create(years, months, Math.toIntExact(Math.addExact(days, daysToAdd)));\n    }"}
{"Number":"693","API Relative Path":"java.time.Period.java-plusMonths(long)","Corresponding Source":"/**\n     * Returns a copy of this period with the specified months added.\n     * <p>\n     * This adds the amount to the months unit in a copy of this period.\n     * The years and days units are unaffected.\n     * For example, \"1 year, 6 months and 3 days\" plus 2 months returns \"1 year, 8 months and 3 days\".\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param monthsToAdd  the months to add, positive or negative\n     * @return a {@code Period} based on this period with the specified months added, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    public Period plusMonths(long monthsToAdd) {\n        if (monthsToAdd == 0) {\n            return this;\n        }\n        return create(years, Math.toIntExact(Math.addExact(months, monthsToAdd)), days);\n    }"}
{"Number":"694","API Relative Path":"java.time.Period.java-plusYears(long)","Corresponding Source":"/**\n     * Returns a copy of this period with the specified years added.\n     * <p>\n     * This adds the amount to the years unit in a copy of this period.\n     * The months and days units are unaffected.\n     * For example, \"1 year, 6 months and 3 days\" plus 2 years returns \"3 years, 6 months and 3 days\".\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param yearsToAdd  the years to add, positive or negative\n     * @return a {@code Period} based on this period with the specified years added, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    public Period plusYears(long yearsToAdd) {\n        if (yearsToAdd == 0) {\n            return this;\n        }\n        return create(Math.toIntExact(Math.addExact(years, yearsToAdd)), months, days);\n    }"}
{"Number":"695","API Relative Path":"java.time.temporal.ValueRange.java-of(long-long)","Corresponding Source":"/**\n     * Obtains a fixed value range.\n     * <p>\n     * This factory obtains a range where the minimum and maximum values are fixed.\n     * For example, the ISO month-of-year always runs from 1 to 12.\n     *\n     * @param min  the minimum value\n     * @param max  the maximum value\n     * @return the ValueRange for min, max, not null\n     * @throws IllegalArgumentException if the minimum is greater than the maximum\n     */\n    public static ValueRange of(long min, long max) {\n        if (min > max) {\n            throw new IllegalArgumentException(\"Minimum value must be less than maximum value\");\n        }\n        return new ValueRange(min, min, max, max);\n    }"}
{"Number":"696","API Relative Path":"java.time.temporal.ValueRange.java-of(long-long-long-long)","Corresponding Source":"/**\n     * Obtains a fully variable value range.\n     * <p>\n     * This factory obtains a range where both the minimum and maximum value may vary.\n     *\n     * @param minSmallest  the smallest minimum value\n     * @param minLargest  the largest minimum value\n     * @param maxSmallest  the smallest maximum value\n     * @param maxLargest  the largest maximum value\n     * @return the ValueRange for smallest min, largest min, smallest max, largest max, not null\n     * @throws IllegalArgumentException if\n     *     the smallest minimum is greater than the smallest maximum,\n     *  or the smallest maximum is greater than the largest maximum\n     *  or the largest minimum is greater than the largest maximum\n     */\n    public static ValueRange of(long minSmallest, long minLargest, long maxSmallest, long maxLargest) {\n        if (minSmallest > minLargest) {\n            throw new IllegalArgumentException(\"Smallest minimum value must be less than largest minimum value\");\n        }\n        if (maxSmallest > maxLargest) {\n            throw new IllegalArgumentException(\"Smallest maximum value must be less than largest maximum value\");\n        }\n        if (minLargest > maxLargest) {\n            throw new IllegalArgumentException(\"Minimum value must be less than maximum value\");\n        }\n        return new ValueRange(minSmallest, minLargest, maxSmallest, maxLargest);\n    }"}
{"Number":"697","API Relative Path":"java.time.temporal.ValueRange.java-of(long-long-long-long)","Corresponding Source":"/**\n     * Obtains a fully variable value range.\n     * <p>\n     * This factory obtains a range where both the minimum and maximum value may vary.\n     *\n     * @param minSmallest  the smallest minimum value\n     * @param minLargest  the largest minimum value\n     * @param maxSmallest  the smallest maximum value\n     * @param maxLargest  the largest maximum value\n     * @return the ValueRange for smallest min, largest min, smallest max, largest max, not null\n     * @throws IllegalArgumentException if\n     *     the smallest minimum is greater than the smallest maximum,\n     *  or the smallest maximum is greater than the largest maximum\n     *  or the largest minimum is greater than the largest maximum\n     */\n    public static ValueRange of(long minSmallest, long minLargest, long maxSmallest, long maxLargest) {\n        if (minSmallest > minLargest) {\n            throw new IllegalArgumentException(\"Smallest minimum value must be less than largest minimum value\");\n        }\n        if (maxSmallest > maxLargest) {\n            throw new IllegalArgumentException(\"Smallest maximum value must be less than largest maximum value\");\n        }\n        if (minLargest > maxLargest) {\n            throw new IllegalArgumentException(\"Minimum value must be less than maximum value\");\n        }\n        return new ValueRange(minSmallest, minLargest, maxSmallest, maxLargest);\n    }"}
{"Number":"698","API Relative Path":"java.time.temporal.ValueRange.java-of(long-long-long-long)","Corresponding Source":"/**\n     * Obtains a fully variable value range.\n     * <p>\n     * This factory obtains a range where both the minimum and maximum value may vary.\n     *\n     * @param minSmallest  the smallest minimum value\n     * @param minLargest  the largest minimum value\n     * @param maxSmallest  the smallest maximum value\n     * @param maxLargest  the largest maximum value\n     * @return the ValueRange for smallest min, largest min, smallest max, largest max, not null\n     * @throws IllegalArgumentException if\n     *     the smallest minimum is greater than the smallest maximum,\n     *  or the smallest maximum is greater than the largest maximum\n     *  or the largest minimum is greater than the largest maximum\n     */\n    public static ValueRange of(long minSmallest, long minLargest, long maxSmallest, long maxLargest) {\n        if (minSmallest > minLargest) {\n            throw new IllegalArgumentException(\"Smallest minimum value must be less than largest minimum value\");\n        }\n        if (maxSmallest > maxLargest) {\n            throw new IllegalArgumentException(\"Smallest maximum value must be less than largest maximum value\");\n        }\n        if (minLargest > maxLargest) {\n            throw new IllegalArgumentException(\"Minimum value must be less than maximum value\");\n        }\n        return new ValueRange(minSmallest, minLargest, maxSmallest, maxLargest);\n    }"}
{"Number":"699","API Relative Path":"java.time.temporal.WeekFields.java-of(DayOfWeek-int)","Corresponding Source":"/**\n     * Obtains an instance of {@code WeekFields} from the first day-of-week and minimal days.\n     * <p>\n     * The first day-of-week defines the ISO {@code DayOfWeek} that is day 1 of the week.\n     * The minimal number of days in the first week defines how many days must be present\n     * in a month or year, starting from the first day-of-week, before the week is counted\n     * as the first week. A value of 1 will count the first day of the month or year as part\n     * of the first week, whereas a value of 7 will require the whole seven days to be in\n     * the new month or year.\n     * <p>\n     * WeekFields instances are singletons; for each unique combination\n     * of {@code firstDayOfWeek} and {@code minimalDaysInFirstWeek} the\n     * the same instance will be returned.\n     *\n     * @param firstDayOfWeek  the first day of the week, not null\n     * @param minimalDaysInFirstWeek  the minimal number of days in the first week, from 1 to 7\n     * @return the week-definition, not null\n     * @throws IllegalArgumentException if the minimal days value is less than one\n     *      or greater than 7\n     */\n    public static WeekFields of(DayOfWeek firstDayOfWeek, int minimalDaysInFirstWeek) {\n        String key = firstDayOfWeek.toString() + minimalDaysInFirstWeek;\n        WeekFields rules = CACHE.get(key);\n        if (rules == null) {\n            rules = new WeekFields(firstDayOfWeek, minimalDaysInFirstWeek);\n            CACHE.putIfAbsent(key, rules);\n            rules = CACHE.get(key);\n        }\n        return rules;\n    }"}
{"Number":"700","API Relative Path":"java.time.Year.java-atDay(int)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Combines this year with a day-of-year to create a {@code LocalDate}.\n     * <p>\n     * This returns a {@code LocalDate} formed from this year and the specified day-of-year.\n     * <p>\n     * The day-of-year value 366 is only valid in a leap year.\n     *\n     * @param dayOfYear  the day-of-year to use, from 1 to 365-366\n     * @return the local date formed from this year and the specified date of year, not null\n     * @throws DateTimeException if the day of year is zero or less, 366 or greater or equal\n     *  to 366 and this is not a leap year\n     */\n    public LocalDate atDay(int dayOfYear) {\n        return LocalDate.ofYearDay(year, dayOfYear);\n    }"}
{"Number":"701","API Relative Path":"java.time.Year.java-get(TemporalField)","Corresponding Source":"/**\n     * Gets the value of the specified field from this year as an {@code int}.\n     * <p>\n     * This queries this year for the value of the specified field.\n     * The returned value will always be within the valid range of values for the field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The {@link #isSupported(TemporalField) supported fields} will return valid\n     * values based on this year.\n     * All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n     * passing {@code this} as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param field  the field to get, not null\n     * @return the value for the field\n     * @throws DateTimeException if a value for the field cannot be obtained or\n     *         the value is outside the range of valid values for the field\n     * @throws UnsupportedTemporalTypeException if the field is not supported or\n     *         the range of values exceeds an {@code int}\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override  // override for Javadoc\n    public int get(TemporalField field) {\n        return range(field).checkValidIntValue(getLong(field), field);\n    }"}
{"Number":"702","API Relative Path":"java.time.Year.java-getLong(TemporalField)","Corresponding Source":"/**\n     * Gets the value of the specified field from this year as a {@code long}.\n     * <p>\n     * This queries this year for the value of the specified field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The {@link #isSupported(TemporalField) supported fields} will return valid\n     * values based on this year.\n     * All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n     * passing {@code this} as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param field  the field to get, not null\n     * @return the value for the field\n     * @throws DateTimeException if a value for the field cannot be obtained\n     * @throws UnsupportedTemporalTypeException if the field is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public long getLong(TemporalField field) {\n        if (field instanceof ChronoField) {\n            switch ((ChronoField) field) {\n                case YEAR_OF_ERA: return (year < 1 ? 1 - year : year);\n                case YEAR: return year;\n                case ERA: return (year < 1 ? 0 : 1);\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return field.getFrom(this);\n    }"}
{"Number":"703","API Relative Path":"java.time.Year.java-minus(long-TemporalUnit)","Corresponding Source":"/**\n     * Returns a copy of this year with the specified amount subtracted.\n     * <p>\n     * This returns a {@code Year}, based on this one, with the amount\n     * in terms of the unit subtracted. If it is not possible to subtract the amount,\n     * because the unit is not supported or for some other reason, an exception is thrown.\n     * <p>\n     * This method is equivalent to {@link #plus(long, TemporalUnit)} with the amount negated.\n     * See that method for a full description of how addition, and thus subtraction, works.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param amountToSubtract  the amount of the unit to subtract from the result, may be negative\n     * @param unit  the unit of the amount to subtract, not null\n     * @return a {@code Year} based on this year with the specified amount subtracted, not null\n     * @throws DateTimeException if the subtraction cannot be made\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public Year minus(long amountToSubtract, TemporalUnit unit) {\n        return (amountToSubtract == Long.MIN_VALUE ? plus(Long.MAX_VALUE, unit).plus(1, unit) : plus(-amountToSubtract, unit));\n    }"}
{"Number":"704","API Relative Path":"java.time.Year.java-plus(long-TemporalUnit)","Corresponding Source":"/**\n     * Returns a copy of this year with the specified amount added.\n     * <p>\n     * This returns a {@code Year}, based on this one, with the amount\n     * in terms of the unit added. If it is not possible to add the amount, because the\n     * unit is not supported or for some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoUnit} then the addition is implemented here.\n     * The supported fields behave as follows:\n     * <ul>\n     * <li>{@code YEARS} -\n     *  Returns a {@code Year} with the specified number of years added.\n     *  This is equivalent to {@link #plusYears(long)}.\n     * <li>{@code DECADES} -\n     *  Returns a {@code Year} with the specified number of decades added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 10.\n     * <li>{@code CENTURIES} -\n     *  Returns a {@code Year} with the specified number of centuries added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 100.\n     * <li>{@code MILLENNIA} -\n     *  Returns a {@code Year} with the specified number of millennia added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 1,000.\n     * <li>{@code ERAS} -\n     *  Returns a {@code Year} with the specified number of eras added.\n     *  Only two eras are supported so the amount must be one, zero or minus one.\n     *  If the amount is non-zero then the year is changed such that the year-of-era\n     *  is unchanged.\n     * <\/ul>\n     * <p>\n     * All other {@code ChronoUnit} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoUnit}, then the result of this method\n     * is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}\n     * passing {@code this} as the argument. In this case, the unit determines\n     * whether and how to perform the addition.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param amountToAdd  the amount of the unit to add to the result, may be negative\n     * @param unit  the unit of the amount to add, not null\n     * @return a {@code Year} based on this year with the specified amount added, not null\n     * @throws DateTimeException if the addition cannot be made\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public Year plus(long amountToAdd, TemporalUnit unit) {\n        if (unit instanceof ChronoUnit) {\n            switch ((ChronoUnit) unit) {\n                case YEARS: return plusYears(amountToAdd);\n                case DECADES: return plusYears(Math.multiplyExact(amountToAdd, 10));\n                case CENTURIES: return plusYears(Math.multiplyExact(amountToAdd, 100));\n                case MILLENNIA: return plusYears(Math.multiplyExact(amountToAdd, 1000));\n                case ERAS: return with(ERA, Math.addExact(getLong(ERA), amountToAdd));\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.addTo(this, amountToAdd);\n    }"}
{"Number":"705","API Relative Path":"java.time.Year.java-plus(long-TemporalUnit)","Corresponding Source":"/**\n     * Returns a copy of this year with the specified amount added.\n     * <p>\n     * This returns a {@code Year}, based on this one, with the amount\n     * in terms of the unit added. If it is not possible to add the amount, because the\n     * unit is not supported or for some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoUnit} then the addition is implemented here.\n     * The supported fields behave as follows:\n     * <ul>\n     * <li>{@code YEARS} -\n     *  Returns a {@code Year} with the specified number of years added.\n     *  This is equivalent to {@link #plusYears(long)}.\n     * <li>{@code DECADES} -\n     *  Returns a {@code Year} with the specified number of decades added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 10.\n     * <li>{@code CENTURIES} -\n     *  Returns a {@code Year} with the specified number of centuries added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 100.\n     * <li>{@code MILLENNIA} -\n     *  Returns a {@code Year} with the specified number of millennia added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 1,000.\n     * <li>{@code ERAS} -\n     *  Returns a {@code Year} with the specified number of eras added.\n     *  Only two eras are supported so the amount must be one, zero or minus one.\n     *  If the amount is non-zero then the year is changed such that the year-of-era\n     *  is unchanged.\n     * <\/ul>\n     * <p>\n     * All other {@code ChronoUnit} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoUnit}, then the result of this method\n     * is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}\n     * passing {@code this} as the argument. In this case, the unit determines\n     * whether and how to perform the addition.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param amountToAdd  the amount of the unit to add to the result, may be negative\n     * @param unit  the unit of the amount to add, not null\n     * @return a {@code Year} based on this year with the specified amount added, not null\n     * @throws DateTimeException if the addition cannot be made\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public Year plus(long amountToAdd, TemporalUnit unit) {\n        if (unit instanceof ChronoUnit) {\n            switch ((ChronoUnit) unit) {\n                case YEARS: return plusYears(amountToAdd);\n                case DECADES: return plusYears(Math.multiplyExact(amountToAdd, 10));\n                case CENTURIES: return plusYears(Math.multiplyExact(amountToAdd, 100));\n                case MILLENNIA: return plusYears(Math.multiplyExact(amountToAdd, 1000));\n                case ERAS: return with(ERA, Math.addExact(getLong(ERA), amountToAdd));\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.addTo(this, amountToAdd);\n    }"}
{"Number":"706","API Relative Path":"java.time.Year.java-plus(long-TemporalUnit)","Corresponding Source":"/**\n     * Returns a copy of this year with the specified amount added.\n     * <p>\n     * This returns a {@code Year}, based on this one, with the amount\n     * in terms of the unit added. If it is not possible to add the amount, because the\n     * unit is not supported or for some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoUnit} then the addition is implemented here.\n     * The supported fields behave as follows:\n     * <ul>\n     * <li>{@code YEARS} -\n     *  Returns a {@code Year} with the specified number of years added.\n     *  This is equivalent to {@link #plusYears(long)}.\n     * <li>{@code DECADES} -\n     *  Returns a {@code Year} with the specified number of decades added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 10.\n     * <li>{@code CENTURIES} -\n     *  Returns a {@code Year} with the specified number of centuries added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 100.\n     * <li>{@code MILLENNIA} -\n     *  Returns a {@code Year} with the specified number of millennia added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 1,000.\n     * <li>{@code ERAS} -\n     *  Returns a {@code Year} with the specified number of eras added.\n     *  Only two eras are supported so the amount must be one, zero or minus one.\n     *  If the amount is non-zero then the year is changed such that the year-of-era\n     *  is unchanged.\n     * <\/ul>\n     * <p>\n     * All other {@code ChronoUnit} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoUnit}, then the result of this method\n     * is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}\n     * passing {@code this} as the argument. In this case, the unit determines\n     * whether and how to perform the addition.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param amountToAdd  the amount of the unit to add to the result, may be negative\n     * @param unit  the unit of the amount to add, not null\n     * @return a {@code Year} based on this year with the specified amount added, not null\n     * @throws DateTimeException if the addition cannot be made\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public Year plus(long amountToAdd, TemporalUnit unit) {\n        if (unit instanceof ChronoUnit) {\n            switch ((ChronoUnit) unit) {\n                case YEARS: return plusYears(amountToAdd);\n                case DECADES: return plusYears(Math.multiplyExact(amountToAdd, 10));\n                case CENTURIES: return plusYears(Math.multiplyExact(amountToAdd, 100));\n                case MILLENNIA: return plusYears(Math.multiplyExact(amountToAdd, 1000));\n                case ERAS: return with(ERA, Math.addExact(getLong(ERA), amountToAdd));\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.addTo(this, amountToAdd);\n    }"}
{"Number":"707","API Relative Path":"java.time.Year.java-until(Temporal-TemporalUnit)","Corresponding Source":"/**\n     * Calculates the amount of time until another year in terms of the specified unit.\n     * <p>\n     * This calculates the amount of time between two {@code Year}\n     * objects in terms of a single {@code TemporalUnit}.\n     * The start and end points are {@code this} and the specified year.\n     * The result will be negative if the end is before the start.\n     * The {@code Temporal} passed to this method is converted to a\n     * {@code Year} using {@link #from(TemporalAccessor)}.\n     * For example, the amount in decades between two year can be calculated\n     * using {@code startYear.until(endYear, DECADES)}.\n     * <p>\n     * The calculation returns a whole number, representing the number of\n     * complete units between the two years.\n     * For example, the amount in decades between 2012 and 2031\n     * will only be one decade as it is one year short of two decades.\n     * <p>\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method.\n     * The second is to use {@link TemporalUnit#between(Temporal, Temporal)}:\n     * <pre>\n     *   // these two lines are equivalent\n     *   amount = start.until(end, YEARS);\n     *   amount = YEARS.between(start, end);\n     * <\/pre>\n     * The choice should be made based on which makes the code more readable.\n     * <p>\n     * The calculation is implemented in this method for {@link ChronoUnit}.\n     * The units {@code YEARS}, {@code DECADES}, {@code CENTURIES},\n     * {@code MILLENNIA} and {@code ERAS} are supported.\n     * Other {@code ChronoUnit} values will throw an exception.\n     * <p>\n     * If the unit is not a {@code ChronoUnit}, then the result of this method\n     * is obtained by invoking {@code TemporalUnit.between(Temporal, Temporal)}\n     * passing {@code this} as the first argument and the converted input temporal\n     * as the second argument.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param endExclusive  the end date, exclusive, which is converted to a {@code Year}, not null\n     * @param unit  the unit to measure the amount in, not null\n     * @return the amount of time between this year and the end year\n     * @throws DateTimeException if the amount cannot be calculated, or the end\n     *  temporal cannot be converted to a {@code Year}\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public long until(Temporal endExclusive, TemporalUnit unit) {\n        Year end = Year.from(endExclusive);\n        if (unit instanceof ChronoUnit) {\n            long yearsUntil = ((long) end.year) - year;  // no overflow\n            switch ((ChronoUnit) unit) {\n                case YEARS: return yearsUntil;\n                case DECADES: return yearsUntil / 10;\n                case CENTURIES: return yearsUntil / 100;\n                case MILLENNIA: return yearsUntil / 1000;\n                case ERAS: return end.getLong(ERA) - getLong(ERA);\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.between(this, end);\n    }"}
{"Number":"708","API Relative Path":"java.time.Year.java-with(TemporalField-long)","Corresponding Source":"/**\n     * Returns a copy of this year with the specified field set to a new value.\n     * <p>\n     * This returns a {@code Year}, based on this one, with the value\n     * for the specified field changed.\n     * If it is not possible to set the value, because the field is not supported or for\n     * some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoField} then the adjustment is implemented here.\n     * The supported fields behave as follows:\n     * <ul>\n     * <li>{@code YEAR_OF_ERA} -\n     *  Returns a {@code Year} with the specified year-of-era\n     *  The era will be unchanged.\n     * <li>{@code YEAR} -\n     *  Returns a {@code Year} with the specified year.\n     *  This completely replaces the date and is equivalent to {@link #of(int)}.\n     * <li>{@code ERA} -\n     *  Returns a {@code Year} with the specified era.\n     *  The year-of-era will be unchanged.\n     * <\/ul>\n     * <p>\n     * In all cases, if the new value is outside the valid range of values for the field\n     * then a {@code DateTimeException} will be thrown.\n     * <p>\n     * All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.adjustInto(Temporal, long)}\n     * passing {@code this} as the argument. In this case, the field determines\n     * whether and how to adjust the instant.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param field  the field to set in the result, not null\n     * @param newValue  the new value of the field in the result\n     * @return a {@code Year} based on {@code this} with the specified field set, not null\n     * @throws DateTimeException if the field cannot be set\n     * @throws UnsupportedTemporalTypeException if the field is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public Year with(TemporalField field, long newValue) {\n        if (field instanceof ChronoField) {\n            ChronoField f = (ChronoField) field;\n            f.checkValidValue(newValue);\n            switch (f) {\n                case YEAR_OF_ERA: return Year.of((int) (year < 1 ? 1 - newValue : newValue));\n                case YEAR: return Year.of((int) newValue);\n                case ERA: return (getLong(ERA) == newValue ? this : Year.of(1 - year));\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return field.adjustInto(this, newValue);\n    }"}
{"Number":"709","API Relative Path":"java.time.YearMonth.java-atDay(int)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Combines this year-month with a day-of-month to create a {@code LocalDate}.\n     * <p>\n     * This returns a {@code LocalDate} formed from this year-month and the specified day-of-month.\n     * <p>\n     * The day-of-month value must be valid for the year-month.\n     * <p>\n     * This method can be used as part of a chain to produce a date:\n     * <pre>\n     *  LocalDate date = year.atMonth(month).atDay(day);\n     * <\/pre>\n     *\n     * @param dayOfMonth  the day-of-month to use, from 1 to 31\n     * @return the date formed from this year-month and the specified day, not null\n     * @throws DateTimeException if the day is invalid for the year-month\n     * @see #isValidDay(int)\n     */\n    public LocalDate atDay(int dayOfMonth) {\n        return LocalDate.of(year, month, dayOfMonth);\n    }"}
{"Number":"710","API Relative Path":"java.time.YearMonth.java-atDay(int)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Combines this year-month with a day-of-month to create a {@code LocalDate}.\n     * <p>\n     * This returns a {@code LocalDate} formed from this year-month and the specified day-of-month.\n     * <p>\n     * The day-of-month value must be valid for the year-month.\n     * <p>\n     * This method can be used as part of a chain to produce a date:\n     * <pre>\n     *  LocalDate date = year.atMonth(month).atDay(day);\n     * <\/pre>\n     *\n     * @param dayOfMonth  the day-of-month to use, from 1 to 31\n     * @return the date formed from this year-month and the specified day, not null\n     * @throws DateTimeException if the day is invalid for the year-month\n     * @see #isValidDay(int)\n     */\n    public LocalDate atDay(int dayOfMonth) {\n        return LocalDate.of(year, month, dayOfMonth);\n    }"}
{"Number":"711","API Relative Path":"java.time.YearMonth.java-get(TemporalField)","Corresponding Source":"/**\n     * Gets the value of the specified field from this year-month as an {@code int}.\n     * <p>\n     * This queries this year-month for the value of the specified field.\n     * The returned value will always be within the valid range of values for the field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The {@link #isSupported(TemporalField) supported fields} will return valid\n     * values based on this year-month, except {@code PROLEPTIC_MONTH} which is too\n     * large to fit in an {@code int} and throw a {@code DateTimeException}.\n     * All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n     * passing {@code this} as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param field  the field to get, not null\n     * @return the value for the field\n     * @throws DateTimeException if a value for the field cannot be obtained or\n     *         the value is outside the range of valid values for the field\n     * @throws UnsupportedTemporalTypeException if the field is not supported or\n     *         the range of values exceeds an {@code int}\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override  // override for Javadoc\n    public int get(TemporalField field) {\n        return range(field).checkValidIntValue(getLong(field), field);\n    }"}
{"Number":"712","API Relative Path":"java.time.YearMonth.java-getLong(TemporalField)","Corresponding Source":"/**\n     * Gets the value of the specified field from this year-month as a {@code long}.\n     * <p>\n     * This queries this year-month for the value of the specified field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The {@link #isSupported(TemporalField) supported fields} will return valid\n     * values based on this year-month.\n     * All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n     * passing {@code this} as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param field  the field to get, not null\n     * @return the value for the field\n     * @throws DateTimeException if a value for the field cannot be obtained\n     * @throws UnsupportedTemporalTypeException if the field is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public long getLong(TemporalField field) {\n        if (field instanceof ChronoField) {\n            switch ((ChronoField) field) {\n                case MONTH_OF_YEAR: return month;\n                case PROLEPTIC_MONTH: return getProlepticMonth();\n                case YEAR_OF_ERA: return (year < 1 ? 1 - year : year);\n                case YEAR: return year;\n                case ERA: return (year < 1 ? 0 : 1);\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return field.getFrom(this);\n    }"}
{"Number":"713","API Relative Path":"java.time.YearMonth.java-minus(long-TemporalUnit)","Corresponding Source":"/**\n     * Returns a copy of this year-month with the specified amount subtracted.\n     * <p>\n     * This returns a {@code YearMonth}, based on this one, with the amount\n     * in terms of the unit subtracted. If it is not possible to subtract the amount,\n     * because the unit is not supported or for some other reason, an exception is thrown.\n     * <p>\n     * This method is equivalent to {@link #plus(long, TemporalUnit)} with the amount negated.\n     * See that method for a full description of how addition, and thus subtraction, works.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param amountToSubtract  the amount of the unit to subtract from the result, may be negative\n     * @param unit  the unit of the amount to subtract, not null\n     * @return a {@code YearMonth} based on this year-month with the specified amount subtracted, not null\n     * @throws DateTimeException if the subtraction cannot be made\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public YearMonth minus(long amountToSubtract, TemporalUnit unit) {\n        return (amountToSubtract == Long.MIN_VALUE ? plus(Long.MAX_VALUE, unit).plus(1, unit) : plus(-amountToSubtract, unit));\n    }"}
{"Number":"714","API Relative Path":"java.time.YearMonth.java-plus(long-TemporalUnit)","Corresponding Source":"/**\n     * Returns a copy of this year-month with the specified amount added.\n     * <p>\n     * This returns a {@code YearMonth}, based on this one, with the amount\n     * in terms of the unit added. If it is not possible to add the amount, because the\n     * unit is not supported or for some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoUnit} then the addition is implemented here.\n     * The supported fields behave as follows:\n     * <ul>\n     * <li>{@code MONTHS} -\n     *  Returns a {@code YearMonth} with the specified number of months added.\n     *  This is equivalent to {@link #plusMonths(long)}.\n     * <li>{@code YEARS} -\n     *  Returns a {@code YearMonth} with the specified number of years added.\n     *  This is equivalent to {@link #plusYears(long)}.\n     * <li>{@code DECADES} -\n     *  Returns a {@code YearMonth} with the specified number of decades added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 10.\n     * <li>{@code CENTURIES} -\n     *  Returns a {@code YearMonth} with the specified number of centuries added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 100.\n     * <li>{@code MILLENNIA} -\n     *  Returns a {@code YearMonth} with the specified number of millennia added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 1,000.\n     * <li>{@code ERAS} -\n     *  Returns a {@code YearMonth} with the specified number of eras added.\n     *  Only two eras are supported so the amount must be one, zero or minus one.\n     *  If the amount is non-zero then the year is changed such that the year-of-era\n     *  is unchanged.\n     * <\/ul>\n     * <p>\n     * All other {@code ChronoUnit} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoUnit}, then the result of this method\n     * is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}\n     * passing {@code this} as the argument. In this case, the unit determines\n     * whether and how to perform the addition.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param amountToAdd  the amount of the unit to add to the result, may be negative\n     * @param unit  the unit of the amount to add, not null\n     * @return a {@code YearMonth} based on this year-month with the specified amount added, not null\n     * @throws DateTimeException if the addition cannot be made\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public YearMonth plus(long amountToAdd, TemporalUnit unit) {\n        if (unit instanceof ChronoUnit) {\n            switch ((ChronoUnit) unit) {\n                case MONTHS: return plusMonths(amountToAdd);\n                case YEARS: return plusYears(amountToAdd);\n                case DECADES: return plusYears(Math.multiplyExact(amountToAdd, 10));\n                case CENTURIES: return plusYears(Math.multiplyExact(amountToAdd, 100));\n                case MILLENNIA: return plusYears(Math.multiplyExact(amountToAdd, 1000));\n                case ERAS: return with(ERA, Math.addExact(getLong(ERA), amountToAdd));\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.addTo(this, amountToAdd);\n    }"}
{"Number":"715","API Relative Path":"java.time.YearMonth.java-plus(long-TemporalUnit)","Corresponding Source":"/**\n     * Returns a copy of this year-month with the specified amount added.\n     * <p>\n     * This returns a {@code YearMonth}, based on this one, with the amount\n     * in terms of the unit added. If it is not possible to add the amount, because the\n     * unit is not supported or for some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoUnit} then the addition is implemented here.\n     * The supported fields behave as follows:\n     * <ul>\n     * <li>{@code MONTHS} -\n     *  Returns a {@code YearMonth} with the specified number of months added.\n     *  This is equivalent to {@link #plusMonths(long)}.\n     * <li>{@code YEARS} -\n     *  Returns a {@code YearMonth} with the specified number of years added.\n     *  This is equivalent to {@link #plusYears(long)}.\n     * <li>{@code DECADES} -\n     *  Returns a {@code YearMonth} with the specified number of decades added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 10.\n     * <li>{@code CENTURIES} -\n     *  Returns a {@code YearMonth} with the specified number of centuries added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 100.\n     * <li>{@code MILLENNIA} -\n     *  Returns a {@code YearMonth} with the specified number of millennia added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 1,000.\n     * <li>{@code ERAS} -\n     *  Returns a {@code YearMonth} with the specified number of eras added.\n     *  Only two eras are supported so the amount must be one, zero or minus one.\n     *  If the amount is non-zero then the year is changed such that the year-of-era\n     *  is unchanged.\n     * <\/ul>\n     * <p>\n     * All other {@code ChronoUnit} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoUnit}, then the result of this method\n     * is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}\n     * passing {@code this} as the argument. In this case, the unit determines\n     * whether and how to perform the addition.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param amountToAdd  the amount of the unit to add to the result, may be negative\n     * @param unit  the unit of the amount to add, not null\n     * @return a {@code YearMonth} based on this year-month with the specified amount added, not null\n     * @throws DateTimeException if the addition cannot be made\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public YearMonth plus(long amountToAdd, TemporalUnit unit) {\n        if (unit instanceof ChronoUnit) {\n            switch ((ChronoUnit) unit) {\n                case MONTHS: return plusMonths(amountToAdd);\n                case YEARS: return plusYears(amountToAdd);\n                case DECADES: return plusYears(Math.multiplyExact(amountToAdd, 10));\n                case CENTURIES: return plusYears(Math.multiplyExact(amountToAdd, 100));\n                case MILLENNIA: return plusYears(Math.multiplyExact(amountToAdd, 1000));\n                case ERAS: return with(ERA, Math.addExact(getLong(ERA), amountToAdd));\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.addTo(this, amountToAdd);\n    }"}
{"Number":"716","API Relative Path":"java.time.YearMonth.java-plus(long-TemporalUnit)","Corresponding Source":"/**\n     * Returns a copy of this year-month with the specified amount added.\n     * <p>\n     * This returns a {@code YearMonth}, based on this one, with the amount\n     * in terms of the unit added. If it is not possible to add the amount, because the\n     * unit is not supported or for some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoUnit} then the addition is implemented here.\n     * The supported fields behave as follows:\n     * <ul>\n     * <li>{@code MONTHS} -\n     *  Returns a {@code YearMonth} with the specified number of months added.\n     *  This is equivalent to {@link #plusMonths(long)}.\n     * <li>{@code YEARS} -\n     *  Returns a {@code YearMonth} with the specified number of years added.\n     *  This is equivalent to {@link #plusYears(long)}.\n     * <li>{@code DECADES} -\n     *  Returns a {@code YearMonth} with the specified number of decades added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 10.\n     * <li>{@code CENTURIES} -\n     *  Returns a {@code YearMonth} with the specified number of centuries added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 100.\n     * <li>{@code MILLENNIA} -\n     *  Returns a {@code YearMonth} with the specified number of millennia added.\n     *  This is equivalent to calling {@link #plusYears(long)} with the amount\n     *  multiplied by 1,000.\n     * <li>{@code ERAS} -\n     *  Returns a {@code YearMonth} with the specified number of eras added.\n     *  Only two eras are supported so the amount must be one, zero or minus one.\n     *  If the amount is non-zero then the year is changed such that the year-of-era\n     *  is unchanged.\n     * <\/ul>\n     * <p>\n     * All other {@code ChronoUnit} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoUnit}, then the result of this method\n     * is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}\n     * passing {@code this} as the argument. In this case, the unit determines\n     * whether and how to perform the addition.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param amountToAdd  the amount of the unit to add to the result, may be negative\n     * @param unit  the unit of the amount to add, not null\n     * @return a {@code YearMonth} based on this year-month with the specified amount added, not null\n     * @throws DateTimeException if the addition cannot be made\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public YearMonth plus(long amountToAdd, TemporalUnit unit) {\n        if (unit instanceof ChronoUnit) {\n            switch ((ChronoUnit) unit) {\n                case MONTHS: return plusMonths(amountToAdd);\n                case YEARS: return plusYears(amountToAdd);\n                case DECADES: return plusYears(Math.multiplyExact(amountToAdd, 10));\n                case CENTURIES: return plusYears(Math.multiplyExact(amountToAdd, 100));\n                case MILLENNIA: return plusYears(Math.multiplyExact(amountToAdd, 1000));\n                case ERAS: return with(ERA, Math.addExact(getLong(ERA), amountToAdd));\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.addTo(this, amountToAdd);\n    }"}
{"Number":"717","API Relative Path":"java.time.YearMonth.java-until(Temporal-TemporalUnit)","Corresponding Source":"/**\n     * Calculates the amount of time until another year-month in terms of the specified unit.\n     * <p>\n     * This calculates the amount of time between two {@code YearMonth}\n     * objects in terms of a single {@code TemporalUnit}.\n     * The start and end points are {@code this} and the specified year-month.\n     * The result will be negative if the end is before the start.\n     * The {@code Temporal} passed to this method is converted to a\n     * {@code YearMonth} using {@link #from(TemporalAccessor)}.\n     * For example, the amount in years between two year-months can be calculated\n     * using {@code startYearMonth.until(endYearMonth, YEARS)}.\n     * <p>\n     * The calculation returns a whole number, representing the number of\n     * complete units between the two year-months.\n     * For example, the amount in decades between 2012-06 and 2032-05\n     * will only be one decade as it is one month short of two decades.\n     * <p>\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method.\n     * The second is to use {@link TemporalUnit#between(Temporal, Temporal)}:\n     * <pre>\n     *   // these two lines are equivalent\n     *   amount = start.until(end, MONTHS);\n     *   amount = MONTHS.between(start, end);\n     * <\/pre>\n     * The choice should be made based on which makes the code more readable.\n     * <p>\n     * The calculation is implemented in this method for {@link ChronoUnit}.\n     * The units {@code MONTHS}, {@code YEARS}, {@code DECADES},\n     * {@code CENTURIES}, {@code MILLENNIA} and {@code ERAS} are supported.\n     * Other {@code ChronoUnit} values will throw an exception.\n     * <p>\n     * If the unit is not a {@code ChronoUnit}, then the result of this method\n     * is obtained by invoking {@code TemporalUnit.between(Temporal, Temporal)}\n     * passing {@code this} as the first argument and the converted input temporal\n     * as the second argument.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param endExclusive  the end date, exclusive, which is converted to a {@code YearMonth}, not null\n     * @param unit  the unit to measure the amount in, not null\n     * @return the amount of time between this year-month and the end year-month\n     * @throws DateTimeException if the amount cannot be calculated, or the end\n     *  temporal cannot be converted to a {@code YearMonth}\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public long until(Temporal endExclusive, TemporalUnit unit) {\n        YearMonth end = YearMonth.from(endExclusive);\n        if (unit instanceof ChronoUnit) {\n            long monthsUntil = end.getProlepticMonth() - getProlepticMonth();  // no overflow\n            switch ((ChronoUnit) unit) {\n                case MONTHS: return monthsUntil;\n                case YEARS: return monthsUntil / 12;\n                case DECADES: return monthsUntil / 120;\n                case CENTURIES: return monthsUntil / 1200;\n                case MILLENNIA: return monthsUntil / 12000;\n                case ERAS: return end.getLong(ERA) - getLong(ERA);\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.between(this, end);\n    }"}
{"Number":"718","API Relative Path":"java.time.YearMonth.java-with(TemporalField-long)","Corresponding Source":"/**\n     * Returns a copy of this year-month with the specified field set to a new value.\n     * <p>\n     * This returns a {@code YearMonth}, based on this one, with the value\n     * for the specified field changed.\n     * This can be used to change any supported field, such as the year or month.\n     * If it is not possible to set the value, because the field is not supported or for\n     * some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoField} then the adjustment is implemented here.\n     * The supported fields behave as follows:\n     * <ul>\n     * <li>{@code MONTH_OF_YEAR} -\n     *  Returns a {@code YearMonth} with the specified month-of-year.\n     *  The year will be unchanged.\n     * <li>{@code PROLEPTIC_MONTH} -\n     *  Returns a {@code YearMonth} with the specified proleptic-month.\n     *  This completely replaces the year and month of this object.\n     * <li>{@code YEAR_OF_ERA} -\n     *  Returns a {@code YearMonth} with the specified year-of-era\n     *  The month and era will be unchanged.\n     * <li>{@code YEAR} -\n     *  Returns a {@code YearMonth} with the specified year.\n     *  The month will be unchanged.\n     * <li>{@code ERA} -\n     *  Returns a {@code YearMonth} with the specified era.\n     *  The month and year-of-era will be unchanged.\n     * <\/ul>\n     * <p>\n     * In all cases, if the new value is outside the valid range of values for the field\n     * then a {@code DateTimeException} will be thrown.\n     * <p>\n     * All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.adjustInto(Temporal, long)}\n     * passing {@code this} as the argument. In this case, the field determines\n     * whether and how to adjust the instant.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param field  the field to set in the result, not null\n     * @param newValue  the new value of the field in the result\n     * @return a {@code YearMonth} based on {@code this} with the specified field set, not null\n     * @throws DateTimeException if the field cannot be set\n     * @throws UnsupportedTemporalTypeException if the field is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public YearMonth with(TemporalField field, long newValue) {\n        if (field instanceof ChronoField) {\n            ChronoField f = (ChronoField) field;\n            f.checkValidValue(newValue);\n            switch (f) {\n                case MONTH_OF_YEAR: return withMonth((int) newValue);\n                case PROLEPTIC_MONTH: return plusMonths(newValue - getProlepticMonth());\n                case YEAR_OF_ERA: return withYear((int) (year < 1 ? 1 - newValue : newValue));\n                case YEAR: return withYear((int) newValue);\n                case ERA: return (getLong(ERA) == newValue ? this : withYear(1 - year));\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return field.adjustInto(this, newValue);\n    }"}
{"Number":"719","API Relative Path":"java.time.zone.ZoneOffsetTransitionRule.java-of(Month-int-DayOfWeek-LocalTime-boolean-TimeDefinition-ZoneOffset-ZoneOffset-ZoneOffset)","Corresponding Source":"/**\n     * Obtains an instance defining the yearly rule to create transitions between two offsets.\n     * <p>\n     * Applications should normally obtain an instance from {@link ZoneRules}.\n     * This factory is only intended for use when creating {@link ZoneRules}.\n     *\n     * @param month  the month of the month-day of the first day of the cutover week, not null\n     * @param dayOfMonthIndicator  the day of the month-day of the cutover week, positive if the week is that\n     *  day or later, negative if the week is that day or earlier, counting from the last day of the month,\n     *  from -28 to 31 excluding 0\n     * @param dayOfWeek  the required day-of-week, null if the month-day should not be changed\n     * @param time  the cutover time in the 'before' offset, not null\n     * @param timeEndOfDay  whether the time is midnight at the end of day\n     * @param timeDefnition  how to interpret the cutover\n     * @param standardOffset  the standard offset in force at the cutover, not null\n     * @param offsetBefore  the offset before the cutover, not null\n     * @param offsetAfter  the offset after the cutover, not null\n     * @return the rule, not null\n     * @throws IllegalArgumentException if the day of month indicator is invalid\n     * @throws IllegalArgumentException if the end of day flag is true when the time is not midnight\n     */\n    public static ZoneOffsetTransitionRule of(\n            Month month,\n            int dayOfMonthIndicator,\n            DayOfWeek dayOfWeek,\n            LocalTime time,\n            boolean timeEndOfDay,\n            TimeDefinition timeDefnition,\n            ZoneOffset standardOffset,\n            ZoneOffset offsetBefore,\n            ZoneOffset offsetAfter) {\n        Objects.requireNonNull(month, \"month\");\n        Objects.requireNonNull(time, \"time\");\n        Objects.requireNonNull(timeDefnition, \"timeDefnition\");\n        Objects.requireNonNull(standardOffset, \"standardOffset\");\n        Objects.requireNonNull(offsetBefore, \"offsetBefore\");\n        Objects.requireNonNull(offsetAfter, \"offsetAfter\");\n        if (dayOfMonthIndicator < -28 || dayOfMonthIndicator > 31 || dayOfMonthIndicator == 0) {\n            throw new IllegalArgumentException(\"Day of month indicator must be between -28 and 31 inclusive excluding zero\");\n        }\n        if (timeEndOfDay && time.equals(LocalTime.MIDNIGHT) == false) {\n            throw new IllegalArgumentException(\"Time must be midnight when end of day flag is true\");\n        }\n        return new ZoneOffsetTransitionRule(month, dayOfMonthIndicator, dayOfWeek, time, timeEndOfDay, timeDefnition, standardOffset, offsetBefore, offsetAfter);\n    }"}
{"Number":"720","API Relative Path":"java.time.zone.ZoneOffsetTransitionRule.java-of(Month-int-DayOfWeek-LocalTime-boolean-TimeDefinition-ZoneOffset-ZoneOffset-ZoneOffset)","Corresponding Source":"/**\n     * Obtains an instance defining the yearly rule to create transitions between two offsets.\n     * <p>\n     * Applications should normally obtain an instance from {@link ZoneRules}.\n     * This factory is only intended for use when creating {@link ZoneRules}.\n     *\n     * @param month  the month of the month-day of the first day of the cutover week, not null\n     * @param dayOfMonthIndicator  the day of the month-day of the cutover week, positive if the week is that\n     *  day or later, negative if the week is that day or earlier, counting from the last day of the month,\n     *  from -28 to 31 excluding 0\n     * @param dayOfWeek  the required day-of-week, null if the month-day should not be changed\n     * @param time  the cutover time in the 'before' offset, not null\n     * @param timeEndOfDay  whether the time is midnight at the end of day\n     * @param timeDefnition  how to interpret the cutover\n     * @param standardOffset  the standard offset in force at the cutover, not null\n     * @param offsetBefore  the offset before the cutover, not null\n     * @param offsetAfter  the offset after the cutover, not null\n     * @return the rule, not null\n     * @throws IllegalArgumentException if the day of month indicator is invalid\n     * @throws IllegalArgumentException if the end of day flag is true when the time is not midnight\n     */\n    public static ZoneOffsetTransitionRule of(\n            Month month,\n            int dayOfMonthIndicator,\n            DayOfWeek dayOfWeek,\n            LocalTime time,\n            boolean timeEndOfDay,\n            TimeDefinition timeDefnition,\n            ZoneOffset standardOffset,\n            ZoneOffset offsetBefore,\n            ZoneOffset offsetAfter) {\n        Objects.requireNonNull(month, \"month\");\n        Objects.requireNonNull(time, \"time\");\n        Objects.requireNonNull(timeDefnition, \"timeDefnition\");\n        Objects.requireNonNull(standardOffset, \"standardOffset\");\n        Objects.requireNonNull(offsetBefore, \"offsetBefore\");\n        Objects.requireNonNull(offsetAfter, \"offsetAfter\");\n        if (dayOfMonthIndicator < -28 || dayOfMonthIndicator > 31 || dayOfMonthIndicator == 0) {\n            throw new IllegalArgumentException(\"Day of month indicator must be between -28 and 31 inclusive excluding zero\");\n        }\n        if (timeEndOfDay && time.equals(LocalTime.MIDNIGHT) == false) {\n            throw new IllegalArgumentException(\"Time must be midnight when end of day flag is true\");\n        }\n        return new ZoneOffsetTransitionRule(month, dayOfMonthIndicator, dayOfWeek, time, timeEndOfDay, timeDefnition, standardOffset, offsetBefore, offsetAfter);\n    }"}
{"Number":"721","API Relative Path":"java.time.ZonedDateTime.java-with(TemporalField-long)","Corresponding Source":"/**\n     * Returns a copy of this date-time with the specified field set to a new value.\n     * <p>\n     * This returns a {@code ZonedDateTime}, based on this one, with the value\n     * for the specified field changed.\n     * This can be used to change any supported field, such as the year, month or day-of-month.\n     * If it is not possible to set the value, because the field is not supported or for\n     * some other reason, an exception is thrown.\n     * <p>\n     * In some cases, changing the specified field can cause the resulting date-time to become invalid,\n     * such as changing the month from 31st January to February would make the day-of-month invalid.\n     * In cases like this, the field is responsible for resolving the date. Typically it will choose\n     * the previous valid date, which would be the last valid day of February in this example.\n     * <p>\n     * If the field is a {@link ChronoField} then the adjustment is implemented here.\n     * <p>\n     * The {@code INSTANT_SECONDS} field will return a date-time with the specified instant.\n     * The zone and nano-of-second are unchanged.\n     * The result will have an offset derived from the new instant and original zone.\n     * If the new instant value is outside the valid range then a {@code DateTimeException} will be thrown.\n     * <p>\n     * The {@code OFFSET_SECONDS} field will typically be ignored.\n     * The offset of a {@code ZonedDateTime} is controlled primarily by the time-zone.\n     * As such, changing the offset does not generally make sense, because there is only\n     * one valid offset for the local date-time and zone.\n     * If the zoned date-time is in a daylight savings overlap, then the offset is used\n     * to switch between the two valid offsets. In all other cases, the offset is ignored.\n     * If the new offset value is outside the valid range then a {@code DateTimeException} will be thrown.\n     * <p>\n     * The other {@link #isSupported(TemporalField) supported fields} will behave as per\n     * the matching method on {@link LocalDateTime#with(TemporalField, long) LocalDateTime}.\n     * The zone is not part of the calculation and will be unchanged.\n     * When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,\n     * then the offset will be retained if possible, otherwise the earlier offset will be used.\n     * If in a gap, the local date-time will be adjusted forward by the length of the gap.\n     * <p>\n     * All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.adjustInto(Temporal, long)}\n     * passing {@code this} as the argument. In this case, the field determines\n     * whether and how to adjust the instant.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param field  the field to set in the result, not null\n     * @param newValue  the new value of the field in the result\n     * @return a {@code ZonedDateTime} based on {@code this} with the specified field set, not null\n     * @throws DateTimeException if the field cannot be set\n     * @throws UnsupportedTemporalTypeException if the field is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public ZonedDateTime with(TemporalField field, long newValue) {\n        if (field instanceof ChronoField) {\n            ChronoField f = (ChronoField) field;\n            switch (f) {\n                case INSTANT_SECONDS:\n                    return create(newValue, getNano(), zone);\n                case OFFSET_SECONDS:\n                    ZoneOffset offset = ZoneOffset.ofTotalSeconds(f.checkValidIntValue(newValue));\n                    return resolveOffset(offset);\n            }\n            return resolveLocal(dateTime.with(field, newValue));\n        }\n        return field.adjustInto(this, newValue);\n    }"}
{"Number":"722","API Relative Path":"java.time.ZoneOffset.java-get(TemporalField)","Corresponding Source":"/**\n     * Gets the value of the specified field from this offset as an {@code int}.\n     * <p>\n     * This queries this offset for the value of the specified field.\n     * The returned value will always be within the valid range of values for the field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The {@code OFFSET_SECONDS} field returns the value of the offset.\n     * All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n     * passing {@code this} as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param field  the field to get, not null\n     * @return the value for the field\n     * @throws DateTimeException if a value for the field cannot be obtained or\n     *         the value is outside the range of valid values for the field\n     * @throws UnsupportedTemporalTypeException if the field is not supported or\n     *         the range of values exceeds an {@code int}\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override  // override for Javadoc and performance\n    public int get(TemporalField field) {\n        if (field == OFFSET_SECONDS) {\n            return totalSeconds;\n        } else if (field instanceof ChronoField) {\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return range(field).checkValidIntValue(getLong(field), field);\n    }"}
{"Number":"723","API Relative Path":"java.time.ZoneOffset.java-get(TemporalField)","Corresponding Source":"/**\n     * Gets the value of the specified field from this offset as an {@code int}.\n     * <p>\n     * This queries this offset for the value of the specified field.\n     * The returned value will always be within the valid range of values for the field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The {@code OFFSET_SECONDS} field returns the value of the offset.\n     * All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n     * passing {@code this} as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param field  the field to get, not null\n     * @return the value for the field\n     * @throws DateTimeException if a value for the field cannot be obtained or\n     *         the value is outside the range of valid values for the field\n     * @throws UnsupportedTemporalTypeException if the field is not supported or\n     *         the range of values exceeds an {@code int}\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override  // override for Javadoc and performance\n    public int get(TemporalField field) {\n        if (field == OFFSET_SECONDS) {\n            return totalSeconds;\n        } else if (field instanceof ChronoField) {\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return range(field).checkValidIntValue(getLong(field), field);\n    }"}
{"Number":"724","API Relative Path":"java.time.ZoneOffset.java-getLong(TemporalField)","Corresponding Source":"/**\n     * Gets the value of the specified field from this offset as a {@code long}.\n     * <p>\n     * This queries this offset for the value of the specified field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The {@code OFFSET_SECONDS} field returns the value of the offset.\n     * All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n     * passing {@code this} as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param field  the field to get, not null\n     * @return the value for the field\n     * @throws DateTimeException if a value for the field cannot be obtained\n     * @throws UnsupportedTemporalTypeException if the field is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    @Override\n    public long getLong(TemporalField field) {\n        if (field == OFFSET_SECONDS) {\n            return totalSeconds;\n        } else if (field instanceof ChronoField) {\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return field.getFrom(this);\n    }"}
{"Number":"725","API Relative Path":"java.time.ZoneOffset.java-of(String)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@code ZoneOffset} using the ID.\n     * <p>\n     * This method parses the string ID of a {@code ZoneOffset} to\n     * return an instance. The parsing accepts all the formats generated by\n     * {@link #getId()}, plus some additional formats:\n     * <ul>\n     * <li>{@code Z} - for UTC\n     * <li>{@code +h}\n     * <li>{@code +hh}\n     * <li>{@code +hh:mm}\n     * <li>{@code -hh:mm}\n     * <li>{@code +hhmm}\n     * <li>{@code -hhmm}\n     * <li>{@code +hh:mm:ss}\n     * <li>{@code -hh:mm:ss}\n     * <li>{@code +hhmmss}\n     * <li>{@code -hhmmss}\n     * <\/ul>\n     * Note that &plusmn; means either the plus or minus symbol.\n     * <p>\n     * The ID of the returned offset will be normalized to one of the formats\n     * described by {@link #getId()}.\n     * <p>\n     * The maximum supported range is from +18:00 to -18:00 inclusive.\n     *\n     * @param offsetId  the offset ID, not null\n     * @return the zone-offset, not null\n     * @throws DateTimeException if the offset ID is invalid\n     */\n    @SuppressWarnings(\"fallthrough\")\n    public static ZoneOffset of(String offsetId) {\n        Objects.requireNonNull(offsetId, \"offsetId\");\n        // \"Z\" is always in the cache\n        ZoneOffset offset = ID_CACHE.get(offsetId);\n        if (offset != null) {\n            return offset;\n        }\n\n        // parse - +h, +hh, +hhmm, +hh:mm, +hhmmss, +hh:mm:ss\n        final int hours, minutes, seconds;\n        switch (offsetId.length()) {\n            case 2:\n                offsetId = offsetId.charAt(0) + \"0\" + offsetId.charAt(1);  // fallthru\n            case 3:\n                hours = parseNumber(offsetId, 1, false);\n                minutes = 0;\n                seconds = 0;\n                break;\n            case 5:\n                hours = parseNumber(offsetId, 1, false);\n                minutes = parseNumber(offsetId, 3, false);\n                seconds = 0;\n                break;\n            case 6:\n                hours = parseNumber(offsetId, 1, false);\n                minutes = parseNumber(offsetId, 4, true);\n                seconds = 0;\n                break;\n            case 7:\n                hours = parseNumber(offsetId, 1, false);\n                minutes = parseNumber(offsetId, 3, false);\n                seconds = parseNumber(offsetId, 5, false);\n                break;\n            case 9:\n                hours = parseNumber(offsetId, 1, false);\n                minutes = parseNumber(offsetId, 4, true);\n                seconds = parseNumber(offsetId, 7, true);\n                break;\n            default:\n                throw new DateTimeException(\"Invalid ID for ZoneOffset, invalid format: \" + offsetId);\n        }\n        char first = offsetId.charAt(0);\n        if (first != '+' && first != '-') {\n            throw new DateTimeException(\"Invalid ID for ZoneOffset, plus/minus not found when expected: \" + offsetId);\n        }\n        if (first == '-') {\n            return ofHoursMinutesSeconds(-hours, -minutes, -seconds);\n        } else {\n            return ofHoursMinutesSeconds(hours, minutes, seconds);\n        }\n    }"}
{"Number":"726","API Relative Path":"java.time.ZoneOffset.java-ofHours(int)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@code ZoneOffset} using an offset in hours.\n     *\n     * @param hours  the time-zone offset in hours, from -18 to +18\n     * @return the zone-offset, not null\n     * @throws DateTimeException if the offset is not in the required range\n     */\n    public static ZoneOffset ofHours(int hours) {\n        return ofHoursMinutesSeconds(hours, 0, 0);\n    }"}
{"Number":"727","API Relative Path":"java.time.ZoneOffset.java-ofHours(int)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@code ZoneOffset} using an offset in hours.\n     *\n     * @param hours  the time-zone offset in hours, from -18 to +18\n     * @return the zone-offset, not null\n     * @throws DateTimeException if the offset is not in the required range\n     */\n    public static ZoneOffset ofHours(int hours) {\n        return ofHoursMinutesSeconds(hours, 0, 0);\n    }"}
{"Number":"728","API Relative Path":"java.time.ZoneOffset.java-ofHours(int)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@code ZoneOffset} using an offset in hours.\n     *\n     * @param hours  the time-zone offset in hours, from -18 to +18\n     * @return the zone-offset, not null\n     * @throws DateTimeException if the offset is not in the required range\n     */\n    public static ZoneOffset ofHours(int hours) {\n        return ofHoursMinutesSeconds(hours, 0, 0);\n    }"}
{"Number":"729","API Relative Path":"java.time.ZoneOffset.java-ofHours(int)","Corresponding Source":"//-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@code ZoneOffset} using an offset in hours.\n     *\n     * @param hours  the time-zone offset in hours, from -18 to +18\n     * @return the zone-offset, not null\n     * @throws DateTimeException if the offset is not in the required range\n     */\n    public static ZoneOffset ofHours(int hours) {\n        return ofHoursMinutesSeconds(hours, 0, 0);\n    }"}
{"Number":"730","API Relative Path":"java.time.ZoneOffset.java-ofHoursMinutes(int-int)","Corresponding Source":"/**\n     * Obtains an instance of {@code ZoneOffset} using an offset in\n     * hours and minutes.\n     * <p>\n     * The sign of the hours and minutes components must match.\n     * Thus, if the hours is negative, the minutes must be negative or zero.\n     * If the hours is zero, the minutes may be positive, negative or zero.\n     *\n     * @param hours  the time-zone offset in hours, from -18 to +18\n     * @param minutes  the time-zone offset in minutes, from 0 to &plusmn;59, sign matches hours\n     * @return the zone-offset, not null\n     * @throws DateTimeException if the offset is not in the required range\n     */\n    public static ZoneOffset ofHoursMinutes(int hours, int minutes) {\n        return ofHoursMinutesSeconds(hours, minutes, 0);\n    }"}
{"Number":"731","API Relative Path":"java.time.ZoneOffset.java-ofHoursMinutes(int-int)","Corresponding Source":"/**\n     * Obtains an instance of {@code ZoneOffset} using an offset in\n     * hours and minutes.\n     * <p>\n     * The sign of the hours and minutes components must match.\n     * Thus, if the hours is negative, the minutes must be negative or zero.\n     * If the hours is zero, the minutes may be positive, negative or zero.\n     *\n     * @param hours  the time-zone offset in hours, from -18 to +18\n     * @param minutes  the time-zone offset in minutes, from 0 to &plusmn;59, sign matches hours\n     * @return the zone-offset, not null\n     * @throws DateTimeException if the offset is not in the required range\n     */\n    public static ZoneOffset ofHoursMinutes(int hours, int minutes) {\n        return ofHoursMinutesSeconds(hours, minutes, 0);\n    }"}
{"Number":"732","API Relative Path":"java.time.ZoneOffset.java-ofHoursMinutes(int-int)","Corresponding Source":"/**\n     * Obtains an instance of {@code ZoneOffset} using an offset in\n     * hours and minutes.\n     * <p>\n     * The sign of the hours and minutes components must match.\n     * Thus, if the hours is negative, the minutes must be negative or zero.\n     * If the hours is zero, the minutes may be positive, negative or zero.\n     *\n     * @param hours  the time-zone offset in hours, from -18 to +18\n     * @param minutes  the time-zone offset in minutes, from 0 to &plusmn;59, sign matches hours\n     * @return the zone-offset, not null\n     * @throws DateTimeException if the offset is not in the required range\n     */\n    public static ZoneOffset ofHoursMinutes(int hours, int minutes) {\n        return ofHoursMinutesSeconds(hours, minutes, 0);\n    }"}
{"Number":"733","API Relative Path":"java.time.ZoneOffset.java-ofHoursMinutes(int-int)","Corresponding Source":"/**\n     * Obtains an instance of {@code ZoneOffset} using an offset in\n     * hours and minutes.\n     * <p>\n     * The sign of the hours and minutes components must match.\n     * Thus, if the hours is negative, the minutes must be negative or zero.\n     * If the hours is zero, the minutes may be positive, negative or zero.\n     *\n     * @param hours  the time-zone offset in hours, from -18 to +18\n     * @param minutes  the time-zone offset in minutes, from 0 to &plusmn;59, sign matches hours\n     * @return the zone-offset, not null\n     * @throws DateTimeException if the offset is not in the required range\n     */\n    public static ZoneOffset ofHoursMinutes(int hours, int minutes) {\n        return ofHoursMinutesSeconds(hours, minutes, 0);\n    }"}
{"Number":"734","API Relative Path":"java.time.ZoneOffset.java-ofHoursMinutesSeconds(int-int-int)","Corresponding Source":"/**\n     * Obtains an instance of {@code ZoneOffset} using an offset in\n     * hours, minutes and seconds.\n     * <p>\n     * The sign of the hours, minutes and seconds components must match.\n     * Thus, if the hours is negative, the minutes and seconds must be negative or zero.\n     *\n     * @param hours  the time-zone offset in hours, from -18 to +18\n     * @param minutes  the time-zone offset in minutes, from 0 to &plusmn;59, sign matches hours and seconds\n     * @param seconds  the time-zone offset in seconds, from 0 to &plusmn;59, sign matches hours and minutes\n     * @return the zone-offset, not null\n     * @throws DateTimeException if the offset is not in the required range\n     */\n    public static ZoneOffset ofHoursMinutesSeconds(int hours, int minutes, int seconds) {\n        validate(hours, minutes, seconds);\n        int totalSeconds = totalSeconds(hours, minutes, seconds);\n        return ofTotalSeconds(totalSeconds);\n    }"}
{"Number":"735","API Relative Path":"java.time.ZoneOffset.java-ofHoursMinutesSeconds(int-int-int)","Corresponding Source":"/**\n     * Obtains an instance of {@code ZoneOffset} using an offset in\n     * hours, minutes and seconds.\n     * <p>\n     * The sign of the hours, minutes and seconds components must match.\n     * Thus, if the hours is negative, the minutes and seconds must be negative or zero.\n     *\n     * @param hours  the time-zone offset in hours, from -18 to +18\n     * @param minutes  the time-zone offset in minutes, from 0 to &plusmn;59, sign matches hours and seconds\n     * @param seconds  the time-zone offset in seconds, from 0 to &plusmn;59, sign matches hours and minutes\n     * @return the zone-offset, not null\n     * @throws DateTimeException if the offset is not in the required range\n     */\n    public static ZoneOffset ofHoursMinutesSeconds(int hours, int minutes, int seconds) {\n        validate(hours, minutes, seconds);\n        int totalSeconds = totalSeconds(hours, minutes, seconds);\n        return ofTotalSeconds(totalSeconds);\n    }"}
{"Number":"736","API Relative Path":"java.time.ZoneOffset.java-ofHoursMinutesSeconds(int-int-int)","Corresponding Source":"/**\n     * Obtains an instance of {@code ZoneOffset} using an offset in\n     * hours, minutes and seconds.\n     * <p>\n     * The sign of the hours, minutes and seconds components must match.\n     * Thus, if the hours is negative, the minutes and seconds must be negative or zero.\n     *\n     * @param hours  the time-zone offset in hours, from -18 to +18\n     * @param minutes  the time-zone offset in minutes, from 0 to &plusmn;59, sign matches hours and seconds\n     * @param seconds  the time-zone offset in seconds, from 0 to &plusmn;59, sign matches hours and minutes\n     * @return the zone-offset, not null\n     * @throws DateTimeException if the offset is not in the required range\n     */\n    public static ZoneOffset ofHoursMinutesSeconds(int hours, int minutes, int seconds) {\n        validate(hours, minutes, seconds);\n        int totalSeconds = totalSeconds(hours, minutes, seconds);\n        return ofTotalSeconds(totalSeconds);\n    }"}
{"Number":"737","API Relative Path":"java.time.ZoneOffset.java-ofHoursMinutesSeconds(int-int-int)","Corresponding Source":"/**\n     * Obtains an instance of {@code ZoneOffset} using an offset in\n     * hours, minutes and seconds.\n     * <p>\n     * The sign of the hours, minutes and seconds components must match.\n     * Thus, if the hours is negative, the minutes and seconds must be negative or zero.\n     *\n     * @param hours  the time-zone offset in hours, from -18 to +18\n     * @param minutes  the time-zone offset in minutes, from 0 to &plusmn;59, sign matches hours and seconds\n     * @param seconds  the time-zone offset in seconds, from 0 to &plusmn;59, sign matches hours and minutes\n     * @return the zone-offset, not null\n     * @throws DateTimeException if the offset is not in the required range\n     */\n    public static ZoneOffset ofHoursMinutesSeconds(int hours, int minutes, int seconds) {\n        validate(hours, minutes, seconds);\n        int totalSeconds = totalSeconds(hours, minutes, seconds);\n        return ofTotalSeconds(totalSeconds);\n    }"}
{"Number":"738","API Relative Path":"java.util.AbstractCollection.java-removeAll(Collection)","Corresponding Source":"/**\n     * {@inheritDoc}\n     *\n     * <p>This implementation iterates over this collection, checking each\n     * element returned by the iterator in turn to see if it's contained\n     * in the specified collection.  If it's so contained, it's removed from\n     * this collection with the iterator's <tt>remove<\/tt> method.\n     *\n     * <p>Note that this implementation will throw an\n     * <tt>UnsupportedOperationException<\/tt> if the iterator returned by the\n     * <tt>iterator<\/tt> method does not implement the <tt>remove<\/tt> method\n     * and this collection contains one or more elements in common with the\n     * specified collection.\n     *\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     *\n     * @see #remove(Object)\n     * @see #contains(Object)\n     */\n    public boolean removeAll(Collection<?> c) {\n        Objects.requireNonNull(c);\n        boolean modified = false;\n        Iterator<?> it = iterator();\n        while (it.hasNext()) {\n            if (c.contains(it.next())) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }"}
{"Number":"739","API Relative Path":"java.util.AbstractCollection.java-retainAll(Collection)","Corresponding Source":"/**\n     * {@inheritDoc}\n     *\n     * <p>This implementation iterates over this collection, checking each\n     * element returned by the iterator in turn to see if it's contained\n     * in the specified collection.  If it's not so contained, it's removed\n     * from this collection with the iterator's <tt>remove<\/tt> method.\n     *\n     * <p>Note that this implementation will throw an\n     * <tt>UnsupportedOperationException<\/tt> if the iterator returned by the\n     * <tt>iterator<\/tt> method does not implement the <tt>remove<\/tt> method\n     * and this collection contains one or more elements not present in the\n     * specified collection.\n     *\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     *\n     * @see #remove(Object)\n     * @see #contains(Object)\n     */\n    public boolean retainAll(Collection<?> c) {\n        Objects.requireNonNull(c);\n        boolean modified = false;\n        Iterator<E> it = iterator();\n        while (it.hasNext()) {\n            if (!c.contains(it.next())) {\n                it.remove();\n                modified = true;\n            }\n        }\n        return modified;\n    }"}
{"Number":"740","API Relative Path":"java.util.AbstractList.java-addAll(int-Collection)","Corresponding Source":"/**\n     * {@inheritDoc}\n     *\n     * <p>This implementation gets an iterator over the specified collection\n     * and iterates over it, inserting the elements obtained from the\n     * iterator into this list at the appropriate position, one at a time,\n     * using {@code add(int, E)}.\n     * Many implementations will override this method for efficiency.\n     *\n     * <p>Note that this implementation throws an\n     * {@code UnsupportedOperationException} unless\n     * {@link #add(int, Object) add(int, E)} is overridden.\n     *\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     * @throws IndexOutOfBoundsException     {@inheritDoc}\n     */\n    public boolean addAll(int index, Collection<? extends E> c) {\n        rangeCheckForAdd(index);\n        boolean modified = false;\n        for (E e : c) {\n            add(index++, e);\n            modified = true;\n        }\n        return modified;\n    }"}
{"Number":"741","API Relative Path":"java.util.AbstractList.java-listIterator(int)","Corresponding Source":"/**\n     * {@inheritDoc}\n     *\n     * <p>This implementation returns a straightforward implementation of the\n     * {@code ListIterator} interface that extends the implementation of the\n     * {@code Iterator} interface returned by the {@code iterator()} method.\n     * The {@code ListIterator} implementation relies on the backing list's\n     * {@code get(int)}, {@code set(int, E)}, {@code add(int, E)}\n     * and {@code remove(int)} methods.\n     *\n     * <p>Note that the list iterator returned by this implementation will\n     * throw an {@link UnsupportedOperationException} in response to its\n     * {@code remove}, {@code set} and {@code add} methods unless the\n     * list's {@code remove(int)}, {@code set(int, E)}, and\n     * {@code add(int, E)} methods are overridden.\n     *\n     * <p>This implementation can be made to throw runtime exceptions in the\n     * face of concurrent modification, as described in the specification for\n     * the (protected) {@link #modCount} field.\n     *\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     */\n    public ListIterator<E> listIterator(final int index) {\n        rangeCheckForAdd(index);\n\n        return new ListItr(index);\n    }"}
{"Number":"742","API Relative Path":"java.util.AbstractList.java-removeRange(int-int)","Corresponding Source":"/**\n     * Removes from this list all of the elements whose index is between\n     * {@code fromIndex}, inclusive, and {@code toIndex}, exclusive.\n     * Shifts any succeeding elements to the left (reduces their index).\n     * This call shortens the list by {@code (toIndex - fromIndex)} elements.\n     * (If {@code toIndex==fromIndex}, this operation has no effect.)\n     *\n     * <p>This method is called by the {@code clear} operation on this list\n     * and its subLists.  Overriding this method to take advantage of\n     * the internals of the list implementation can <i>substantially<\/i>\n     * improve the performance of the {@code clear} operation on this list\n     * and its subLists.\n     *\n     * <p>This implementation gets a list iterator positioned before\n     * {@code fromIndex}, and repeatedly calls {@code ListIterator.next}\n     * followed by {@code ListIterator.remove} until the entire range has\n     * been removed.  <b>Note: if {@code ListIterator.remove} requires linear\n     * time, this implementation requires quadratic time.<\/b>\n     *\n     * @param fromIndex index of first element to be removed\n     * @param toIndex index after last element to be removed\n     */\n    protected void removeRange(int fromIndex, int toIndex) {\n        ListIterator<E> it = listIterator(fromIndex);\n        for (int i=0, n=toIndex-fromIndex; i<n; i++) {\n            it.next();\n            it.remove();\n        }\n    }"}
{"Number":"743","API Relative Path":"java.util.AbstractQueue.java-addAll(Collection)","Corresponding Source":"/**\n     * Adds all of the elements in the specified collection to this\n     * queue.  Attempts to addAll of a queue to itself result in\n     * <tt>IllegalArgumentException<\/tt>. Further, the behavior of\n     * this operation is undefined if the specified collection is\n     * modified while the operation is in progress.\n     *\n     * <p>This implementation iterates over the specified collection,\n     * and adds each element returned by the iterator to this\n     * queue, in turn.  A runtime exception encountered while\n     * trying to add an element (including, in particular, a\n     * <tt>null<\/tt> element) may result in only some of the elements\n     * having been successfully added when the associated exception is\n     * thrown.\n     *\n     * @param c collection containing elements to be added to this queue\n     * @return <tt>true<\/tt> if this queue changed as a result of the call\n     * @throws ClassCastException if the class of an element of the specified\n     *         collection prevents it from being added to this queue\n     * @throws NullPointerException if the specified collection contains a\n     *         null element and this queue does not permit null elements,\n     *         or if the specified collection is null\n     * @throws IllegalArgumentException if some property of an element of the\n     *         specified collection prevents it from being added to this\n     *         queue, or if the specified collection is this queue\n     * @throws IllegalStateException if not all the elements can be added at\n     *         this time due to insertion restrictions\n     * @see #add(Object)\n     */\n    public boolean addAll(Collection<? extends E> c) {\n        if (c == null)\n            throw new NullPointerException();\n        if (c == this)\n            throw new IllegalArgumentException();\n        boolean modified = false;\n        for (E e : c)\n            if (add(e))\n                modified = true;\n        return modified;\n    }"}
{"Number":"744","API Relative Path":"java.util.ArrayList.java-add(int-E)","Corresponding Source":"/**\n     * Inserts the specified element at the specified position in this\n     * list. Shifts the element currently at that position (if any) and\n     * any subsequent elements to the right (adds one to their indices).\n     *\n     * @param index index at which the specified element is to be inserted\n     * @param element element to be inserted\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     */\n    public void add(int index, E element) {\n        rangeCheckForAdd(index);\n\n        ensureCapacityInternal(size + 1);  // Increments modCount!!\n        System.arraycopy(elementData, index, elementData, index + 1,\n                         size - index);\n        elementData[index] = element;\n        size++;\n    }"}
{"Number":"745","API Relative Path":"java.util.ArrayList.java-addAll(int-Collection)","Corresponding Source":"/**\n     * Inserts all of the elements in the specified collection into this\n     * list, starting at the specified position.  Shifts the element\n     * currently at that position (if any) and any subsequent elements to\n     * the right (increases their indices).  The new elements will appear\n     * in the list in the order that they are returned by the\n     * specified collection's iterator.\n     *\n     * @param index index at which to insert the first element from the\n     *              specified collection\n     * @param c collection containing elements to be added to this list\n     * @return <tt>true<\/tt> if this list changed as a result of the call\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     * @throws NullPointerException if the specified collection is null\n     */\n    public boolean addAll(int index, Collection<? extends E> c) {\n        rangeCheckForAdd(index);\n\n        Object[] a = c.toArray();\n        int numNew = a.length;\n        ensureCapacityInternal(size + numNew);  // Increments modCount\n\n        int numMoved = size - index;\n        if (numMoved > 0)\n            System.arraycopy(elementData, index, elementData, index + numNew,\n                             numMoved);\n\n        System.arraycopy(a, 0, elementData, index, numNew);\n        size += numNew;\n        return numNew != 0;\n    }"}
{"Number":"746","API Relative Path":"java.util.ArrayList.java-ArrayList(int)","Corresponding Source":"/**\n     * Constructs an empty list with the specified initial capacity.\n     *\n     * @param  initialCapacity  the initial capacity of the list\n     * @throws IllegalArgumentException if the specified initial capacity\n     *         is negative\n     */\n    public ArrayList(int initialCapacity) {\n        if (initialCapacity > 0) {\n            this.elementData = new Object[initialCapacity];\n        } else if (initialCapacity == 0) {\n            this.elementData = EMPTY_ELEMENTDATA;\n        } else {\n            throw new IllegalArgumentException(\"Illegal Capacity: \"+\n                                               initialCapacity);\n        }\n    }"}
{"Number":"747","API Relative Path":"java.util.ArrayList.java-ensureCapacity(int)","Corresponding Source":"/**\n     * Increases the capacity of this <tt>ArrayList<\/tt> instance, if\n     * necessary, to ensure that it can hold at least the number of elements\n     * specified by the minimum capacity argument.\n     *\n     * @param   minCapacity   the desired minimum capacity\n     */\n    public void ensureCapacity(int minCapacity) {\n        int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)\n            // any size if not default element table\n            ? 0\n            // larger than default for default empty table. It's already\n            // supposed to be at default size.\n            : DEFAULT_CAPACITY;\n\n        if (minCapacity > minExpand) {\n            ensureExplicitCapacity(minCapacity);\n        }\n    }"}
{"Number":"748","API Relative Path":"java.util.ArrayList.java-get(int)","Corresponding Source":"/**\n     * Returns the element at the specified position in this list.\n     *\n     * @param  index index of the element to return\n     * @return the element at the specified position in this list\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     */\n    public E get(int index) {\n        rangeCheck(index);\n\n        return elementData(index);\n    }"}
{"Number":"749","API Relative Path":"java.util.ArrayList.java-listIterator(int)","Corresponding Source":"/**\n     * Returns a list iterator over the elements in this list (in proper\n     * sequence), starting at the specified position in the list.\n     * The specified index indicates the first element that would be\n     * returned by an initial call to {@link ListIterator#next next}.\n     * An initial call to {@link ListIterator#previous previous} would\n     * return the element with the specified index minus one.\n     *\n     * <p>The returned list iterator is <a href=\"#fail-fast\"><i>fail-fast<\/i><\/a>.\n     *\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     */\n    public ListIterator<E> listIterator(int index) {\n        if (index < 0 || index > size)\n            throw new IndexOutOfBoundsException(\"Index: \"+index);\n        return new ListItr(index);\n    }"}
{"Number":"750","API Relative Path":"java.util.ArrayList.java-remove(int)","Corresponding Source":"/*\n     * Private remove method that skips bounds checking and does not\n     * return the value removed.\n     */\n    private void fastRemove(int index) {\n        modCount++;\n        int numMoved = size - index - 1;\n        if (numMoved > 0)\n            System.arraycopy(elementData, index+1, elementData, index,\n                             numMoved);\n        elementData[--size] = null; // clear to let GC do its work\n    }"}
{"Number":"751","API Relative Path":"java.util.ArrayList.java-set(int-E)","Corresponding Source":"/**\n     * Replaces the element at the specified position in this list with\n     * the specified element.\n     *\n     * @param index index of the element to replace\n     * @param element element to be stored at the specified position\n     * @return the element previously at the specified position\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     */\n    public E set(int index, E element) {\n        rangeCheck(index);\n\n        E oldValue = elementData(index);\n        elementData[index] = element;\n        return oldValue;\n    }"}
{"Number":"752","API Relative Path":"java.util.ArrayList.java-subList(int-int)","Corresponding Source":"/**\n     * Returns a view of the portion of this list between the specified\n     * {@code fromIndex}, inclusive, and {@code toIndex}, exclusive.  (If\n     * {@code fromIndex} and {@code toIndex} are equal, the returned list is\n     * empty.)  The returned list is backed by this list, so non-structural\n     * changes in the returned list are reflected in this list, and vice-versa.\n     * The returned list supports all of the optional list operations.\n     *\n     * <p>This method eliminates the need for explicit range operations (of\n     * the sort that commonly exist for arrays).  Any operation that expects\n     * a list can be used as a range operation by passing a subList view\n     * instead of a whole list.  For example, the following idiom\n     * removes a range of elements from a list:\n     * <pre>\n     *      list.subList(from, to).clear();\n     * <\/pre>\n     * Similar idioms may be constructed for {@link #indexOf(Object)} and\n     * {@link #lastIndexOf(Object)}, and all of the algorithms in the\n     * {@link Collections} class can be applied to a subList.\n     *\n     * <p>The semantics of the list returned by this method become undefined if\n     * the backing list (i.e., this list) is <i>structurally modified<\/i> in\n     * any way other than via the returned list.  (Structural modifications are\n     * those that change the size of this list, or otherwise perturb it in such\n     * a fashion that iterations in progress may yield incorrect results.)\n     *\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     */\n    public List<E> subList(int fromIndex, int toIndex) {\n        subListRangeCheck(fromIndex, toIndex, size);\n        return new SubList(this, 0, fromIndex, toIndex);\n    }"}
{"Number":"753","API Relative Path":"java.util.ArrayList.java-subList(int-int)","Corresponding Source":"/**\n     * Returns a view of the portion of this list between the specified\n     * {@code fromIndex}, inclusive, and {@code toIndex}, exclusive.  (If\n     * {@code fromIndex} and {@code toIndex} are equal, the returned list is\n     * empty.)  The returned list is backed by this list, so non-structural\n     * changes in the returned list are reflected in this list, and vice-versa.\n     * The returned list supports all of the optional list operations.\n     *\n     * <p>This method eliminates the need for explicit range operations (of\n     * the sort that commonly exist for arrays).  Any operation that expects\n     * a list can be used as a range operation by passing a subList view\n     * instead of a whole list.  For example, the following idiom\n     * removes a range of elements from a list:\n     * <pre>\n     *      list.subList(from, to).clear();\n     * <\/pre>\n     * Similar idioms may be constructed for {@link #indexOf(Object)} and\n     * {@link #lastIndexOf(Object)}, and all of the algorithms in the\n     * {@link Collections} class can be applied to a subList.\n     *\n     * <p>The semantics of the list returned by this method become undefined if\n     * the backing list (i.e., this list) is <i>structurally modified<\/i> in\n     * any way other than via the returned list.  (Structural modifications are\n     * those that change the size of this list, or otherwise perturb it in such\n     * a fashion that iterations in progress may yield incorrect results.)\n     *\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     */\n    public List<E> subList(int fromIndex, int toIndex) {\n        subListRangeCheck(fromIndex, toIndex, size);\n        return new SubList(this, 0, fromIndex, toIndex);\n    }"}
{"Number":"754","API Relative Path":"java.util.ArrayList.java-subList(int-int)","Corresponding Source":"/**\n     * Returns a view of the portion of this list between the specified\n     * {@code fromIndex}, inclusive, and {@code toIndex}, exclusive.  (If\n     * {@code fromIndex} and {@code toIndex} are equal, the returned list is\n     * empty.)  The returned list is backed by this list, so non-structural\n     * changes in the returned list are reflected in this list, and vice-versa.\n     * The returned list supports all of the optional list operations.\n     *\n     * <p>This method eliminates the need for explicit range operations (of\n     * the sort that commonly exist for arrays).  Any operation that expects\n     * a list can be used as a range operation by passing a subList view\n     * instead of a whole list.  For example, the following idiom\n     * removes a range of elements from a list:\n     * <pre>\n     *      list.subList(from, to).clear();\n     * <\/pre>\n     * Similar idioms may be constructed for {@link #indexOf(Object)} and\n     * {@link #lastIndexOf(Object)}, and all of the algorithms in the\n     * {@link Collections} class can be applied to a subList.\n     *\n     * <p>The semantics of the list returned by this method become undefined if\n     * the backing list (i.e., this list) is <i>structurally modified<\/i> in\n     * any way other than via the returned list.  (Structural modifications are\n     * those that change the size of this list, or otherwise perturb it in such\n     * a fashion that iterations in progress may yield incorrect results.)\n     *\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     */\n    public List<E> subList(int fromIndex, int toIndex) {\n        subListRangeCheck(fromIndex, toIndex, size);\n        return new SubList(this, 0, fromIndex, toIndex);\n    }"}
{"Number":"755","API Relative Path":"java.util.Arrays.java-binarySearch(byte[]-int-int-byte)","Corresponding Source":"/**\n     * Searches a range of\n     * the specified array of bytes for the specified value using the\n     * binary search algorithm.\n     * The range must be sorted (as\n     * by the {@link #sort(byte[], int, int)} method)\n     * prior to making this call.  If it\n     * is not sorted, the results are undefined.  If the range contains\n     * multiple elements with the specified value, there is no guarantee which\n     * one will be found.\n     *\n     * @param a the array to be searched\n     * @param fromIndex the index of the first element (inclusive) to be\n     *          searched\n     * @param toIndex the index of the last element (exclusive) to be searched\n     * @param key the value to be searched for\n     * @return index of the search key, if it is contained in the array\n     *         within the specified range;\n     *         otherwise, <tt>(-(<i>insertion point<\/i>) - 1)<\/tt>.  The\n     *         <i>insertion point<\/i> is defined as the point at which the\n     *         key would be inserted into the array: the index of the first\n     *         element in the range greater than the key,\n     *         or <tt>toIndex<\/tt> if all\n     *         elements in the range are less than the specified key.  Note\n     *         that this guarantees that the return value will be &gt;= 0 if\n     *         and only if the key is found.\n     * @throws IllegalArgumentException\n     *         if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *         if {@code fromIndex < 0 or toIndex > a.length}\n     * @since 1.6\n     */\n    public static int binarySearch(byte[] a, int fromIndex, int toIndex,\n                                   byte key) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        return binarySearch0(a, fromIndex, toIndex, key);\n    }"}
{"Number":"756","API Relative Path":"java.util.Arrays.java-binarySearch(char[]-int-int-char)","Corresponding Source":"/**\n     * Searches a range of\n     * the specified array of chars for the specified value using the\n     * binary search algorithm.\n     * The range must be sorted (as\n     * by the {@link #sort(char[], int, int)} method)\n     * prior to making this call.  If it\n     * is not sorted, the results are undefined.  If the range contains\n     * multiple elements with the specified value, there is no guarantee which\n     * one will be found.\n     *\n     * @param a the array to be searched\n     * @param fromIndex the index of the first element (inclusive) to be\n     *          searched\n     * @param toIndex the index of the last element (exclusive) to be searched\n     * @param key the value to be searched for\n     * @return index of the search key, if it is contained in the array\n     *         within the specified range;\n     *         otherwise, <tt>(-(<i>insertion point<\/i>) - 1)<\/tt>.  The\n     *         <i>insertion point<\/i> is defined as the point at which the\n     *         key would be inserted into the array: the index of the first\n     *         element in the range greater than the key,\n     *         or <tt>toIndex<\/tt> if all\n     *         elements in the range are less than the specified key.  Note\n     *         that this guarantees that the return value will be &gt;= 0 if\n     *         and only if the key is found.\n     * @throws IllegalArgumentException\n     *         if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *         if {@code fromIndex < 0 or toIndex > a.length}\n     * @since 1.6\n     */\n    public static int binarySearch(char[] a, int fromIndex, int toIndex,\n                                   char key) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        return binarySearch0(a, fromIndex, toIndex, key);\n    }"}
{"Number":"757","API Relative Path":"java.util.Arrays.java-binarySearch(double[]-int-int-double)","Corresponding Source":"/**\n     * Searches a range of\n     * the specified array of doubles for the specified value using\n     * the binary search algorithm.\n     * The range must be sorted\n     * (as by the {@link #sort(double[], int, int)} method)\n     * prior to making this call.\n     * If it is not sorted, the results are undefined.  If the range contains\n     * multiple elements with the specified value, there is no guarantee which\n     * one will be found.  This method considers all NaN values to be\n     * equivalent and equal.\n     *\n     * @param a the array to be searched\n     * @param fromIndex the index of the first element (inclusive) to be\n     *          searched\n     * @param toIndex the index of the last element (exclusive) to be searched\n     * @param key the value to be searched for\n     * @return index of the search key, if it is contained in the array\n     *         within the specified range;\n     *         otherwise, <tt>(-(<i>insertion point<\/i>) - 1)<\/tt>.  The\n     *         <i>insertion point<\/i> is defined as the point at which the\n     *         key would be inserted into the array: the index of the first\n     *         element in the range greater than the key,\n     *         or <tt>toIndex<\/tt> if all\n     *         elements in the range are less than the specified key.  Note\n     *         that this guarantees that the return value will be &gt;= 0 if\n     *         and only if the key is found.\n     * @throws IllegalArgumentException\n     *         if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *         if {@code fromIndex < 0 or toIndex > a.length}\n     * @since 1.6\n     */\n    public static int binarySearch(double[] a, int fromIndex, int toIndex,\n                                   double key) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        return binarySearch0(a, fromIndex, toIndex, key);\n    }"}
{"Number":"758","API Relative Path":"java.util.Arrays.java-binarySearch(float[]-int-int-float)","Corresponding Source":"/**\n     * Searches a range of\n     * the specified array of floats for the specified value using\n     * the binary search algorithm.\n     * The range must be sorted\n     * (as by the {@link #sort(float[], int, int)} method)\n     * prior to making this call. If\n     * it is not sorted, the results are undefined. If the range contains\n     * multiple elements with the specified value, there is no guarantee which\n     * one will be found. This method considers all NaN values to be\n     * equivalent and equal.\n     *\n     * @param a the array to be searched\n     * @param fromIndex the index of the first element (inclusive) to be\n     *          searched\n     * @param toIndex the index of the last element (exclusive) to be searched\n     * @param key the value to be searched for\n     * @return index of the search key, if it is contained in the array\n     *         within the specified range;\n     *         otherwise, <tt>(-(<i>insertion point<\/i>) - 1)<\/tt>. The\n     *         <i>insertion point<\/i> is defined as the point at which the\n     *         key would be inserted into the array: the index of the first\n     *         element in the range greater than the key,\n     *         or <tt>toIndex<\/tt> if all\n     *         elements in the range are less than the specified key. Note\n     *         that this guarantees that the return value will be &gt;= 0 if\n     *         and only if the key is found.\n     * @throws IllegalArgumentException\n     *         if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *         if {@code fromIndex < 0 or toIndex > a.length}\n     * @since 1.6\n     */\n    public static int binarySearch(float[] a, int fromIndex, int toIndex,\n                                   float key) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        return binarySearch0(a, fromIndex, toIndex, key);\n    }"}
{"Number":"759","API Relative Path":"java.util.Arrays.java-binarySearch(int[]-int-int-int)","Corresponding Source":"/**\n     * Searches a range of\n     * the specified array of ints for the specified value using the\n     * binary search algorithm.\n     * The range must be sorted (as\n     * by the {@link #sort(int[], int, int)} method)\n     * prior to making this call.  If it\n     * is not sorted, the results are undefined.  If the range contains\n     * multiple elements with the specified value, there is no guarantee which\n     * one will be found.\n     *\n     * @param a the array to be searched\n     * @param fromIndex the index of the first element (inclusive) to be\n     *          searched\n     * @param toIndex the index of the last element (exclusive) to be searched\n     * @param key the value to be searched for\n     * @return index of the search key, if it is contained in the array\n     *         within the specified range;\n     *         otherwise, <tt>(-(<i>insertion point<\/i>) - 1)<\/tt>.  The\n     *         <i>insertion point<\/i> is defined as the point at which the\n     *         key would be inserted into the array: the index of the first\n     *         element in the range greater than the key,\n     *         or <tt>toIndex<\/tt> if all\n     *         elements in the range are less than the specified key.  Note\n     *         that this guarantees that the return value will be &gt;= 0 if\n     *         and only if the key is found.\n     * @throws IllegalArgumentException\n     *         if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *         if {@code fromIndex < 0 or toIndex > a.length}\n     * @since 1.6\n     */\n    public static int binarySearch(int[] a, int fromIndex, int toIndex,\n                                   int key) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        return binarySearch0(a, fromIndex, toIndex, key);\n    }"}
{"Number":"760","API Relative Path":"java.util.Arrays.java-binarySearch(long[]-int-int-long)","Corresponding Source":"/**\n     * Searches a range of\n     * the specified array of longs for the specified value using the\n     * binary search algorithm.\n     * The range must be sorted (as\n     * by the {@link #sort(long[], int, int)} method)\n     * prior to making this call.  If it\n     * is not sorted, the results are undefined.  If the range contains\n     * multiple elements with the specified value, there is no guarantee which\n     * one will be found.\n     *\n     * @param a the array to be searched\n     * @param fromIndex the index of the first element (inclusive) to be\n     *          searched\n     * @param toIndex the index of the last element (exclusive) to be searched\n     * @param key the value to be searched for\n     * @return index of the search key, if it is contained in the array\n     *         within the specified range;\n     *         otherwise, <tt>(-(<i>insertion point<\/i>) - 1)<\/tt>.  The\n     *         <i>insertion point<\/i> is defined as the point at which the\n     *         key would be inserted into the array: the index of the first\n     *         element in the range greater than the key,\n     *         or <tt>toIndex<\/tt> if all\n     *         elements in the range are less than the specified key.  Note\n     *         that this guarantees that the return value will be &gt;= 0 if\n     *         and only if the key is found.\n     * @throws IllegalArgumentException\n     *         if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *         if {@code fromIndex < 0 or toIndex > a.length}\n     * @since 1.6\n     */\n    public static int binarySearch(long[] a, int fromIndex, int toIndex,\n                                   long key) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        return binarySearch0(a, fromIndex, toIndex, key);\n    }"}
{"Number":"761","API Relative Path":"java.util.Arrays.java-binarySearch(Object[]-int-int-Object)","Corresponding Source":"/**\n     * Searches a range of\n     * the specified array for the specified object using the binary\n     * search algorithm.\n     * The range must be sorted into ascending order\n     * according to the\n     * {@linkplain Comparable natural ordering}\n     * of its elements (as by the\n     * {@link #sort(Object[], int, int)} method) prior to making this\n     * call.  If it is not sorted, the results are undefined.\n     * (If the range contains elements that are not mutually comparable (for\n     * example, strings and integers), it <i>cannot<\/i> be sorted according\n     * to the natural ordering of its elements, hence results are undefined.)\n     * If the range contains multiple\n     * elements equal to the specified object, there is no guarantee which\n     * one will be found.\n     *\n     * @param a the array to be searched\n     * @param fromIndex the index of the first element (inclusive) to be\n     *          searched\n     * @param toIndex the index of the last element (exclusive) to be searched\n     * @param key the value to be searched for\n     * @return index of the search key, if it is contained in the array\n     *         within the specified range;\n     *         otherwise, <tt>(-(<i>insertion point<\/i>) - 1)<\/tt>.  The\n     *         <i>insertion point<\/i> is defined as the point at which the\n     *         key would be inserted into the array: the index of the first\n     *         element in the range greater than the key,\n     *         or <tt>toIndex<\/tt> if all\n     *         elements in the range are less than the specified key.  Note\n     *         that this guarantees that the return value will be &gt;= 0 if\n     *         and only if the key is found.\n     * @throws ClassCastException if the search key is not comparable to the\n     *         elements of the array within the specified range.\n     * @throws IllegalArgumentException\n     *         if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *         if {@code fromIndex < 0 or toIndex > a.length}\n     * @since 1.6\n     */\n    public static int binarySearch(Object[] a, int fromIndex, int toIndex,\n                                   Object key) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        return binarySearch0(a, fromIndex, toIndex, key);\n    }"}
{"Number":"762","API Relative Path":"java.util.Arrays.java-binarySearch(short[]-int-int-short)","Corresponding Source":"/**\n     * Searches a range of\n     * the specified array of shorts for the specified value using\n     * the binary search algorithm.\n     * The range must be sorted\n     * (as by the {@link #sort(short[], int, int)} method)\n     * prior to making this call.  If\n     * it is not sorted, the results are undefined.  If the range contains\n     * multiple elements with the specified value, there is no guarantee which\n     * one will be found.\n     *\n     * @param a the array to be searched\n     * @param fromIndex the index of the first element (inclusive) to be\n     *          searched\n     * @param toIndex the index of the last element (exclusive) to be searched\n     * @param key the value to be searched for\n     * @return index of the search key, if it is contained in the array\n     *         within the specified range;\n     *         otherwise, <tt>(-(<i>insertion point<\/i>) - 1)<\/tt>.  The\n     *         <i>insertion point<\/i> is defined as the point at which the\n     *         key would be inserted into the array: the index of the first\n     *         element in the range greater than the key,\n     *         or <tt>toIndex<\/tt> if all\n     *         elements in the range are less than the specified key.  Note\n     *         that this guarantees that the return value will be &gt;= 0 if\n     *         and only if the key is found.\n     * @throws IllegalArgumentException\n     *         if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *         if {@code fromIndex < 0 or toIndex > a.length}\n     * @since 1.6\n     */\n    public static int binarySearch(short[] a, int fromIndex, int toIndex,\n                                   short key) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        return binarySearch0(a, fromIndex, toIndex, key);\n    }"}
{"Number":"763","API Relative Path":"java.util.Arrays.java-binarySearch(T[]-int-int-T-Comparator)","Corresponding Source":"/**\n     * Searches a range of\n     * the specified array for the specified object using the binary\n     * search algorithm.\n     * The range must be sorted into ascending order\n     * according to the specified comparator (as by the\n     * {@link #sort(Object[], int, int, Comparator)\n     * sort(T[], int, int, Comparator)}\n     * method) prior to making this call.\n     * If it is not sorted, the results are undefined.\n     * If the range contains multiple elements equal to the specified object,\n     * there is no guarantee which one will be found.\n     *\n     * @param <T> the class of the objects in the array\n     * @param a the array to be searched\n     * @param fromIndex the index of the first element (inclusive) to be\n     *          searched\n     * @param toIndex the index of the last element (exclusive) to be searched\n     * @param key the value to be searched for\n     * @param c the comparator by which the array is ordered.  A\n     *        <tt>null<\/tt> value indicates that the elements'\n     *        {@linkplain Comparable natural ordering} should be used.\n     * @return index of the search key, if it is contained in the array\n     *         within the specified range;\n     *         otherwise, <tt>(-(<i>insertion point<\/i>) - 1)<\/tt>.  The\n     *         <i>insertion point<\/i> is defined as the point at which the\n     *         key would be inserted into the array: the index of the first\n     *         element in the range greater than the key,\n     *         or <tt>toIndex<\/tt> if all\n     *         elements in the range are less than the specified key.  Note\n     *         that this guarantees that the return value will be &gt;= 0 if\n     *         and only if the key is found.\n     * @throws ClassCastException if the range contains elements that are not\n     *         <i>mutually comparable<\/i> using the specified comparator,\n     *         or the search key is not comparable to the\n     *         elements in the range using this comparator.\n     * @throws IllegalArgumentException\n     *         if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *         if {@code fromIndex < 0 or toIndex > a.length}\n     * @since 1.6\n     */\n    public static <T> int binarySearch(T[] a, int fromIndex, int toIndex,\n                                       T key, Comparator<? super T> c) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        return binarySearch0(a, fromIndex, toIndex, key, c);\n    }"}
{"Number":"764","API Relative Path":"java.util.Arrays.java-fill(boolean[]-int-int-boolean)","Corresponding Source":"/**\n     * Assigns the specified boolean value to each element of the specified\n     * range of the specified array of booleans.  The range to be filled\n     * extends from index <tt>fromIndex<\/tt>, inclusive, to index\n     * <tt>toIndex<\/tt>, exclusive.  (If <tt>fromIndex==toIndex<\/tt>, the\n     * range to be filled is empty.)\n     *\n     * @param a the array to be filled\n     * @param fromIndex the index of the first element (inclusive) to be\n     *        filled with the specified value\n     * @param toIndex the index of the last element (exclusive) to be\n     *        filled with the specified value\n     * @param val the value to be stored in all elements of the array\n     * @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex<\/tt>\n     * @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0<\/tt> or\n     *         <tt>toIndex &gt; a.length<\/tt>\n     */\n    public static void fill(boolean[] a, int fromIndex, int toIndex,\n                            boolean val) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        for (int i = fromIndex; i < toIndex; i++)\n            a[i] = val;\n    }"}
{"Number":"765","API Relative Path":"java.util.Arrays.java-fill(byte[]-int-int-byte)","Corresponding Source":"/**\n     * Assigns the specified byte value to each element of the specified\n     * range of the specified array of bytes.  The range to be filled\n     * extends from index <tt>fromIndex<\/tt>, inclusive, to index\n     * <tt>toIndex<\/tt>, exclusive.  (If <tt>fromIndex==toIndex<\/tt>, the\n     * range to be filled is empty.)\n     *\n     * @param a the array to be filled\n     * @param fromIndex the index of the first element (inclusive) to be\n     *        filled with the specified value\n     * @param toIndex the index of the last element (exclusive) to be\n     *        filled with the specified value\n     * @param val the value to be stored in all elements of the array\n     * @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex<\/tt>\n     * @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0<\/tt> or\n     *         <tt>toIndex &gt; a.length<\/tt>\n     */\n    public static void fill(byte[] a, int fromIndex, int toIndex, byte val) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        for (int i = fromIndex; i < toIndex; i++)\n            a[i] = val;\n    }"}
{"Number":"766","API Relative Path":"java.util.Arrays.java-fill(char[]-int-int-char)","Corresponding Source":"/**\n     * Assigns the specified char value to each element of the specified\n     * range of the specified array of chars.  The range to be filled\n     * extends from index <tt>fromIndex<\/tt>, inclusive, to index\n     * <tt>toIndex<\/tt>, exclusive.  (If <tt>fromIndex==toIndex<\/tt>, the\n     * range to be filled is empty.)\n     *\n     * @param a the array to be filled\n     * @param fromIndex the index of the first element (inclusive) to be\n     *        filled with the specified value\n     * @param toIndex the index of the last element (exclusive) to be\n     *        filled with the specified value\n     * @param val the value to be stored in all elements of the array\n     * @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex<\/tt>\n     * @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0<\/tt> or\n     *         <tt>toIndex &gt; a.length<\/tt>\n     */\n    public static void fill(char[] a, int fromIndex, int toIndex, char val) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        for (int i = fromIndex; i < toIndex; i++)\n            a[i] = val;\n    }"}
{"Number":"767","API Relative Path":"java.util.Arrays.java-fill(double[]-int-int-double)","Corresponding Source":"/**\n     * Assigns the specified double value to each element of the specified\n     * range of the specified array of doubles.  The range to be filled\n     * extends from index <tt>fromIndex<\/tt>, inclusive, to index\n     * <tt>toIndex<\/tt>, exclusive.  (If <tt>fromIndex==toIndex<\/tt>, the\n     * range to be filled is empty.)\n     *\n     * @param a the array to be filled\n     * @param fromIndex the index of the first element (inclusive) to be\n     *        filled with the specified value\n     * @param toIndex the index of the last element (exclusive) to be\n     *        filled with the specified value\n     * @param val the value to be stored in all elements of the array\n     * @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex<\/tt>\n     * @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0<\/tt> or\n     *         <tt>toIndex &gt; a.length<\/tt>\n     */\n    public static void fill(double[] a, int fromIndex, int toIndex,double val){\n        rangeCheck(a.length, fromIndex, toIndex);\n        for (int i = fromIndex; i < toIndex; i++)\n            a[i] = val;\n    }"}
{"Number":"768","API Relative Path":"java.util.Arrays.java-fill(float[]-int-int-float)","Corresponding Source":"/**\n     * Assigns the specified float value to each element of the specified\n     * range of the specified array of floats.  The range to be filled\n     * extends from index <tt>fromIndex<\/tt>, inclusive, to index\n     * <tt>toIndex<\/tt>, exclusive.  (If <tt>fromIndex==toIndex<\/tt>, the\n     * range to be filled is empty.)\n     *\n     * @param a the array to be filled\n     * @param fromIndex the index of the first element (inclusive) to be\n     *        filled with the specified value\n     * @param toIndex the index of the last element (exclusive) to be\n     *        filled with the specified value\n     * @param val the value to be stored in all elements of the array\n     * @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex<\/tt>\n     * @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0<\/tt> or\n     *         <tt>toIndex &gt; a.length<\/tt>\n     */\n    public static void fill(float[] a, int fromIndex, int toIndex, float val) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        for (int i = fromIndex; i < toIndex; i++)\n            a[i] = val;\n    }"}
{"Number":"769","API Relative Path":"java.util.Arrays.java-fill(int[]-int-int-int)","Corresponding Source":"/**\n     * Assigns the specified int value to each element of the specified\n     * range of the specified array of ints.  The range to be filled\n     * extends from index <tt>fromIndex<\/tt>, inclusive, to index\n     * <tt>toIndex<\/tt>, exclusive.  (If <tt>fromIndex==toIndex<\/tt>, the\n     * range to be filled is empty.)\n     *\n     * @param a the array to be filled\n     * @param fromIndex the index of the first element (inclusive) to be\n     *        filled with the specified value\n     * @param toIndex the index of the last element (exclusive) to be\n     *        filled with the specified value\n     * @param val the value to be stored in all elements of the array\n     * @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex<\/tt>\n     * @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0<\/tt> or\n     *         <tt>toIndex &gt; a.length<\/tt>\n     */\n    public static void fill(int[] a, int fromIndex, int toIndex, int val) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        for (int i = fromIndex; i < toIndex; i++)\n            a[i] = val;\n    }"}
{"Number":"770","API Relative Path":"java.util.Arrays.java-fill(long[]-int-int-long)","Corresponding Source":"/**\n     * Assigns the specified long value to each element of the specified\n     * range of the specified array of longs.  The range to be filled\n     * extends from index <tt>fromIndex<\/tt>, inclusive, to index\n     * <tt>toIndex<\/tt>, exclusive.  (If <tt>fromIndex==toIndex<\/tt>, the\n     * range to be filled is empty.)\n     *\n     * @param a the array to be filled\n     * @param fromIndex the index of the first element (inclusive) to be\n     *        filled with the specified value\n     * @param toIndex the index of the last element (exclusive) to be\n     *        filled with the specified value\n     * @param val the value to be stored in all elements of the array\n     * @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex<\/tt>\n     * @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0<\/tt> or\n     *         <tt>toIndex &gt; a.length<\/tt>\n     */\n    public static void fill(long[] a, int fromIndex, int toIndex, long val) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        for (int i = fromIndex; i < toIndex; i++)\n            a[i] = val;\n    }"}
{"Number":"771","API Relative Path":"java.util.Arrays.java-fill(Object[]-int-int-Object)","Corresponding Source":"/**\n     * Assigns the specified Object reference to each element of the specified\n     * range of the specified array of Objects.  The range to be filled\n     * extends from index <tt>fromIndex<\/tt>, inclusive, to index\n     * <tt>toIndex<\/tt>, exclusive.  (If <tt>fromIndex==toIndex<\/tt>, the\n     * range to be filled is empty.)\n     *\n     * @param a the array to be filled\n     * @param fromIndex the index of the first element (inclusive) to be\n     *        filled with the specified value\n     * @param toIndex the index of the last element (exclusive) to be\n     *        filled with the specified value\n     * @param val the value to be stored in all elements of the array\n     * @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex<\/tt>\n     * @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0<\/tt> or\n     *         <tt>toIndex &gt; a.length<\/tt>\n     * @throws ArrayStoreException if the specified value is not of a\n     *         runtime type that can be stored in the specified array\n     */\n    public static void fill(Object[] a, int fromIndex, int toIndex, Object val) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        for (int i = fromIndex; i < toIndex; i++)\n            a[i] = val;\n    }"}
{"Number":"772","API Relative Path":"java.util.Arrays.java-fill(short[]-int-int-short)","Corresponding Source":"/**\n     * Assigns the specified short value to each element of the specified\n     * range of the specified array of shorts.  The range to be filled\n     * extends from index <tt>fromIndex<\/tt>, inclusive, to index\n     * <tt>toIndex<\/tt>, exclusive.  (If <tt>fromIndex==toIndex<\/tt>, the\n     * range to be filled is empty.)\n     *\n     * @param a the array to be filled\n     * @param fromIndex the index of the first element (inclusive) to be\n     *        filled with the specified value\n     * @param toIndex the index of the last element (exclusive) to be\n     *        filled with the specified value\n     * @param val the value to be stored in all elements of the array\n     * @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex<\/tt>\n     * @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0<\/tt> or\n     *         <tt>toIndex &gt; a.length<\/tt>\n     */\n    public static void fill(short[] a, int fromIndex, int toIndex, short val) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        for (int i = fromIndex; i < toIndex; i++)\n            a[i] = val;\n    }"}
{"Number":"773","API Relative Path":"java.util.Arrays.java-parallelPrefix(double[]-DoubleBinaryOperator)","Corresponding Source":"/**\n     * Cumulates, in parallel, each element of the given array in place,\n     * using the supplied function. For example if the array initially\n     * holds {@code [2.0, 1.0, 0.0, 3.0]} and the operation performs addition,\n     * then upon return the array holds {@code [2.0, 3.0, 3.0, 6.0]}.\n     * Parallel prefix computation is usually more efficient than\n     * sequential loops for large arrays.\n     *\n     * <p> Because floating-point operations may not be strictly associative,\n     * the returned result may not be identical to the value that would be\n     * obtained if the operation was performed sequentially.\n     *\n     * @param array the array, which is modified in-place by this method\n     * @param op a side-effect-free function to perform the cumulation\n     * @throws NullPointerException if the specified array or function is null\n     * @since 1.8\n     */\n    public static void parallelPrefix(double[] array, DoubleBinaryOperator op) {\n        Objects.requireNonNull(op);\n        if (array.length > 0)\n            new ArrayPrefixHelpers.DoubleCumulateTask\n                    (null, op, array, 0, array.length).invoke();\n    }"}
{"Number":"774","API Relative Path":"java.util.Arrays.java-parallelPrefix(double[]-int-int-DoubleBinaryOperator)","Corresponding Source":"/**\n     * Performs {@link #parallelPrefix(double[], DoubleBinaryOperator)}\n     * for the given subrange of the array.\n     *\n     * @param array the array\n     * @param fromIndex the index of the first element, inclusive\n     * @param toIndex the index of the last element, exclusive\n     * @param op a side-effect-free, associative function to perform the\n     * cumulation\n     * @throws IllegalArgumentException if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *     if {@code fromIndex < 0} or {@code toIndex > array.length}\n     * @throws NullPointerException if the specified array or function is null\n     * @since 1.8\n     */\n    public static void parallelPrefix(double[] array, int fromIndex,\n                                      int toIndex, DoubleBinaryOperator op) {\n        Objects.requireNonNull(op);\n        rangeCheck(array.length, fromIndex, toIndex);\n        if (fromIndex < toIndex)\n            new ArrayPrefixHelpers.DoubleCumulateTask\n                    (null, op, array, fromIndex, toIndex).invoke();\n    }"}
{"Number":"775","API Relative Path":"java.util.Arrays.java-parallelPrefix(double[]-int-int-DoubleBinaryOperator)","Corresponding Source":"/**\n     * Performs {@link #parallelPrefix(double[], DoubleBinaryOperator)}\n     * for the given subrange of the array.\n     *\n     * @param array the array\n     * @param fromIndex the index of the first element, inclusive\n     * @param toIndex the index of the last element, exclusive\n     * @param op a side-effect-free, associative function to perform the\n     * cumulation\n     * @throws IllegalArgumentException if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *     if {@code fromIndex < 0} or {@code toIndex > array.length}\n     * @throws NullPointerException if the specified array or function is null\n     * @since 1.8\n     */\n    public static void parallelPrefix(double[] array, int fromIndex,\n                                      int toIndex, DoubleBinaryOperator op) {\n        Objects.requireNonNull(op);\n        rangeCheck(array.length, fromIndex, toIndex);\n        if (fromIndex < toIndex)\n            new ArrayPrefixHelpers.DoubleCumulateTask\n                    (null, op, array, fromIndex, toIndex).invoke();\n    }"}
{"Number":"776","API Relative Path":"java.util.Arrays.java-parallelPrefix(int[]-int-int-IntBinaryOperator)","Corresponding Source":"/**\n     * Performs {@link #parallelPrefix(int[], IntBinaryOperator)}\n     * for the given subrange of the array.\n     *\n     * @param array the array\n     * @param fromIndex the index of the first element, inclusive\n     * @param toIndex the index of the last element, exclusive\n     * @param op a side-effect-free, associative function to perform the\n     * cumulation\n     * @throws IllegalArgumentException if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *     if {@code fromIndex < 0} or {@code toIndex > array.length}\n     * @throws NullPointerException if the specified array or function is null\n     * @since 1.8\n     */\n    public static void parallelPrefix(int[] array, int fromIndex,\n                                      int toIndex, IntBinaryOperator op) {\n        Objects.requireNonNull(op);\n        rangeCheck(array.length, fromIndex, toIndex);\n        if (fromIndex < toIndex)\n            new ArrayPrefixHelpers.IntCumulateTask\n                    (null, op, array, fromIndex, toIndex).invoke();\n    }"}
{"Number":"777","API Relative Path":"java.util.Arrays.java-parallelPrefix(int[]-int-int-IntBinaryOperator)","Corresponding Source":"/**\n     * Performs {@link #parallelPrefix(int[], IntBinaryOperator)}\n     * for the given subrange of the array.\n     *\n     * @param array the array\n     * @param fromIndex the index of the first element, inclusive\n     * @param toIndex the index of the last element, exclusive\n     * @param op a side-effect-free, associative function to perform the\n     * cumulation\n     * @throws IllegalArgumentException if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *     if {@code fromIndex < 0} or {@code toIndex > array.length}\n     * @throws NullPointerException if the specified array or function is null\n     * @since 1.8\n     */\n    public static void parallelPrefix(int[] array, int fromIndex,\n                                      int toIndex, IntBinaryOperator op) {\n        Objects.requireNonNull(op);\n        rangeCheck(array.length, fromIndex, toIndex);\n        if (fromIndex < toIndex)\n            new ArrayPrefixHelpers.IntCumulateTask\n                    (null, op, array, fromIndex, toIndex).invoke();\n    }"}
{"Number":"778","API Relative Path":"java.util.Arrays.java-parallelPrefix(int[]-IntBinaryOperator)","Corresponding Source":"/**\n     * Cumulates, in parallel, each element of the given array in place,\n     * using the supplied function. For example if the array initially\n     * holds {@code [2, 1, 0, 3]} and the operation performs addition,\n     * then upon return the array holds {@code [2, 3, 3, 6]}.\n     * Parallel prefix computation is usually more efficient than\n     * sequential loops for large arrays.\n     *\n     * @param array the array, which is modified in-place by this method\n     * @param op a side-effect-free, associative function to perform the\n     * cumulation\n     * @throws NullPointerException if the specified array or function is null\n     * @since 1.8\n     */\n    public static void parallelPrefix(int[] array, IntBinaryOperator op) {\n        Objects.requireNonNull(op);\n        if (array.length > 0)\n            new ArrayPrefixHelpers.IntCumulateTask\n                    (null, op, array, 0, array.length).invoke();\n    }"}
{"Number":"779","API Relative Path":"java.util.Arrays.java-parallelPrefix(long[]-int-int-LongBinaryOperator)","Corresponding Source":"/**\n     * Performs {@link #parallelPrefix(long[], LongBinaryOperator)}\n     * for the given subrange of the array.\n     *\n     * @param array the array\n     * @param fromIndex the index of the first element, inclusive\n     * @param toIndex the index of the last element, exclusive\n     * @param op a side-effect-free, associative function to perform the\n     * cumulation\n     * @throws IllegalArgumentException if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *     if {@code fromIndex < 0} or {@code toIndex > array.length}\n     * @throws NullPointerException if the specified array or function is null\n     * @since 1.8\n     */\n    public static void parallelPrefix(long[] array, int fromIndex,\n                                      int toIndex, LongBinaryOperator op) {\n        Objects.requireNonNull(op);\n        rangeCheck(array.length, fromIndex, toIndex);\n        if (fromIndex < toIndex)\n            new ArrayPrefixHelpers.LongCumulateTask\n                    (null, op, array, fromIndex, toIndex).invoke();\n    }"}
{"Number":"780","API Relative Path":"java.util.Arrays.java-parallelPrefix(long[]-int-int-LongBinaryOperator)","Corresponding Source":"/**\n     * Performs {@link #parallelPrefix(long[], LongBinaryOperator)}\n     * for the given subrange of the array.\n     *\n     * @param array the array\n     * @param fromIndex the index of the first element, inclusive\n     * @param toIndex the index of the last element, exclusive\n     * @param op a side-effect-free, associative function to perform the\n     * cumulation\n     * @throws IllegalArgumentException if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *     if {@code fromIndex < 0} or {@code toIndex > array.length}\n     * @throws NullPointerException if the specified array or function is null\n     * @since 1.8\n     */\n    public static void parallelPrefix(long[] array, int fromIndex,\n                                      int toIndex, LongBinaryOperator op) {\n        Objects.requireNonNull(op);\n        rangeCheck(array.length, fromIndex, toIndex);\n        if (fromIndex < toIndex)\n            new ArrayPrefixHelpers.LongCumulateTask\n                    (null, op, array, fromIndex, toIndex).invoke();\n    }"}
{"Number":"781","API Relative Path":"java.util.Arrays.java-parallelPrefix(long[]-LongBinaryOperator)","Corresponding Source":"/**\n     * Cumulates, in parallel, each element of the given array in place,\n     * using the supplied function. For example if the array initially\n     * holds {@code [2, 1, 0, 3]} and the operation performs addition,\n     * then upon return the array holds {@code [2, 3, 3, 6]}.\n     * Parallel prefix computation is usually more efficient than\n     * sequential loops for large arrays.\n     *\n     * @param array the array, which is modified in-place by this method\n     * @param op a side-effect-free, associative function to perform the\n     * cumulation\n     * @throws NullPointerException if the specified array or function is null\n     * @since 1.8\n     */\n    public static void parallelPrefix(long[] array, LongBinaryOperator op) {\n        Objects.requireNonNull(op);\n        if (array.length > 0)\n            new ArrayPrefixHelpers.LongCumulateTask\n                    (null, op, array, 0, array.length).invoke();\n    }"}
{"Number":"782","API Relative Path":"java.util.Arrays.java-parallelPrefix(T[]-BinaryOperator)","Corresponding Source":"// Parallel prefix\n\n    /**\n     * Cumulates, in parallel, each element of the given array in place,\n     * using the supplied function. For example if the array initially\n     * holds {@code [2, 1, 0, 3]} and the operation performs addition,\n     * then upon return the array holds {@code [2, 3, 3, 6]}.\n     * Parallel prefix computation is usually more efficient than\n     * sequential loops for large arrays.\n     *\n     * @param <T> the class of the objects in the array\n     * @param array the array, which is modified in-place by this method\n     * @param op a side-effect-free, associative function to perform the\n     * cumulation\n     * @throws NullPointerException if the specified array or function is null\n     * @since 1.8\n     */\n    public static <T> void parallelPrefix(T[] array, BinaryOperator<T> op) {\n        Objects.requireNonNull(op);\n        if (array.length > 0)\n            new ArrayPrefixHelpers.CumulateTask<>\n                    (null, op, array, 0, array.length).invoke();\n    }"}
{"Number":"783","API Relative Path":"java.util.Arrays.java-parallelPrefix(T[]-int-int-BinaryOperator)","Corresponding Source":"/**\n     * Performs {@link #parallelPrefix(Object[], BinaryOperator)}\n     * for the given subrange of the array.\n     *\n     * @param <T> the class of the objects in the array\n     * @param array the array\n     * @param fromIndex the index of the first element, inclusive\n     * @param toIndex the index of the last element, exclusive\n     * @param op a side-effect-free, associative function to perform the\n     * cumulation\n     * @throws IllegalArgumentException if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *     if {@code fromIndex < 0} or {@code toIndex > array.length}\n     * @throws NullPointerException if the specified array or function is null\n     * @since 1.8\n     */\n    public static <T> void parallelPrefix(T[] array, int fromIndex,\n                                          int toIndex, BinaryOperator<T> op) {\n        Objects.requireNonNull(op);\n        rangeCheck(array.length, fromIndex, toIndex);\n        if (fromIndex < toIndex)\n            new ArrayPrefixHelpers.CumulateTask<>\n                    (null, op, array, fromIndex, toIndex).invoke();\n    }"}
{"Number":"784","API Relative Path":"java.util.Arrays.java-parallelPrefix(T[]-int-int-BinaryOperator)","Corresponding Source":"/**\n     * Performs {@link #parallelPrefix(Object[], BinaryOperator)}\n     * for the given subrange of the array.\n     *\n     * @param <T> the class of the objects in the array\n     * @param array the array\n     * @param fromIndex the index of the first element, inclusive\n     * @param toIndex the index of the last element, exclusive\n     * @param op a side-effect-free, associative function to perform the\n     * cumulation\n     * @throws IllegalArgumentException if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *     if {@code fromIndex < 0} or {@code toIndex > array.length}\n     * @throws NullPointerException if the specified array or function is null\n     * @since 1.8\n     */\n    public static <T> void parallelPrefix(T[] array, int fromIndex,\n                                          int toIndex, BinaryOperator<T> op) {\n        Objects.requireNonNull(op);\n        rangeCheck(array.length, fromIndex, toIndex);\n        if (fromIndex < toIndex)\n            new ArrayPrefixHelpers.CumulateTask<>\n                    (null, op, array, fromIndex, toIndex).invoke();\n    }"}
{"Number":"785","API Relative Path":"java.util.Arrays.java-parallelSort(byte[]-int-int)","Corresponding Source":"/**\n     * Sorts the specified range of the array into ascending numerical order.\n     * The range to be sorted extends from the index {@code fromIndex},\n     * inclusive, to the index {@code toIndex}, exclusive. If\n     * {@code fromIndex == toIndex}, the range to be sorted is empty.\n     *\n     * @implNote The sorting algorithm is a parallel sort-merge that breaks the\n     * array into sub-arrays that are themselves sorted and then merged. When\n     * the sub-array length reaches a minimum granularity, the sub-array is\n     * sorted using the appropriate {@link Arrays#sort(byte[]) Arrays.sort}\n     * method. If the length of the specified array is less than the minimum\n     * granularity, then it is sorted using the appropriate {@link\n     * Arrays#sort(byte[]) Arrays.sort} method. The algorithm requires a working\n     * space no greater than the size of the specified range of the original\n     * array. The {@link ForkJoinPool#commonPool() ForkJoin common pool} is\n     * used to execute any parallel tasks.\n     *\n     * @param a the array to be sorted\n     * @param fromIndex the index of the first element, inclusive, to be sorted\n     * @param toIndex the index of the last element, exclusive, to be sorted\n     *\n     * @throws IllegalArgumentException if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *     if {@code fromIndex < 0} or {@code toIndex > a.length}\n     *\n     * @since 1.8\n     */\n    public static void parallelSort(byte[] a, int fromIndex, int toIndex) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        int n = toIndex - fromIndex, p, g;\n        if (n <= MIN_ARRAY_SORT_GRAN ||\n            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)\n            DualPivotQuicksort.sort(a, fromIndex, toIndex - 1);\n        else\n            new ArraysParallelSortHelpers.FJByte.Sorter\n                (null, a, new byte[n], fromIndex, n, 0,\n                 ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?\n                 MIN_ARRAY_SORT_GRAN : g).invoke();\n    }"}
{"Number":"786","API Relative Path":"java.util.Arrays.java-parallelSort(char[]-int-int)","Corresponding Source":"/**\n     * Sorts the specified range of the array into ascending numerical order.\n     * The range to be sorted extends from the index {@code fromIndex},\n     * inclusive, to the index {@code toIndex}, exclusive. If\n     * {@code fromIndex == toIndex}, the range to be sorted is empty.\n     *\n      @implNote The sorting algorithm is a parallel sort-merge that breaks the\n     * array into sub-arrays that are themselves sorted and then merged. When\n     * the sub-array length reaches a minimum granularity, the sub-array is\n     * sorted using the appropriate {@link Arrays#sort(char[]) Arrays.sort}\n     * method. If the length of the specified array is less than the minimum\n     * granularity, then it is sorted using the appropriate {@link\n     * Arrays#sort(char[]) Arrays.sort} method. The algorithm requires a working\n     * space no greater than the size of the specified range of the original\n     * array. The {@link ForkJoinPool#commonPool() ForkJoin common pool} is\n     * used to execute any parallel tasks.\n     *\n     * @param a the array to be sorted\n     * @param fromIndex the index of the first element, inclusive, to be sorted\n     * @param toIndex the index of the last element, exclusive, to be sorted\n     *\n     * @throws IllegalArgumentException if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *     if {@code fromIndex < 0} or {@code toIndex > a.length}\n     *\n     * @since 1.8\n     */\n    public static void parallelSort(char[] a, int fromIndex, int toIndex) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        int n = toIndex - fromIndex, p, g;\n        if (n <= MIN_ARRAY_SORT_GRAN ||\n            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)\n            DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, null, 0, 0);\n        else\n            new ArraysParallelSortHelpers.FJChar.Sorter\n                (null, a, new char[n], fromIndex, n, 0,\n                 ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?\n                 MIN_ARRAY_SORT_GRAN : g).invoke();\n    }"}
{"Number":"787","API Relative Path":"java.util.Arrays.java-parallelSort(double[]-int-int)","Corresponding Source":"/**\n     * Sorts the specified range of the array into ascending numerical order.\n     * The range to be sorted extends from the index {@code fromIndex},\n     * inclusive, to the index {@code toIndex}, exclusive. If\n     * {@code fromIndex == toIndex}, the range to be sorted is empty.\n     *\n     * <p>The {@code <} relation does not provide a total order on all double\n     * values: {@code -0.0d == 0.0d} is {@code true} and a {@code Double.NaN}\n     * value compares neither less than, greater than, nor equal to any value,\n     * even itself. This method uses the total order imposed by the method\n     * {@link Double#compareTo}: {@code -0.0d} is treated as less than value\n     * {@code 0.0d} and {@code Double.NaN} is considered greater than any\n     * other value and all {@code Double.NaN} values are considered equal.\n     *\n     * @implNote The sorting algorithm is a parallel sort-merge that breaks the\n     * array into sub-arrays that are themselves sorted and then merged. When\n     * the sub-array length reaches a minimum granularity, the sub-array is\n     * sorted using the appropriate {@link Arrays#sort(double[]) Arrays.sort}\n     * method. If the length of the specified array is less than the minimum\n     * granularity, then it is sorted using the appropriate {@link\n     * Arrays#sort(double[]) Arrays.sort} method. The algorithm requires a working\n     * space no greater than the size of the specified range of the original\n     * array. The {@link ForkJoinPool#commonPool() ForkJoin common pool} is\n     * used to execute any parallel tasks.\n     *\n     * @param a the array to be sorted\n     * @param fromIndex the index of the first element, inclusive, to be sorted\n     * @param toIndex the index of the last element, exclusive, to be sorted\n     *\n     * @throws IllegalArgumentException if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *     if {@code fromIndex < 0} or {@code toIndex > a.length}\n     *\n     * @since 1.8\n     */\n    public static void parallelSort(double[] a, int fromIndex, int toIndex) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        int n = toIndex - fromIndex, p, g;\n        if (n <= MIN_ARRAY_SORT_GRAN ||\n            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)\n            DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, null, 0, 0);\n        else\n            new ArraysParallelSortHelpers.FJDouble.Sorter\n                (null, a, new double[n], fromIndex, n, 0,\n                 ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?\n                 MIN_ARRAY_SORT_GRAN : g).invoke();\n    }"}
{"Number":"788","API Relative Path":"java.util.Arrays.java-parallelSort(float[]-int-int)","Corresponding Source":"/**\n     * Sorts the specified range of the array into ascending numerical order.\n     * The range to be sorted extends from the index {@code fromIndex},\n     * inclusive, to the index {@code toIndex}, exclusive. If\n     * {@code fromIndex == toIndex}, the range to be sorted is empty.\n     *\n     * <p>The {@code <} relation does not provide a total order on all float\n     * values: {@code -0.0f == 0.0f} is {@code true} and a {@code Float.NaN}\n     * value compares neither less than, greater than, nor equal to any value,\n     * even itself. This method uses the total order imposed by the method\n     * {@link Float#compareTo}: {@code -0.0f} is treated as less than value\n     * {@code 0.0f} and {@code Float.NaN} is considered greater than any\n     * other value and all {@code Float.NaN} values are considered equal.\n     *\n     * @implNote The sorting algorithm is a parallel sort-merge that breaks the\n     * array into sub-arrays that are themselves sorted and then merged. When\n     * the sub-array length reaches a minimum granularity, the sub-array is\n     * sorted using the appropriate {@link Arrays#sort(float[]) Arrays.sort}\n     * method. If the length of the specified array is less than the minimum\n     * granularity, then it is sorted using the appropriate {@link\n     * Arrays#sort(float[]) Arrays.sort} method. The algorithm requires a working\n     * space no greater than the size of the specified range of the original\n     * array. The {@link ForkJoinPool#commonPool() ForkJoin common pool} is\n     * used to execute any parallel tasks.\n     *\n     * @param a the array to be sorted\n     * @param fromIndex the index of the first element, inclusive, to be sorted\n     * @param toIndex the index of the last element, exclusive, to be sorted\n     *\n     * @throws IllegalArgumentException if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *     if {@code fromIndex < 0} or {@code toIndex > a.length}\n     *\n     * @since 1.8\n     */\n    public static void parallelSort(float[] a, int fromIndex, int toIndex) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        int n = toIndex - fromIndex, p, g;\n        if (n <= MIN_ARRAY_SORT_GRAN ||\n            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)\n            DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, null, 0, 0);\n        else\n            new ArraysParallelSortHelpers.FJFloat.Sorter\n                (null, a, new float[n], fromIndex, n, 0,\n                 ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?\n                 MIN_ARRAY_SORT_GRAN : g).invoke();\n    }"}
{"Number":"789","API Relative Path":"java.util.Arrays.java-parallelSort(int[]-int-int)","Corresponding Source":"/**\n     * Sorts the specified range of the array into ascending numerical order.\n     * The range to be sorted extends from the index {@code fromIndex},\n     * inclusive, to the index {@code toIndex}, exclusive. If\n     * {@code fromIndex == toIndex}, the range to be sorted is empty.\n     *\n     * @implNote The sorting algorithm is a parallel sort-merge that breaks the\n     * array into sub-arrays that are themselves sorted and then merged. When\n     * the sub-array length reaches a minimum granularity, the sub-array is\n     * sorted using the appropriate {@link Arrays#sort(int[]) Arrays.sort}\n     * method. If the length of the specified array is less than the minimum\n     * granularity, then it is sorted using the appropriate {@link\n     * Arrays#sort(int[]) Arrays.sort} method. The algorithm requires a working\n     * space no greater than the size of the specified range of the original\n     * array. The {@link ForkJoinPool#commonPool() ForkJoin common pool} is\n     * used to execute any parallel tasks.\n     *\n     * @param a the array to be sorted\n     * @param fromIndex the index of the first element, inclusive, to be sorted\n     * @param toIndex the index of the last element, exclusive, to be sorted\n     *\n     * @throws IllegalArgumentException if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *     if {@code fromIndex < 0} or {@code toIndex > a.length}\n     *\n     * @since 1.8\n     */\n    public static void parallelSort(int[] a, int fromIndex, int toIndex) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        int n = toIndex - fromIndex, p, g;\n        if (n <= MIN_ARRAY_SORT_GRAN ||\n            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)\n            DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, null, 0, 0);\n        else\n            new ArraysParallelSortHelpers.FJInt.Sorter\n                (null, a, new int[n], fromIndex, n, 0,\n                 ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?\n                 MIN_ARRAY_SORT_GRAN : g).invoke();\n    }"}
{"Number":"790","API Relative Path":"java.util.Arrays.java-parallelSort(long[]-int-int)","Corresponding Source":"/**\n     * Sorts the specified range of the array into ascending numerical order.\n     * The range to be sorted extends from the index {@code fromIndex},\n     * inclusive, to the index {@code toIndex}, exclusive. If\n     * {@code fromIndex == toIndex}, the range to be sorted is empty.\n     *\n     * @implNote The sorting algorithm is a parallel sort-merge that breaks the\n     * array into sub-arrays that are themselves sorted and then merged. When\n     * the sub-array length reaches a minimum granularity, the sub-array is\n     * sorted using the appropriate {@link Arrays#sort(long[]) Arrays.sort}\n     * method. If the length of the specified array is less than the minimum\n     * granularity, then it is sorted using the appropriate {@link\n     * Arrays#sort(long[]) Arrays.sort} method. The algorithm requires a working\n     * space no greater than the size of the specified range of the original\n     * array. The {@link ForkJoinPool#commonPool() ForkJoin common pool} is\n     * used to execute any parallel tasks.\n     *\n     * @param a the array to be sorted\n     * @param fromIndex the index of the first element, inclusive, to be sorted\n     * @param toIndex the index of the last element, exclusive, to be sorted\n     *\n     * @throws IllegalArgumentException if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *     if {@code fromIndex < 0} or {@code toIndex > a.length}\n     *\n     * @since 1.8\n     */\n    public static void parallelSort(long[] a, int fromIndex, int toIndex) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        int n = toIndex - fromIndex, p, g;\n        if (n <= MIN_ARRAY_SORT_GRAN ||\n            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)\n            DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, null, 0, 0);\n        else\n            new ArraysParallelSortHelpers.FJLong.Sorter\n                (null, a, new long[n], fromIndex, n, 0,\n                 ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?\n                 MIN_ARRAY_SORT_GRAN : g).invoke();\n    }"}
{"Number":"791","API Relative Path":"java.util.Arrays.java-parallelSort(short[]-int-int)","Corresponding Source":"/**\n     * Sorts the specified range of the array into ascending numerical order.\n     * The range to be sorted extends from the index {@code fromIndex},\n     * inclusive, to the index {@code toIndex}, exclusive. If\n     * {@code fromIndex == toIndex}, the range to be sorted is empty.\n     *\n     * @implNote The sorting algorithm is a parallel sort-merge that breaks the\n     * array into sub-arrays that are themselves sorted and then merged. When\n     * the sub-array length reaches a minimum granularity, the sub-array is\n     * sorted using the appropriate {@link Arrays#sort(short[]) Arrays.sort}\n     * method. If the length of the specified array is less than the minimum\n     * granularity, then it is sorted using the appropriate {@link\n     * Arrays#sort(short[]) Arrays.sort} method. The algorithm requires a working\n     * space no greater than the size of the specified range of the original\n     * array. The {@link ForkJoinPool#commonPool() ForkJoin common pool} is\n     * used to execute any parallel tasks.\n     *\n     * @param a the array to be sorted\n     * @param fromIndex the index of the first element, inclusive, to be sorted\n     * @param toIndex the index of the last element, exclusive, to be sorted\n     *\n     * @throws IllegalArgumentException if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *     if {@code fromIndex < 0} or {@code toIndex > a.length}\n     *\n     * @since 1.8\n     */\n    public static void parallelSort(short[] a, int fromIndex, int toIndex) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        int n = toIndex - fromIndex, p, g;\n        if (n <= MIN_ARRAY_SORT_GRAN ||\n            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)\n            DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, null, 0, 0);\n        else\n            new ArraysParallelSortHelpers.FJShort.Sorter\n                (null, a, new short[n], fromIndex, n, 0,\n                 ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?\n                 MIN_ARRAY_SORT_GRAN : g).invoke();\n    }"}
{"Number":"792","API Relative Path":"java.util.Arrays.java-parallelSort(T[]-int-int)","Corresponding Source":"/**\n     * Sorts the specified range of the specified array of objects into\n     * ascending order, according to the\n     * {@linkplain Comparable natural ordering} of its\n     * elements.  The range to be sorted extends from index\n     * {@code fromIndex}, inclusive, to index {@code toIndex}, exclusive.\n     * (If {@code fromIndex==toIndex}, the range to be sorted is empty.)  All\n     * elements in this range must implement the {@link Comparable}\n     * interface.  Furthermore, all elements in this range must be <i>mutually\n     * comparable<\/i> (that is, {@code e1.compareTo(e2)} must not throw a\n     * {@code ClassCastException} for any elements {@code e1} and\n     * {@code e2} in the array).\n     *\n     * <p>This sort is guaranteed to be <i>stable<\/i>:  equal elements will\n     * not be reordered as a result of the sort.\n     *\n     * @implNote The sorting algorithm is a parallel sort-merge that breaks the\n     * array into sub-arrays that are themselves sorted and then merged. When\n     * the sub-array length reaches a minimum granularity, the sub-array is\n     * sorted using the appropriate {@link Arrays#sort(Object[]) Arrays.sort}\n     * method. If the length of the specified array is less than the minimum\n     * granularity, then it is sorted using the appropriate {@link\n     * Arrays#sort(Object[]) Arrays.sort} method. The algorithm requires a working\n     * space no greater than the size of the specified range of the original\n     * array. The {@link ForkJoinPool#commonPool() ForkJoin common pool} is\n     * used to execute any parallel tasks.\n     *\n     * @param <T> the class of the objects to be sorted\n     * @param a the array to be sorted\n     * @param fromIndex the index of the first element (inclusive) to be\n     *        sorted\n     * @param toIndex the index of the last element (exclusive) to be sorted\n     * @throws IllegalArgumentException if {@code fromIndex > toIndex} or\n     *         (optional) if the natural ordering of the array elements is\n     *         found to violate the {@link Comparable} contract\n     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex < 0} or\n     *         {@code toIndex > a.length}\n     * @throws ClassCastException if the array contains elements that are\n     *         not <i>mutually comparable<\/i> (for example, strings and\n     *         integers).\n     *\n     * @since 1.8\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <T extends Comparable<? super T>>\n    void parallelSort(T[] a, int fromIndex, int toIndex) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        int n = toIndex - fromIndex, p, g;\n        if (n <= MIN_ARRAY_SORT_GRAN ||\n            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)\n            TimSort.sort(a, fromIndex, toIndex, NaturalOrder.INSTANCE, null, 0, 0);\n        else\n            new ArraysParallelSortHelpers.FJObject.Sorter<T>\n                (null, a,\n                 (T[])Array.newInstance(a.getClass().getComponentType(), n),\n                 fromIndex, n, 0, ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?\n                 MIN_ARRAY_SORT_GRAN : g, NaturalOrder.INSTANCE).invoke();\n    }"}
{"Number":"793","API Relative Path":"java.util.Arrays.java-parallelSort(T[]-int-int-Comparator)","Corresponding Source":"/**\n     * Sorts the specified range of the specified array of objects according\n     * to the order induced by the specified comparator.  The range to be\n     * sorted extends from index {@code fromIndex}, inclusive, to index\n     * {@code toIndex}, exclusive.  (If {@code fromIndex==toIndex}, the\n     * range to be sorted is empty.)  All elements in the range must be\n     * <i>mutually comparable<\/i> by the specified comparator (that is,\n     * {@code c.compare(e1, e2)} must not throw a {@code ClassCastException}\n     * for any elements {@code e1} and {@code e2} in the range).\n     *\n     * <p>This sort is guaranteed to be <i>stable<\/i>:  equal elements will\n     * not be reordered as a result of the sort.\n     *\n     * @implNote The sorting algorithm is a parallel sort-merge that breaks the\n     * array into sub-arrays that are themselves sorted and then merged. When\n     * the sub-array length reaches a minimum granularity, the sub-array is\n     * sorted using the appropriate {@link Arrays#sort(Object[]) Arrays.sort}\n     * method. If the length of the specified array is less than the minimum\n     * granularity, then it is sorted using the appropriate {@link\n     * Arrays#sort(Object[]) Arrays.sort} method. The algorithm requires a working\n     * space no greater than the size of the specified range of the original\n     * array. The {@link ForkJoinPool#commonPool() ForkJoin common pool} is\n     * used to execute any parallel tasks.\n     *\n     * @param <T> the class of the objects to be sorted\n     * @param a the array to be sorted\n     * @param fromIndex the index of the first element (inclusive) to be\n     *        sorted\n     * @param toIndex the index of the last element (exclusive) to be sorted\n     * @param cmp the comparator to determine the order of the array.  A\n     *        {@code null} value indicates that the elements'\n     *        {@linkplain Comparable natural ordering} should be used.\n     * @throws IllegalArgumentException if {@code fromIndex > toIndex} or\n     *         (optional) if the natural ordering of the array elements is\n     *         found to violate the {@link Comparable} contract\n     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex < 0} or\n     *         {@code toIndex > a.length}\n     * @throws ClassCastException if the array contains elements that are\n     *         not <i>mutually comparable<\/i> (for example, strings and\n     *         integers).\n     *\n     * @since 1.8\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <T> void parallelSort(T[] a, int fromIndex, int toIndex,\n                                        Comparator<? super T> cmp) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        if (cmp == null)\n            cmp = NaturalOrder.INSTANCE;\n        int n = toIndex - fromIndex, p, g;\n        if (n <= MIN_ARRAY_SORT_GRAN ||\n            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)\n            TimSort.sort(a, fromIndex, toIndex, cmp, null, 0, 0);\n        else\n            new ArraysParallelSortHelpers.FJObject.Sorter<T>\n                (null, a,\n                 (T[])Array.newInstance(a.getClass().getComponentType(), n),\n                 fromIndex, n, 0, ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?\n                 MIN_ARRAY_SORT_GRAN : g, cmp).invoke();\n    }"}
{"Number":"794","API Relative Path":"java.util.Arrays.java-sort(byte[]-int-int)","Corresponding Source":"/**\n     * Sorts the specified range of the array into ascending numerical order.\n     * The range to be sorted extends from the index {@code fromIndex},\n     * inclusive, to the index {@code toIndex}, exclusive. If\n     * {@code fromIndex == toIndex}, the range to be sorted is empty.\n     *\n     * @implNote The sorting algorithm is a parallel sort-merge that breaks the\n     * array into sub-arrays that are themselves sorted and then merged. When\n     * the sub-array length reaches a minimum granularity, the sub-array is\n     * sorted using the appropriate {@link Arrays#sort(byte[]) Arrays.sort}\n     * method. If the length of the specified array is less than the minimum\n     * granularity, then it is sorted using the appropriate {@link\n     * Arrays#sort(byte[]) Arrays.sort} method. The algorithm requires a working\n     * space no greater than the size of the specified range of the original\n     * array. The {@link ForkJoinPool#commonPool() ForkJoin common pool} is\n     * used to execute any parallel tasks.\n     *\n     * @param a the array to be sorted\n     * @param fromIndex the index of the first element, inclusive, to be sorted\n     * @param toIndex the index of the last element, exclusive, to be sorted\n     *\n     * @throws IllegalArgumentException if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *     if {@code fromIndex < 0} or {@code toIndex > a.length}\n     *\n     * @since 1.8\n     */\n    public static void parallelSort(byte[] a, int fromIndex, int toIndex) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        int n = toIndex - fromIndex, p, g;\n        if (n <= MIN_ARRAY_SORT_GRAN ||\n            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)\n            DualPivotQuicksort.sort(a, fromIndex, toIndex - 1);\n        else\n            new ArraysParallelSortHelpers.FJByte.Sorter\n                (null, a, new byte[n], fromIndex, n, 0,\n                 ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?\n                 MIN_ARRAY_SORT_GRAN : g).invoke();\n    }"}
{"Number":"795","API Relative Path":"java.util.Arrays.java-sort(char[]-int-int)","Corresponding Source":"/**\n     * Sorts the specified range of the array into ascending numerical order.\n     * The range to be sorted extends from the index {@code fromIndex},\n     * inclusive, to the index {@code toIndex}, exclusive. If\n     * {@code fromIndex == toIndex}, the range to be sorted is empty.\n     *\n      @implNote The sorting algorithm is a parallel sort-merge that breaks the\n     * array into sub-arrays that are themselves sorted and then merged. When\n     * the sub-array length reaches a minimum granularity, the sub-array is\n     * sorted using the appropriate {@link Arrays#sort(char[]) Arrays.sort}\n     * method. If the length of the specified array is less than the minimum\n     * granularity, then it is sorted using the appropriate {@link\n     * Arrays#sort(char[]) Arrays.sort} method. The algorithm requires a working\n     * space no greater than the size of the specified range of the original\n     * array. The {@link ForkJoinPool#commonPool() ForkJoin common pool} is\n     * used to execute any parallel tasks.\n     *\n     * @param a the array to be sorted\n     * @param fromIndex the index of the first element, inclusive, to be sorted\n     * @param toIndex the index of the last element, exclusive, to be sorted\n     *\n     * @throws IllegalArgumentException if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *     if {@code fromIndex < 0} or {@code toIndex > a.length}\n     *\n     * @since 1.8\n     */\n    public static void parallelSort(char[] a, int fromIndex, int toIndex) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        int n = toIndex - fromIndex, p, g;\n        if (n <= MIN_ARRAY_SORT_GRAN ||\n            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)\n            DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, null, 0, 0);\n        else\n            new ArraysParallelSortHelpers.FJChar.Sorter\n                (null, a, new char[n], fromIndex, n, 0,\n                 ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?\n                 MIN_ARRAY_SORT_GRAN : g).invoke();\n    }"}
{"Number":"796","API Relative Path":"java.util.Arrays.java-sort(double[]-int-int)","Corresponding Source":"/**\n     * Sorts the specified range of the array into ascending numerical order.\n     * The range to be sorted extends from the index {@code fromIndex},\n     * inclusive, to the index {@code toIndex}, exclusive. If\n     * {@code fromIndex == toIndex}, the range to be sorted is empty.\n     *\n     * <p>The {@code <} relation does not provide a total order on all double\n     * values: {@code -0.0d == 0.0d} is {@code true} and a {@code Double.NaN}\n     * value compares neither less than, greater than, nor equal to any value,\n     * even itself. This method uses the total order imposed by the method\n     * {@link Double#compareTo}: {@code -0.0d} is treated as less than value\n     * {@code 0.0d} and {@code Double.NaN} is considered greater than any\n     * other value and all {@code Double.NaN} values are considered equal.\n     *\n     * @implNote The sorting algorithm is a parallel sort-merge that breaks the\n     * array into sub-arrays that are themselves sorted and then merged. When\n     * the sub-array length reaches a minimum granularity, the sub-array is\n     * sorted using the appropriate {@link Arrays#sort(double[]) Arrays.sort}\n     * method. If the length of the specified array is less than the minimum\n     * granularity, then it is sorted using the appropriate {@link\n     * Arrays#sort(double[]) Arrays.sort} method. The algorithm requires a working\n     * space no greater than the size of the specified range of the original\n     * array. The {@link ForkJoinPool#commonPool() ForkJoin common pool} is\n     * used to execute any parallel tasks.\n     *\n     * @param a the array to be sorted\n     * @param fromIndex the index of the first element, inclusive, to be sorted\n     * @param toIndex the index of the last element, exclusive, to be sorted\n     *\n     * @throws IllegalArgumentException if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *     if {@code fromIndex < 0} or {@code toIndex > a.length}\n     *\n     * @since 1.8\n     */\n    public static void parallelSort(double[] a, int fromIndex, int toIndex) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        int n = toIndex - fromIndex, p, g;\n        if (n <= MIN_ARRAY_SORT_GRAN ||\n            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)\n            DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, null, 0, 0);\n        else\n            new ArraysParallelSortHelpers.FJDouble.Sorter\n                (null, a, new double[n], fromIndex, n, 0,\n                 ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?\n                 MIN_ARRAY_SORT_GRAN : g).invoke();\n    }"}
{"Number":"797","API Relative Path":"java.util.Arrays.java-sort(float[]-int-int)","Corresponding Source":"/**\n     * Sorts the specified range of the array into ascending numerical order.\n     * The range to be sorted extends from the index {@code fromIndex},\n     * inclusive, to the index {@code toIndex}, exclusive. If\n     * {@code fromIndex == toIndex}, the range to be sorted is empty.\n     *\n     * <p>The {@code <} relation does not provide a total order on all float\n     * values: {@code -0.0f == 0.0f} is {@code true} and a {@code Float.NaN}\n     * value compares neither less than, greater than, nor equal to any value,\n     * even itself. This method uses the total order imposed by the method\n     * {@link Float#compareTo}: {@code -0.0f} is treated as less than value\n     * {@code 0.0f} and {@code Float.NaN} is considered greater than any\n     * other value and all {@code Float.NaN} values are considered equal.\n     *\n     * @implNote The sorting algorithm is a parallel sort-merge that breaks the\n     * array into sub-arrays that are themselves sorted and then merged. When\n     * the sub-array length reaches a minimum granularity, the sub-array is\n     * sorted using the appropriate {@link Arrays#sort(float[]) Arrays.sort}\n     * method. If the length of the specified array is less than the minimum\n     * granularity, then it is sorted using the appropriate {@link\n     * Arrays#sort(float[]) Arrays.sort} method. The algorithm requires a working\n     * space no greater than the size of the specified range of the original\n     * array. The {@link ForkJoinPool#commonPool() ForkJoin common pool} is\n     * used to execute any parallel tasks.\n     *\n     * @param a the array to be sorted\n     * @param fromIndex the index of the first element, inclusive, to be sorted\n     * @param toIndex the index of the last element, exclusive, to be sorted\n     *\n     * @throws IllegalArgumentException if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *     if {@code fromIndex < 0} or {@code toIndex > a.length}\n     *\n     * @since 1.8\n     */\n    public static void parallelSort(float[] a, int fromIndex, int toIndex) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        int n = toIndex - fromIndex, p, g;\n        if (n <= MIN_ARRAY_SORT_GRAN ||\n            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)\n            DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, null, 0, 0);\n        else\n            new ArraysParallelSortHelpers.FJFloat.Sorter\n                (null, a, new float[n], fromIndex, n, 0,\n                 ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?\n                 MIN_ARRAY_SORT_GRAN : g).invoke();\n    }"}
{"Number":"798","API Relative Path":"java.util.Arrays.java-sort(int[]-int-int)","Corresponding Source":"/**\n     * Sorts the specified range of the array into ascending numerical order.\n     * The range to be sorted extends from the index {@code fromIndex},\n     * inclusive, to the index {@code toIndex}, exclusive. If\n     * {@code fromIndex == toIndex}, the range to be sorted is empty.\n     *\n     * @implNote The sorting algorithm is a parallel sort-merge that breaks the\n     * array into sub-arrays that are themselves sorted and then merged. When\n     * the sub-array length reaches a minimum granularity, the sub-array is\n     * sorted using the appropriate {@link Arrays#sort(int[]) Arrays.sort}\n     * method. If the length of the specified array is less than the minimum\n     * granularity, then it is sorted using the appropriate {@link\n     * Arrays#sort(int[]) Arrays.sort} method. The algorithm requires a working\n     * space no greater than the size of the specified range of the original\n     * array. The {@link ForkJoinPool#commonPool() ForkJoin common pool} is\n     * used to execute any parallel tasks.\n     *\n     * @param a the array to be sorted\n     * @param fromIndex the index of the first element, inclusive, to be sorted\n     * @param toIndex the index of the last element, exclusive, to be sorted\n     *\n     * @throws IllegalArgumentException if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *     if {@code fromIndex < 0} or {@code toIndex > a.length}\n     *\n     * @since 1.8\n     */\n    public static void parallelSort(int[] a, int fromIndex, int toIndex) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        int n = toIndex - fromIndex, p, g;\n        if (n <= MIN_ARRAY_SORT_GRAN ||\n            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)\n            DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, null, 0, 0);\n        else\n            new ArraysParallelSortHelpers.FJInt.Sorter\n                (null, a, new int[n], fromIndex, n, 0,\n                 ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?\n                 MIN_ARRAY_SORT_GRAN : g).invoke();\n    }"}
{"Number":"799","API Relative Path":"java.util.Arrays.java-sort(long[]-int-int)","Corresponding Source":"/**\n     * Sorts the specified range of the array into ascending numerical order.\n     * The range to be sorted extends from the index {@code fromIndex},\n     * inclusive, to the index {@code toIndex}, exclusive. If\n     * {@code fromIndex == toIndex}, the range to be sorted is empty.\n     *\n     * @implNote The sorting algorithm is a parallel sort-merge that breaks the\n     * array into sub-arrays that are themselves sorted and then merged. When\n     * the sub-array length reaches a minimum granularity, the sub-array is\n     * sorted using the appropriate {@link Arrays#sort(long[]) Arrays.sort}\n     * method. If the length of the specified array is less than the minimum\n     * granularity, then it is sorted using the appropriate {@link\n     * Arrays#sort(long[]) Arrays.sort} method. The algorithm requires a working\n     * space no greater than the size of the specified range of the original\n     * array. The {@link ForkJoinPool#commonPool() ForkJoin common pool} is\n     * used to execute any parallel tasks.\n     *\n     * @param a the array to be sorted\n     * @param fromIndex the index of the first element, inclusive, to be sorted\n     * @param toIndex the index of the last element, exclusive, to be sorted\n     *\n     * @throws IllegalArgumentException if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *     if {@code fromIndex < 0} or {@code toIndex > a.length}\n     *\n     * @since 1.8\n     */\n    public static void parallelSort(long[] a, int fromIndex, int toIndex) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        int n = toIndex - fromIndex, p, g;\n        if (n <= MIN_ARRAY_SORT_GRAN ||\n            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)\n            DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, null, 0, 0);\n        else\n            new ArraysParallelSortHelpers.FJLong.Sorter\n                (null, a, new long[n], fromIndex, n, 0,\n                 ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?\n                 MIN_ARRAY_SORT_GRAN : g).invoke();\n    }"}
{"Number":"800","API Relative Path":"java.util.Arrays.java-sort(Object[]-int-int)","Corresponding Source":"/** To be removed in a future release. */\n    private static void legacyMergeSort(Object[] a,\n                                        int fromIndex, int toIndex) {\n        Object[] aux = copyOfRange(a, fromIndex, toIndex);\n        mergeSort(aux, a, fromIndex, toIndex, -fromIndex);\n    }"}
{"Number":"801","API Relative Path":"java.util.Arrays.java-sort(short[]-int-int)","Corresponding Source":"/**\n     * Sorts the specified range of the array into ascending numerical order.\n     * The range to be sorted extends from the index {@code fromIndex},\n     * inclusive, to the index {@code toIndex}, exclusive. If\n     * {@code fromIndex == toIndex}, the range to be sorted is empty.\n     *\n     * @implNote The sorting algorithm is a parallel sort-merge that breaks the\n     * array into sub-arrays that are themselves sorted and then merged. When\n     * the sub-array length reaches a minimum granularity, the sub-array is\n     * sorted using the appropriate {@link Arrays#sort(short[]) Arrays.sort}\n     * method. If the length of the specified array is less than the minimum\n     * granularity, then it is sorted using the appropriate {@link\n     * Arrays#sort(short[]) Arrays.sort} method. The algorithm requires a working\n     * space no greater than the size of the specified range of the original\n     * array. The {@link ForkJoinPool#commonPool() ForkJoin common pool} is\n     * used to execute any parallel tasks.\n     *\n     * @param a the array to be sorted\n     * @param fromIndex the index of the first element, inclusive, to be sorted\n     * @param toIndex the index of the last element, exclusive, to be sorted\n     *\n     * @throws IllegalArgumentException if {@code fromIndex > toIndex}\n     * @throws ArrayIndexOutOfBoundsException\n     *     if {@code fromIndex < 0} or {@code toIndex > a.length}\n     *\n     * @since 1.8\n     */\n    public static void parallelSort(short[] a, int fromIndex, int toIndex) {\n        rangeCheck(a.length, fromIndex, toIndex);\n        int n = toIndex - fromIndex, p, g;\n        if (n <= MIN_ARRAY_SORT_GRAN ||\n            (p = ForkJoinPool.getCommonPoolParallelism()) == 1)\n            DualPivotQuicksort.sort(a, fromIndex, toIndex - 1, null, 0, 0);\n        else\n            new ArraysParallelSortHelpers.FJShort.Sorter\n                (null, a, new short[n], fromIndex, n, 0,\n                 ((g = n / (p << 2)) <= MIN_ARRAY_SORT_GRAN) ?\n                 MIN_ARRAY_SORT_GRAN : g).invoke();\n    }"}
{"Number":"802","API Relative Path":"java.util.Arrays.java-sort(T[]-int-int-Comparator)","Corresponding Source":"/** To be removed in a future release. */\n    private static <T> void legacyMergeSort(T[] a, int fromIndex, int toIndex,\n                                            Comparator<? super T> c) {\n        T[] aux = copyOfRange(a, fromIndex, toIndex);\n        if (c==null)\n            mergeSort(aux, a, fromIndex, toIndex, -fromIndex);\n        else\n            mergeSort(aux, a, fromIndex, toIndex, -fromIndex, c);\n    }"}
{"Number":"803","API Relative Path":"java.util.Base64.java-getMimeEncoder(int-byte[])","Corresponding Source":"/**\n     * Returns a {@link Encoder} that encodes using the\n     * <a href=\"#mime\">MIME<\/a> type base64 encoding scheme\n     * with specified line length and line separators.\n     *\n     * @param   lineLength\n     *          the length of each output line (rounded down to nearest multiple\n     *          of 4). If {@code lineLength <= 0} the output will not be separated\n     *          in lines\n     * @param   lineSeparator\n     *          the line separator for each output line\n     *\n     * @return  A Base64 encoder.\n     *\n     * @throws  IllegalArgumentException if {@code lineSeparator} includes any\n     *          character of \"The Base64 Alphabet\" as specified in Table 1 of\n     *          RFC 2045.\n     */\n    public static Encoder getMimeEncoder(int lineLength, byte[] lineSeparator) {\n         Objects.requireNonNull(lineSeparator);\n         int[] base64 = Decoder.fromBase64;\n         for (byte b : lineSeparator) {\n             if (base64[b & 0xff] != -1)\n                 throw new IllegalArgumentException(\n                     \"Illegal base64 line separator character 0x\" + Integer.toString(b, 16));\n         }\n         if (lineLength <= 0) {\n             return Encoder.RFC4648;\n         }\n         return new Encoder(false, lineSeparator, lineLength >> 2 << 2, true);\n    }"}
{"Number":"804","API Relative Path":"java.util.BitSet.java-BitSet(int)","Corresponding Source":"/**\n     * Creates a bit set whose initial size is large enough to explicitly\n     * represent bits with indices in the range {@code 0} through\n     * {@code nbits-1}. All bits are initially {@code false}.\n     *\n     * @param  nbits the initial size of the bit set\n     * @throws NegativeArraySizeException if the specified initial size\n     *         is negative\n     */\n    public BitSet(int nbits) {\n        // nbits can't be negative; size 0 is OK\n        if (nbits < 0)\n            throw new NegativeArraySizeException(\"nbits < 0: \" + nbits);\n\n        initWords(nbits);\n        sizeIsSticky = true;\n    }"}
{"Number":"805","API Relative Path":"java.util.BitSet.java-clear(int)","Corresponding Source":"/**\n     * Sets the bit specified by the index to {@code false}.\n     *\n     * @param  bitIndex the index of the bit to be cleared\n     * @throws IndexOutOfBoundsException if the specified index is negative\n     * @since  JDK1.0\n     */\n    public void clear(int bitIndex) {\n        if (bitIndex < 0)\n            throw new IndexOutOfBoundsException(\"bitIndex < 0: \" + bitIndex);\n\n        int wordIndex = wordIndex(bitIndex);\n        if (wordIndex >= wordsInUse)\n            return;\n\n        words[wordIndex] &= ~(1L << bitIndex);\n\n        recalculateWordsInUse();\n        checkInvariants();\n    }"}
{"Number":"806","API Relative Path":"java.util.BitSet.java-flip(int)","Corresponding Source":"/**\n     * Sets the bit at the specified index to the complement of its\n     * current value.\n     *\n     * @param  bitIndex the index of the bit to flip\n     * @throws IndexOutOfBoundsException if the specified index is negative\n     * @since  1.4\n     */\n    public void flip(int bitIndex) {\n        if (bitIndex < 0)\n            throw new IndexOutOfBoundsException(\"bitIndex < 0: \" + bitIndex);\n\n        int wordIndex = wordIndex(bitIndex);\n        expandTo(wordIndex);\n\n        words[wordIndex] ^= (1L << bitIndex);\n\n        recalculateWordsInUse();\n        checkInvariants();\n    }"}
{"Number":"807","API Relative Path":"java.util.BitSet.java-get(int)","Corresponding Source":"/**\n     * Returns the value of the bit with the specified index. The value\n     * is {@code true} if the bit with the index {@code bitIndex}\n     * is currently set in this {@code BitSet}; otherwise, the result\n     * is {@code false}.\n     *\n     * @param  bitIndex   the bit index\n     * @return the value of the bit with the specified index\n     * @throws IndexOutOfBoundsException if the specified index is negative\n     */\n    public boolean get(int bitIndex) {\n        if (bitIndex < 0)\n            throw new IndexOutOfBoundsException(\"bitIndex < 0: \" + bitIndex);\n\n        checkInvariants();\n\n        int wordIndex = wordIndex(bitIndex);\n        return (wordIndex < wordsInUse)\n            && ((words[wordIndex] & (1L << bitIndex)) != 0);\n    }"}
{"Number":"808","API Relative Path":"java.util.BitSet.java-nextClearBit(int)","Corresponding Source":"/**\n     * Returns the index of the first bit that is set to {@code false}\n     * that occurs on or after the specified starting index.\n     *\n     * @param  fromIndex the index to start checking from (inclusive)\n     * @return the index of the next clear bit\n     * @throws IndexOutOfBoundsException if the specified index is negative\n     * @since  1.4\n     */\n    public int nextClearBit(int fromIndex) {\n        // Neither spec nor implementation handle bitsets of maximal length.\n        // See 4816253.\n        if (fromIndex < 0)\n            throw new IndexOutOfBoundsException(\"fromIndex < 0: \" + fromIndex);\n\n        checkInvariants();\n\n        int u = wordIndex(fromIndex);\n        if (u >= wordsInUse)\n            return fromIndex;\n\n        long word = ~words[u] & (WORD_MASK << fromIndex);\n\n        while (true) {\n            if (word != 0)\n                return (u * BITS_PER_WORD) + Long.numberOfTrailingZeros(word);\n            if (++u == wordsInUse)\n                return wordsInUse * BITS_PER_WORD;\n            word = ~words[u];\n        }\n    }"}
{"Number":"809","API Relative Path":"java.util.BitSet.java-nextSetBit(int)","Corresponding Source":"/**\n     * Returns the index of the first bit that is set to {@code true}\n     * that occurs on or after the specified starting index. If no such\n     * bit exists then {@code -1} is returned.\n     *\n     * <p>To iterate over the {@code true} bits in a {@code BitSet},\n     * use the following loop:\n     *\n     *  <pre> {@code\n     * for (int i = bs.nextSetBit(0); i >= 0; i = bs.nextSetBit(i+1)) {\n     *     // operate on index i here\n     * }}<\/pre>\n     *\n     * @param  fromIndex the index to start checking from (inclusive)\n     * @return the index of the next set bit, or {@code -1} if there\n     *         is no such bit\n     * @throws IndexOutOfBoundsException if the specified index is negative\n     * @since  1.4\n     */\n    public int nextSetBit(int fromIndex) {\n        if (fromIndex < 0)\n            throw new IndexOutOfBoundsException(\"fromIndex < 0: \" + fromIndex);\n\n        checkInvariants();\n\n        int u = wordIndex(fromIndex);\n        if (u >= wordsInUse)\n            return -1;\n\n        long word = words[u] & (WORD_MASK << fromIndex);\n\n        while (true) {\n            if (word != 0)\n                return (u * BITS_PER_WORD) + Long.numberOfTrailingZeros(word);\n            if (++u == wordsInUse)\n                return -1;\n            word = words[u];\n        }\n    }"}
{"Number":"810","API Relative Path":"java.util.BitSet.java-previousClearBit(int)","Corresponding Source":"/**\n     * Returns the index of the nearest bit that is set to {@code false}\n     * that occurs on or before the specified starting index.\n     * If no such bit exists, or if {@code -1} is given as the\n     * starting index, then {@code -1} is returned.\n     *\n     * @param  fromIndex the index to start checking from (inclusive)\n     * @return the index of the previous clear bit, or {@code -1} if there\n     *         is no such bit\n     * @throws IndexOutOfBoundsException if the specified index is less\n     *         than {@code -1}\n     * @since  1.7\n     */\n    public int previousClearBit(int fromIndex) {\n        if (fromIndex < 0) {\n            if (fromIndex == -1)\n                return -1;\n            throw new IndexOutOfBoundsException(\n                \"fromIndex < -1: \" + fromIndex);\n        }\n\n        checkInvariants();\n\n        int u = wordIndex(fromIndex);\n        if (u >= wordsInUse)\n            return fromIndex;\n\n        long word = ~words[u] & (WORD_MASK >>> -(fromIndex+1));\n\n        while (true) {\n            if (word != 0)\n                return (u+1) * BITS_PER_WORD -1 - Long.numberOfLeadingZeros(word);\n            if (u-- == 0)\n                return -1;\n            word = ~words[u];\n        }\n    }"}
{"Number":"811","API Relative Path":"java.util.BitSet.java-previousSetBit(int)","Corresponding Source":"/**\n     * Returns the index of the nearest bit that is set to {@code true}\n     * that occurs on or before the specified starting index.\n     * If no such bit exists, or if {@code -1} is given as the\n     * starting index, then {@code -1} is returned.\n     *\n     * <p>To iterate over the {@code true} bits in a {@code BitSet},\n     * use the following loop:\n     *\n     *  <pre> {@code\n     * for (int i = bs.length(); (i = bs.previousSetBit(i-1)) >= 0; ) {\n     *     // operate on index i here\n     * }}<\/pre>\n     *\n     * @param  fromIndex the index to start checking from (inclusive)\n     * @return the index of the previous set bit, or {@code -1} if there\n     *         is no such bit\n     * @throws IndexOutOfBoundsException if the specified index is less\n     *         than {@code -1}\n     * @since  1.7\n     */\n    public int previousSetBit(int fromIndex) {\n        if (fromIndex < 0) {\n            if (fromIndex == -1)\n                return -1;\n            throw new IndexOutOfBoundsException(\n                \"fromIndex < -1: \" + fromIndex);\n        }\n\n        checkInvariants();\n\n        int u = wordIndex(fromIndex);\n        if (u >= wordsInUse)\n            return length() - 1;\n\n        long word = words[u] & (WORD_MASK >>> -(fromIndex+1));\n\n        while (true) {\n            if (word != 0)\n                return (u+1) * BITS_PER_WORD - 1 - Long.numberOfLeadingZeros(word);\n            if (u-- == 0)\n                return -1;\n            word = words[u];\n        }\n    }"}
{"Number":"812","API Relative Path":"java.util.BitSet.java-set(int)","Corresponding Source":"/**\n     * Sets the bit at the specified index to {@code true}.\n     *\n     * @param  bitIndex a bit index\n     * @throws IndexOutOfBoundsException if the specified index is negative\n     * @since  JDK1.0\n     */\n    public void set(int bitIndex) {\n        if (bitIndex < 0)\n            throw new IndexOutOfBoundsException(\"bitIndex < 0: \" + bitIndex);\n\n        int wordIndex = wordIndex(bitIndex);\n        expandTo(wordIndex);\n\n        words[wordIndex] |= (1L << bitIndex); // Restores invariants\n\n        checkInvariants();\n    }"}
{"Number":"813","API Relative Path":"java.util.BitSet.java-set(int-boolean)","Corresponding Source":"/**\n     * Sets the bit at the specified index to the specified value.\n     *\n     * @param  bitIndex a bit index\n     * @param  value a boolean value to set\n     * @throws IndexOutOfBoundsException if the specified index is negative\n     * @since  1.4\n     */\n    public void set(int bitIndex, boolean value) {\n        if (value)\n            set(bitIndex);\n        else\n            clear(bitIndex);\n    }"}
{"Number":"814","API Relative Path":"java.util.Comparator.java-comparing(Function)","Corresponding Source":"/**\n     * Accepts a function that extracts a {@link java.lang.Comparable\n     * Comparable} sort key from a type {@code T}, and returns a {@code\n     * Comparator<T>} that compares by that sort key.\n     *\n     * <p>The returned comparator is serializable if the specified function\n     * is also serializable.\n     *\n     * @apiNote\n     * For example, to obtain a {@code Comparator} that compares {@code\n     * Person} objects by their last name,\n     *\n     * <pre>{@code\n     *     Comparator<Person> byLastName = Comparator.comparing(Person::getLastName);\n     * }<\/pre>\n     *\n     * @param  <T> the type of element to be compared\n     * @param  <U> the type of the {@code Comparable} sort key\n     * @param  keyExtractor the function used to extract the {@link\n     *         Comparable} sort key\n     * @return a comparator that compares by an extracted key\n     * @throws NullPointerException if the argument is null\n     * @since 1.8\n     */\n    public static <T, U extends Comparable<? super U>> Comparator<T> comparing(\n            Function<? super T, ? extends U> keyExtractor)\n    {\n        Objects.requireNonNull(keyExtractor);\n        return (Comparator<T> & Serializable)\n            (c1, c2) -> keyExtractor.apply(c1).compareTo(keyExtractor.apply(c2));\n    }"}
{"Number":"815","API Relative Path":"java.util.Comparator.java-comparing(Function-Comparator)","Corresponding Source":"/**\n     * Accepts a function that extracts a sort key from a type {@code T}, and\n     * returns a {@code Comparator<T>} that compares by that sort key using\n     * the specified {@link Comparator}.\n      *\n     * <p>The returned comparator is serializable if the specified function\n     * and comparator are both serializable.\n     *\n     * @apiNote\n     * For example, to obtain a {@code Comparator} that compares {@code\n     * Person} objects by their last name ignoring case differences,\n     *\n     * <pre>{@code\n     *     Comparator<Person> cmp = Comparator.comparing(\n     *             Person::getLastName,\n     *             String.CASE_INSENSITIVE_ORDER);\n     * }<\/pre>\n     *\n     * @param  <T> the type of element to be compared\n     * @param  <U> the type of the sort key\n     * @param  keyExtractor the function used to extract the sort key\n     * @param  keyComparator the {@code Comparator} used to compare the sort key\n     * @return a comparator that compares by an extracted key using the\n     *         specified {@code Comparator}\n     * @throws NullPointerException if either argument is null\n     * @since 1.8\n     */\n    public static <T, U> Comparator<T> comparing(\n            Function<? super T, ? extends U> keyExtractor,\n            Comparator<? super U> keyComparator)\n    {\n        Objects.requireNonNull(keyExtractor);\n        Objects.requireNonNull(keyComparator);\n        return (Comparator<T> & Serializable)\n            (c1, c2) -> keyComparator.compare(keyExtractor.apply(c1),\n                                              keyExtractor.apply(c2));\n    }"}
{"Number":"816","API Relative Path":"java.util.Comparator.java-comparingDouble(ToDoubleFunction)","Corresponding Source":"/**\n     * Accepts a function that extracts a {@code double} sort key from a type\n     * {@code T}, and returns a {@code Comparator<T>} that compares by that\n     * sort key.\n     *\n     * <p>The returned comparator is serializable if the specified function\n     * is also serializable.\n     *\n     * @param  <T> the type of element to be compared\n     * @param  keyExtractor the function used to extract the double sort key\n     * @return a comparator that compares by an extracted key\n     * @see #comparing(Function)\n     * @throws NullPointerException if the argument is null\n     * @since 1.8\n     */\n    public static<T> Comparator<T> comparingDouble(ToDoubleFunction<? super T> keyExtractor) {\n        Objects.requireNonNull(keyExtractor);\n        return (Comparator<T> & Serializable)\n            (c1, c2) -> Double.compare(keyExtractor.applyAsDouble(c1), keyExtractor.applyAsDouble(c2));\n    }"}
{"Number":"817","API Relative Path":"java.util.Comparator.java-comparingInt(ToIntFunction)","Corresponding Source":"/**\n     * Accepts a function that extracts an {@code int} sort key from a type\n     * {@code T}, and returns a {@code Comparator<T>} that compares by that\n     * sort key.\n     *\n     * <p>The returned comparator is serializable if the specified function\n     * is also serializable.\n     *\n     * @param  <T> the type of element to be compared\n     * @param  keyExtractor the function used to extract the integer sort key\n     * @return a comparator that compares by an extracted key\n     * @see #comparing(Function)\n     * @throws NullPointerException if the argument is null\n     * @since 1.8\n     */\n    public static <T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor) {\n        Objects.requireNonNull(keyExtractor);\n        return (Comparator<T> & Serializable)\n            (c1, c2) -> Integer.compare(keyExtractor.applyAsInt(c1), keyExtractor.applyAsInt(c2));\n    }"}
{"Number":"818","API Relative Path":"java.util.Comparator.java-comparingLong(ToLongFunction)","Corresponding Source":"/**\n     * Accepts a function that extracts a {@code long} sort key from a type\n     * {@code T}, and returns a {@code Comparator<T>} that compares by that\n     * sort key.\n     *\n     * <p>The returned comparator is serializable if the specified function is\n     * also serializable.\n     *\n     * @param  <T> the type of element to be compared\n     * @param  keyExtractor the function used to extract the long sort key\n     * @return a comparator that compares by an extracted key\n     * @see #comparing(Function)\n     * @throws NullPointerException if the argument is null\n     * @since 1.8\n     */\n    public static <T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor) {\n        Objects.requireNonNull(keyExtractor);\n        return (Comparator<T> & Serializable)\n            (c1, c2) -> Long.compare(keyExtractor.applyAsLong(c1), keyExtractor.applyAsLong(c2));\n    }"}
{"Number":"819","API Relative Path":"java.util.concurrent.AbstractExecutorService.java-submit(Callable)","Corresponding Source":"/**\n     * @throws RejectedExecutionException {@inheritDoc}\n     * @throws NullPointerException       {@inheritDoc}\n     */\n    public <T> Future<T> submit(Callable<T> task) {\n        if (task == null) throw new NullPointerException();\n        RunnableFuture<T> ftask = newTaskFor(task);\n        execute(ftask);\n        return ftask;\n    }"}
{"Number":"820","API Relative Path":"java.util.concurrent.AbstractExecutorService.java-submit(Runnable)","Corresponding Source":"/**\n     * @throws RejectedExecutionException {@inheritDoc}\n     * @throws NullPointerException       {@inheritDoc}\n     */\n    public Future<?> submit(Runnable task) {\n        if (task == null) throw new NullPointerException();\n        RunnableFuture<Void> ftask = newTaskFor(task, null);\n        execute(ftask);\n        return ftask;\n    }"}
{"Number":"821","API Relative Path":"java.util.concurrent.AbstractExecutorService.java-submit(Runnable-T)","Corresponding Source":"/**\n     * @throws RejectedExecutionException {@inheritDoc}\n     * @throws NullPointerException       {@inheritDoc}\n     */\n    public <T> Future<T> submit(Runnable task, T result) {\n        if (task == null) throw new NullPointerException();\n        RunnableFuture<T> ftask = newTaskFor(task, result);\n        execute(ftask);\n        return ftask;\n    }"}
{"Number":"822","API Relative Path":"java.util.concurrent.ArrayBlockingQueue.java-ArrayBlockingQueue(int-boolean)","Corresponding Source":"/**\n     * Creates an {@code ArrayBlockingQueue} with the given (fixed)\n     * capacity and the specified access policy.\n     *\n     * @param capacity the capacity of this queue\n     * @param fair if {@code true} then queue accesses for threads blocked\n     *        on insertion or removal, are processed in FIFO order;\n     *        if {@code false} the access order is unspecified.\n     * @throws IllegalArgumentException if {@code capacity < 1}\n     */\n    public ArrayBlockingQueue(int capacity, boolean fair) {\n        if (capacity <= 0)\n            throw new IllegalArgumentException();\n        this.items = new Object[capacity];\n        lock = new ReentrantLock(fair);\n        notEmpty = lock.newCondition();\n        notFull =  lock.newCondition();\n    }"}
{"Number":"823","API Relative Path":"java.util.concurrent.ArrayBlockingQueue.java-drainTo(Collection-int)","Corresponding Source":"/**\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     */\n    public int drainTo(Collection<? super E> c, int maxElements) {\n        checkNotNull(c);\n        if (c == this)\n            throw new IllegalArgumentException();\n        if (maxElements <= 0)\n            return 0;\n        final Object[] items = this.items;\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            int n = Math.min(maxElements, count);\n            int take = takeIndex;\n            int i = 0;\n            try {\n                while (i < n) {\n                    @SuppressWarnings(\"unchecked\")\n                    E x = (E) items[take];\n                    c.add(x);\n                    items[take] = null;\n                    if (++take == items.length)\n                        take = 0;\n                    i++;\n                }\n                return n;\n            } finally {\n                // Restore invariants even if c.add() threw\n                if (i > 0) {\n                    count -= i;\n                    takeIndex = take;\n                    if (itrs != null) {\n                        if (count == 0)\n                            itrs.queueIsEmpty();\n                        else if (i > take)\n                            itrs.takeIndexWrapped();\n                    }\n                    for (; i > 0 && lock.hasWaiters(notFull); i--)\n                        notFull.signal();\n                }\n            }\n        } finally {\n            lock.unlock();\n        }\n    }"}
{"Number":"824","API Relative Path":"java.util.concurrent.ArrayBlockingQueue.java-drainTo(Collection-int)","Corresponding Source":"/**\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     */\n    public int drainTo(Collection<? super E> c, int maxElements) {\n        checkNotNull(c);\n        if (c == this)\n            throw new IllegalArgumentException();\n        if (maxElements <= 0)\n            return 0;\n        final Object[] items = this.items;\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            int n = Math.min(maxElements, count);\n            int take = takeIndex;\n            int i = 0;\n            try {\n                while (i < n) {\n                    @SuppressWarnings(\"unchecked\")\n                    E x = (E) items[take];\n                    c.add(x);\n                    items[take] = null;\n                    if (++take == items.length)\n                        take = 0;\n                    i++;\n                }\n                return n;\n            } finally {\n                // Restore invariants even if c.add() threw\n                if (i > 0) {\n                    count -= i;\n                    takeIndex = take;\n                    if (itrs != null) {\n                        if (count == 0)\n                            itrs.queueIsEmpty();\n                        else if (i > take)\n                            itrs.takeIndexWrapped();\n                    }\n                    for (; i > 0 && lock.hasWaiters(notFull); i--)\n                        notFull.signal();\n                }\n            }\n        } finally {\n            lock.unlock();\n        }\n    }"}
{"Number":"825","API Relative Path":"java.util.concurrent.ArrayBlockingQueue.java-drainTo(Collection-int)","Corresponding Source":"/**\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     */\n    public int drainTo(Collection<? super E> c, int maxElements) {\n        checkNotNull(c);\n        if (c == this)\n            throw new IllegalArgumentException();\n        if (maxElements <= 0)\n            return 0;\n        final Object[] items = this.items;\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            int n = Math.min(maxElements, count);\n            int take = takeIndex;\n            int i = 0;\n            try {\n                while (i < n) {\n                    @SuppressWarnings(\"unchecked\")\n                    E x = (E) items[take];\n                    c.add(x);\n                    items[take] = null;\n                    if (++take == items.length)\n                        take = 0;\n                    i++;\n                }\n                return n;\n            } finally {\n                // Restore invariants even if c.add() threw\n                if (i > 0) {\n                    count -= i;\n                    takeIndex = take;\n                    if (itrs != null) {\n                        if (count == 0)\n                            itrs.queueIsEmpty();\n                        else if (i > take)\n                            itrs.takeIndexWrapped();\n                    }\n                    for (; i > 0 && lock.hasWaiters(notFull); i--)\n                        notFull.signal();\n                }\n            }\n        } finally {\n            lock.unlock();\n        }\n    }"}
{"Number":"826","API Relative Path":"java.util.concurrent.ArrayBlockingQueue.java-offer(E)","Corresponding Source":"/**\n     * Inserts the specified element at the tail of this queue if it is\n     * possible to do so immediately without exceeding the queue's capacity,\n     * returning {@code true} upon success and {@code false} if this queue\n     * is full.  This method is generally preferable to method {@link #add},\n     * which can fail to insert an element only by throwing an exception.\n     *\n     * @throws NullPointerException if the specified element is null\n     */\n    public boolean offer(E e) {\n        checkNotNull(e);\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            if (count == items.length)\n                return false;\n            else {\n                enqueue(e);\n                return true;\n            }\n        } finally {\n            lock.unlock();\n        }\n    }"}
{"Number":"827","API Relative Path":"java.util.concurrent.ArrayBlockingQueue.java-offer(E-long-TimeUnit)","Corresponding Source":"/**\n     * Inserts the specified element at the tail of this queue, waiting\n     * up to the specified wait time for space to become available if\n     * the queue is full.\n     *\n     * @throws InterruptedException {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     */\n    public boolean offer(E e, long timeout, TimeUnit unit)\n        throws InterruptedException {\n\n        checkNotNull(e);\n        long nanos = unit.toNanos(timeout);\n        final ReentrantLock lock = this.lock;\n        lock.lockInterruptibly();\n        try {\n            while (count == items.length) {\n                if (nanos <= 0)\n                    return false;\n                nanos = notFull.awaitNanos(nanos);\n            }\n            enqueue(e);\n            return true;\n        } finally {\n            lock.unlock();\n        }\n    }"}
{"Number":"828","API Relative Path":"java.util.concurrent.ArrayBlockingQueue.java-offer(E-long-TimeUnit)","Corresponding Source":"/**\n     * Inserts the specified element at the tail of this queue, waiting\n     * up to the specified wait time for space to become available if\n     * the queue is full.\n     *\n     * @throws InterruptedException {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     */\n    public boolean offer(E e, long timeout, TimeUnit unit)\n        throws InterruptedException {\n\n        checkNotNull(e);\n        long nanos = unit.toNanos(timeout);\n        final ReentrantLock lock = this.lock;\n        lock.lockInterruptibly();\n        try {\n            while (count == items.length) {\n                if (nanos <= 0)\n                    return false;\n                nanos = notFull.awaitNanos(nanos);\n            }\n            enqueue(e);\n            return true;\n        } finally {\n            lock.unlock();\n        }\n    }"}
{"Number":"829","API Relative Path":"java.util.concurrent.ArrayBlockingQueue.java-put(E)","Corresponding Source":"/**\n     * Inserts the specified element at the tail of this queue, waiting\n     * for space to become available if the queue is full.\n     *\n     * @throws InterruptedException {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     */\n    public void put(E e) throws InterruptedException {\n        checkNotNull(e);\n        final ReentrantLock lock = this.lock;\n        lock.lockInterruptibly();\n        try {\n            while (count == items.length)\n                notFull.await();\n            enqueue(e);\n        } finally {\n            lock.unlock();\n        }\n    }"}
{"Number":"830","API Relative Path":"java.util.concurrent.ArrayBlockingQueue.java-put(E)","Corresponding Source":"/**\n     * Inserts the specified element at the tail of this queue, waiting\n     * for space to become available if the queue is full.\n     *\n     * @throws InterruptedException {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     */\n    public void put(E e) throws InterruptedException {\n        checkNotNull(e);\n        final ReentrantLock lock = this.lock;\n        lock.lockInterruptibly();\n        try {\n            while (count == items.length)\n                notFull.await();\n            enqueue(e);\n        } finally {\n            lock.unlock();\n        }\n    }"}
{"Number":"831","API Relative Path":"java.util.concurrent.atomic.AtomicIntegerArray.java-accumulateAndGet(int-int-IntBinaryOperator)","Corresponding Source":"/**\n     * Atomically updates the element at index {@code i} with the\n     * results of applying the given function to the current and\n     * given values, returning the updated value. The function should\n     * be side-effect-free, since it may be re-applied when attempted\n     * updates fail due to contention among threads.  The function is\n     * applied with the current value at index {@code i} as its first\n     * argument, and the given update as the second argument.\n     *\n     * @param i the index\n     * @param x the update value\n     * @param accumulatorFunction a side-effect-free function of two arguments\n     * @return the updated value\n     * @since 1.8\n     */\n    public final int accumulateAndGet(int i, int x,\n                                      IntBinaryOperator accumulatorFunction) {\n        long offset = checkedByteOffset(i);\n        int prev, next;\n        do {\n            prev = getRaw(offset);\n            next = accumulatorFunction.applyAsInt(prev, x);\n        } while (!compareAndSetRaw(offset, prev, next));\n        return next;\n    }"}
{"Number":"832","API Relative Path":"java.util.concurrent.atomic.AtomicIntegerArray.java-addAndGet(int-int)","Corresponding Source":"/**\n     * Atomically adds the given value to the element at index {@code i}.\n     *\n     * @param i the index\n     * @param delta the value to add\n     * @return the updated value\n     */\n    public final int addAndGet(int i, int delta) {\n        return getAndAdd(i, delta) + delta;\n    }"}
{"Number":"833","API Relative Path":"java.util.concurrent.atomic.AtomicIntegerArray.java-compareAndSet(int-int-int)","Corresponding Source":"/**\n     * Atomically sets the element at position {@code i} to the given\n     * updated value if the current value {@code ==} the expected value.\n     *\n     * <p><a href=\"package-summary.html#weakCompareAndSet\">May fail\n     * spuriously and does not provide ordering guarantees<\/a>, so is\n     * only rarely an appropriate alternative to {@code compareAndSet}.\n     *\n     * @param i the index\n     * @param expect the expected value\n     * @param update the new value\n     * @return {@code true} if successful\n     */\n    public final boolean weakCompareAndSet(int i, int expect, int update) {\n        return compareAndSet(i, expect, update);\n    }"}
{"Number":"834","API Relative Path":"java.util.concurrent.atomic.AtomicIntegerArray.java-decrementAndGet(int)","Corresponding Source":"/**\n     * Atomically decrements by one the element at index {@code i}.\n     *\n     * @param i the index\n     * @return the updated value\n     */\n    public final int decrementAndGet(int i) {\n        return getAndAdd(i, -1) - 1;\n    }"}
{"Number":"835","API Relative Path":"java.util.concurrent.atomic.AtomicIntegerArray.java-get(int)","Corresponding Source":"/**\n     * Atomically decrements by one the element at index {@code i}.\n     *\n     * @param i the index\n     * @return the updated value\n     */\n    public final int decrementAndGet(int i) {\n        return getAndAdd(i, -1) - 1;\n    }"}
{"Number":"836","API Relative Path":"java.util.concurrent.atomic.AtomicIntegerArray.java-getAndAccumulate(int-int-IntBinaryOperator)","Corresponding Source":"/**\n     * Atomically updates the element at index {@code i} with the\n     * results of applying the given function to the current and\n     * given values, returning the previous value. The function should\n     * be side-effect-free, since it may be re-applied when attempted\n     * updates fail due to contention among threads.  The function is\n     * applied with the current value at index {@code i} as its first\n     * argument, and the given update as the second argument.\n     *\n     * @param i the index\n     * @param x the update value\n     * @param accumulatorFunction a side-effect-free function of two arguments\n     * @return the previous value\n     * @since 1.8\n     */\n    public final int getAndAccumulate(int i, int x,\n                                      IntBinaryOperator accumulatorFunction) {\n        long offset = checkedByteOffset(i);\n        int prev, next;\n        do {\n            prev = getRaw(offset);\n            next = accumulatorFunction.applyAsInt(prev, x);\n        } while (!compareAndSetRaw(offset, prev, next));\n        return prev;\n    }"}
{"Number":"837","API Relative Path":"java.util.concurrent.atomic.AtomicIntegerArray.java-getAndAdd(int-int)","Corresponding Source":"/**\n     * Atomically adds the given value to the element at index {@code i}.\n     *\n     * @param i the index\n     * @param delta the value to add\n     * @return the previous value\n     */\n    public final int getAndAdd(int i, int delta) {\n        return unsafe.getAndAddInt(array, checkedByteOffset(i), delta);\n    }"}
{"Number":"838","API Relative Path":"java.util.concurrent.atomic.AtomicIntegerArray.java-getAndDecrement(int)","Corresponding Source":"/**\n     * Atomically decrements by one the element at index {@code i}.\n     *\n     * @param i the index\n     * @return the previous value\n     */\n    public final int getAndDecrement(int i) {\n        return getAndAdd(i, -1);\n    }"}
{"Number":"839","API Relative Path":"java.util.concurrent.atomic.AtomicIntegerArray.java-getAndIncrement(int)","Corresponding Source":"/**\n     * Atomically increments by one the element at index {@code i}.\n     *\n     * @param i the index\n     * @return the previous value\n     */\n    public final int getAndIncrement(int i) {\n        return getAndAdd(i, 1);\n    }"}
{"Number":"840","API Relative Path":"java.util.concurrent.atomic.AtomicIntegerArray.java-getAndSet(int-int)","Corresponding Source":"/**\n     * Atomically sets the element at position {@code i} to the given\n     * value and returns the old value.\n     *\n     * @param i the index\n     * @param newValue the new value\n     * @return the previous value\n     */\n    public final int getAndSet(int i, int newValue) {\n        return unsafe.getAndSetInt(array, checkedByteOffset(i), newValue);\n    }"}
{"Number":"841","API Relative Path":"java.util.concurrent.atomic.AtomicIntegerArray.java-getAndUpdate(int-IntUnaryOperator)","Corresponding Source":"/**\n     * Atomically updates the element at index {@code i} with the results\n     * of applying the given function, returning the previous value. The\n     * function should be side-effect-free, since it may be re-applied\n     * when attempted updates fail due to contention among threads.\n     *\n     * @param i the index\n     * @param updateFunction a side-effect-free function\n     * @return the previous value\n     * @since 1.8\n     */\n    public final int getAndUpdate(int i, IntUnaryOperator updateFunction) {\n        long offset = checkedByteOffset(i);\n        int prev, next;\n        do {\n            prev = getRaw(offset);\n            next = updateFunction.applyAsInt(prev);\n        } while (!compareAndSetRaw(offset, prev, next));\n        return prev;\n    }"}
{"Number":"842","API Relative Path":"java.util.concurrent.atomic.AtomicIntegerArray.java-incrementAndGet(int)","Corresponding Source":"/**\n     * Atomically increments by one the element at index {@code i}.\n     *\n     * @param i the index\n     * @return the updated value\n     */\n    public final int incrementAndGet(int i) {\n        return getAndAdd(i, 1) + 1;\n    }"}
{"Number":"843","API Relative Path":"java.util.concurrent.atomic.AtomicIntegerArray.java-lazySet(int-int)","Corresponding Source":"/**\n     * Eventually sets the element at position {@code i} to the given value.\n     *\n     * @param i the index\n     * @param newValue the new value\n     * @since 1.6\n     */\n    public final void lazySet(int i, int newValue) {\n        unsafe.putOrderedInt(array, checkedByteOffset(i), newValue);\n    }"}
{"Number":"844","API Relative Path":"java.util.concurrent.atomic.AtomicIntegerArray.java-set(int-int)","Corresponding Source":"/**\n     * Atomically sets the element at position {@code i} to the given\n     * value and returns the old value.\n     *\n     * @param i the index\n     * @param newValue the new value\n     * @return the previous value\n     */\n    public final int getAndSet(int i, int newValue) {\n        return unsafe.getAndSetInt(array, checkedByteOffset(i), newValue);\n    }"}
{"Number":"845","API Relative Path":"java.util.concurrent.atomic.AtomicIntegerArray.java-updateAndGet(int-IntUnaryOperator)","Corresponding Source":"/**\n     * Atomically updates the element at index {@code i} with the results\n     * of applying the given function, returning the updated value. The\n     * function should be side-effect-free, since it may be re-applied\n     * when attempted updates fail due to contention among threads.\n     *\n     * @param i the index\n     * @param updateFunction a side-effect-free function\n     * @return the updated value\n     * @since 1.8\n     */\n    public final int updateAndGet(int i, IntUnaryOperator updateFunction) {\n        long offset = checkedByteOffset(i);\n        int prev, next;\n        do {\n            prev = getRaw(offset);\n            next = updateFunction.applyAsInt(prev);\n        } while (!compareAndSetRaw(offset, prev, next));\n        return next;\n    }"}
{"Number":"846","API Relative Path":"java.util.concurrent.atomic.AtomicIntegerArray.java-weakCompareAndSet(int-int-int)","Corresponding Source":"/**\n     * Atomically sets the element at position {@code i} to the given\n     * updated value if the current value {@code ==} the expected value.\n     *\n     * <p><a href=\"package-summary.html#weakCompareAndSet\">May fail\n     * spuriously and does not provide ordering guarantees<\/a>, so is\n     * only rarely an appropriate alternative to {@code compareAndSet}.\n     *\n     * @param i the index\n     * @param expect the expected value\n     * @param update the new value\n     * @return {@code true} if successful\n     */\n    public final boolean weakCompareAndSet(int i, int expect, int update) {\n        return compareAndSet(i, expect, update);\n    }"}
{"Number":"847","API Relative Path":"java.util.concurrent.atomic.AtomicLongArray.java-accumulateAndGet(int-long-LongBinaryOperator)","Corresponding Source":"/**\n     * Atomically updates the element at index {@code i} with the\n     * results of applying the given function to the current and\n     * given values, returning the updated value. The function should\n     * be side-effect-free, since it may be re-applied when attempted\n     * updates fail due to contention among threads.  The function is\n     * applied with the current value at index {@code i} as its first\n     * argument, and the given update as the second argument.\n     *\n     * @param i the index\n     * @param x the update value\n     * @param accumulatorFunction a side-effect-free function of two arguments\n     * @return the updated value\n     * @since 1.8\n     */\n    public final long accumulateAndGet(int i, long x,\n                                      LongBinaryOperator accumulatorFunction) {\n        long offset = checkedByteOffset(i);\n        long prev, next;\n        do {\n            prev = getRaw(offset);\n            next = accumulatorFunction.applyAsLong(prev, x);\n        } while (!compareAndSetRaw(offset, prev, next));\n        return next;\n    }"}
{"Number":"848","API Relative Path":"java.util.concurrent.atomic.AtomicLongArray.java-addAndGet(int-long)","Corresponding Source":"/**\n     * Atomically adds the given value to the element at index {@code i}.\n     *\n     * @param i the index\n     * @param delta the value to add\n     * @return the updated value\n     */\n    public long addAndGet(int i, long delta) {\n        return getAndAdd(i, delta) + delta;\n    }"}
{"Number":"849","API Relative Path":"java.util.concurrent.atomic.AtomicLongArray.java-compareAndSet(int-long-long)","Corresponding Source":"/**\n     * Atomically sets the element at position {@code i} to the given\n     * updated value if the current value {@code ==} the expected value.\n     *\n     * <p><a href=\"package-summary.html#weakCompareAndSet\">May fail\n     * spuriously and does not provide ordering guarantees<\/a>, so is\n     * only rarely an appropriate alternative to {@code compareAndSet}.\n     *\n     * @param i the index\n     * @param expect the expected value\n     * @param update the new value\n     * @return {@code true} if successful\n     */\n    public final boolean weakCompareAndSet(int i, long expect, long update) {\n        return compareAndSet(i, expect, update);\n    }"}
{"Number":"850","API Relative Path":"java.util.concurrent.atomic.AtomicLongArray.java-decrementAndGet(int)","Corresponding Source":"/**\n     * Atomically decrements by one the element at index {@code i}.\n     *\n     * @param i the index\n     * @return the updated value\n     */\n    public final long decrementAndGet(int i) {\n        return getAndAdd(i, -1) - 1;\n    }"}
{"Number":"851","API Relative Path":"java.util.concurrent.atomic.AtomicLongArray.java-get(int)","Corresponding Source":"/**\n     * Atomically decrements by one the element at index {@code i}.\n     *\n     * @param i the index\n     * @return the updated value\n     */\n    public final long decrementAndGet(int i) {\n        return getAndAdd(i, -1) - 1;\n    }"}
{"Number":"852","API Relative Path":"java.util.concurrent.atomic.AtomicLongArray.java-getAndAccumulate(int-long-LongBinaryOperator)","Corresponding Source":"/**\n     * Atomically updates the element at index {@code i} with the\n     * results of applying the given function to the current and\n     * given values, returning the previous value. The function should\n     * be side-effect-free, since it may be re-applied when attempted\n     * updates fail due to contention among threads.  The function is\n     * applied with the current value at index {@code i} as its first\n     * argument, and the given update as the second argument.\n     *\n     * @param i the index\n     * @param x the update value\n     * @param accumulatorFunction a side-effect-free function of two arguments\n     * @return the previous value\n     * @since 1.8\n     */\n    public final long getAndAccumulate(int i, long x,\n                                      LongBinaryOperator accumulatorFunction) {\n        long offset = checkedByteOffset(i);\n        long prev, next;\n        do {\n            prev = getRaw(offset);\n            next = accumulatorFunction.applyAsLong(prev, x);\n        } while (!compareAndSetRaw(offset, prev, next));\n        return prev;\n    }"}
{"Number":"853","API Relative Path":"java.util.concurrent.atomic.AtomicLongArray.java-getAndAdd(int-long)","Corresponding Source":"/**\n     * Atomically adds the given value to the element at index {@code i}.\n     *\n     * @param i the index\n     * @param delta the value to add\n     * @return the previous value\n     */\n    public final long getAndAdd(int i, long delta) {\n        return unsafe.getAndAddLong(array, checkedByteOffset(i), delta);\n    }"}
{"Number":"854","API Relative Path":"java.util.concurrent.atomic.AtomicLongArray.java-getAndDecrement(int)","Corresponding Source":"/**\n     * Atomically decrements by one the element at index {@code i}.\n     *\n     * @param i the index\n     * @return the previous value\n     */\n    public final long getAndDecrement(int i) {\n        return getAndAdd(i, -1);\n    }"}
{"Number":"855","API Relative Path":"java.util.concurrent.atomic.AtomicLongArray.java-getAndIncrement(int)","Corresponding Source":"/**\n     * Atomically increments by one the element at index {@code i}.\n     *\n     * @param i the index\n     * @return the previous value\n     */\n    public final long getAndIncrement(int i) {\n        return getAndAdd(i, 1);\n    }"}
{"Number":"856","API Relative Path":"java.util.concurrent.atomic.AtomicLongArray.java-getAndSet(int-long)","Corresponding Source":"/**\n     * Atomically sets the element at position {@code i} to the given value\n     * and returns the old value.\n     *\n     * @param i the index\n     * @param newValue the new value\n     * @return the previous value\n     */\n    public final long getAndSet(int i, long newValue) {\n        return unsafe.getAndSetLong(array, checkedByteOffset(i), newValue);\n    }"}
{"Number":"857","API Relative Path":"java.util.concurrent.atomic.AtomicLongArray.java-getAndUpdate(int-LongUnaryOperator)","Corresponding Source":"/**\n     * Atomically updates the element at index {@code i} with the results\n     * of applying the given function, returning the previous value. The\n     * function should be side-effect-free, since it may be re-applied\n     * when attempted updates fail due to contention among threads.\n     *\n     * @param i the index\n     * @param updateFunction a side-effect-free function\n     * @return the previous value\n     * @since 1.8\n     */\n    public final long getAndUpdate(int i, LongUnaryOperator updateFunction) {\n        long offset = checkedByteOffset(i);\n        long prev, next;\n        do {\n            prev = getRaw(offset);\n            next = updateFunction.applyAsLong(prev);\n        } while (!compareAndSetRaw(offset, prev, next));\n        return prev;\n    }"}
{"Number":"858","API Relative Path":"java.util.concurrent.atomic.AtomicLongArray.java-incrementAndGet(int)","Corresponding Source":"/**\n     * Atomically increments by one the element at index {@code i}.\n     *\n     * @param i the index\n     * @return the updated value\n     */\n    public final long incrementAndGet(int i) {\n        return getAndAdd(i, 1) + 1;\n    }"}
{"Number":"859","API Relative Path":"java.util.concurrent.atomic.AtomicLongArray.java-lazySet(int-long)","Corresponding Source":"/**\n     * Eventually sets the element at position {@code i} to the given value.\n     *\n     * @param i the index\n     * @param newValue the new value\n     * @since 1.6\n     */\n    public final void lazySet(int i, long newValue) {\n        unsafe.putOrderedLong(array, checkedByteOffset(i), newValue);\n    }"}
{"Number":"860","API Relative Path":"java.util.concurrent.atomic.AtomicLongArray.java-set(int-long)","Corresponding Source":"/**\n     * Atomically sets the element at position {@code i} to the given value\n     * and returns the old value.\n     *\n     * @param i the index\n     * @param newValue the new value\n     * @return the previous value\n     */\n    public final long getAndSet(int i, long newValue) {\n        return unsafe.getAndSetLong(array, checkedByteOffset(i), newValue);\n    }"}
{"Number":"861","API Relative Path":"java.util.concurrent.atomic.AtomicLongArray.java-updateAndGet(int-LongUnaryOperator)","Corresponding Source":"/**\n     * Atomically updates the element at index {@code i} with the results\n     * of applying the given function, returning the updated value. The\n     * function should be side-effect-free, since it may be re-applied\n     * when attempted updates fail due to contention among threads.\n     *\n     * @param i the index\n     * @param updateFunction a side-effect-free function\n     * @return the updated value\n     * @since 1.8\n     */\n    public final long updateAndGet(int i, LongUnaryOperator updateFunction) {\n        long offset = checkedByteOffset(i);\n        long prev, next;\n        do {\n            prev = getRaw(offset);\n            next = updateFunction.applyAsLong(prev);\n        } while (!compareAndSetRaw(offset, prev, next));\n        return next;\n    }"}
{"Number":"862","API Relative Path":"java.util.concurrent.atomic.AtomicLongArray.java-weakCompareAndSet(int-long-long)","Corresponding Source":"/**\n     * Atomically sets the element at position {@code i} to the given\n     * updated value if the current value {@code ==} the expected value.\n     *\n     * <p><a href=\"package-summary.html#weakCompareAndSet\">May fail\n     * spuriously and does not provide ordering guarantees<\/a>, so is\n     * only rarely an appropriate alternative to {@code compareAndSet}.\n     *\n     * @param i the index\n     * @param expect the expected value\n     * @param update the new value\n     * @return {@code true} if successful\n     */\n    public final boolean weakCompareAndSet(int i, long expect, long update) {\n        return compareAndSet(i, expect, update);\n    }"}
{"Number":"863","API Relative Path":"java.util.concurrent.atomic.AtomicReferenceArray.java-accumulateAndGet(int-E-BinaryOperator)","Corresponding Source":"/**\n     * Atomically updates the element at index {@code i} with the\n     * results of applying the given function to the current and\n     * given values, returning the updated value. The function should\n     * be side-effect-free, since it may be re-applied when attempted\n     * updates fail due to contention among threads.  The function is\n     * applied with the current value at index {@code i} as its first\n     * argument, and the given update as the second argument.\n     *\n     * @param i the index\n     * @param x the update value\n     * @param accumulatorFunction a side-effect-free function of two arguments\n     * @return the updated value\n     * @since 1.8\n     */\n    public final E accumulateAndGet(int i, E x,\n                                    BinaryOperator<E> accumulatorFunction) {\n        long offset = checkedByteOffset(i);\n        E prev, next;\n        do {\n            prev = getRaw(offset);\n            next = accumulatorFunction.apply(prev, x);\n        } while (!compareAndSetRaw(offset, prev, next));\n        return next;\n    }"}
{"Number":"864","API Relative Path":"java.util.concurrent.atomic.AtomicReferenceArray.java-compareAndSet(int-E-E)","Corresponding Source":"/**\n     * Atomically sets the element at position {@code i} to the given\n     * updated value if the current value {@code ==} the expected value.\n     *\n     * <p><a href=\"package-summary.html#weakCompareAndSet\">May fail\n     * spuriously and does not provide ordering guarantees<\/a>, so is\n     * only rarely an appropriate alternative to {@code compareAndSet}.\n     *\n     * @param i the index\n     * @param expect the expected value\n     * @param update the new value\n     * @return {@code true} if successful\n     */\n    public final boolean weakCompareAndSet(int i, E expect, E update) {\n        return compareAndSet(i, expect, update);\n    }"}
{"Number":"865","API Relative Path":"java.util.concurrent.atomic.AtomicReferenceArray.java-get(int)","Corresponding Source":"/**\n     * Gets the current value at position {@code i}.\n     *\n     * @param i the index\n     * @return the current value\n     */\n    public final E get(int i) {\n        return getRaw(checkedByteOffset(i));\n    }"}
{"Number":"866","API Relative Path":"java.util.concurrent.atomic.AtomicReferenceArray.java-getAndAccumulate(int-E-BinaryOperator)","Corresponding Source":"/**\n     * Atomically updates the element at index {@code i} with the\n     * results of applying the given function to the current and\n     * given values, returning the previous value. The function should\n     * be side-effect-free, since it may be re-applied when attempted\n     * updates fail due to contention among threads.  The function is\n     * applied with the current value at index {@code i} as its first\n     * argument, and the given update as the second argument.\n     *\n     * @param i the index\n     * @param x the update value\n     * @param accumulatorFunction a side-effect-free function of two arguments\n     * @return the previous value\n     * @since 1.8\n     */\n    public final E getAndAccumulate(int i, E x,\n                                    BinaryOperator<E> accumulatorFunction) {\n        long offset = checkedByteOffset(i);\n        E prev, next;\n        do {\n            prev = getRaw(offset);\n            next = accumulatorFunction.apply(prev, x);\n        } while (!compareAndSetRaw(offset, prev, next));\n        return prev;\n    }"}
{"Number":"867","API Relative Path":"java.util.concurrent.atomic.AtomicReferenceArray.java-getAndSet(int-E)","Corresponding Source":"/**\n     * Atomically sets the element at position {@code i} to the given\n     * value and returns the old value.\n     *\n     * @param i the index\n     * @param newValue the new value\n     * @return the previous value\n     */\n    @SuppressWarnings(\"unchecked\")\n    public final E getAndSet(int i, E newValue) {\n        return (E)unsafe.getAndSetObject(array, checkedByteOffset(i), newValue);\n    }"}
{"Number":"868","API Relative Path":"java.util.concurrent.atomic.AtomicReferenceArray.java-getAndUpdate(int-UnaryOperator)","Corresponding Source":"/**\n     * Atomically updates the element at index {@code i} with the results\n     * of applying the given function, returning the previous value. The\n     * function should be side-effect-free, since it may be re-applied\n     * when attempted updates fail due to contention among threads.\n     *\n     * @param i the index\n     * @param updateFunction a side-effect-free function\n     * @return the previous value\n     * @since 1.8\n     */\n    public final E getAndUpdate(int i, UnaryOperator<E> updateFunction) {\n        long offset = checkedByteOffset(i);\n        E prev, next;\n        do {\n            prev = getRaw(offset);\n            next = updateFunction.apply(prev);\n        } while (!compareAndSetRaw(offset, prev, next));\n        return prev;\n    }"}
{"Number":"869","API Relative Path":"java.util.concurrent.atomic.AtomicReferenceArray.java-lazySet(int-E)","Corresponding Source":"/**\n     * Eventually sets the element at position {@code i} to the given value.\n     *\n     * @param i the index\n     * @param newValue the new value\n     * @since 1.6\n     */\n    public final void lazySet(int i, E newValue) {\n        unsafe.putOrderedObject(array, checkedByteOffset(i), newValue);\n    }"}
{"Number":"870","API Relative Path":"java.util.concurrent.atomic.AtomicReferenceArray.java-set(int-E)","Corresponding Source":"/**\n     * Atomically sets the element at position {@code i} to the given\n     * value and returns the old value.\n     *\n     * @param i the index\n     * @param newValue the new value\n     * @return the previous value\n     */\n    @SuppressWarnings(\"unchecked\")\n    public final E getAndSet(int i, E newValue) {\n        return (E)unsafe.getAndSetObject(array, checkedByteOffset(i), newValue);\n    }"}
{"Number":"871","API Relative Path":"java.util.concurrent.atomic.AtomicReferenceArray.java-updateAndGet(int-UnaryOperator)","Corresponding Source":"/**\n     * Atomically updates the element at index {@code i} with the results\n     * of applying the given function, returning the updated value. The\n     * function should be side-effect-free, since it may be re-applied\n     * when attempted updates fail due to contention among threads.\n     *\n     * @param i the index\n     * @param updateFunction a side-effect-free function\n     * @return the updated value\n     * @since 1.8\n     */\n    public final E updateAndGet(int i, UnaryOperator<E> updateFunction) {\n        long offset = checkedByteOffset(i);\n        E prev, next;\n        do {\n            prev = getRaw(offset);\n            next = updateFunction.apply(prev);\n        } while (!compareAndSetRaw(offset, prev, next));\n        return next;\n    }"}
{"Number":"872","API Relative Path":"java.util.concurrent.atomic.AtomicReferenceArray.java-weakCompareAndSet(int-E-E)","Corresponding Source":"/**\n     * Atomically sets the element at position {@code i} to the given\n     * updated value if the current value {@code ==} the expected value.\n     *\n     * <p><a href=\"package-summary.html#weakCompareAndSet\">May fail\n     * spuriously and does not provide ordering guarantees<\/a>, so is\n     * only rarely an appropriate alternative to {@code compareAndSet}.\n     *\n     * @param i the index\n     * @param expect the expected value\n     * @param update the new value\n     * @return {@code true} if successful\n     */\n    public final boolean weakCompareAndSet(int i, E expect, E update) {\n        return compareAndSet(i, expect, update);\n    }"}
{"Number":"873","API Relative Path":"java.util.concurrent.CompletableFuture.java-completeExceptionally(Throwable)","Corresponding Source":"/**\n     * If not already completed, causes invocations of {@link #get()}\n     * and related methods to throw the given exception.\n     *\n     * @param ex the exception\n     * @return {@code true} if this invocation caused this CompletableFuture\n     * to transition to a completed state, else {@code false}\n     */\n    public boolean completeExceptionally(Throwable ex) {\n        if (ex == null) throw new NullPointerException();\n        boolean triggered = result == null &&\n            UNSAFE.compareAndSwapObject(this, RESULT, null, new AltResult(ex));\n        postComplete();\n        return triggered;\n    }"}
{"Number":"874","API Relative Path":"java.util.concurrent.CompletableFuture.java-exceptionally(Function)","Corresponding Source":"// not in interface CompletionStage\n\n    /**\n     * Returns a new CompletableFuture that is completed when this\n     * CompletableFuture completes, with the result of the given\n     * function of the exception triggering this CompletableFuture's\n     * completion when it completes exceptionally; otherwise, if this\n     * CompletableFuture completes normally, then the returned\n     * CompletableFuture also completes normally with the same value.\n     * Note: More flexible versions of this functionality are\n     * available using methods {@code whenComplete} and {@code handle}.\n     *\n     * @param fn the function to use to compute the value of the\n     * returned CompletableFuture if this CompletableFuture completed\n     * exceptionally\n     * @return the new CompletableFuture\n     */\n    public CompletableFuture<T> exceptionally\n        (Function<Throwable, ? extends T> fn) {\n        if (fn == null) throw new NullPointerException();\n        CompletableFuture<T> dst = new CompletableFuture<T>();\n        ExceptionCompletion<T> d = null;\n        Object r;\n        if ((r = result) == null) {\n            CompletionNode p =\n                new CompletionNode(d = new ExceptionCompletion<T>\n                                   (this, fn, dst));\n            while ((r = result) == null) {\n                if (UNSAFE.compareAndSwapObject(this, COMPLETIONS,\n                                                p.next = completions, p))\n                    break;\n            }\n        }\n        if (r != null && (d == null || d.compareAndSet(0, 1))) {\n            T t = null; Throwable ex, dx = null;\n            if (r instanceof AltResult) {\n                if ((ex = ((AltResult)r).ex) != null) {\n                    try {\n                        t = fn.apply(ex);\n                    } catch (Throwable rex) {\n                        dx = rex;\n                    }\n                }\n            }\n            else {\n                @SuppressWarnings(\"unchecked\") T tr = (T) r;\n                t = tr;\n            }\n            dst.internalComplete(t, dx);\n        }\n        helpPostComplete();\n        return dst;\n    }"}
{"Number":"875","API Relative Path":"java.util.concurrent.CompletableFuture.java-obtrudeException(Throwable)","Corresponding Source":"/**\n     * Forcibly causes subsequent invocations of method {@link #get()}\n     * and related methods to throw the given exception, whether or\n     * not already completed. This method is designed for use only in\n     * recovery actions, and even in such situations may result in\n     * ongoing dependent completions using established versus\n     * overwritten outcomes.\n     *\n     * @param ex the exception\n     */\n    public void obtrudeException(Throwable ex) {\n        if (ex == null) throw new NullPointerException();\n        result = new AltResult(ex);\n        postComplete();\n    }"}
{"Number":"876","API Relative Path":"java.util.concurrent.CompletableFuture.java-runAsync(Runnable)","Corresponding Source":"public CompletableFuture<Void> thenRunAsync\n        (Runnable action) {\n        return doThenRun(action, ForkJoinPool.commonPool());\n    }"}
{"Number":"877","API Relative Path":"java.util.concurrent.CompletableFuture.java-runAsync(Runnable-Executor)","Corresponding Source":"public CompletableFuture<Void> thenRunAsync\n        (Runnable action,\n         Executor executor) {\n        if (executor == null) throw new NullPointerException();\n        return doThenRun(action, executor);\n    }"}
{"Number":"878","API Relative Path":"java.util.concurrent.CompletableFuture.java-supplyAsync(Supplier)","Corresponding Source":"/**\n     * Returns a new CompletableFuture that is asynchronously completed\n     * by a task running in the {@link ForkJoinPool#commonPool()} with\n     * the value obtained by calling the given Supplier.\n     *\n     * @param supplier a function returning the value to be used\n     * to complete the returned CompletableFuture\n     * @param <U> the function's return type\n     * @return the new CompletableFuture\n     */\n    public static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier) {\n        if (supplier == null) throw new NullPointerException();\n        CompletableFuture<U> f = new CompletableFuture<U>();\n        execAsync(ForkJoinPool.commonPool(), new AsyncSupply<U>(supplier, f));\n        return f;\n    }"}
{"Number":"879","API Relative Path":"java.util.concurrent.CompletableFuture.java-supplyAsync(Supplier-Executor)","Corresponding Source":"/**\n     * Returns a new CompletableFuture that is asynchronously completed\n     * by a task running in the given executor with the value obtained\n     * by calling the given Supplier.\n     *\n     * @param supplier a function returning the value to be used\n     * to complete the returned CompletableFuture\n     * @param executor the executor to use for asynchronous execution\n     * @param <U> the function's return type\n     * @return the new CompletableFuture\n     */\n    public static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier,\n                                                       Executor executor) {\n        if (executor == null || supplier == null)\n            throw new NullPointerException();\n        CompletableFuture<U> f = new CompletableFuture<U>();\n        execAsync(executor, new AsyncSupply<U>(supplier, f));\n        return f;\n    }"}
{"Number":"880","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-compute(K-BiFunction)","Corresponding Source":"/**\n     * Attempts to compute a mapping for the specified key and its\n     * current mapped value (or {@code null} if there is no current\n     * mapping). The entire method invocation is performed atomically.\n     * Some attempted update operations on this map by other threads\n     * may be blocked while computation is in progress, so the\n     * computation should be short and simple, and must not attempt to\n     * update any other mappings of this Map.\n     *\n     * @param key key with which the specified value is to be associated\n     * @param remappingFunction the function to compute a value\n     * @return the new value associated with the specified key, or null if none\n     * @throws NullPointerException if the specified key or remappingFunction\n     *         is null\n     * @throws IllegalStateException if the computation detectably\n     *         attempts a recursive update to this map that would\n     *         otherwise never complete\n     * @throws RuntimeException or Error if the remappingFunction does so,\n     *         in which case the mapping is unchanged\n     */\n    public V compute(K key,\n                     BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n        if (key == null || remappingFunction == null)\n            throw new NullPointerException();\n        int h = spread(key.hashCode());\n        V val = null;\n        int delta = 0;\n        int binCount = 0;\n        for (Node<K,V>[] tab = table;;) {\n            Node<K,V> f; int n, i, fh;\n            if (tab == null || (n = tab.length) == 0)\n                tab = initTable();\n            else if ((f = tabAt(tab, i = (n - 1) & h)) == null) {\n                Node<K,V> r = new ReservationNode<K,V>();\n                synchronized (r) {\n                    if (casTabAt(tab, i, null, r)) {\n                        binCount = 1;\n                        Node<K,V> node = null;\n                        try {\n                            if ((val = remappingFunction.apply(key, null)) != null) {\n                                delta = 1;\n                                node = new Node<K,V>(h, key, val, null);\n                            }\n                        } finally {\n                            setTabAt(tab, i, node);\n                        }\n                    }\n                }\n                if (binCount != 0)\n                    break;\n            }\n            else if ((fh = f.hash) == MOVED)\n                tab = helpTransfer(tab, f);\n            else {\n                synchronized (f) {\n                    if (tabAt(tab, i) == f) {\n                        if (fh >= 0) {\n                            binCount = 1;\n                            for (Node<K,V> e = f, pred = null;; ++binCount) {\n                                K ek;\n                                if (e.hash == h &&\n                                    ((ek = e.key) == key ||\n                                     (ek != null && key.equals(ek)))) {\n                                    val = remappingFunction.apply(key, e.val);\n                                    if (val != null)\n                                        e.val = val;\n                                    else {\n                                        delta = -1;\n                                        Node<K,V> en = e.next;\n                                        if (pred != null)\n                                            pred.next = en;\n                                        else\n                                            setTabAt(tab, i, en);\n                                    }\n                                    break;\n                                }\n                                pred = e;\n                                if ((e = e.next) == null) {\n                                    val = remappingFunction.apply(key, null);\n                                    if (val != null) {\n                                        delta = 1;\n                                        pred.next =\n                                            new Node<K,V>(h, key, val, null);\n                                    }\n                                    break;\n                                }\n                            }\n                        }\n                        else if (f instanceof TreeBin) {\n                            binCount = 1;\n                            TreeBin<K,V> t = (TreeBin<K,V>)f;\n                            TreeNode<K,V> r, p;\n                            if ((r = t.root) != null)\n                                p = r.findTreeNode(h, key, null);\n                            else\n                                p = null;\n                            V pv = (p == null) ? null : p.val;\n                            val = remappingFunction.apply(key, pv);\n                            if (val != null) {\n                                if (p != null)\n                                    p.val = val;\n                                else {\n                                    delta = 1;\n                                    t.putTreeVal(h, key, val);\n                                }\n                            }\n                            else if (p != null) {\n                                delta = -1;\n                                if (t.removeTreeNode(p))\n                                    setTabAt(tab, i, untreeify(t.first));\n                            }\n                        }\n                    }\n                }\n                if (binCount != 0) {\n                    if (binCount >= TREEIFY_THRESHOLD)\n                        treeifyBin(tab, i);\n                    break;\n                }\n            }\n        }\n        if (delta != 0)\n            addCount((long)delta, binCount);\n        return val;\n    }"}
{"Number":"881","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-computeIfAbsent(K-Function)","Corresponding Source":"/**\n     * If the specified key is not already associated with a value,\n     * attempts to compute its value using the given mapping function\n     * and enters it into this map unless {@code null}.  The entire\n     * method invocation is performed atomically, so the function is\n     * applied at most once per key.  Some attempted update operations\n     * on this map by other threads may be blocked while computation\n     * is in progress, so the computation should be short and simple,\n     * and must not attempt to update any other mappings of this map.\n     *\n     * @param key key with which the specified value is to be associated\n     * @param mappingFunction the function to compute a value\n     * @return the current (existing or computed) value associated with\n     *         the specified key, or null if the computed value is null\n     * @throws NullPointerException if the specified key or mappingFunction\n     *         is null\n     * @throws IllegalStateException if the computation detectably\n     *         attempts a recursive update to this map that would\n     *         otherwise never complete\n     * @throws RuntimeException or Error if the mappingFunction does so,\n     *         in which case the mapping is left unestablished\n     */\n    public V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction) {\n        if (key == null || mappingFunction == null)\n            throw new NullPointerException();\n        int h = spread(key.hashCode());\n        V val = null;\n        int binCount = 0;\n        for (Node<K,V>[] tab = table;;) {\n            Node<K,V> f; int n, i, fh;\n            if (tab == null || (n = tab.length) == 0)\n                tab = initTable();\n            else if ((f = tabAt(tab, i = (n - 1) & h)) == null) {\n                Node<K,V> r = new ReservationNode<K,V>();\n                synchronized (r) {\n                    if (casTabAt(tab, i, null, r)) {\n                        binCount = 1;\n                        Node<K,V> node = null;\n                        try {\n                            if ((val = mappingFunction.apply(key)) != null)\n                                node = new Node<K,V>(h, key, val, null);\n                        } finally {\n                            setTabAt(tab, i, node);\n                        }\n                    }\n                }\n                if (binCount != 0)\n                    break;\n            }\n            else if ((fh = f.hash) == MOVED)\n                tab = helpTransfer(tab, f);\n            else {\n                boolean added = false;\n                synchronized (f) {\n                    if (tabAt(tab, i) == f) {\n                        if (fh >= 0) {\n                            binCount = 1;\n                            for (Node<K,V> e = f;; ++binCount) {\n                                K ek; V ev;\n                                if (e.hash == h &&\n                                    ((ek = e.key) == key ||\n                                     (ek != null && key.equals(ek)))) {\n                                    val = e.val;\n                                    break;\n                                }\n                                Node<K,V> pred = e;\n                                if ((e = e.next) == null) {\n                                    if ((val = mappingFunction.apply(key)) != null) {\n                                        added = true;\n                                        pred.next = new Node<K,V>(h, key, val, null);\n                                    }\n                                    break;\n                                }\n                            }\n                        }\n                        else if (f instanceof TreeBin) {\n                            binCount = 2;\n                            TreeBin<K,V> t = (TreeBin<K,V>)f;\n                            TreeNode<K,V> r, p;\n                            if ((r = t.root) != null &&\n                                (p = r.findTreeNode(h, key, null)) != null)\n                                val = p.val;\n                            else if ((val = mappingFunction.apply(key)) != null) {\n                                added = true;\n                                t.putTreeVal(h, key, val);\n                            }\n                        }\n                    }\n                }\n                if (binCount != 0) {\n                    if (binCount >= TREEIFY_THRESHOLD)\n                        treeifyBin(tab, i);\n                    if (!added)\n                        return val;\n                    break;\n                }\n            }\n        }\n        if (val != null)\n            addCount(1L, binCount);\n        return val;\n    }"}
{"Number":"882","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-computeIfPresent(K-BiFunction)","Corresponding Source":"/**\n     * If the value for the specified key is present, attempts to\n     * compute a new mapping given the key and its current mapped\n     * value.  The entire method invocation is performed atomically.\n     * Some attempted update operations on this map by other threads\n     * may be blocked while computation is in progress, so the\n     * computation should be short and simple, and must not attempt to\n     * update any other mappings of this map.\n     *\n     * @param key key with which a value may be associated\n     * @param remappingFunction the function to compute a value\n     * @return the new value associated with the specified key, or null if none\n     * @throws NullPointerException if the specified key or remappingFunction\n     *         is null\n     * @throws IllegalStateException if the computation detectably\n     *         attempts a recursive update to this map that would\n     *         otherwise never complete\n     * @throws RuntimeException or Error if the remappingFunction does so,\n     *         in which case the mapping is unchanged\n     */\n    public V computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n        if (key == null || remappingFunction == null)\n            throw new NullPointerException();\n        int h = spread(key.hashCode());\n        V val = null;\n        int delta = 0;\n        int binCount = 0;\n        for (Node<K,V>[] tab = table;;) {\n            Node<K,V> f; int n, i, fh;\n            if (tab == null || (n = tab.length) == 0)\n                tab = initTable();\n            else if ((f = tabAt(tab, i = (n - 1) & h)) == null)\n                break;\n            else if ((fh = f.hash) == MOVED)\n                tab = helpTransfer(tab, f);\n            else {\n                synchronized (f) {\n                    if (tabAt(tab, i) == f) {\n                        if (fh >= 0) {\n                            binCount = 1;\n                            for (Node<K,V> e = f, pred = null;; ++binCount) {\n                                K ek;\n                                if (e.hash == h &&\n                                    ((ek = e.key) == key ||\n                                     (ek != null && key.equals(ek)))) {\n                                    val = remappingFunction.apply(key, e.val);\n                                    if (val != null)\n                                        e.val = val;\n                                    else {\n                                        delta = -1;\n                                        Node<K,V> en = e.next;\n                                        if (pred != null)\n                                            pred.next = en;\n                                        else\n                                            setTabAt(tab, i, en);\n                                    }\n                                    break;\n                                }\n                                pred = e;\n                                if ((e = e.next) == null)\n                                    break;\n                            }\n                        }\n                        else if (f instanceof TreeBin) {\n                            binCount = 2;\n                            TreeBin<K,V> t = (TreeBin<K,V>)f;\n                            TreeNode<K,V> r, p;\n                            if ((r = t.root) != null &&\n                                (p = r.findTreeNode(h, key, null)) != null) {\n                                val = remappingFunction.apply(key, p.val);\n                                if (val != null)\n                                    p.val = val;\n                                else {\n                                    delta = -1;\n                                    if (t.removeTreeNode(p))\n                                        setTabAt(tab, i, untreeify(t.first));\n                                }\n                            }\n                        }\n                    }\n                }\n                if (binCount != 0)\n                    break;\n            }\n        }\n        if (delta != 0)\n            addCount((long)delta, binCount);\n        return val;\n    }"}
{"Number":"883","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-ConcurrentHashMap(int)","Corresponding Source":"/**\n     * Creates a new, empty map with an initial table size\n     * accommodating the specified number of elements without the need\n     * to dynamically resize.\n     *\n     * @param initialCapacity The implementation performs internal\n     * sizing to accommodate this many elements.\n     * @throws IllegalArgumentException if the initial capacity of\n     * elements is negative\n     */\n    public ConcurrentHashMap(int initialCapacity) {\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException();\n        int cap = ((initialCapacity >= (MAXIMUM_CAPACITY >>> 1)) ?\n                   MAXIMUM_CAPACITY :\n                   tableSizeFor(initialCapacity + (initialCapacity >>> 1) + 1));\n        this.sizeCtl = cap;\n    }"}
{"Number":"884","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-ConcurrentHashMap(int-float-int)","Corresponding Source":"/**\n     * Creates a new, empty map with an initial table size based on\n     * the given number of elements ({@code initialCapacity}), table\n     * density ({@code loadFactor}), and number of concurrently\n     * updating threads ({@code concurrencyLevel}).\n     *\n     * @param initialCapacity the initial capacity. The implementation\n     * performs internal sizing to accommodate this many elements,\n     * given the specified load factor.\n     * @param loadFactor the load factor (table density) for\n     * establishing the initial table size\n     * @param concurrencyLevel the estimated number of concurrently\n     * updating threads. The implementation may use this value as\n     * a sizing hint.\n     * @throws IllegalArgumentException if the initial capacity is\n     * negative or the load factor or concurrencyLevel are\n     * nonpositive\n     */\n    public ConcurrentHashMap(int initialCapacity,\n                             float loadFactor, int concurrencyLevel) {\n        if (!(loadFactor > 0.0f) || initialCapacity < 0 || concurrencyLevel <= 0)\n            throw new IllegalArgumentException();\n        if (initialCapacity < concurrencyLevel)   // Use at least as many bins\n            initialCapacity = concurrencyLevel;   // as estimated threads\n        long size = (long)(1.0 + (long)initialCapacity / loadFactor);\n        int cap = (size >= (long)MAXIMUM_CAPACITY) ?\n            MAXIMUM_CAPACITY : tableSizeFor((int)size);\n        this.sizeCtl = cap;\n    }"}
{"Number":"885","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-forEach(long-BiConsumer)","Corresponding Source":"/**\n     * Performs the given action for each (key, value).\n     *\n     * @param parallelismThreshold the (estimated) number of elements\n     * needed for this operation to be executed in parallel\n     * @param action the action\n     * @since 1.8\n     */\n    public void forEach(long parallelismThreshold,\n                        BiConsumer<? super K,? super V> action) {\n        if (action == null) throw new NullPointerException();\n        new ForEachMappingTask<K,V>\n            (null, batchFor(parallelismThreshold), 0, 0, table,\n             action).invoke();\n    }"}
{"Number":"886","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-forEach(long-BiFunction-Consumer)","Corresponding Source":"/**\n     * Performs the given action for each non-null transformation\n     * of each (key, value).\n     *\n     * @param parallelismThreshold the (estimated) number of elements\n     * needed for this operation to be executed in parallel\n     * @param transformer a function returning the transformation\n     * for an element, or null if there is no transformation (in\n     * which case the action is not applied)\n     * @param action the action\n     * @param <U> the return type of the transformer\n     * @since 1.8\n     */\n    public <U> void forEach(long parallelismThreshold,\n                            BiFunction<? super K, ? super V, ? extends U> transformer,\n                            Consumer<? super U> action) {\n        if (transformer == null || action == null)\n            throw new NullPointerException();\n        new ForEachTransformedMappingTask<K,V,U>\n            (null, batchFor(parallelismThreshold), 0, 0, table,\n             transformer, action).invoke();\n    }"}
{"Number":"887","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-forEachEntry(long-Consumer)","Corresponding Source":"/**\n     * Performs the given action for each entry.\n     *\n     * @param parallelismThreshold the (estimated) number of elements\n     * needed for this operation to be executed in parallel\n     * @param action the action\n     * @since 1.8\n     */\n    public void forEachEntry(long parallelismThreshold,\n                             Consumer<? super Map.Entry<K,V>> action) {\n        if (action == null) throw new NullPointerException();\n        new ForEachEntryTask<K,V>(null, batchFor(parallelismThreshold), 0, 0, table,\n                                  action).invoke();\n    }"}
{"Number":"888","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-forEachEntry(long-Function-Consumer)","Corresponding Source":"/**\n     * Performs the given action for each non-null transformation\n     * of each entry.\n     *\n     * @param parallelismThreshold the (estimated) number of elements\n     * needed for this operation to be executed in parallel\n     * @param transformer a function returning the transformation\n     * for an element, or null if there is no transformation (in\n     * which case the action is not applied)\n     * @param action the action\n     * @param <U> the return type of the transformer\n     * @since 1.8\n     */\n    public <U> void forEachEntry(long parallelismThreshold,\n                                 Function<Map.Entry<K,V>, ? extends U> transformer,\n                                 Consumer<? super U> action) {\n        if (transformer == null || action == null)\n            throw new NullPointerException();\n        new ForEachTransformedEntryTask<K,V,U>\n            (null, batchFor(parallelismThreshold), 0, 0, table,\n             transformer, action).invoke();\n    }"}
{"Number":"889","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-forEachKey(long-Consumer)","Corresponding Source":"/**\n     * Performs the given action for each key.\n     *\n     * @param parallelismThreshold the (estimated) number of elements\n     * needed for this operation to be executed in parallel\n     * @param action the action\n     * @since 1.8\n     */\n    public void forEachKey(long parallelismThreshold,\n                           Consumer<? super K> action) {\n        if (action == null) throw new NullPointerException();\n        new ForEachKeyTask<K,V>\n            (null, batchFor(parallelismThreshold), 0, 0, table,\n             action).invoke();\n    }"}
{"Number":"890","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-forEachKey(long-Function-Consumer)","Corresponding Source":"/**\n     * Performs the given action for each non-null transformation\n     * of each key.\n     *\n     * @param parallelismThreshold the (estimated) number of elements\n     * needed for this operation to be executed in parallel\n     * @param transformer a function returning the transformation\n     * for an element, or null if there is no transformation (in\n     * which case the action is not applied)\n     * @param action the action\n     * @param <U> the return type of the transformer\n     * @since 1.8\n     */\n    public <U> void forEachKey(long parallelismThreshold,\n                               Function<? super K, ? extends U> transformer,\n                               Consumer<? super U> action) {\n        if (transformer == null || action == null)\n            throw new NullPointerException();\n        new ForEachTransformedKeyTask<K,V,U>\n            (null, batchFor(parallelismThreshold), 0, 0, table,\n             transformer, action).invoke();\n    }"}
{"Number":"891","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-forEachValue(long-Consumer)","Corresponding Source":"/**\n     * Performs the given action for each value.\n     *\n     * @param parallelismThreshold the (estimated) number of elements\n     * needed for this operation to be executed in parallel\n     * @param action the action\n     * @since 1.8\n     */\n    public void forEachValue(long parallelismThreshold,\n                             Consumer<? super V> action) {\n        if (action == null)\n            throw new NullPointerException();\n        new ForEachValueTask<K,V>\n            (null, batchFor(parallelismThreshold), 0, 0, table,\n             action).invoke();\n    }"}
{"Number":"892","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-forEachValue(long-Function-Consumer)","Corresponding Source":"/**\n     * Performs the given action for each non-null transformation\n     * of each value.\n     *\n     * @param parallelismThreshold the (estimated) number of elements\n     * needed for this operation to be executed in parallel\n     * @param transformer a function returning the transformation\n     * for an element, or null if there is no transformation (in\n     * which case the action is not applied)\n     * @param action the action\n     * @param <U> the return type of the transformer\n     * @since 1.8\n     */\n    public <U> void forEachValue(long parallelismThreshold,\n                                 Function<? super V, ? extends U> transformer,\n                                 Consumer<? super U> action) {\n        if (transformer == null || action == null)\n            throw new NullPointerException();\n        new ForEachTransformedValueTask<K,V,U>\n            (null, batchFor(parallelismThreshold), 0, 0, table,\n             transformer, action).invoke();\n    }"}
{"Number":"893","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-merge(K-V-BiFunction)","Corresponding Source":"/**\n     * If the specified key is not already associated with a\n     * (non-null) value, associates it with the given value.\n     * Otherwise, replaces the value with the results of the given\n     * remapping function, or removes if {@code null}. The entire\n     * method invocation is performed atomically.  Some attempted\n     * update operations on this map by other threads may be blocked\n     * while computation is in progress, so the computation should be\n     * short and simple, and must not attempt to update any other\n     * mappings of this Map.\n     *\n     * @param key key with which the specified value is to be associated\n     * @param value the value to use if absent\n     * @param remappingFunction the function to recompute a value if present\n     * @return the new value associated with the specified key, or null if none\n     * @throws NullPointerException if the specified key or the\n     *         remappingFunction is null\n     * @throws RuntimeException or Error if the remappingFunction does so,\n     *         in which case the mapping is unchanged\n     */\n    public V merge(K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction) {\n        if (key == null || value == null || remappingFunction == null)\n            throw new NullPointerException();\n        int h = spread(key.hashCode());\n        V val = null;\n        int delta = 0;\n        int binCount = 0;\n        for (Node<K,V>[] tab = table;;) {\n            Node<K,V> f; int n, i, fh;\n            if (tab == null || (n = tab.length) == 0)\n                tab = initTable();\n            else if ((f = tabAt(tab, i = (n - 1) & h)) == null) {\n                if (casTabAt(tab, i, null, new Node<K,V>(h, key, value, null))) {\n                    delta = 1;\n                    val = value;\n                    break;\n                }\n            }\n            else if ((fh = f.hash) == MOVED)\n                tab = helpTransfer(tab, f);\n            else {\n                synchronized (f) {\n                    if (tabAt(tab, i) == f) {\n                        if (fh >= 0) {\n                            binCount = 1;\n                            for (Node<K,V> e = f, pred = null;; ++binCount) {\n                                K ek;\n                                if (e.hash == h &&\n                                    ((ek = e.key) == key ||\n                                     (ek != null && key.equals(ek)))) {\n                                    val = remappingFunction.apply(e.val, value);\n                                    if (val != null)\n                                        e.val = val;\n                                    else {\n                                        delta = -1;\n                                        Node<K,V> en = e.next;\n                                        if (pred != null)\n                                            pred.next = en;\n                                        else\n                                            setTabAt(tab, i, en);\n                                    }\n                                    break;\n                                }\n                                pred = e;\n                                if ((e = e.next) == null) {\n                                    delta = 1;\n                                    val = value;\n                                    pred.next =\n                                        new Node<K,V>(h, key, val, null);\n                                    break;\n                                }\n                            }\n                        }\n                        else if (f instanceof TreeBin) {\n                            binCount = 2;\n                            TreeBin<K,V> t = (TreeBin<K,V>)f;\n                            TreeNode<K,V> r = t.root;\n                            TreeNode<K,V> p = (r == null) ? null :\n                                r.findTreeNode(h, key, null);\n                            val = (p == null) ? value :\n                                remappingFunction.apply(p.val, value);\n                            if (val != null) {\n                                if (p != null)\n                                    p.val = val;\n                                else {\n                                    delta = 1;\n                                    t.putTreeVal(h, key, val);\n                                }\n                            }\n                            else if (p != null) {\n                                delta = -1;\n                                if (t.removeTreeNode(p))\n                                    setTabAt(tab, i, untreeify(t.first));\n                            }\n                        }\n                    }\n                }\n                if (binCount != 0) {\n                    if (binCount >= TREEIFY_THRESHOLD)\n                        treeifyBin(tab, i);\n                    break;\n                }\n            }\n        }\n        if (delta != 0)\n            addCount((long)delta, binCount);\n        return val;\n    }"}
{"Number":"894","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-putVal(K-V-boolean)","Corresponding Source":"/** Implementation for put and putIfAbsent */\n    final V putVal(K key, V value, boolean onlyIfAbsent) {\n        if (key == null || value == null) throw new NullPointerException();\n        int hash = spread(key.hashCode());\n        int binCount = 0;\n        for (Node<K,V>[] tab = table;;) {\n            Node<K,V> f; int n, i, fh;\n            if (tab == null || (n = tab.length) == 0)\n                tab = initTable();\n            else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) {\n                if (casTabAt(tab, i, null,\n                             new Node<K,V>(hash, key, value, null)))\n                    break;                   // no lock when adding to empty bin\n            }\n            else if ((fh = f.hash) == MOVED)\n                tab = helpTransfer(tab, f);\n            else {\n                V oldVal = null;\n                synchronized (f) {\n                    if (tabAt(tab, i) == f) {\n                        if (fh >= 0) {\n                            binCount = 1;\n                            for (Node<K,V> e = f;; ++binCount) {\n                                K ek;\n                                if (e.hash == hash &&\n                                    ((ek = e.key) == key ||\n                                     (ek != null && key.equals(ek)))) {\n                                    oldVal = e.val;\n                                    if (!onlyIfAbsent)\n                                        e.val = value;\n                                    break;\n                                }\n                                Node<K,V> pred = e;\n                                if ((e = e.next) == null) {\n                                    pred.next = new Node<K,V>(hash, key,\n                                                              value, null);\n                                    break;\n                                }\n                            }\n                        }\n                        else if (f instanceof TreeBin) {\n                            Node<K,V> p;\n                            binCount = 2;\n                            if ((p = ((TreeBin<K,V>)f).putTreeVal(hash, key,\n                                                           value)) != null) {\n                                oldVal = p.val;\n                                if (!onlyIfAbsent)\n                                    p.val = value;\n                            }\n                        }\n                    }\n                }\n                if (binCount != 0) {\n                    if (binCount >= TREEIFY_THRESHOLD)\n                        treeifyBin(tab, i);\n                    if (oldVal != null)\n                        return oldVal;\n                    break;\n                }\n            }\n        }\n        addCount(1L, binCount);\n        return null;\n    }"}
{"Number":"895","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-reduce(long-BiFunction-BiFunction)","Corresponding Source":"/**\n     * Returns the result of accumulating the given transformation\n     * of all (key, value) pairs using the given reducer to\n     * combine values, or null if none.\n     *\n     * @param parallelismThreshold the (estimated) number of elements\n     * needed for this operation to be executed in parallel\n     * @param transformer a function returning the transformation\n     * for an element, or null if there is no transformation (in\n     * which case it is not combined)\n     * @param reducer a commutative associative combining function\n     * @param <U> the return type of the transformer\n     * @return the result of accumulating the given transformation\n     * of all (key, value) pairs\n     * @since 1.8\n     */\n    public <U> U reduce(long parallelismThreshold,\n                        BiFunction<? super K, ? super V, ? extends U> transformer,\n                        BiFunction<? super U, ? super U, ? extends U> reducer) {\n        if (transformer == null || reducer == null)\n            throw new NullPointerException();\n        return new MapReduceMappingsTask<K,V,U>\n            (null, batchFor(parallelismThreshold), 0, 0, table,\n             null, transformer, reducer).invoke();\n    }"}
{"Number":"896","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-reduceEntries(long-BiFunction)","Corresponding Source":"/**\n     * Returns the result of accumulating all entries using the\n     * given reducer to combine values, or null if none.\n     *\n     * @param parallelismThreshold the (estimated) number of elements\n     * needed for this operation to be executed in parallel\n     * @param reducer a commutative associative combining function\n     * @return the result of accumulating all entries\n     * @since 1.8\n     */\n    public Map.Entry<K,V> reduceEntries(long parallelismThreshold,\n                                        BiFunction<Map.Entry<K,V>, Map.Entry<K,V>, ? extends Map.Entry<K,V>> reducer) {\n        if (reducer == null) throw new NullPointerException();\n        return new ReduceEntriesTask<K,V>\n            (null, batchFor(parallelismThreshold), 0, 0, table,\n             null, reducer).invoke();\n    }"}
{"Number":"897","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-reduceEntries(long-Function-BiFunction)","Corresponding Source":"/**\n     * Returns the result of accumulating the given transformation\n     * of all entries using the given reducer to combine values,\n     * or null if none.\n     *\n     * @param parallelismThreshold the (estimated) number of elements\n     * needed for this operation to be executed in parallel\n     * @param transformer a function returning the transformation\n     * for an element, or null if there is no transformation (in\n     * which case it is not combined)\n     * @param reducer a commutative associative combining function\n     * @param <U> the return type of the transformer\n     * @return the result of accumulating the given transformation\n     * of all entries\n     * @since 1.8\n     */\n    public <U> U reduceEntries(long parallelismThreshold,\n                               Function<Map.Entry<K,V>, ? extends U> transformer,\n                               BiFunction<? super U, ? super U, ? extends U> reducer) {\n        if (transformer == null || reducer == null)\n            throw new NullPointerException();\n        return new MapReduceEntriesTask<K,V,U>\n            (null, batchFor(parallelismThreshold), 0, 0, table,\n             null, transformer, reducer).invoke();\n    }"}
{"Number":"898","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-reduceEntriesToDouble(long-ToDoubleFunction-double-DoubleBinaryOperator)","Corresponding Source":"/**\n     * Returns the result of accumulating the given transformation\n     * of all entries using the given reducer to combine values,\n     * and the given basis as an identity value.\n     *\n     * @param parallelismThreshold the (estimated) number of elements\n     * needed for this operation to be executed in parallel\n     * @param transformer a function returning the transformation\n     * for an element\n     * @param basis the identity (initial default value) for the reduction\n     * @param reducer a commutative associative combining function\n     * @return the result of accumulating the given transformation\n     * of all entries\n     * @since 1.8\n     */\n    public double reduceEntriesToDouble(long parallelismThreshold,\n                                        ToDoubleFunction<Map.Entry<K,V>> transformer,\n                                        double basis,\n                                        DoubleBinaryOperator reducer) {\n        if (transformer == null || reducer == null)\n            throw new NullPointerException();\n        return new MapReduceEntriesToDoubleTask<K,V>\n            (null, batchFor(parallelismThreshold), 0, 0, table,\n             null, transformer, basis, reducer).invoke();\n    }"}
{"Number":"899","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-reduceEntriesToInt(long-ToIntFunction-int-IntBinaryOperator)","Corresponding Source":"/**\n     * Returns the result of accumulating the given transformation\n     * of all entries using the given reducer to combine values,\n     * and the given basis as an identity value.\n     *\n     * @param parallelismThreshold the (estimated) number of elements\n     * needed for this operation to be executed in parallel\n     * @param transformer a function returning the transformation\n     * for an element\n     * @param basis the identity (initial default value) for the reduction\n     * @param reducer a commutative associative combining function\n     * @return the result of accumulating the given transformation\n     * of all entries\n     * @since 1.8\n     */\n    public int reduceEntriesToInt(long parallelismThreshold,\n                                  ToIntFunction<Map.Entry<K,V>> transformer,\n                                  int basis,\n                                  IntBinaryOperator reducer) {\n        if (transformer == null || reducer == null)\n            throw new NullPointerException();\n        return new MapReduceEntriesToIntTask<K,V>\n            (null, batchFor(parallelismThreshold), 0, 0, table,\n             null, transformer, basis, reducer).invoke();\n    }"}
{"Number":"900","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-reduceEntriesToLong(long-ToLongFunction-long-LongBinaryOperator)","Corresponding Source":"/**\n     * Returns the result of accumulating the given transformation\n     * of all entries using the given reducer to combine values,\n     * and the given basis as an identity value.\n     *\n     * @param parallelismThreshold the (estimated) number of elements\n     * needed for this operation to be executed in parallel\n     * @param transformer a function returning the transformation\n     * for an element\n     * @param basis the identity (initial default value) for the reduction\n     * @param reducer a commutative associative combining function\n     * @return the result of accumulating the given transformation\n     * of all entries\n     * @since 1.8\n     */\n    public long reduceEntriesToLong(long parallelismThreshold,\n                                    ToLongFunction<Map.Entry<K,V>> transformer,\n                                    long basis,\n                                    LongBinaryOperator reducer) {\n        if (transformer == null || reducer == null)\n            throw new NullPointerException();\n        return new MapReduceEntriesToLongTask<K,V>\n            (null, batchFor(parallelismThreshold), 0, 0, table,\n             null, transformer, basis, reducer).invoke();\n    }"}
{"Number":"901","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-reduceKeys(long-BiFunction)","Corresponding Source":"/**\n     * Returns the result of accumulating all keys using the given\n     * reducer to combine values, or null if none.\n     *\n     * @param parallelismThreshold the (estimated) number of elements\n     * needed for this operation to be executed in parallel\n     * @param reducer a commutative associative combining function\n     * @return the result of accumulating all keys using the given\n     * reducer to combine values, or null if none\n     * @since 1.8\n     */\n    public K reduceKeys(long parallelismThreshold,\n                        BiFunction<? super K, ? super K, ? extends K> reducer) {\n        if (reducer == null) throw new NullPointerException();\n        return new ReduceKeysTask<K,V>\n            (null, batchFor(parallelismThreshold), 0, 0, table,\n             null, reducer).invoke();\n    }"}
{"Number":"902","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-reduceKeys(long-Function-BiFunction)","Corresponding Source":"/**\n     * Returns the result of accumulating the given transformation\n     * of all keys using the given reducer to combine values, or\n     * null if none.\n     *\n     * @param parallelismThreshold the (estimated) number of elements\n     * needed for this operation to be executed in parallel\n     * @param transformer a function returning the transformation\n     * for an element, or null if there is no transformation (in\n     * which case it is not combined)\n     * @param reducer a commutative associative combining function\n     * @param <U> the return type of the transformer\n     * @return the result of accumulating the given transformation\n     * of all keys\n     * @since 1.8\n     */\n    public <U> U reduceKeys(long parallelismThreshold,\n                            Function<? super K, ? extends U> transformer,\n         BiFunction<? super U, ? super U, ? extends U> reducer) {\n        if (transformer == null || reducer == null)\n            throw new NullPointerException();\n        return new MapReduceKeysTask<K,V,U>\n            (null, batchFor(parallelismThreshold), 0, 0, table,\n             null, transformer, reducer).invoke();\n    }"}
{"Number":"903","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-reduceKeysToDouble(long-ToDoubleFunction-double-DoubleBinaryOperator)","Corresponding Source":"/**\n     * Returns the result of accumulating the given transformation\n     * of all keys using the given reducer to combine values, and\n     * the given basis as an identity value.\n     *\n     * @param parallelismThreshold the (estimated) number of elements\n     * needed for this operation to be executed in parallel\n     * @param transformer a function returning the transformation\n     * for an element\n     * @param basis the identity (initial default value) for the reduction\n     * @param reducer a commutative associative combining function\n     * @return the result of accumulating the given transformation\n     * of all keys\n     * @since 1.8\n     */\n    public double reduceKeysToDouble(long parallelismThreshold,\n                                     ToDoubleFunction<? super K> transformer,\n                                     double basis,\n                                     DoubleBinaryOperator reducer) {\n        if (transformer == null || reducer == null)\n            throw new NullPointerException();\n        return new MapReduceKeysToDoubleTask<K,V>\n            (null, batchFor(parallelismThreshold), 0, 0, table,\n             null, transformer, basis, reducer).invoke();\n    }"}
{"Number":"904","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-reduceKeysToInt(long-ToIntFunction-int-IntBinaryOperator)","Corresponding Source":"/**\n     * Returns the result of accumulating the given transformation\n     * of all keys using the given reducer to combine values, and\n     * the given basis as an identity value.\n     *\n     * @param parallelismThreshold the (estimated) number of elements\n     * needed for this operation to be executed in parallel\n     * @param transformer a function returning the transformation\n     * for an element\n     * @param basis the identity (initial default value) for the reduction\n     * @param reducer a commutative associative combining function\n     * @return the result of accumulating the given transformation\n     * of all keys\n     * @since 1.8\n     */\n    public int reduceKeysToInt(long parallelismThreshold,\n                               ToIntFunction<? super K> transformer,\n                               int basis,\n                               IntBinaryOperator reducer) {\n        if (transformer == null || reducer == null)\n            throw new NullPointerException();\n        return new MapReduceKeysToIntTask<K,V>\n            (null, batchFor(parallelismThreshold), 0, 0, table,\n             null, transformer, basis, reducer).invoke();\n    }"}
{"Number":"905","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-reduceKeysToLong(long-ToLongFunction-long-LongBinaryOperator)","Corresponding Source":"/**\n     * Returns the result of accumulating the given transformation\n     * of all keys using the given reducer to combine values, and\n     * the given basis as an identity value.\n     *\n     * @param parallelismThreshold the (estimated) number of elements\n     * needed for this operation to be executed in parallel\n     * @param transformer a function returning the transformation\n     * for an element\n     * @param basis the identity (initial default value) for the reduction\n     * @param reducer a commutative associative combining function\n     * @return the result of accumulating the given transformation\n     * of all keys\n     * @since 1.8\n     */\n    public long reduceKeysToLong(long parallelismThreshold,\n                                 ToLongFunction<? super K> transformer,\n                                 long basis,\n                                 LongBinaryOperator reducer) {\n        if (transformer == null || reducer == null)\n            throw new NullPointerException();\n        return new MapReduceKeysToLongTask<K,V>\n            (null, batchFor(parallelismThreshold), 0, 0, table,\n             null, transformer, basis, reducer).invoke();\n    }"}
{"Number":"906","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-reduceToDouble(long-ToDoubleBiFunction-double-DoubleBinaryOperator)","Corresponding Source":"/**\n     * Returns the result of accumulating the given transformation\n     * of all (key, value) pairs using the given reducer to\n     * combine values, and the given basis as an identity value.\n     *\n     * @param parallelismThreshold the (estimated) number of elements\n     * needed for this operation to be executed in parallel\n     * @param transformer a function returning the transformation\n     * for an element\n     * @param basis the identity (initial default value) for the reduction\n     * @param reducer a commutative associative combining function\n     * @return the result of accumulating the given transformation\n     * of all (key, value) pairs\n     * @since 1.8\n     */\n    public double reduceToDouble(long parallelismThreshold,\n                                 ToDoubleBiFunction<? super K, ? super V> transformer,\n                                 double basis,\n                                 DoubleBinaryOperator reducer) {\n        if (transformer == null || reducer == null)\n            throw new NullPointerException();\n        return new MapReduceMappingsToDoubleTask<K,V>\n            (null, batchFor(parallelismThreshold), 0, 0, table,\n             null, transformer, basis, reducer).invoke();\n    }"}
{"Number":"907","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-reduceToInt(long-ToIntBiFunction-int-IntBinaryOperator)","Corresponding Source":"/**\n     * Returns the result of accumulating the given transformation\n     * of all (key, value) pairs using the given reducer to\n     * combine values, and the given basis as an identity value.\n     *\n     * @param parallelismThreshold the (estimated) number of elements\n     * needed for this operation to be executed in parallel\n     * @param transformer a function returning the transformation\n     * for an element\n     * @param basis the identity (initial default value) for the reduction\n     * @param reducer a commutative associative combining function\n     * @return the result of accumulating the given transformation\n     * of all (key, value) pairs\n     * @since 1.8\n     */\n    public int reduceToInt(long parallelismThreshold,\n                           ToIntBiFunction<? super K, ? super V> transformer,\n                           int basis,\n                           IntBinaryOperator reducer) {\n        if (transformer == null || reducer == null)\n            throw new NullPointerException();\n        return new MapReduceMappingsToIntTask<K,V>\n            (null, batchFor(parallelismThreshold), 0, 0, table,\n             null, transformer, basis, reducer).invoke();\n    }"}
{"Number":"908","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-reduceToLong(long-ToLongBiFunction-long-LongBinaryOperator)","Corresponding Source":"/**\n     * Returns the result of accumulating the given transformation\n     * of all (key, value) pairs using the given reducer to\n     * combine values, and the given basis as an identity value.\n     *\n     * @param parallelismThreshold the (estimated) number of elements\n     * needed for this operation to be executed in parallel\n     * @param transformer a function returning the transformation\n     * for an element\n     * @param basis the identity (initial default value) for the reduction\n     * @param reducer a commutative associative combining function\n     * @return the result of accumulating the given transformation\n     * of all (key, value) pairs\n     * @since 1.8\n     */\n    public long reduceToLong(long parallelismThreshold,\n                             ToLongBiFunction<? super K, ? super V> transformer,\n                             long basis,\n                             LongBinaryOperator reducer) {\n        if (transformer == null || reducer == null)\n            throw new NullPointerException();\n        return new MapReduceMappingsToLongTask<K,V>\n            (null, batchFor(parallelismThreshold), 0, 0, table,\n             null, transformer, basis, reducer).invoke();\n    }"}
{"Number":"909","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-reduceValues(long-BiFunction)","Corresponding Source":"/**\n     * Returns the result of accumulating all values using the\n     * given reducer to combine values, or null if none.\n     *\n     * @param parallelismThreshold the (estimated) number of elements\n     * needed for this operation to be executed in parallel\n     * @param reducer a commutative associative combining function\n     * @return the result of accumulating all values\n     * @since 1.8\n     */\n    public V reduceValues(long parallelismThreshold,\n                          BiFunction<? super V, ? super V, ? extends V> reducer) {\n        if (reducer == null) throw new NullPointerException();\n        return new ReduceValuesTask<K,V>\n            (null, batchFor(parallelismThreshold), 0, 0, table,\n             null, reducer).invoke();\n    }"}
{"Number":"910","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-reduceValues(long-Function-BiFunction)","Corresponding Source":"/**\n     * Returns the result of accumulating the given transformation\n     * of all values using the given reducer to combine values, or\n     * null if none.\n     *\n     * @param parallelismThreshold the (estimated) number of elements\n     * needed for this operation to be executed in parallel\n     * @param transformer a function returning the transformation\n     * for an element, or null if there is no transformation (in\n     * which case it is not combined)\n     * @param reducer a commutative associative combining function\n     * @param <U> the return type of the transformer\n     * @return the result of accumulating the given transformation\n     * of all values\n     * @since 1.8\n     */\n    public <U> U reduceValues(long parallelismThreshold,\n                              Function<? super V, ? extends U> transformer,\n                              BiFunction<? super U, ? super U, ? extends U> reducer) {\n        if (transformer == null || reducer == null)\n            throw new NullPointerException();\n        return new MapReduceValuesTask<K,V,U>\n            (null, batchFor(parallelismThreshold), 0, 0, table,\n             null, transformer, reducer).invoke();\n    }"}
{"Number":"911","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-reduceValuesToDouble(long-ToDoubleFunction-double-DoubleBinaryOperator)","Corresponding Source":"/**\n     * Returns the result of accumulating the given transformation\n     * of all values using the given reducer to combine values,\n     * and the given basis as an identity value.\n     *\n     * @param parallelismThreshold the (estimated) number of elements\n     * needed for this operation to be executed in parallel\n     * @param transformer a function returning the transformation\n     * for an element\n     * @param basis the identity (initial default value) for the reduction\n     * @param reducer a commutative associative combining function\n     * @return the result of accumulating the given transformation\n     * of all values\n     * @since 1.8\n     */\n    public double reduceValuesToDouble(long parallelismThreshold,\n                                       ToDoubleFunction<? super V> transformer,\n                                       double basis,\n                                       DoubleBinaryOperator reducer) {\n        if (transformer == null || reducer == null)\n            throw new NullPointerException();\n        return new MapReduceValuesToDoubleTask<K,V>\n            (null, batchFor(parallelismThreshold), 0, 0, table,\n             null, transformer, basis, reducer).invoke();\n    }"}
{"Number":"912","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-reduceValuesToInt(long-ToIntFunction-int-IntBinaryOperator)","Corresponding Source":"/**\n     * Returns the result of accumulating the given transformation\n     * of all values using the given reducer to combine values,\n     * and the given basis as an identity value.\n     *\n     * @param parallelismThreshold the (estimated) number of elements\n     * needed for this operation to be executed in parallel\n     * @param transformer a function returning the transformation\n     * for an element\n     * @param basis the identity (initial default value) for the reduction\n     * @param reducer a commutative associative combining function\n     * @return the result of accumulating the given transformation\n     * of all values\n     * @since 1.8\n     */\n    public int reduceValuesToInt(long parallelismThreshold,\n                                 ToIntFunction<? super V> transformer,\n                                 int basis,\n                                 IntBinaryOperator reducer) {\n        if (transformer == null || reducer == null)\n            throw new NullPointerException();\n        return new MapReduceValuesToIntTask<K,V>\n            (null, batchFor(parallelismThreshold), 0, 0, table,\n             null, transformer, basis, reducer).invoke();\n    }"}
{"Number":"913","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-reduceValuesToLong(long-ToLongFunction-long-LongBinaryOperator)","Corresponding Source":"/**\n     * Returns the result of accumulating the given transformation\n     * of all values using the given reducer to combine values,\n     * and the given basis as an identity value.\n     *\n     * @param parallelismThreshold the (estimated) number of elements\n     * needed for this operation to be executed in parallel\n     * @param transformer a function returning the transformation\n     * for an element\n     * @param basis the identity (initial default value) for the reduction\n     * @param reducer a commutative associative combining function\n     * @return the result of accumulating the given transformation\n     * of all values\n     * @since 1.8\n     */\n    public long reduceValuesToLong(long parallelismThreshold,\n                                   ToLongFunction<? super V> transformer,\n                                   long basis,\n                                   LongBinaryOperator reducer) {\n        if (transformer == null || reducer == null)\n            throw new NullPointerException();\n        return new MapReduceValuesToLongTask<K,V>\n            (null, batchFor(parallelismThreshold), 0, 0, table,\n             null, transformer, basis, reducer).invoke();\n    }"}
{"Number":"914","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-replace(K-V)","Corresponding Source":"/**\n     * {@inheritDoc}\n     *\n     * @return the previous value associated with the specified key,\n     *         or {@code null} if there was no mapping for the key\n     * @throws NullPointerException if the specified key or value is null\n     */\n    public V replace(K key, V value) {\n        if (key == null || value == null)\n            throw new NullPointerException();\n        return replaceNode(key, value, null);\n    }"}
{"Number":"915","API Relative Path":"java.util.concurrent.ConcurrentHashMap.java-replace(K-V-V)","Corresponding Source":"/**\n     * {@inheritDoc}\n     *\n     * @throws NullPointerException if any of the arguments are null\n     */\n    public boolean replace(K key, V oldValue, V newValue) {\n        if (key == null || oldValue == null || newValue == null)\n            throw new NullPointerException();\n        return replaceNode(key, newValue, oldValue) != null;\n    }"}
{"Number":"916","API Relative Path":"java.util.concurrent.ConcurrentLinkedDeque.java-add(E)","Corresponding Source":"/**\n     * Inserts the specified element at the tail of this deque.\n     * As the deque is unbounded, this method will never throw\n     * {@link IllegalStateException} or return {@code false}.\n     *\n     * @return {@code true} (as specified by {@link Collection#add})\n     * @throws NullPointerException if the specified element is null\n     */\n    public boolean add(E e) {\n        return offerLast(e);\n    }"}
{"Number":"917","API Relative Path":"java.util.concurrent.ConcurrentLinkedDeque.java-addAll(Collection)","Corresponding Source":"/**\n     * Appends all of the elements in the specified collection to the end of\n     * this deque, in the order that they are returned by the specified\n     * collection's iterator.  Attempts to {@code addAll} of a deque to\n     * itself result in {@code IllegalArgumentException}.\n     *\n     * @param c the elements to be inserted into this deque\n     * @return {@code true} if this deque changed as a result of the call\n     * @throws NullPointerException if the specified collection or any\n     *         of its elements are null\n     * @throws IllegalArgumentException if the collection is this deque\n     */\n    public boolean addAll(Collection<? extends E> c) {\n        if (c == this)\n            // As historically specified in AbstractQueue#addAll\n            throw new IllegalArgumentException();\n\n        // Copy c into a private chain of Nodes\n        Node<E> beginningOfTheEnd = null, last = null;\n        for (E e : c) {\n            checkNotNull(e);\n            Node<E> newNode = new Node<E>(e);\n            if (beginningOfTheEnd == null)\n                beginningOfTheEnd = last = newNode;\n            else {\n                last.lazySetNext(newNode);\n                newNode.lazySetPrev(last);\n                last = newNode;\n            }\n        }\n        if (beginningOfTheEnd == null)\n            return false;\n\n        // Atomically append the chain at the tail of this collection\n        restartFromTail:\n        for (;;)\n            for (Node<E> t = tail, p = t, q;;) {\n                if ((q = p.next) != null &&\n                    (q = (p = q).next) != null)\n                    // Check for tail updates every other hop.\n                    // If p == q, we are sure to follow tail instead.\n                    p = (t != (t = tail)) ? t : q;\n                else if (p.prev == p) // NEXT_TERMINATOR\n                    continue restartFromTail;\n                else {\n                    // p is last node\n                    beginningOfTheEnd.lazySetPrev(p); // CAS piggyback\n                    if (p.casNext(null, beginningOfTheEnd)) {\n                        // Successful CAS is the linearization point\n                        // for all elements to be added to this deque.\n                        if (!casTail(t, last)) {\n                            // Try a little harder to update tail,\n                            // since we may be adding many elements.\n                            t = tail;\n                            if (last.next == null)\n                                casTail(t, last);\n                        }\n                        return true;\n                    }\n                    // Lost CAS race to another thread; re-read next\n                }\n            }\n    }"}
{"Number":"918","API Relative Path":"java.util.concurrent.ConcurrentLinkedDeque.java-addFirst(E)","Corresponding Source":"/**\n     * Inserts the specified element at the front of this deque.\n     * As the deque is unbounded, this method will never throw\n     * {@link IllegalStateException}.\n     *\n     * @throws NullPointerException if the specified element is null\n     */\n    public void addFirst(E e) {\n        linkFirst(e);\n    }"}
{"Number":"919","API Relative Path":"java.util.concurrent.ConcurrentLinkedDeque.java-addLast(E)","Corresponding Source":"/**\n     * Inserts the specified element at the end of this deque.\n     * As the deque is unbounded, this method will never throw\n     * {@link IllegalStateException}.\n     *\n     * <p>This method is equivalent to {@link #add}.\n     *\n     * @throws NullPointerException if the specified element is null\n     */\n    public void addLast(E e) {\n        linkLast(e);\n    }"}
{"Number":"920","API Relative Path":"java.util.concurrent.ConcurrentLinkedDeque.java-offer(E)","Corresponding Source":"// *** Queue and stack methods ***\n\n    /**\n     * Inserts the specified element at the tail of this deque.\n     * As the deque is unbounded, this method will never return {@code false}.\n     *\n     * @return {@code true} (as specified by {@link Queue#offer})\n     * @throws NullPointerException if the specified element is null\n     */\n    public boolean offer(E e) {\n        return offerLast(e);\n    }"}
{"Number":"921","API Relative Path":"java.util.concurrent.ConcurrentLinkedDeque.java-offerFirst(E)","Corresponding Source":"/**\n     * Inserts the specified element at the front of this deque.\n     * As the deque is unbounded, this method will never return {@code false}.\n     *\n     * @return {@code true} (as specified by {@link Deque#offerFirst})\n     * @throws NullPointerException if the specified element is null\n     */\n    public boolean offerFirst(E e) {\n        linkFirst(e);\n        return true;\n    }"}
{"Number":"922","API Relative Path":"java.util.concurrent.ConcurrentLinkedDeque.java-offerLast(E)","Corresponding Source":"/**\n     * Inserts the specified element at the end of this deque.\n     * As the deque is unbounded, this method will never return {@code false}.\n     *\n     * <p>This method is equivalent to {@link #add}.\n     *\n     * @return {@code true} (as specified by {@link Deque#offerLast})\n     * @throws NullPointerException if the specified element is null\n     */\n    public boolean offerLast(E e) {\n        linkLast(e);\n        return true;\n    }"}
{"Number":"923","API Relative Path":"java.util.concurrent.ConcurrentLinkedDeque.java-push(E)","Corresponding Source":"/**\n     * @throws NullPointerException {@inheritDoc}\n     */\n    public void push(E e)     { addFirst(e); }"}
{"Number":"924","API Relative Path":"java.util.concurrent.ConcurrentLinkedDeque.java-push(E)","Corresponding Source":"/**\n     * @throws NullPointerException {@inheritDoc}\n     */\n    public void push(E e)     { addFirst(e); }"}
{"Number":"925","API Relative Path":"java.util.concurrent.ConcurrentLinkedDeque.java-remove(Object)","Corresponding Source":"/**\n     * Removes the first element {@code e} such that\n     * {@code o.equals(e)}, if such an element exists in this deque.\n     * If the deque does not contain the element, it is unchanged.\n     *\n     * @param o element to be removed from this deque, if present\n     * @return {@code true} if the deque contained the specified element\n     * @throws NullPointerException if the specified element is null\n     */\n    public boolean remove(Object o) {\n        return removeFirstOccurrence(o);\n    }"}
{"Number":"926","API Relative Path":"java.util.concurrent.ConcurrentLinkedDeque.java-removeFirstOccurrence(Object)","Corresponding Source":"/**\n     * Removes the first element {@code e} such that\n     * {@code o.equals(e)}, if such an element exists in this deque.\n     * If the deque does not contain the element, it is unchanged.\n     *\n     * @param o element to be removed from this deque, if present\n     * @return {@code true} if the deque contained the specified element\n     * @throws NullPointerException if the specified element is null\n     */\n    public boolean removeFirstOccurrence(Object o) {\n        checkNotNull(o);\n        for (Node<E> p = first(); p != null; p = succ(p)) {\n            E item = p.item;\n            if (item != null && o.equals(item) && p.casItem(item, null)) {\n                unlink(p);\n                return true;\n            }\n        }\n        return false;\n    }"}
{"Number":"927","API Relative Path":"java.util.concurrent.ConcurrentLinkedDeque.java-removeLastOccurrence(Object)","Corresponding Source":"/**\n     * Removes the last element {@code e} such that\n     * {@code o.equals(e)}, if such an element exists in this deque.\n     * If the deque does not contain the element, it is unchanged.\n     *\n     * @param o element to be removed from this deque, if present\n     * @return {@code true} if the deque contained the specified element\n     * @throws NullPointerException if the specified element is null\n     */\n    public boolean removeLastOccurrence(Object o) {\n        checkNotNull(o);\n        for (Node<E> p = last(); p != null; p = pred(p)) {\n            E item = p.item;\n            if (item != null && o.equals(item) && p.casItem(item, null)) {\n                unlink(p);\n                return true;\n            }\n        }\n        return false;\n    }"}
{"Number":"928","API Relative Path":"java.util.concurrent.ConcurrentLinkedQueue.java-add(E)","Corresponding Source":"// Have to override just to update the javadoc\n\n    /**\n     * Inserts the specified element at the tail of this queue.\n     * As the queue is unbounded, this method will never throw\n     * {@link IllegalStateException} or return {@code false}.\n     *\n     * @return {@code true} (as specified by {@link Collection#add})\n     * @throws NullPointerException if the specified element is null\n     */\n    public boolean add(E e) {\n        return offer(e);\n    }"}
{"Number":"929","API Relative Path":"java.util.concurrent.ConcurrentLinkedQueue.java-addAll(Collection)","Corresponding Source":"/**\n     * Appends all of the elements in the specified collection to the end of\n     * this queue, in the order that they are returned by the specified\n     * collection's iterator.  Attempts to {@code addAll} of a queue to\n     * itself result in {@code IllegalArgumentException}.\n     *\n     * @param c the elements to be inserted into this queue\n     * @return {@code true} if this queue changed as a result of the call\n     * @throws NullPointerException if the specified collection or any\n     *         of its elements are null\n     * @throws IllegalArgumentException if the collection is this queue\n     */\n    public boolean addAll(Collection<? extends E> c) {\n        if (c == this)\n            // As historically specified in AbstractQueue#addAll\n            throw new IllegalArgumentException();\n\n        // Copy c into a private chain of Nodes\n        Node<E> beginningOfTheEnd = null, last = null;\n        for (E e : c) {\n            checkNotNull(e);\n            Node<E> newNode = new Node<E>(e);\n            if (beginningOfTheEnd == null)\n                beginningOfTheEnd = last = newNode;\n            else {\n                last.lazySetNext(newNode);\n                last = newNode;\n            }\n        }\n        if (beginningOfTheEnd == null)\n            return false;\n\n        // Atomically append the chain at the tail of this collection\n        for (Node<E> t = tail, p = t;;) {\n            Node<E> q = p.next;\n            if (q == null) {\n                // p is last node\n                if (p.casNext(null, beginningOfTheEnd)) {\n                    // Successful CAS is the linearization point\n                    // for all elements to be added to this queue.\n                    if (!casTail(t, last)) {\n                        // Try a little harder to update tail,\n                        // since we may be adding many elements.\n                        t = tail;\n                        if (last.next == null)\n                            casTail(t, last);\n                    }\n                    return true;\n                }\n                // Lost CAS race to another thread; re-read next\n            }\n            else if (p == q)\n                // We have fallen off list.  If tail is unchanged, it\n                // will also be off-list, in which case we need to\n                // jump to head, from which all live nodes are always\n                // reachable.  Else the new tail is a better bet.\n                p = (t != (t = tail)) ? t : head;\n            else\n                // Check for tail updates after two hops.\n                p = (p != t && t != (t = tail)) ? t : q;\n        }\n    }"}
{"Number":"930","API Relative Path":"java.util.concurrent.ConcurrentLinkedQueue.java-offer(E)","Corresponding Source":"/**\n     * Inserts the specified element at the tail of this queue.\n     * As the queue is unbounded, this method will never return {@code false}.\n     *\n     * @return {@code true} (as specified by {@link Queue#offer})\n     * @throws NullPointerException if the specified element is null\n     */\n    public boolean offer(E e) {\n        checkNotNull(e);\n        final Node<E> newNode = new Node<E>(e);\n\n        for (Node<E> t = tail, p = t;;) {\n            Node<E> q = p.next;\n            if (q == null) {\n                // p is last node\n                if (p.casNext(null, newNode)) {\n                    // Successful CAS is the linearization point\n                    // for e to become an element of this queue,\n                    // and for newNode to become \"live\".\n                    if (p != t) // hop two nodes at a time\n                        casTail(t, newNode);  // Failure is OK.\n                    return true;\n                }\n                // Lost CAS race to another thread; re-read next\n            }\n            else if (p == q)\n                // We have fallen off list.  If tail is unchanged, it\n                // will also be off-list, in which case we need to\n                // jump to head, from which all live nodes are always\n                // reachable.  Else the new tail is a better bet.\n                p = (t != (t = tail)) ? t : head;\n            else\n                // Check for tail updates after two hops.\n                p = (p != t && t != (t = tail)) ? t : q;\n        }\n    }"}
{"Number":"931","API Relative Path":"java.util.concurrent.ConcurrentSkipListMap.java-ConcurrentSkipListMap(SortedMap)","Corresponding Source":"/**\n     * Constructs a new map containing the same mappings and using the\n     * same ordering as the specified sorted map.\n     *\n     * @param m the sorted map whose mappings are to be placed in this\n     *        map, and whose comparator is to be used to sort this map\n     * @throws NullPointerException if the specified sorted map or any of\n     *         its keys or values are null\n     */\n    public ConcurrentSkipListMap(SortedMap<K, ? extends V> m) {\n        this.comparator = m.comparator();\n        initialize();\n        buildFromSorted(m);\n    }"}
{"Number":"932","API Relative Path":"java.util.concurrent.ConcurrentSkipListMap.java-doRemove(Object-Object)","Corresponding Source":"/* ---------------- Deletion -------------- */\n\n    /**\n     * Main deletion method. Locates node, nulls value, appends a\n     * deletion marker, unlinks predecessor, removes associated index\n     * nodes, and possibly reduces head index level.\n     *\n     * Index nodes are cleared out simply by calling findPredecessor.\n     * which unlinks indexes to deleted nodes found along path to key,\n     * which will include the indexes to this node.  This is done\n     * unconditionally. We can't check beforehand whether there are\n     * index nodes because it might be the case that some or all\n     * indexes hadn't been inserted yet for this node during initial\n     * search for it, and we'd like to ensure lack of garbage\n     * retention, so must call to be sure.\n     *\n     * @param key the key\n     * @param value if non-null, the value that must be\n     * associated with key\n     * @return the node, or null if not found\n     */\n    final V doRemove(Object key, Object value) {\n        if (key == null)\n            throw new NullPointerException();\n        Comparator<? super K> cmp = comparator;\n        outer: for (;;) {\n            for (Node<K,V> b = findPredecessor(key, cmp), n = b.next;;) {\n                Object v; int c;\n                if (n == null)\n                    break outer;\n                Node<K,V> f = n.next;\n                if (n != b.next)                    // inconsistent read\n                    break;\n                if ((v = n.value) == null) {        // n is deleted\n                    n.helpDelete(b, f);\n                    break;\n                }\n                if (b.value == null || v == n)      // b is deleted\n                    break;\n                if ((c = cpr(cmp, key, n.key)) < 0)\n                    break outer;\n                if (c > 0) {\n                    b = n;\n                    n = f;\n                    continue;\n                }\n                if (value != null && !value.equals(v))\n                    break outer;\n                if (!n.casValue(v, null))\n                    break;\n                if (!n.appendMarker(f) || !b.casNext(n, f))\n                    findNode(key);                  // retry via findNode\n                else {\n                    findPredecessor(key, cmp);      // clean index\n                    if (head.right == null)\n                        tryReduceLevel();\n                }\n                @SuppressWarnings(\"unchecked\") V vv = (V)v;\n                return vv;\n            }\n        }\n        return null;\n    }"}
{"Number":"933","API Relative Path":"java.util.concurrent.ConcurrentSkipListMap.java-doRemove(Object-Object)","Corresponding Source":"/* ---------------- Deletion -------------- */\n\n    /**\n     * Main deletion method. Locates node, nulls value, appends a\n     * deletion marker, unlinks predecessor, removes associated index\n     * nodes, and possibly reduces head index level.\n     *\n     * Index nodes are cleared out simply by calling findPredecessor.\n     * which unlinks indexes to deleted nodes found along path to key,\n     * which will include the indexes to this node.  This is done\n     * unconditionally. We can't check beforehand whether there are\n     * index nodes because it might be the case that some or all\n     * indexes hadn't been inserted yet for this node during initial\n     * search for it, and we'd like to ensure lack of garbage\n     * retention, so must call to be sure.\n     *\n     * @param key the key\n     * @param value if non-null, the value that must be\n     * associated with key\n     * @return the node, or null if not found\n     */\n    final V doRemove(Object key, Object value) {\n        if (key == null)\n            throw new NullPointerException();\n        Comparator<? super K> cmp = comparator;\n        outer: for (;;) {\n            for (Node<K,V> b = findPredecessor(key, cmp), n = b.next;;) {\n                Object v; int c;\n                if (n == null)\n                    break outer;\n                Node<K,V> f = n.next;\n                if (n != b.next)                    // inconsistent read\n                    break;\n                if ((v = n.value) == null) {        // n is deleted\n                    n.helpDelete(b, f);\n                    break;\n                }\n                if (b.value == null || v == n)      // b is deleted\n                    break;\n                if ((c = cpr(cmp, key, n.key)) < 0)\n                    break outer;\n                if (c > 0) {\n                    b = n;\n                    n = f;\n                    continue;\n                }\n                if (value != null && !value.equals(v))\n                    break outer;\n                if (!n.casValue(v, null))\n                    break;\n                if (!n.appendMarker(f) || !b.casNext(n, f))\n                    findNode(key);                  // retry via findNode\n                else {\n                    findPredecessor(key, cmp);      // clean index\n                    if (head.right == null)\n                        tryReduceLevel();\n                }\n                @SuppressWarnings(\"unchecked\") V vv = (V)v;\n                return vv;\n            }\n        }\n        return null;\n    }"}
{"Number":"934","API Relative Path":"java.util.concurrent.ConcurrentSkipListMap.java-doRemove(Object-Object)","Corresponding Source":"/* ---------------- Deletion -------------- */\n\n    /**\n     * Main deletion method. Locates node, nulls value, appends a\n     * deletion marker, unlinks predecessor, removes associated index\n     * nodes, and possibly reduces head index level.\n     *\n     * Index nodes are cleared out simply by calling findPredecessor.\n     * which unlinks indexes to deleted nodes found along path to key,\n     * which will include the indexes to this node.  This is done\n     * unconditionally. We can't check beforehand whether there are\n     * index nodes because it might be the case that some or all\n     * indexes hadn't been inserted yet for this node during initial\n     * search for it, and we'd like to ensure lack of garbage\n     * retention, so must call to be sure.\n     *\n     * @param key the key\n     * @param value if non-null, the value that must be\n     * associated with key\n     * @return the node, or null if not found\n     */\n    final V doRemove(Object key, Object value) {\n        if (key == null)\n            throw new NullPointerException();\n        Comparator<? super K> cmp = comparator;\n        outer: for (;;) {\n            for (Node<K,V> b = findPredecessor(key, cmp), n = b.next;;) {\n                Object v; int c;\n                if (n == null)\n                    break outer;\n                Node<K,V> f = n.next;\n                if (n != b.next)                    // inconsistent read\n                    break;\n                if ((v = n.value) == null) {        // n is deleted\n                    n.helpDelete(b, f);\n                    break;\n                }\n                if (b.value == null || v == n)      // b is deleted\n                    break;\n                if ((c = cpr(cmp, key, n.key)) < 0)\n                    break outer;\n                if (c > 0) {\n                    b = n;\n                    n = f;\n                    continue;\n                }\n                if (value != null && !value.equals(v))\n                    break outer;\n                if (!n.casValue(v, null))\n                    break;\n                if (!n.appendMarker(f) || !b.casNext(n, f))\n                    findNode(key);                  // retry via findNode\n                else {\n                    findPredecessor(key, cmp);      // clean index\n                    if (head.right == null)\n                        tryReduceLevel();\n                }\n                @SuppressWarnings(\"unchecked\") V vv = (V)v;\n                return vv;\n            }\n        }\n        return null;\n    }"}
{"Number":"935","API Relative Path":"java.util.concurrent.ConcurrentSkipListMap.java-doRemove(Object-Object)","Corresponding Source":"/* ---------------- Deletion -------------- */\n\n    /**\n     * Main deletion method. Locates node, nulls value, appends a\n     * deletion marker, unlinks predecessor, removes associated index\n     * nodes, and possibly reduces head index level.\n     *\n     * Index nodes are cleared out simply by calling findPredecessor.\n     * which unlinks indexes to deleted nodes found along path to key,\n     * which will include the indexes to this node.  This is done\n     * unconditionally. We can't check beforehand whether there are\n     * index nodes because it might be the case that some or all\n     * indexes hadn't been inserted yet for this node during initial\n     * search for it, and we'd like to ensure lack of garbage\n     * retention, so must call to be sure.\n     *\n     * @param key the key\n     * @param value if non-null, the value that must be\n     * associated with key\n     * @return the node, or null if not found\n     */\n    final V doRemove(Object key, Object value) {\n        if (key == null)\n            throw new NullPointerException();\n        Comparator<? super K> cmp = comparator;\n        outer: for (;;) {\n            for (Node<K,V> b = findPredecessor(key, cmp), n = b.next;;) {\n                Object v; int c;\n                if (n == null)\n                    break outer;\n                Node<K,V> f = n.next;\n                if (n != b.next)                    // inconsistent read\n                    break;\n                if ((v = n.value) == null) {        // n is deleted\n                    n.helpDelete(b, f);\n                    break;\n                }\n                if (b.value == null || v == n)      // b is deleted\n                    break;\n                if ((c = cpr(cmp, key, n.key)) < 0)\n                    break outer;\n                if (c > 0) {\n                    b = n;\n                    n = f;\n                    continue;\n                }\n                if (value != null && !value.equals(v))\n                    break outer;\n                if (!n.casValue(v, null))\n                    break;\n                if (!n.appendMarker(f) || !b.casNext(n, f))\n                    findNode(key);                  // retry via findNode\n                else {\n                    findPredecessor(key, cmp);      // clean index\n                    if (head.right == null)\n                        tryReduceLevel();\n                }\n                @SuppressWarnings(\"unchecked\") V vv = (V)v;\n                return vv;\n            }\n        }\n        return null;\n    }"}
{"Number":"936","API Relative Path":"java.util.concurrent.ConcurrentSkipListMap.java-findNear(K-int-Comparator)","Corresponding Source":"/**\n     * Utility for ceiling, floor, lower, higher methods.\n     * @param key the key\n     * @param rel the relation -- OR'ed combination of EQ, LT, GT\n     * @return nearest node fitting relation, or null if no such\n     */\n    final Node<K,V> findNear(K key, int rel, Comparator<? super K> cmp) {\n        if (key == null)\n            throw new NullPointerException();\n        for (;;) {\n            for (Node<K,V> b = findPredecessor(key, cmp), n = b.next;;) {\n                Object v;\n                if (n == null)\n                    return ((rel & LT) == 0 || b.isBaseHeader()) ? null : b;\n                Node<K,V> f = n.next;\n                if (n != b.next)                  // inconsistent read\n                    break;\n                if ((v = n.value) == null) {      // n is deleted\n                    n.helpDelete(b, f);\n                    break;\n                }\n                if (b.value == null || v == n)      // b is deleted\n                    break;\n                int c = cpr(cmp, key, n.key);\n                if ((c == 0 && (rel & EQ) != 0) ||\n                    (c <  0 && (rel & LT) == 0))\n                    return n;\n                if ( c <= 0 && (rel & LT) != 0)\n                    return b.isBaseHeader() ? null : b;\n                b = n;\n                n = f;\n            }\n        }\n    }"}
{"Number":"937","API Relative Path":"java.util.concurrent.ConcurrentSkipListMap.java-findNear(K-int-Comparator)","Corresponding Source":"/**\n     * Utility for ceiling, floor, lower, higher methods.\n     * @param key the key\n     * @param rel the relation -- OR'ed combination of EQ, LT, GT\n     * @return nearest node fitting relation, or null if no such\n     */\n    final Node<K,V> findNear(K key, int rel, Comparator<? super K> cmp) {\n        if (key == null)\n            throw new NullPointerException();\n        for (;;) {\n            for (Node<K,V> b = findPredecessor(key, cmp), n = b.next;;) {\n                Object v;\n                if (n == null)\n                    return ((rel & LT) == 0 || b.isBaseHeader()) ? null : b;\n                Node<K,V> f = n.next;\n                if (n != b.next)                  // inconsistent read\n                    break;\n                if ((v = n.value) == null) {      // n is deleted\n                    n.helpDelete(b, f);\n                    break;\n                }\n                if (b.value == null || v == n)      // b is deleted\n                    break;\n                int c = cpr(cmp, key, n.key);\n                if ((c == 0 && (rel & EQ) != 0) ||\n                    (c <  0 && (rel & LT) == 0))\n                    return n;\n                if ( c <= 0 && (rel & LT) != 0)\n                    return b.isBaseHeader() ? null : b;\n                b = n;\n                n = f;\n            }\n        }\n    }"}
{"Number":"938","API Relative Path":"java.util.concurrent.ConcurrentSkipListMap.java-getNear(K-int)","Corresponding Source":"/**\n     * Returns SimpleImmutableEntry for results of findNear.\n     * @param key the key\n     * @param rel the relation -- OR'ed combination of EQ, LT, GT\n     * @return Entry fitting relation, or null if no such\n     */\n    final AbstractMap.SimpleImmutableEntry<K,V> getNear(K key, int rel) {\n        Comparator<? super K> cmp = comparator;\n        for (;;) {\n            Node<K,V> n = findNear(key, rel, cmp);\n            if (n == null)\n                return null;\n            AbstractMap.SimpleImmutableEntry<K,V> e = n.createSnapshot();\n            if (e != null)\n                return e;\n        }\n    }"}
{"Number":"939","API Relative Path":"java.util.concurrent.ConcurrentSkipListMap.java-getNear(K-int)","Corresponding Source":"/**\n     * Returns SimpleImmutableEntry for results of findNear.\n     * @param key the key\n     * @param rel the relation -- OR'ed combination of EQ, LT, GT\n     * @return Entry fitting relation, or null if no such\n     */\n    final AbstractMap.SimpleImmutableEntry<K,V> getNear(K key, int rel) {\n        Comparator<? super K> cmp = comparator;\n        for (;;) {\n            Node<K,V> n = findNear(key, rel, cmp);\n            if (n == null)\n                return null;\n            AbstractMap.SimpleImmutableEntry<K,V> e = n.createSnapshot();\n            if (e != null)\n                return e;\n        }\n    }"}
{"Number":"940","API Relative Path":"java.util.concurrent.ConcurrentSkipListMap.java-merge(K-V-BiFunction)","Corresponding Source":"/**\n     * If the specified key is not already associated with a value,\n     * associates it with the given value.  Otherwise, replaces the\n     * value with the results of the given remapping function, or\n     * removes if {@code null}. The function is <em>NOT<\/em>\n     * guaranteed to be applied once atomically.\n     *\n     * @param key key with which the specified value is to be associated\n     * @param value the value to use if absent\n     * @param remappingFunction the function to recompute a value if present\n     * @return the new value associated with the specified key, or null if none\n     * @throws NullPointerException if the specified key or value is null\n     *         or the remappingFunction is null\n     * @since 1.8\n     */\n    public V merge(K key, V value,\n                   BiFunction<? super V, ? super V, ? extends V> remappingFunction) {\n        if (key == null || value == null || remappingFunction == null)\n            throw new NullPointerException();\n        for (;;) {\n            Node<K,V> n; Object v; V r;\n            if ((n = findNode(key)) == null) {\n                if (doPut(key, value, true) == null)\n                    return value;\n            }\n            else if ((v = n.value) != null) {\n                @SuppressWarnings(\"unchecked\") V vv = (V) v;\n                if ((r = remappingFunction.apply(vv, value)) != null) {\n                    if (n.casValue(vv, r))\n                        return r;\n                }\n                else if (doRemove(key, vv) != null)\n                    return null;\n            }\n        }\n    }"}
{"Number":"941","API Relative Path":"java.util.concurrent.ConcurrentSkipListMap.java-replace(K-V)","Corresponding Source":"/**\n     * {@inheritDoc}\n     *\n     * @return the previous value associated with the specified key,\n     *         or {@code null} if there was no mapping for the key\n     * @throws ClassCastException if the specified key cannot be compared\n     *         with the keys currently in the map\n     * @throws NullPointerException if the specified key or value is null\n     */\n    public V replace(K key, V value) {\n        if (key == null || value == null)\n            throw new NullPointerException();\n        for (;;) {\n            Node<K,V> n; Object v;\n            if ((n = findNode(key)) == null)\n                return null;\n            if ((v = n.value) != null && n.casValue(v, value)) {\n                @SuppressWarnings(\"unchecked\") V vv = (V)v;\n                return vv;\n            }\n        }\n    }"}
{"Number":"942","API Relative Path":"java.util.concurrent.ConcurrentSkipListMap.java-replace(K-V-V)","Corresponding Source":"/**\n     * {@inheritDoc}\n     *\n     * @throws ClassCastException if the specified key cannot be compared\n     *         with the keys currently in the map\n     * @throws NullPointerException if any of the arguments are null\n     */\n    public boolean replace(K key, V oldValue, V newValue) {\n        if (key == null || oldValue == null || newValue == null)\n            throw new NullPointerException();\n        for (;;) {\n            Node<K,V> n; Object v;\n            if ((n = findNode(key)) == null)\n                return false;\n            if ((v = n.value) != null) {\n                if (!oldValue.equals(v))\n                    return false;\n                if (n.casValue(v, newValue))\n                    return true;\n            }\n        }\n    }"}
{"Number":"943","API Relative Path":"java.util.concurrent.ConcurrentSkipListMap.java-subMap(K-boolean-K-boolean)","Corresponding Source":"/**\n     * @throws ClassCastException {@inheritDoc}\n     * @throws NullPointerException if {@code fromKey} or {@code toKey} is null\n     * @throws IllegalArgumentException {@inheritDoc}\n     */\n    public ConcurrentNavigableMap<K,V> subMap(K fromKey,\n                                              boolean fromInclusive,\n                                              K toKey,\n                                              boolean toInclusive) {\n        if (fromKey == null || toKey == null)\n            throw new NullPointerException();\n        return new SubMap<K,V>\n            (this, fromKey, fromInclusive, toKey, toInclusive, false);\n    }"}
{"Number":"944","API Relative Path":"java.util.concurrent.CopyOnWriteArrayList.java-listIterator(int)","Corresponding Source":"/**\n     * {@inheritDoc}\n     *\n     * <p>The returned iterator provides a snapshot of the state of the list\n     * when the iterator was constructed. No synchronization is needed while\n     * traversing the iterator. The iterator does <em>NOT<\/em> support the\n     * {@code remove}, {@code set} or {@code add} methods.\n     *\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     */\n    public ListIterator<E> listIterator(int index) {\n        Object[] elements = getArray();\n        int len = elements.length;\n        if (index < 0 || index > len)\n            throw new IndexOutOfBoundsException(\"Index: \"+index);\n\n        return new COWIterator<E>(elements, index);\n    }"}
{"Number":"945","API Relative Path":"java.util.concurrent.CyclicBarrier.java-CyclicBarrier(int-Runnable)","Corresponding Source":"/**\n     * Creates a new {@code CyclicBarrier} that will trip when the\n     * given number of parties (threads) are waiting upon it, and which\n     * will execute the given barrier action when the barrier is tripped,\n     * performed by the last thread entering the barrier.\n     *\n     * @param parties the number of threads that must invoke {@link #await}\n     *        before the barrier is tripped\n     * @param barrierAction the command to execute when the barrier is\n     *        tripped, or {@code null} if there is no action\n     * @throws IllegalArgumentException if {@code parties} is less than 1\n     */\n    public CyclicBarrier(int parties, Runnable barrierAction) {\n        if (parties <= 0) throw new IllegalArgumentException();\n        this.parties = parties;\n        this.count = parties;\n        this.barrierCommand = barrierAction;\n    }"}
{"Number":"946","API Relative Path":"java.util.concurrent.DelayQueue.java-DelayQueue(Collection)","Corresponding Source":"/**\n     * Creates a {@code DelayQueue} initially containing the elements of the\n     * given collection of {@link Delayed} instances.\n     *\n     * @param c the collection of elements to initially contain\n     * @throws NullPointerException if the specified collection or any\n     *         of its elements are null\n     */\n    public DelayQueue(Collection<? extends E> c) {\n        this.addAll(c);\n    }"}
{"Number":"947","API Relative Path":"java.util.concurrent.DelayQueue.java-DelayQueue(Collection)","Corresponding Source":"/**\n     * Creates a {@code DelayQueue} initially containing the elements of the\n     * given collection of {@link Delayed} instances.\n     *\n     * @param c the collection of elements to initially contain\n     * @throws NullPointerException if the specified collection or any\n     *         of its elements are null\n     */\n    public DelayQueue(Collection<? extends E> c) {\n        this.addAll(c);\n    }"}
{"Number":"948","API Relative Path":"java.util.concurrent.DelayQueue.java-drainTo(Collection)","Corresponding Source":"/**\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     */\n    public int drainTo(Collection<? super E> c) {\n        if (c == null)\n            throw new NullPointerException();\n        if (c == this)\n            throw new IllegalArgumentException();\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            int n = 0;\n            for (E e; (e = peekExpired()) != null;) {\n                c.add(e);       // In this order, in case add() throws.\n                q.poll();\n                ++n;\n            }\n            return n;\n        } finally {\n            lock.unlock();\n        }\n    }"}
{"Number":"949","API Relative Path":"java.util.concurrent.DelayQueue.java-drainTo(Collection)","Corresponding Source":"/**\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     */\n    public int drainTo(Collection<? super E> c) {\n        if (c == null)\n            throw new NullPointerException();\n        if (c == this)\n            throw new IllegalArgumentException();\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            int n = 0;\n            for (E e; (e = peekExpired()) != null;) {\n                c.add(e);       // In this order, in case add() throws.\n                q.poll();\n                ++n;\n            }\n            return n;\n        } finally {\n            lock.unlock();\n        }\n    }"}
{"Number":"950","API Relative Path":"java.util.concurrent.DelayQueue.java-drainTo(Collection-int)","Corresponding Source":"/**\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     */\n    public int drainTo(Collection<? super E> c, int maxElements) {\n        if (c == null)\n            throw new NullPointerException();\n        if (c == this)\n            throw new IllegalArgumentException();\n        if (maxElements <= 0)\n            return 0;\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            int n = 0;\n            for (E e; n < maxElements && (e = peekExpired()) != null;) {\n                c.add(e);       // In this order, in case add() throws.\n                q.poll();\n                ++n;\n            }\n            return n;\n        } finally {\n            lock.unlock();\n        }\n    }"}
{"Number":"951","API Relative Path":"java.util.concurrent.DelayQueue.java-drainTo(Collection-int)","Corresponding Source":"/**\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     */\n    public int drainTo(Collection<? super E> c, int maxElements) {\n        if (c == null)\n            throw new NullPointerException();\n        if (c == this)\n            throw new IllegalArgumentException();\n        if (maxElements <= 0)\n            return 0;\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            int n = 0;\n            for (E e; n < maxElements && (e = peekExpired()) != null;) {\n                c.add(e);       // In this order, in case add() throws.\n                q.poll();\n                ++n;\n            }\n            return n;\n        } finally {\n            lock.unlock();\n        }\n    }"}
{"Number":"952","API Relative Path":"java.util.concurrent.Executors.java-newWorkStealingPool(int)","Corresponding Source":"/**\n     * Creates a thread pool that maintains enough threads to support\n     * the given parallelism level, and may use multiple queues to\n     * reduce contention. The parallelism level corresponds to the\n     * maximum number of threads actively engaged in, or available to\n     * engage in, task processing. The actual number of threads may\n     * grow and shrink dynamically. A work-stealing pool makes no\n     * guarantees about the order in which submitted tasks are\n     * executed.\n     *\n     * @param parallelism the targeted parallelism level\n     * @return the newly created thread pool\n     * @throws IllegalArgumentException if {@code parallelism <= 0}\n     * @since 1.8\n     */\n    public static ExecutorService newWorkStealingPool(int parallelism) {\n        return new ForkJoinPool\n            (parallelism,\n             ForkJoinPool.defaultForkJoinWorkerThreadFactory,\n             null, true);\n    }"}
{"Number":"953","API Relative Path":"java.util.concurrent.Executors.java-privilegedCallable(Callable)","Corresponding Source":"/**\n     * Returns a {@link Callable} object that will, when called,\n     * execute the given {@code callable} under the current access\n     * control context. This method should normally be invoked within\n     * an {@link AccessController#doPrivileged AccessController.doPrivileged}\n     * action to create callables that will, if possible, execute\n     * under the selected permission settings holding within that\n     * action; or if not possible, throw an associated {@link\n     * AccessControlException}.\n     * @param callable the underlying task\n     * @param <T> the type of the callable's result\n     * @return a callable object\n     * @throws NullPointerException if callable null\n     */\n    public static <T> Callable<T> privilegedCallable(Callable<T> callable) {\n        if (callable == null)\n            throw new NullPointerException();\n        return new PrivilegedCallable<T>(callable);\n    }"}
{"Number":"954","API Relative Path":"java.util.concurrent.Executors.java-privilegedCallableUsingCurrentClassLoader(Callable)","Corresponding Source":"/**\n     * Returns a {@link Callable} object that will, when called,\n     * execute the given {@code callable} under the current access\n     * control context, with the current context class loader as the\n     * context class loader. This method should normally be invoked\n     * within an\n     * {@link AccessController#doPrivileged AccessController.doPrivileged}\n     * action to create callables that will, if possible, execute\n     * under the selected permission settings holding within that\n     * action; or if not possible, throw an associated {@link\n     * AccessControlException}.\n     *\n     * @param callable the underlying task\n     * @param <T> the type of the callable's result\n     * @return a callable object\n     * @throws NullPointerException if callable null\n     * @throws AccessControlException if the current access control\n     * context does not have permission to both set and get context\n     * class loader\n     */\n    public static <T> Callable<T> privilegedCallableUsingCurrentClassLoader(Callable<T> callable) {\n        if (callable == null)\n            throw new NullPointerException();\n        return new PrivilegedCallableUsingCurrentClassLoader<T>(callable);\n    }"}
{"Number":"955","API Relative Path":"java.util.concurrent.ForkJoinPool.java-deregisterWorker(ForkJoinWorkerThread-Throwable)","Corresponding Source":"/**\n     * Final callback from terminating worker, as well as upon failure\n     * to construct or start a worker.  Removes record of worker from\n     * array, and adjusts counts. If pool is shutting down, tries to\n     * complete termination.\n     *\n     * @param wt the worker thread, or null if construction failed\n     * @param ex the exception causing failure, or null if none\n     */\n    final void deregisterWorker(ForkJoinWorkerThread wt, Throwable ex) {\n        WorkQueue w = null;\n        if (wt != null && (w = wt.workQueue) != null) {\n            int ps;\n            w.qlock = -1;                // ensure set\n            U.getAndAddLong(this, STEALCOUNT, w.nsteals); // collect steals\n            if (((ps = plock) & PL_LOCK) != 0 ||\n                !U.compareAndSwapInt(this, PLOCK, ps, ps += PL_LOCK))\n                ps = acquirePlock();\n            int nps = (ps & SHUTDOWN) | ((ps + PL_LOCK) & ~SHUTDOWN);\n            try {\n                int idx = w.poolIndex;\n                WorkQueue[] ws = workQueues;\n                if (ws != null && idx >= 0 && idx < ws.length && ws[idx] == w)\n                    ws[idx] = null;\n            } finally {\n                if (!U.compareAndSwapInt(this, PLOCK, ps, nps))\n                    releasePlock(nps);\n            }\n        }\n\n        long c;                          // adjust ctl counts\n        do {} while (!U.compareAndSwapLong\n                     (this, CTL, c = ctl, (((c - AC_UNIT) & AC_MASK) |\n                                           ((c - TC_UNIT) & TC_MASK) |\n                                           (c & ~(AC_MASK|TC_MASK)))));\n\n        if (!tryTerminate(false, false) && w != null && w.array != null) {\n            w.cancelAll();               // cancel remaining tasks\n            WorkQueue[] ws; WorkQueue v; Thread p; int u, i, e;\n            while ((u = (int)((c = ctl) >>> 32)) < 0 && (e = (int)c) >= 0) {\n                if (e > 0) {             // activate or create replacement\n                    if ((ws = workQueues) == null ||\n                        (i = e & SMASK) >= ws.length ||\n                        (v = ws[i]) == null)\n                        break;\n                    long nc = (((long)(v.nextWait & E_MASK)) |\n                               ((long)(u + UAC_UNIT) << 32));\n                    if (v.eventCount != (e | INT_SIGN))\n                        break;\n                    if (U.compareAndSwapLong(this, CTL, c, nc)) {\n                        v.eventCount = (e + E_SEQ) & E_MASK;\n                        if ((p = v.parker) != null)\n                            U.unpark(p);\n                        break;\n                    }\n                }\n                else {\n                    if ((short)u < 0)\n                        tryAddWorker();\n                    break;\n                }\n            }\n        }\n        if (ex == null)                     // help clean refs on way out\n            ForkJoinTask.helpExpungeStaleExceptions();\n        else                                // rethrow\n            ForkJoinTask.rethrow(ex);\n    }"}
{"Number":"956","API Relative Path":"java.util.concurrent.ForkJoinPool.java-ForkJoinPool(int-ForkJoinWorkerThreadFactory-UncaughtExceptionHandler-boolean)","Corresponding Source":"/**\n     * Creates a {@code ForkJoinPool} with the given parameters.\n     *\n     * @param parallelism the parallelism level. For default value,\n     * use {@link java.lang.Runtime#availableProcessors}.\n     * @param factory the factory for creating new threads. For default value,\n     * use {@link #defaultForkJoinWorkerThreadFactory}.\n     * @param handler the handler for internal worker threads that\n     * terminate due to unrecoverable errors encountered while executing\n     * tasks. For default value, use {@code null}.\n     * @param asyncMode if true,\n     * establishes local first-in-first-out scheduling mode for forked\n     * tasks that are never joined. This mode may be more appropriate\n     * than default locally stack-based mode in applications in which\n     * worker threads only process event-style asynchronous tasks.\n     * For default value, use {@code false}.\n     * @throws IllegalArgumentException if parallelism less than or\n     *         equal to zero, or greater than implementation limit\n     * @throws NullPointerException if the factory is null\n     * @throws SecurityException if a security manager exists and\n     *         the caller is not permitted to modify threads\n     *         because it does not hold {@link\n     *         java.lang.RuntimePermission}{@code (\"modifyThread\")}\n     */\n    public ForkJoinPool(int parallelism,\n                        ForkJoinWorkerThreadFactory factory,\n                        UncaughtExceptionHandler handler,\n                        boolean asyncMode) {\n        this(checkParallelism(parallelism),\n             checkFactory(factory),\n             handler,\n             (asyncMode ? FIFO_QUEUE : LIFO_QUEUE),\n             \"ForkJoinPool-\" + nextPoolId() + \"-worker-\");\n        checkPermission();\n    }"}
{"Number":"957","API Relative Path":"java.util.concurrent.ForkJoinPool.java-helpJoinOnce(WorkQueue-ForkJoinTask)","Corresponding Source":"/**\n     * Stripped-down variant of awaitJoin used by timed joins. Tries\n     * to help join only while there is continuous progress. (Caller\n     * will then enter a timed wait.)\n     *\n     * @param joiner the joining worker\n     * @param task the task\n     */\n    final void helpJoinOnce(WorkQueue joiner, ForkJoinTask<?> task) {\n        int s;\n        if (joiner != null && task != null && (s = task.status) >= 0) {\n            ForkJoinTask<?> prevJoin = joiner.currentJoin;\n            joiner.currentJoin = task;\n            do {} while (joiner.tryRemoveAndExec(task) && // process local tasks\n                         (s = task.status) >= 0);\n            if (s >= 0) {\n                if (task instanceof CountedCompleter)\n                    helpComplete(joiner, (CountedCompleter<?>)task, Integer.MAX_VALUE);\n                do {} while (task.status >= 0 &&\n                             tryHelpStealer(joiner, task) > 0);\n            }\n            joiner.currentJoin = prevJoin;\n        }\n    }"}
{"Number":"958","API Relative Path":"java.util.concurrent.ForkJoinPool.java-runWorker(WorkQueue)","Corresponding Source":"// Scanning for tasks\n\n    /**\n     * Top-level runloop for workers, called by ForkJoinWorkerThread.run.\n     */\n    final void runWorker(WorkQueue w) {\n        w.growArray(); // allocate queue\n        for (int r = w.hint; scan(w, r) == 0; ) {\n            r ^= r << 13; r ^= r >>> 17; r ^= r << 5; // xorshift\n        }\n    }"}
{"Number":"959","API Relative Path":"java.util.concurrent.ForkJoinTask.java-cancelIgnoringExceptions(ForkJoinTask)","Corresponding Source":"/**\n     * Cancels, ignoring any exceptions thrown by cancel. Used during\n     * worker and pool shutdown. Cancel is spec'ed not to throw any\n     * exceptions, but if it does anyway, we have no recourse during\n     * shutdown, so guard against this case.\n     */\n    static final void cancelIgnoringExceptions(ForkJoinTask<?> t) {\n        if (t != null && t.status >= 0) {\n            try {\n                t.cancel(false);\n            } catch (Throwable ignore) {\n            }\n        }\n    }"}
{"Number":"960","API Relative Path":"java.util.concurrent.ForkJoinTask.java-rethrow(Throwable)","Corresponding Source":"/**\n     * A version of \"sneaky throw\" to relay exceptions\n     */\n    static void rethrow(Throwable ex) {\n        if (ex != null)\n            ForkJoinTask.<RuntimeException>uncheckedThrow(ex);\n    }"}
{"Number":"961","API Relative Path":"java.util.concurrent.FutureTask.java-get(long-TimeUnit)","Corresponding Source":"/**\n     * @throws CancellationException {@inheritDoc}\n     */\n    public V get(long timeout, TimeUnit unit)\n        throws InterruptedException, ExecutionException, TimeoutException {\n        if (unit == null)\n            throw new NullPointerException();\n        int s = state;\n        if (s <= COMPLETING &&\n            (s = awaitDone(true, unit.toNanos(timeout))) <= COMPLETING)\n            throw new TimeoutException();\n        return report(s);\n    }"}
{"Number":"962","API Relative Path":"java.util.concurrent.FutureTask.java-get(long-TimeUnit)","Corresponding Source":"/**\n     * @throws CancellationException {@inheritDoc}\n     */\n    public V get(long timeout, TimeUnit unit)\n        throws InterruptedException, ExecutionException, TimeoutException {\n        if (unit == null)\n            throw new NullPointerException();\n        int s = state;\n        if (s <= COMPLETING &&\n            (s = awaitDone(true, unit.toNanos(timeout))) <= COMPLETING)\n            throw new TimeoutException();\n        return report(s);\n    }"}
{"Number":"963","API Relative Path":"java.util.concurrent.LinkedBlockingDeque.java-drainTo(Collection-int)","Corresponding Source":"/**\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     */\n    public int drainTo(Collection<? super E> c, int maxElements) {\n        if (c == null)\n            throw new NullPointerException();\n        if (c == this)\n            throw new IllegalArgumentException();\n        if (maxElements <= 0)\n            return 0;\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            int n = Math.min(maxElements, count);\n            for (int i = 0; i < n; i++) {\n                c.add(first.item);   // In this order, in case add() throws.\n                unlinkFirst();\n            }\n            return n;\n        } finally {\n            lock.unlock();\n        }\n    }"}
{"Number":"964","API Relative Path":"java.util.concurrent.LinkedBlockingDeque.java-drainTo(Collection-int)","Corresponding Source":"/**\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     */\n    public int drainTo(Collection<? super E> c, int maxElements) {\n        if (c == null)\n            throw new NullPointerException();\n        if (c == this)\n            throw new IllegalArgumentException();\n        if (maxElements <= 0)\n            return 0;\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            int n = Math.min(maxElements, count);\n            for (int i = 0; i < n; i++) {\n                c.add(first.item);   // In this order, in case add() throws.\n                unlinkFirst();\n            }\n            return n;\n        } finally {\n            lock.unlock();\n        }\n    }"}
{"Number":"965","API Relative Path":"java.util.concurrent.LinkedBlockingDeque.java-LinkedBlockingDeque(int)","Corresponding Source":"/**\n     * Creates a {@code LinkedBlockingDeque} with the given (fixed) capacity.\n     *\n     * @param capacity the capacity of this deque\n     * @throws IllegalArgumentException if {@code capacity} is less than 1\n     */\n    public LinkedBlockingDeque(int capacity) {\n        if (capacity <= 0) throw new IllegalArgumentException();\n        this.capacity = capacity;\n    }"}
{"Number":"966","API Relative Path":"java.util.concurrent.LinkedBlockingDeque.java-offer(E-long-TimeUnit)","Corresponding Source":"/**\n     * @throws NullPointerException {@inheritDoc}\n     * @throws InterruptedException {@inheritDoc}\n     */\n    public boolean offer(E e, long timeout, TimeUnit unit)\n        throws InterruptedException {\n        return offerLast(e, timeout, unit);\n    }"}
{"Number":"967","API Relative Path":"java.util.concurrent.LinkedBlockingDeque.java-offerFirst(E)","Corresponding Source":"/**\n     * @throws NullPointerException {@inheritDoc}\n     */\n    public boolean offerFirst(E e) {\n        if (e == null) throw new NullPointerException();\n        Node<E> node = new Node<E>(e);\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            return linkFirst(node);\n        } finally {\n            lock.unlock();\n        }\n    }"}
{"Number":"968","API Relative Path":"java.util.concurrent.LinkedBlockingDeque.java-offerFirst(E-long-TimeUnit)","Corresponding Source":"/**\n     * @throws NullPointerException {@inheritDoc}\n     * @throws InterruptedException {@inheritDoc}\n     */\n    public boolean offerFirst(E e, long timeout, TimeUnit unit)\n        throws InterruptedException {\n        if (e == null) throw new NullPointerException();\n        Node<E> node = new Node<E>(e);\n        long nanos = unit.toNanos(timeout);\n        final ReentrantLock lock = this.lock;\n        lock.lockInterruptibly();\n        try {\n            while (!linkFirst(node)) {\n                if (nanos <= 0)\n                    return false;\n                nanos = notFull.awaitNanos(nanos);\n            }\n            return true;\n        } finally {\n            lock.unlock();\n        }\n    }"}
{"Number":"969","API Relative Path":"java.util.concurrent.LinkedBlockingDeque.java-offerLast(E)","Corresponding Source":"/**\n     * @throws NullPointerException {@inheritDoc}\n     */\n    public boolean offerLast(E e) {\n        if (e == null) throw new NullPointerException();\n        Node<E> node = new Node<E>(e);\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            return linkLast(node);\n        } finally {\n            lock.unlock();\n        }\n    }"}
{"Number":"970","API Relative Path":"java.util.concurrent.LinkedBlockingDeque.java-offerLast(E-long-TimeUnit)","Corresponding Source":"/**\n     * @throws NullPointerException {@inheritDoc}\n     * @throws InterruptedException {@inheritDoc}\n     */\n    public boolean offerLast(E e, long timeout, TimeUnit unit)\n        throws InterruptedException {\n        if (e == null) throw new NullPointerException();\n        Node<E> node = new Node<E>(e);\n        long nanos = unit.toNanos(timeout);\n        final ReentrantLock lock = this.lock;\n        lock.lockInterruptibly();\n        try {\n            while (!linkLast(node)) {\n                if (nanos <= 0)\n                    return false;\n                nanos = notFull.awaitNanos(nanos);\n            }\n            return true;\n        } finally {\n            lock.unlock();\n        }\n    }"}
{"Number":"971","API Relative Path":"java.util.concurrent.LinkedBlockingDeque.java-put(E)","Corresponding Source":"/**\n     * @throws NullPointerException {@inheritDoc}\n     * @throws InterruptedException {@inheritDoc}\n     */\n    public void put(E e) throws InterruptedException {\n        putLast(e);\n    }"}
{"Number":"972","API Relative Path":"java.util.concurrent.LinkedBlockingDeque.java-putFirst(E)","Corresponding Source":"/**\n     * @throws NullPointerException {@inheritDoc}\n     * @throws InterruptedException {@inheritDoc}\n     */\n    public void putFirst(E e) throws InterruptedException {\n        if (e == null) throw new NullPointerException();\n        Node<E> node = new Node<E>(e);\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            while (!linkFirst(node))\n                notFull.await();\n        } finally {\n            lock.unlock();\n        }\n    }"}
{"Number":"973","API Relative Path":"java.util.concurrent.LinkedBlockingDeque.java-putLast(E)","Corresponding Source":"/**\n     * @throws NullPointerException {@inheritDoc}\n     * @throws InterruptedException {@inheritDoc}\n     */\n    public void putLast(E e) throws InterruptedException {\n        if (e == null) throw new NullPointerException();\n        Node<E> node = new Node<E>(e);\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            while (!linkLast(node))\n                notFull.await();\n        } finally {\n            lock.unlock();\n        }\n    }"}
{"Number":"974","API Relative Path":"java.util.concurrent.LinkedBlockingQueue.java-drainTo(Collection-int)","Corresponding Source":"/**\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     */\n    public int drainTo(Collection<? super E> c, int maxElements) {\n        if (c == null)\n            throw new NullPointerException();\n        if (c == this)\n            throw new IllegalArgumentException();\n        if (maxElements <= 0)\n            return 0;\n        boolean signalNotFull = false;\n        final ReentrantLock takeLock = this.takeLock;\n        takeLock.lock();\n        try {\n            int n = Math.min(maxElements, count.get());\n            // count.get provides visibility to first n Nodes\n            Node<E> h = head;\n            int i = 0;\n            try {\n                while (i < n) {\n                    Node<E> p = h.next;\n                    c.add(p.item);\n                    p.item = null;\n                    h.next = h;\n                    h = p;\n                    ++i;\n                }\n                return n;\n            } finally {\n                // Restore invariants even if c.add() threw\n                if (i > 0) {\n                    // assert h.item == null;\n                    head = h;\n                    signalNotFull = (count.getAndAdd(-i) == capacity);\n                }\n            }\n        } finally {\n            takeLock.unlock();\n            if (signalNotFull)\n                signalNotFull();\n        }\n    }"}
{"Number":"975","API Relative Path":"java.util.concurrent.LinkedBlockingQueue.java-drainTo(Collection-int)","Corresponding Source":"/**\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     */\n    public int drainTo(Collection<? super E> c, int maxElements) {\n        if (c == null)\n            throw new NullPointerException();\n        if (c == this)\n            throw new IllegalArgumentException();\n        if (maxElements <= 0)\n            return 0;\n        boolean signalNotFull = false;\n        final ReentrantLock takeLock = this.takeLock;\n        takeLock.lock();\n        try {\n            int n = Math.min(maxElements, count.get());\n            // count.get provides visibility to first n Nodes\n            Node<E> h = head;\n            int i = 0;\n            try {\n                while (i < n) {\n                    Node<E> p = h.next;\n                    c.add(p.item);\n                    p.item = null;\n                    h.next = h;\n                    h = p;\n                    ++i;\n                }\n                return n;\n            } finally {\n                // Restore invariants even if c.add() threw\n                if (i > 0) {\n                    // assert h.item == null;\n                    head = h;\n                    signalNotFull = (count.getAndAdd(-i) == capacity);\n                }\n            }\n        } finally {\n            takeLock.unlock();\n            if (signalNotFull)\n                signalNotFull();\n        }\n    }"}
{"Number":"976","API Relative Path":"java.util.concurrent.LinkedBlockingQueue.java-offer(E-long-TimeUnit)","Corresponding Source":"/**\n     * Inserts the specified element at the tail of this queue, waiting if\n     * necessary up to the specified wait time for space to become available.\n     *\n     * @return {@code true} if successful, or {@code false} if\n     *         the specified waiting time elapses before space is available\n     * @throws InterruptedException {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     */\n    public boolean offer(E e, long timeout, TimeUnit unit)\n        throws InterruptedException {\n\n        if (e == null) throw new NullPointerException();\n        long nanos = unit.toNanos(timeout);\n        int c = -1;\n        final ReentrantLock putLock = this.putLock;\n        final AtomicInteger count = this.count;\n        putLock.lockInterruptibly();\n        try {\n            while (count.get() == capacity) {\n                if (nanos <= 0)\n                    return false;\n                nanos = notFull.awaitNanos(nanos);\n            }\n            enqueue(new Node<E>(e));\n            c = count.getAndIncrement();\n            if (c + 1 < capacity)\n                notFull.signal();\n        } finally {\n            putLock.unlock();\n        }\n        if (c == 0)\n            signalNotEmpty();\n        return true;\n    }"}
{"Number":"977","API Relative Path":"java.util.concurrent.LinkedBlockingQueue.java-put(E)","Corresponding Source":"/**\n     * Inserts the specified element at the tail of this queue, waiting if\n     * necessary for space to become available.\n     *\n     * @throws InterruptedException {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     */\n    public void put(E e) throws InterruptedException {\n        if (e == null) throw new NullPointerException();\n        // Note: convention in all put/take/etc is to preset local var\n        // holding count negative to indicate failure unless set.\n        int c = -1;\n        Node<E> node = new Node<E>(e);\n        final ReentrantLock putLock = this.putLock;\n        final AtomicInteger count = this.count;\n        putLock.lockInterruptibly();\n        try {\n            /*\n             * Note that count is used in wait guard even though it is\n             * not protected by lock. This works because count can\n             * only decrease at this point (all other puts are shut\n             * out by lock), and we (or some other waiting put) are\n             * signalled if it ever changes from capacity. Similarly\n             * for all other uses of count in other wait guards.\n             */\n            while (count.get() == capacity) {\n                notFull.await();\n            }\n            enqueue(node);\n            c = count.getAndIncrement();\n            if (c + 1 < capacity)\n                notFull.signal();\n        } finally {\n            putLock.unlock();\n        }\n        if (c == 0)\n            signalNotEmpty();\n    }"}
{"Number":"978","API Relative Path":"java.util.concurrent.LinkedTransferQueue.java-drainTo(Collection)","Corresponding Source":"/**\n     * @throws NullPointerException     {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     */\n    public int drainTo(Collection<? super E> c) {\n        if (c == null)\n            throw new NullPointerException();\n        if (c == this)\n            throw new IllegalArgumentException();\n        int n = 0;\n        for (E e; (e = poll()) != null;) {\n            c.add(e);\n            ++n;\n        }\n        return n;\n    }"}
{"Number":"979","API Relative Path":"java.util.concurrent.LinkedTransferQueue.java-drainTo(Collection)","Corresponding Source":"/**\n     * @throws NullPointerException     {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     */\n    public int drainTo(Collection<? super E> c) {\n        if (c == null)\n            throw new NullPointerException();\n        if (c == this)\n            throw new IllegalArgumentException();\n        int n = 0;\n        for (E e; (e = poll()) != null;) {\n            c.add(e);\n            ++n;\n        }\n        return n;\n    }"}
{"Number":"980","API Relative Path":"java.util.concurrent.LinkedTransferQueue.java-drainTo(Collection-int)","Corresponding Source":"/**\n     * @throws NullPointerException     {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     */\n    public int drainTo(Collection<? super E> c, int maxElements) {\n        if (c == null)\n            throw new NullPointerException();\n        if (c == this)\n            throw new IllegalArgumentException();\n        int n = 0;\n        for (E e; n < maxElements && (e = poll()) != null;) {\n            c.add(e);\n            ++n;\n        }\n        return n;\n    }"}
{"Number":"981","API Relative Path":"java.util.concurrent.LinkedTransferQueue.java-drainTo(Collection-int)","Corresponding Source":"/**\n     * @throws NullPointerException     {@inheritDoc}\n     * @throws IllegalArgumentException {@inheritDoc}\n     */\n    public int drainTo(Collection<? super E> c, int maxElements) {\n        if (c == null)\n            throw new NullPointerException();\n        if (c == this)\n            throw new IllegalArgumentException();\n        int n = 0;\n        for (E e; n < maxElements && (e = poll()) != null;) {\n            c.add(e);\n            ++n;\n        }\n        return n;\n    }"}
{"Number":"982","API Relative Path":"java.util.concurrent.LinkedTransferQueue.java-LinkedTransferQueue(Collection)","Corresponding Source":"/**\n     * Creates a {@code LinkedTransferQueue}\n     * initially containing the elements of the given collection,\n     * added in traversal order of the collection's iterator.\n     *\n     * @param c the collection of elements to initially contain\n     * @throws NullPointerException if the specified collection or any\n     *         of its elements are null\n     */\n    public LinkedTransferQueue(Collection<? extends E> c) {\n        this();\n        addAll(c);\n    }"}
{"Number":"983","API Relative Path":"java.util.concurrent.LinkedTransferQueue.java-LinkedTransferQueue(Collection)","Corresponding Source":"/**\n     * Creates a {@code LinkedTransferQueue}\n     * initially containing the elements of the given collection,\n     * added in traversal order of the collection's iterator.\n     *\n     * @param c the collection of elements to initially contain\n     * @throws NullPointerException if the specified collection or any\n     *         of its elements are null\n     */\n    public LinkedTransferQueue(Collection<? extends E> c) {\n        this();\n        addAll(c);\n    }"}
{"Number":"984","API Relative Path":"java.util.concurrent.LinkedTransferQueue.java-unsplice(Node-Node)","Corresponding Source":"/* -------------- Removal methods -------------- */\n\n    /**\n     * Unsplices (now or later) the given deleted/cancelled node with\n     * the given predecessor.\n     *\n     * @param pred a node that was at one time known to be the\n     * predecessor of s, or null or s itself if s is/was at head\n     * @param s the node to be unspliced\n     */\n    final void unsplice(Node pred, Node s) {\n        s.forgetContents(); // forget unneeded fields\n        /*\n         * See above for rationale. Briefly: if pred still points to\n         * s, try to unlink s.  If s cannot be unlinked, because it is\n         * trailing node or pred might be unlinked, and neither pred\n         * nor s are head or offlist, add to sweepVotes, and if enough\n         * votes have accumulated, sweep.\n         */\n        if (pred != null && pred != s && pred.next == s) {\n            Node n = s.next;\n            if (n == null ||\n                (n != s && pred.casNext(s, n) && pred.isMatched())) {\n                for (;;) {               // check if at, or could be, head\n                    Node h = head;\n                    if (h == pred || h == s || h == null)\n                        return;          // at head or list empty\n                    if (!h.isMatched())\n                        break;\n                    Node hn = h.next;\n                    if (hn == null)\n                        return;          // now empty\n                    if (hn != h && casHead(h, hn))\n                        h.forgetNext();  // advance head\n                }\n                if (pred.next != pred && s.next != s) { // recheck if offlist\n                    for (;;) {           // sweep now if enough votes\n                        int v = sweepVotes;\n                        if (v < SWEEP_THRESHOLD) {\n                            if (casSweepVotes(v, v + 1))\n                                break;\n                        }\n                        else if (casSweepVotes(v, 0)) {\n                            sweep();\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }"}
{"Number":"985","API Relative Path":"java.util.concurrent.locks.AbstractQueuedLongSynchronizer.java-acquireQueued(Node-long)","Corresponding Source":"/*\n     * Various flavors of acquire, varying in exclusive/shared and\n     * control modes.  Each is mostly the same, but annoyingly\n     * different.  Only a little bit of factoring is possible due to\n     * interactions of exception mechanics (including ensuring that we\n     * cancel if tryAcquire throws exception) and other control, at\n     * least not without hurting performance too much.\n     */\n\n    /**\n     * Acquires in exclusive uninterruptible mode for thread already in\n     * queue. Used by condition wait methods as well as acquire.\n     *\n     * @param node the node\n     * @param arg the acquire argument\n     * @return {@code true} if interrupted while waiting\n     */\n    final boolean acquireQueued(final Node node, long arg) {\n        boolean failed = true;\n        try {\n            boolean interrupted = false;\n            for (;;) {\n                final Node p = node.predecessor();\n                if (p == head && tryAcquire(arg)) {\n                    setHead(node);\n                    p.next = null; // help GC\n                    failed = false;\n                    return interrupted;\n                }\n                if (shouldParkAfterFailedAcquire(p, node) &&\n                    parkAndCheckInterrupt())\n                    interrupted = true;\n            }\n        } finally {\n            if (failed)\n                cancelAcquire(node);\n        }\n    }"}
{"Number":"986","API Relative Path":"java.util.concurrent.locks.AbstractQueuedSynchronizer.java-acquireQueued(Node-int)","Corresponding Source":"/*\n     * Various flavors of acquire, varying in exclusive/shared and\n     * control modes.  Each is mostly the same, but annoyingly\n     * different.  Only a little bit of factoring is possible due to\n     * interactions of exception mechanics (including ensuring that we\n     * cancel if tryAcquire throws exception) and other control, at\n     * least not without hurting performance too much.\n     */\n\n    /**\n     * Acquires in exclusive uninterruptible mode for thread already in\n     * queue. Used by condition wait methods as well as acquire.\n     *\n     * @param node the node\n     * @param arg the acquire argument\n     * @return {@code true} if interrupted while waiting\n     */\n    final boolean acquireQueued(final Node node, int arg) {\n        boolean failed = true;\n        try {\n            boolean interrupted = false;\n            for (;;) {\n                final Node p = node.predecessor();\n                if (p == head && tryAcquire(arg)) {\n                    setHead(node);\n                    p.next = null; // help GC\n                    failed = false;\n                    return interrupted;\n                }\n                if (shouldParkAfterFailedAcquire(p, node) &&\n                    parkAndCheckInterrupt())\n                    interrupted = true;\n            }\n        } finally {\n            if (failed)\n                cancelAcquire(node);\n        }\n    }"}
{"Number":"987","API Relative Path":"java.util.concurrent.locks.LockSupport.java-getBlocker(Thread)","Corresponding Source":"/**\n     * Returns the blocker object supplied to the most recent\n     * invocation of a park method that has not yet unblocked, or null\n     * if not blocked.  The value returned is just a momentary\n     * snapshot -- the thread may have since unblocked or blocked on a\n     * different blocker object.\n     *\n     * @param t the thread\n     * @return the blocker\n     * @throws NullPointerException if argument is null\n     * @since 1.6\n     */\n    public static Object getBlocker(Thread t) {\n        if (t == null)\n            throw new NullPointerException();\n        return UNSAFE.getObjectVolatile(t, parkBlockerOffset);\n    }"}
{"Number":"988","API Relative Path":"java.util.concurrent.locks.LockSupport.java-unpark(Thread)","Corresponding Source":"/**\n     * Makes available the permit for the given thread, if it\n     * was not already available.  If the thread was blocked on\n     * {@code park} then it will unblock.  Otherwise, its next call\n     * to {@code park} is guaranteed not to block. This operation\n     * is not guaranteed to have any effect at all if the given\n     * thread has not been started.\n     *\n     * @param thread the thread to unpark, or {@code null}, in which case\n     *        this operation has no effect\n     */\n    public static void unpark(Thread thread) {\n        if (thread != null)\n            UNSAFE.unpark(thread);\n    }"}
{"Number":"989","API Relative Path":"java.util.concurrent.locks.ReentrantLock.java-getWaitingThreads(Condition)","Corresponding Source":"/**\n     * Returns a collection containing those threads that may be\n     * waiting on the given condition associated with this lock.\n     * Because the actual set of threads may change dynamically while\n     * constructing this result, the returned collection is only a\n     * best-effort estimate. The elements of the returned collection\n     * are in no particular order.  This method is designed to\n     * facilitate construction of subclasses that provide more\n     * extensive condition monitoring facilities.\n     *\n     * @param condition the condition\n     * @return the collection of threads\n     * @throws IllegalMonitorStateException if this lock is not held\n     * @throws IllegalArgumentException if the given condition is\n     *         not associated with this lock\n     * @throws NullPointerException if the condition is null\n     */\n    protected Collection<Thread> getWaitingThreads(Condition condition) {\n        if (condition == null)\n            throw new NullPointerException();\n        if (!(condition instanceof AbstractQueuedSynchronizer.ConditionObject))\n            throw new IllegalArgumentException(\"not owner\");\n        return sync.getWaitingThreads((AbstractQueuedSynchronizer.ConditionObject)condition);\n    }"}
{"Number":"990","API Relative Path":"java.util.concurrent.locks.ReentrantLock.java-getWaitQueueLength(Condition)","Corresponding Source":"/**\n     * Returns an estimate of the number of threads waiting on the\n     * given condition associated with this lock. Note that because\n     * timeouts and interrupts may occur at any time, the estimate\n     * serves only as an upper bound on the actual number of waiters.\n     * This method is designed for use in monitoring of the system\n     * state, not for synchronization control.\n     *\n     * @param condition the condition\n     * @return the estimated number of waiting threads\n     * @throws IllegalMonitorStateException if this lock is not held\n     * @throws IllegalArgumentException if the given condition is\n     *         not associated with this lock\n     * @throws NullPointerException if the condition is null\n     */\n    public int getWaitQueueLength(Condition condition) {\n        if (condition == null)\n            throw new NullPointerException();\n        if (!(condition instanceof AbstractQueuedSynchronizer.ConditionObject))\n            throw new IllegalArgumentException(\"not owner\");\n        return sync.getWaitQueueLength((AbstractQueuedSynchronizer.ConditionObject)condition);\n    }"}
{"Number":"991","API Relative Path":"java.util.concurrent.locks.ReentrantLock.java-hasWaiters(Condition)","Corresponding Source":"/**\n     * Queries whether any threads are waiting on the given condition\n     * associated with this lock. Note that because timeouts and\n     * interrupts may occur at any time, a {@code true} return does\n     * not guarantee that a future {@code signal} will awaken any\n     * threads.  This method is designed primarily for use in\n     * monitoring of the system state.\n     *\n     * @param condition the condition\n     * @return {@code true} if there are any waiting threads\n     * @throws IllegalMonitorStateException if this lock is not held\n     * @throws IllegalArgumentException if the given condition is\n     *         not associated with this lock\n     * @throws NullPointerException if the condition is null\n     */\n    public boolean hasWaiters(Condition condition) {\n        if (condition == null)\n            throw new NullPointerException();\n        if (!(condition instanceof AbstractQueuedSynchronizer.ConditionObject))\n            throw new IllegalArgumentException(\"not owner\");\n        return sync.hasWaiters((AbstractQueuedSynchronizer.ConditionObject)condition);\n    }"}
{"Number":"992","API Relative Path":"java.util.concurrent.locks.ReentrantReadWriteLock.java-getWaitingThreads(Condition)","Corresponding Source":"/**\n     * Returns a collection containing those threads that may be\n     * waiting on the given condition associated with the write lock.\n     * Because the actual set of threads may change dynamically while\n     * constructing this result, the returned collection is only a\n     * best-effort estimate. The elements of the returned collection\n     * are in no particular order.  This method is designed to\n     * facilitate construction of subclasses that provide more\n     * extensive condition monitoring facilities.\n     *\n     * @param condition the condition\n     * @return the collection of threads\n     * @throws IllegalMonitorStateException if this lock is not held\n     * @throws IllegalArgumentException if the given condition is\n     *         not associated with this lock\n     * @throws NullPointerException if the condition is null\n     */\n    protected Collection<Thread> getWaitingThreads(Condition condition) {\n        if (condition == null)\n            throw new NullPointerException();\n        if (!(condition instanceof AbstractQueuedSynchronizer.ConditionObject))\n            throw new IllegalArgumentException(\"not owner\");\n        return sync.getWaitingThreads((AbstractQueuedSynchronizer.ConditionObject)condition);\n    }"}
{"Number":"993","API Relative Path":"java.util.concurrent.locks.ReentrantReadWriteLock.java-getWaitQueueLength(Condition)","Corresponding Source":"/**\n     * Returns an estimate of the number of threads waiting on the\n     * given condition associated with the write lock. Note that because\n     * timeouts and interrupts may occur at any time, the estimate\n     * serves only as an upper bound on the actual number of waiters.\n     * This method is designed for use in monitoring of the system\n     * state, not for synchronization control.\n     *\n     * @param condition the condition\n     * @return the estimated number of waiting threads\n     * @throws IllegalMonitorStateException if this lock is not held\n     * @throws IllegalArgumentException if the given condition is\n     *         not associated with this lock\n     * @throws NullPointerException if the condition is null\n     */\n    public int getWaitQueueLength(Condition condition) {\n        if (condition == null)\n            throw new NullPointerException();\n        if (!(condition instanceof AbstractQueuedSynchronizer.ConditionObject))\n            throw new IllegalArgumentException(\"not owner\");\n        return sync.getWaitQueueLength((AbstractQueuedSynchronizer.ConditionObject)condition);\n    }"}
{"Number":"994","API Relative Path":"java.util.concurrent.locks.ReentrantReadWriteLock.java-hasWaiters(Condition)","Corresponding Source":"/**\n     * Queries whether any threads are waiting on the given condition\n     * associated with the write lock. Note that because timeouts and\n     * interrupts may occur at any time, a {@code true} return does\n     * not guarantee that a future {@code signal} will awaken any\n     * threads.  This method is designed primarily for use in\n     * monitoring of the system state.\n     *\n     * @param condition the condition\n     * @return {@code true} if there are any waiting threads\n     * @throws IllegalMonitorStateException if this lock is not held\n     * @throws IllegalArgumentException if the given condition is\n     *         not associated with this lock\n     * @throws NullPointerException if the condition is null\n     */\n    public boolean hasWaiters(Condition condition) {\n        if (condition == null)\n            throw new NullPointerException();\n        if (!(condition instanceof AbstractQueuedSynchronizer.ConditionObject))\n            throw new IllegalArgumentException(\"not owner\");\n        return sync.hasWaiters((AbstractQueuedSynchronizer.ConditionObject)condition);\n    }"}
{"Number":"995","API Relative Path":"java.util.concurrent.locks.StampedLock.java-unlockRead(long)","Corresponding Source":"/**\n     * If the lock state matches the given stamp, releases the\n     * non-exclusive lock.\n     *\n     * @param stamp a stamp returned by a read-lock operation\n     * @throws IllegalMonitorStateException if the stamp does\n     * not match the current state of this lock\n     */\n    public void unlockRead(long stamp) {\n        long s, m; WNode h;\n        for (;;) {\n            if (((s = state) & SBITS) != (stamp & SBITS) ||\n                (stamp & ABITS) == 0L || (m = s & ABITS) == 0L || m == WBIT)\n                throw new IllegalMonitorStateException();\n            if (m < RFULL) {\n                if (U.compareAndSwapLong(this, STATE, s, s - RUNIT)) {\n                    if (m == RUNIT && (h = whead) != null && h.status != 0)\n                        release(h);\n                    break;\n                }\n            }\n            else if (tryDecReaderOverflow(s) != 0L)\n                break;\n        }\n    }"}
{"Number":"996","API Relative Path":"java.util.concurrent.locks.StampedLock.java-unlockWrite(long)","Corresponding Source":"/**\n     * If the lock state matches the given stamp, releases the\n     * exclusive lock.\n     *\n     * @param stamp a stamp returned by a write-lock operation\n     * @throws IllegalMonitorStateException if the stamp does\n     * not match the current state of this lock\n     */\n    public void unlockWrite(long stamp) {\n        WNode h;\n        if (state != stamp || (stamp & WBIT) == 0L)\n            throw new IllegalMonitorStateException();\n        state = (stamp += WBIT) == 0L ? ORIGIN : stamp;\n        if ((h = whead) != null && h.status != 0)\n            release(h);\n    }"}
{"Number":"997","API Relative Path":"java.util.concurrent.Phaser.java-awaitAdvanceInterruptibly(int)","Corresponding Source":"/**\n     * Awaits the phase of this phaser to advance from the given phase\n     * value, throwing {@code InterruptedException} if interrupted\n     * while waiting, or returning immediately if the current phase is\n     * not equal to the given phase value or this phaser is\n     * terminated.\n     *\n     * @param phase an arrival phase number, or negative value if\n     * terminated; this argument is normally the value returned by a\n     * previous call to {@code arrive} or {@code arriveAndDeregister}.\n     * @return the next arrival phase number, or the argument if it is\n     * negative, or the (negative) {@linkplain #getPhase() current phase}\n     * if terminated\n     * @throws InterruptedException if thread interrupted while waiting\n     */\n    public int awaitAdvanceInterruptibly(int phase)\n        throws InterruptedException {\n        final Phaser root = this.root;\n        long s = (root == this) ? state : reconcileState();\n        int p = (int)(s >>> PHASE_SHIFT);\n        if (phase < 0)\n            return phase;\n        if (p == phase) {\n            QNode node = new QNode(this, phase, true, false, 0L);\n            p = root.internalAwaitAdvance(phase, node);\n            if (node.wasInterrupted)\n                throw new InterruptedException();\n        }\n        return p;\n    }"}
{"Number":"998","API Relative Path":"java.util.concurrent.Phaser.java-awaitAdvanceInterruptibly(int-long-TimeUnit)","Corresponding Source":"/**\n     * Awaits the phase of this phaser to advance from the given phase\n     * value or the given timeout to elapse, throwing {@code\n     * InterruptedException} if interrupted while waiting, or\n     * returning immediately if the current phase is not equal to the\n     * given phase value or this phaser is terminated.\n     *\n     * @param phase an arrival phase number, or negative value if\n     * terminated; this argument is normally the value returned by a\n     * previous call to {@code arrive} or {@code arriveAndDeregister}.\n     * @param timeout how long to wait before giving up, in units of\n     *        {@code unit}\n     * @param unit a {@code TimeUnit} determining how to interpret the\n     *        {@code timeout} parameter\n     * @return the next arrival phase number, or the argument if it is\n     * negative, or the (negative) {@linkplain #getPhase() current phase}\n     * if terminated\n     * @throws InterruptedException if thread interrupted while waiting\n     * @throws TimeoutException if timed out while waiting\n     */\n    public int awaitAdvanceInterruptibly(int phase,\n                                         long timeout, TimeUnit unit)\n        throws InterruptedException, TimeoutException {\n        long nanos = unit.toNanos(timeout);\n        final Phaser root = this.root;\n        long s = (root == this) ? state : reconcileState();\n        int p = (int)(s >>> PHASE_SHIFT);\n        if (phase < 0)\n            return phase;\n        if (p == phase) {\n            QNode node = new QNode(this, phase, true, true, nanos);\n            p = root.internalAwaitAdvance(phase, node);\n            if (node.wasInterrupted)\n                throw new InterruptedException();\n            else if (p == phase)\n                throw new TimeoutException();\n        }\n        return p;\n    }"}
{"Number":"999","API Relative Path":"java.util.concurrent.Phaser.java-awaitAdvanceInterruptibly(int-long-TimeUnit)","Corresponding Source":"/**\n     * Awaits the phase of this phaser to advance from the given phase\n     * value or the given timeout to elapse, throwing {@code\n     * InterruptedException} if interrupted while waiting, or\n     * returning immediately if the current phase is not equal to the\n     * given phase value or this phaser is terminated.\n     *\n     * @param phase an arrival phase number, or negative value if\n     * terminated; this argument is normally the value returned by a\n     * previous call to {@code arrive} or {@code arriveAndDeregister}.\n     * @param timeout how long to wait before giving up, in units of\n     *        {@code unit}\n     * @param unit a {@code TimeUnit} determining how to interpret the\n     *        {@code timeout} parameter\n     * @return the next arrival phase number, or the argument if it is\n     * negative, or the (negative) {@linkplain #getPhase() current phase}\n     * if terminated\n     * @throws InterruptedException if thread interrupted while waiting\n     * @throws TimeoutException if timed out while waiting\n     */\n    public int awaitAdvanceInterruptibly(int phase,\n                                         long timeout, TimeUnit unit)\n        throws InterruptedException, TimeoutException {\n        long nanos = unit.toNanos(timeout);\n        final Phaser root = this.root;\n        long s = (root == this) ? state : reconcileState();\n        int p = (int)(s >>> PHASE_SHIFT);\n        if (phase < 0)\n            return phase;\n        if (p == phase) {\n            QNode node = new QNode(this, phase, true, true, nanos);\n            p = root.internalAwaitAdvance(phase, node);\n            if (node.wasInterrupted)\n                throw new InterruptedException();\n            else if (p == phase)\n                throw new TimeoutException();\n        }\n        return p;\n    }"}
{"Number":"1000","API Relative Path":"java.util.concurrent.Phaser.java-bulkRegister(int)","Corresponding Source":"/**\n     * Adds the given number of new unarrived parties to this phaser.\n     * If an ongoing invocation of {@link #onAdvance} is in progress,\n     * this method may await its completion before returning.  If this\n     * phaser has a parent, and the given number of parties is greater\n     * than zero, and this phaser previously had no registered\n     * parties, this child phaser is also registered with its parent.\n     * If this phaser is terminated, the attempt to register has no\n     * effect, and a negative value is returned.\n     *\n     * @param parties the number of additional parties required to\n     * advance to the next phase\n     * @return the arrival phase number to which this registration\n     * applied.  If this value is negative, then this phaser has\n     * terminated, in which case registration has no effect.\n     * @throws IllegalStateException if attempting to register more\n     * than the maximum supported number of parties\n     * @throws IllegalArgumentException if {@code parties < 0}\n     */\n    public int bulkRegister(int parties) {\n        if (parties < 0)\n            throw new IllegalArgumentException();\n        if (parties == 0)\n            return getPhase();\n        return doRegister(parties);\n    }"}
{"Number":"1001","API Relative Path":"java.util.concurrent.Phaser.java-Phaser(Phaser-int)","Corresponding Source":"/**\n     * Creates a new phaser with the given parent and number of\n     * registered unarrived parties.  When the given parent is non-null\n     * and the given number of parties is greater than zero, this\n     * child phaser is registered with its parent.\n     *\n     * @param parent the parent phaser\n     * @param parties the number of parties required to advance to the\n     * next phase\n     * @throws IllegalArgumentException if parties less than zero\n     * or greater than the maximum number of parties supported\n     */\n    public Phaser(Phaser parent, int parties) {\n        if (parties >>> PARTIES_SHIFT != 0)\n            throw new IllegalArgumentException(\"Illegal number of parties\");\n        int phase = 0;\n        this.parent = parent;\n        if (parent != null) {\n            final Phaser root = parent.root;\n            this.root = root;\n            this.evenQ = root.evenQ;\n            this.oddQ = root.oddQ;\n            if (parties != 0)\n                phase = parent.doRegister(1);\n        }\n        else {\n            this.root = this;\n            this.evenQ = new AtomicReference<QNode>();\n            this.oddQ = new AtomicReference<QNode>();\n        }\n        this.state = (parties == 0) ? (long)EMPTY :\n            ((long)phase << PHASE_SHIFT) |\n            ((long)parties << PARTIES_SHIFT) |\n            ((long)parties);\n    }"}
{"Number":"1002","API Relative Path":"java.util.concurrent.PriorityBlockingQueue.java-drainTo(Collection-int)","Corresponding Source":"/**\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     */\n    public int drainTo(Collection<? super E> c, int maxElements) {\n        if (c == null)\n            throw new NullPointerException();\n        if (c == this)\n            throw new IllegalArgumentException();\n        if (maxElements <= 0)\n            return 0;\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            int n = Math.min(size, maxElements);\n            for (int i = 0; i < n; i++) {\n                c.add((E) queue[0]); // In this order, in case add() throws.\n                dequeue();\n            }\n            return n;\n        } finally {\n            lock.unlock();\n        }\n    }"}
{"Number":"1003","API Relative Path":"java.util.concurrent.PriorityBlockingQueue.java-drainTo(Collection-int)","Corresponding Source":"/**\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     */\n    public int drainTo(Collection<? super E> c, int maxElements) {\n        if (c == null)\n            throw new NullPointerException();\n        if (c == this)\n            throw new IllegalArgumentException();\n        if (maxElements <= 0)\n            return 0;\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            int n = Math.min(size, maxElements);\n            for (int i = 0; i < n; i++) {\n                c.add((E) queue[0]); // In this order, in case add() throws.\n                dequeue();\n            }\n            return n;\n        } finally {\n            lock.unlock();\n        }\n    }"}
{"Number":"1004","API Relative Path":"java.util.concurrent.ScheduledThreadPoolExecutor.java-execute(Runnable)","Corresponding Source":"/**\n     * Executes {@code command} with zero required delay.\n     * This has effect equivalent to\n     * {@link #schedule(Runnable,long,TimeUnit) schedule(command, 0, anyUnit)}.\n     * Note that inspections of the queue and of the list returned by\n     * {@code shutdownNow} will access the zero-delayed\n     * {@link ScheduledFuture}, not the {@code command} itself.\n     *\n     * <p>A consequence of the use of {@code ScheduledFuture} objects is\n     * that {@link ThreadPoolExecutor#afterExecute afterExecute} is always\n     * called with a null second {@code Throwable} argument, even if the\n     * {@code command} terminated abruptly.  Instead, the {@code Throwable}\n     * thrown by such a task can be obtained via {@link Future#get}.\n     *\n     * @throws RejectedExecutionException at discretion of\n     *         {@code RejectedExecutionHandler}, if the task\n     *         cannot be accepted for execution because the\n     *         executor has been shut down\n     * @throws NullPointerException {@inheritDoc}\n     */\n    public void execute(Runnable command) {\n        schedule(command, 0, NANOSECONDS);\n    }"}
{"Number":"1005","API Relative Path":"java.util.concurrent.ScheduledThreadPoolExecutor.java-schedule(Callable-long-TimeUnit)","Corresponding Source":"/**\n     * @throws RejectedExecutionException {@inheritDoc}\n     * @throws NullPointerException       {@inheritDoc}\n     */\n    public <V> ScheduledFuture<V> schedule(Callable<V> callable,\n                                           long delay,\n                                           TimeUnit unit) {\n        if (callable == null || unit == null)\n            throw new NullPointerException();\n        RunnableScheduledFuture<V> t = decorateTask(callable,\n            new ScheduledFutureTask<V>(callable,\n                                       triggerTime(delay, unit)));\n        delayedExecute(t);\n        return t;\n    }"}
{"Number":"1006","API Relative Path":"java.util.concurrent.ScheduledThreadPoolExecutor.java-schedule(Runnable-long-TimeUnit)","Corresponding Source":"/**\n     * @throws RejectedExecutionException {@inheritDoc}\n     * @throws NullPointerException       {@inheritDoc}\n     */\n    public ScheduledFuture<?> schedule(Runnable command,\n                                       long delay,\n                                       TimeUnit unit) {\n        if (command == null || unit == null)\n            throw new NullPointerException();\n        RunnableScheduledFuture<?> t = decorateTask(command,\n            new ScheduledFutureTask<Void>(command, null,\n                                          triggerTime(delay, unit)));\n        delayedExecute(t);\n        return t;\n    }"}
{"Number":"1007","API Relative Path":"java.util.concurrent.ScheduledThreadPoolExecutor.java-scheduleAtFixedRate(Runnable-long-long-TimeUnit)","Corresponding Source":"/**\n     * @throws RejectedExecutionException {@inheritDoc}\n     * @throws NullPointerException       {@inheritDoc}\n     * @throws IllegalArgumentException   {@inheritDoc}\n     */\n    public ScheduledFuture<?> scheduleAtFixedRate(Runnable command,\n                                                  long initialDelay,\n                                                  long period,\n                                                  TimeUnit unit) {\n        if (command == null || unit == null)\n            throw new NullPointerException();\n        if (period <= 0)\n            throw new IllegalArgumentException();\n        ScheduledFutureTask<Void> sft =\n            new ScheduledFutureTask<Void>(command,\n                                          null,\n                                          triggerTime(initialDelay, unit),\n                                          unit.toNanos(period));\n        RunnableScheduledFuture<Void> t = decorateTask(command, sft);\n        sft.outerTask = t;\n        delayedExecute(t);\n        return t;\n    }"}
{"Number":"1008","API Relative Path":"java.util.concurrent.ScheduledThreadPoolExecutor.java-scheduleAtFixedRate(Runnable-long-long-TimeUnit)","Corresponding Source":"/**\n     * @throws RejectedExecutionException {@inheritDoc}\n     * @throws NullPointerException       {@inheritDoc}\n     * @throws IllegalArgumentException   {@inheritDoc}\n     */\n    public ScheduledFuture<?> scheduleAtFixedRate(Runnable command,\n                                                  long initialDelay,\n                                                  long period,\n                                                  TimeUnit unit) {\n        if (command == null || unit == null)\n            throw new NullPointerException();\n        if (period <= 0)\n            throw new IllegalArgumentException();\n        ScheduledFutureTask<Void> sft =\n            new ScheduledFutureTask<Void>(command,\n                                          null,\n                                          triggerTime(initialDelay, unit),\n                                          unit.toNanos(period));\n        RunnableScheduledFuture<Void> t = decorateTask(command, sft);\n        sft.outerTask = t;\n        delayedExecute(t);\n        return t;\n    }"}
{"Number":"1009","API Relative Path":"java.util.concurrent.ScheduledThreadPoolExecutor.java-scheduleWithFixedDelay(Runnable-long-long-TimeUnit)","Corresponding Source":"/**\n     * @throws RejectedExecutionException {@inheritDoc}\n     * @throws NullPointerException       {@inheritDoc}\n     * @throws IllegalArgumentException   {@inheritDoc}\n     */\n    public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command,\n                                                     long initialDelay,\n                                                     long delay,\n                                                     TimeUnit unit) {\n        if (command == null || unit == null)\n            throw new NullPointerException();\n        if (delay <= 0)\n            throw new IllegalArgumentException();\n        ScheduledFutureTask<Void> sft =\n            new ScheduledFutureTask<Void>(command,\n                                          null,\n                                          triggerTime(initialDelay, unit),\n                                          unit.toNanos(-delay));\n        RunnableScheduledFuture<Void> t = decorateTask(command, sft);\n        sft.outerTask = t;\n        delayedExecute(t);\n        return t;\n    }"}
{"Number":"1010","API Relative Path":"java.util.concurrent.ScheduledThreadPoolExecutor.java-scheduleWithFixedDelay(Runnable-long-long-TimeUnit)","Corresponding Source":"/**\n     * @throws RejectedExecutionException {@inheritDoc}\n     * @throws NullPointerException       {@inheritDoc}\n     * @throws IllegalArgumentException   {@inheritDoc}\n     */\n    public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command,\n                                                     long initialDelay,\n                                                     long delay,\n                                                     TimeUnit unit) {\n        if (command == null || unit == null)\n            throw new NullPointerException();\n        if (delay <= 0)\n            throw new IllegalArgumentException();\n        ScheduledFutureTask<Void> sft =\n            new ScheduledFutureTask<Void>(command,\n                                          null,\n                                          triggerTime(initialDelay, unit),\n                                          unit.toNanos(-delay));\n        RunnableScheduledFuture<Void> t = decorateTask(command, sft);\n        sft.outerTask = t;\n        delayedExecute(t);\n        return t;\n    }"}
{"Number":"1011","API Relative Path":"java.util.concurrent.ScheduledThreadPoolExecutor.java-submit(Callable)","Corresponding Source":"/**\n     * @throws RejectedExecutionException {@inheritDoc}\n     * @throws NullPointerException       {@inheritDoc}\n     */\n    public <T> Future<T> submit(Callable<T> task) {\n        return schedule(task, 0, NANOSECONDS);\n    }"}
{"Number":"1012","API Relative Path":"java.util.concurrent.ScheduledThreadPoolExecutor.java-submit(Runnable)","Corresponding Source":"// Override AbstractExecutorService methods\n\n    /**\n     * @throws RejectedExecutionException {@inheritDoc}\n     * @throws NullPointerException       {@inheritDoc}\n     */\n    public Future<?> submit(Runnable task) {\n        return schedule(task, 0, NANOSECONDS);\n    }"}
{"Number":"1013","API Relative Path":"java.util.concurrent.ScheduledThreadPoolExecutor.java-submit(Runnable-T)","Corresponding Source":"/**\n     * @throws RejectedExecutionException {@inheritDoc}\n     * @throws NullPointerException       {@inheritDoc}\n     */\n    public <T> Future<T> submit(Runnable task, T result) {\n        return schedule(Executors.callable(task, result), 0, NANOSECONDS);\n    }"}
{"Number":"1014","API Relative Path":"java.util.concurrent.SynchronousQueue.java-drainTo(Collection)","Corresponding Source":"/**\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     */\n    public int drainTo(Collection<? super E> c) {\n        if (c == null)\n            throw new NullPointerException();\n        if (c == this)\n            throw new IllegalArgumentException();\n        int n = 0;\n        for (E e; (e = poll()) != null;) {\n            c.add(e);\n            ++n;\n        }\n        return n;\n    }"}
{"Number":"1015","API Relative Path":"java.util.concurrent.SynchronousQueue.java-drainTo(Collection)","Corresponding Source":"/**\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     */\n    public int drainTo(Collection<? super E> c) {\n        if (c == null)\n            throw new NullPointerException();\n        if (c == this)\n            throw new IllegalArgumentException();\n        int n = 0;\n        for (E e; (e = poll()) != null;) {\n            c.add(e);\n            ++n;\n        }\n        return n;\n    }"}
{"Number":"1016","API Relative Path":"java.util.concurrent.SynchronousQueue.java-drainTo(Collection-int)","Corresponding Source":"/**\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     */\n    public int drainTo(Collection<? super E> c, int maxElements) {\n        if (c == null)\n            throw new NullPointerException();\n        if (c == this)\n            throw new IllegalArgumentException();\n        int n = 0;\n        for (E e; n < maxElements && (e = poll()) != null;) {\n            c.add(e);\n            ++n;\n        }\n        return n;\n    }"}
{"Number":"1017","API Relative Path":"java.util.concurrent.SynchronousQueue.java-drainTo(Collection-int)","Corresponding Source":"/**\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @throws ClassCastException            {@inheritDoc}\n     * @throws NullPointerException          {@inheritDoc}\n     * @throws IllegalArgumentException      {@inheritDoc}\n     */\n    public int drainTo(Collection<? super E> c, int maxElements) {\n        if (c == null)\n            throw new NullPointerException();\n        if (c == this)\n            throw new IllegalArgumentException();\n        int n = 0;\n        for (E e; n < maxElements && (e = poll()) != null;) {\n            c.add(e);\n            ++n;\n        }\n        return n;\n    }"}
{"Number":"1018","API Relative Path":"java.util.concurrent.SynchronousQueue.java-offer(E-long-TimeUnit)","Corresponding Source":"/**\n     * Inserts the specified element into this queue, waiting if necessary\n     * up to the specified wait time for another thread to receive it.\n     *\n     * @return {@code true} if successful, or {@code false} if the\n     *         specified waiting time elapses before a consumer appears\n     * @throws InterruptedException {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     */\n    public boolean offer(E e, long timeout, TimeUnit unit)\n        throws InterruptedException {\n        if (e == null) throw new NullPointerException();\n        if (transferer.transfer(e, true, unit.toNanos(timeout)) != null)\n            return true;\n        if (!Thread.interrupted())\n            return false;\n        throw new InterruptedException();\n    }"}
{"Number":"1019","API Relative Path":"java.util.concurrent.SynchronousQueue.java-put(E)","Corresponding Source":"/**\n     * Adds the specified element to this queue, waiting if necessary for\n     * another thread to receive it.\n     *\n     * @throws InterruptedException {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     */\n    public void put(E e) throws InterruptedException {\n        if (e == null) throw new NullPointerException();\n        if (transferer.transfer(e, false, 0) == null) {\n            Thread.interrupted();\n            throw new InterruptedException();\n        }\n    }"}
{"Number":"1020","API Relative Path":"java.util.concurrent.ThreadPoolExecutor.java-setKeepAliveTime(long-TimeUnit)","Corresponding Source":"/**\n     * Sets the time limit for which threads may remain idle before\n     * being terminated.  If there are more than the core number of\n     * threads currently in the pool, after waiting this amount of\n     * time without processing a task, excess threads will be\n     * terminated.  This overrides any value set in the constructor.\n     *\n     * @param time the time to wait.  A time value of zero will cause\n     *        excess threads to terminate immediately after executing tasks.\n     * @param unit the time unit of the {@code time} argument\n     * @throws IllegalArgumentException if {@code time} less than zero or\n     *         if {@code time} is zero and {@code allowsCoreThreadTimeOut}\n     * @see #getKeepAliveTime(TimeUnit)\n     */\n    public void setKeepAliveTime(long time, TimeUnit unit) {\n        if (time < 0)\n            throw new IllegalArgumentException();\n        if (time == 0 && allowsCoreThreadTimeOut())\n            throw new IllegalArgumentException(\"Core threads must have nonzero keep alive times\");\n        long keepAliveTime = unit.toNanos(time);\n        long delta = keepAliveTime - this.keepAliveTime;\n        this.keepAliveTime = keepAliveTime;\n        if (delta < 0)\n            interruptIdleWorkers();\n    }"}
{"Number":"1021","API Relative Path":"java.util.concurrent.ThreadPoolExecutor.java-setKeepAliveTime(long-TimeUnit)","Corresponding Source":"/**\n     * Sets the time limit for which threads may remain idle before\n     * being terminated.  If there are more than the core number of\n     * threads currently in the pool, after waiting this amount of\n     * time without processing a task, excess threads will be\n     * terminated.  This overrides any value set in the constructor.\n     *\n     * @param time the time to wait.  A time value of zero will cause\n     *        excess threads to terminate immediately after executing tasks.\n     * @param unit the time unit of the {@code time} argument\n     * @throws IllegalArgumentException if {@code time} less than zero or\n     *         if {@code time} is zero and {@code allowsCoreThreadTimeOut}\n     * @see #getKeepAliveTime(TimeUnit)\n     */\n    public void setKeepAliveTime(long time, TimeUnit unit) {\n        if (time < 0)\n            throw new IllegalArgumentException();\n        if (time == 0 && allowsCoreThreadTimeOut())\n            throw new IllegalArgumentException(\"Core threads must have nonzero keep alive times\");\n        long keepAliveTime = unit.toNanos(time);\n        long delta = keepAliveTime - this.keepAliveTime;\n        this.keepAliveTime = keepAliveTime;\n        if (delta < 0)\n            interruptIdleWorkers();\n    }"}
{"Number":"1022","API Relative Path":"java.util.concurrent.ThreadPoolExecutor.java-setMaximumPoolSize(int)","Corresponding Source":"/**\n     * Sets the maximum allowed number of threads. This overrides any\n     * value set in the constructor. If the new value is smaller than\n     * the current value, excess existing threads will be\n     * terminated when they next become idle.\n     *\n     * @param maximumPoolSize the new maximum\n     * @throws IllegalArgumentException if the new maximum is\n     *         less than or equal to zero, or\n     *         less than the {@linkplain #getCorePoolSize core pool size}\n     * @see #getMaximumPoolSize\n     */\n    public void setMaximumPoolSize(int maximumPoolSize) {\n        if (maximumPoolSize <= 0 || maximumPoolSize < corePoolSize)\n            throw new IllegalArgumentException();\n        this.maximumPoolSize = maximumPoolSize;\n        if (workerCountOf(ctl.get()) > maximumPoolSize)\n            interruptIdleWorkers();\n    }"}
{"Number":"1023","API Relative Path":"java.util.concurrent.ThreadPoolExecutor.java-ThreadPoolExecutor(int-int-long-TimeUnit-BlockingQueue-ThreadFactory-RejectedExecutionHandler)","Corresponding Source":"/**\n     * Creates a new {@code ThreadPoolExecutor} with the given initial\n     * parameters.\n     *\n     * @param corePoolSize the number of threads to keep in the pool, even\n     *        if they are idle, unless {@code allowCoreThreadTimeOut} is set\n     * @param maximumPoolSize the maximum number of threads to allow in the\n     *        pool\n     * @param keepAliveTime when the number of threads is greater than\n     *        the core, this is the maximum time that excess idle threads\n     *        will wait for new tasks before terminating.\n     * @param unit the time unit for the {@code keepAliveTime} argument\n     * @param workQueue the queue to use for holding tasks before they are\n     *        executed.  This queue will hold only the {@code Runnable}\n     *        tasks submitted by the {@code execute} method.\n     * @param threadFactory the factory to use when the executor\n     *        creates a new thread\n     * @param handler the handler to use when execution is blocked\n     *        because the thread bounds and queue capacities are reached\n     * @throws IllegalArgumentException if one of the following holds:<br>\n     *         {@code corePoolSize < 0}<br>\n     *         {@code keepAliveTime < 0}<br>\n     *         {@code maximumPoolSize <= 0}<br>\n     *         {@code maximumPoolSize < corePoolSize}\n     * @throws NullPointerException if {@code workQueue}\n     *         or {@code threadFactory} or {@code handler} is null\n     */\n    public ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              ThreadFactory threadFactory,\n                              RejectedExecutionHandler handler) {\n        if (corePoolSize < 0 ||\n            maximumPoolSize <= 0 ||\n            maximumPoolSize < corePoolSize ||\n            keepAliveTime < 0)\n            throw new IllegalArgumentException();\n        if (workQueue == null || threadFactory == null || handler == null)\n            throw new NullPointerException();\n        this.corePoolSize = corePoolSize;\n        this.maximumPoolSize = maximumPoolSize;\n        this.workQueue = workQueue;\n        this.keepAliveTime = unit.toNanos(keepAliveTime);\n        this.threadFactory = threadFactory;\n        this.handler = handler;\n    }"}
{"Number":"1024","API Relative Path":"java.util.concurrent.ThreadPoolExecutor.java-ThreadPoolExecutor(int-int-long-TimeUnit-BlockingQueue-ThreadFactory-RejectedExecutionHandler)","Corresponding Source":"/**\n     * Creates a new {@code ThreadPoolExecutor} with the given initial\n     * parameters.\n     *\n     * @param corePoolSize the number of threads to keep in the pool, even\n     *        if they are idle, unless {@code allowCoreThreadTimeOut} is set\n     * @param maximumPoolSize the maximum number of threads to allow in the\n     *        pool\n     * @param keepAliveTime when the number of threads is greater than\n     *        the core, this is the maximum time that excess idle threads\n     *        will wait for new tasks before terminating.\n     * @param unit the time unit for the {@code keepAliveTime} argument\n     * @param workQueue the queue to use for holding tasks before they are\n     *        executed.  This queue will hold only the {@code Runnable}\n     *        tasks submitted by the {@code execute} method.\n     * @param threadFactory the factory to use when the executor\n     *        creates a new thread\n     * @param handler the handler to use when execution is blocked\n     *        because the thread bounds and queue capacities are reached\n     * @throws IllegalArgumentException if one of the following holds:<br>\n     *         {@code corePoolSize < 0}<br>\n     *         {@code keepAliveTime < 0}<br>\n     *         {@code maximumPoolSize <= 0}<br>\n     *         {@code maximumPoolSize < corePoolSize}\n     * @throws NullPointerException if {@code workQueue}\n     *         or {@code threadFactory} or {@code handler} is null\n     */\n    public ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              ThreadFactory threadFactory,\n                              RejectedExecutionHandler handler) {\n        if (corePoolSize < 0 ||\n            maximumPoolSize <= 0 ||\n            maximumPoolSize < corePoolSize ||\n            keepAliveTime < 0)\n            throw new IllegalArgumentException();\n        if (workQueue == null || threadFactory == null || handler == null)\n            throw new NullPointerException();\n        this.corePoolSize = corePoolSize;\n        this.maximumPoolSize = maximumPoolSize;\n        this.workQueue = workQueue;\n        this.keepAliveTime = unit.toNanos(keepAliveTime);\n        this.threadFactory = threadFactory;\n        this.handler = handler;\n    }"}
{"Number":"1025","API Relative Path":"java.util.DuplicateFormatFlagsException.java-DuplicateFormatFlagsException(String)","Corresponding Source":"/**\n     * Constructs an instance of this class with the specified flags.\n     *\n     * @param  f\n     *         The set of format flags which contain a duplicate flag.\n     */\n    public DuplicateFormatFlagsException(String f) {\n        if (f == null)\n            throw new NullPointerException();\n        this.flags = f;\n    }"}
{"Number":"1026","API Relative Path":"java.util.EnumMap.java-EnumMap(Map)","Corresponding Source":"/**\n     * Creates an enum map initialized from the specified map.  If the\n     * specified map is an <tt>EnumMap<\/tt> instance, this constructor behaves\n     * identically to {@link #EnumMap(EnumMap)}.  Otherwise, the specified map\n     * must contain at least one mapping (in order to determine the new\n     * enum map's key type).\n     *\n     * @param m the map from which to initialize this enum map\n     * @throws IllegalArgumentException if <tt>m<\/tt> is not an\n     *     <tt>EnumMap<\/tt> instance and contains no mappings\n     * @throws NullPointerException if <tt>m<\/tt> is null\n     */\n    public EnumMap(Map<K, ? extends V> m) {\n        if (m instanceof EnumMap) {\n            EnumMap<K, ? extends V> em = (EnumMap<K, ? extends V>) m;\n            keyType = em.keyType;\n            keyUniverse = em.keyUniverse;\n            vals = em.vals.clone();\n            size = em.size;\n        } else {\n            if (m.isEmpty())\n                throw new IllegalArgumentException(\"Specified map is empty\");\n            keyType = m.keySet().iterator().next().getDeclaringClass();\n            keyUniverse = getKeyUniverse(keyType);\n            vals = new Object[keyUniverse.length];\n            putAll(m);\n        }\n    }"}
{"Number":"1027","API Relative Path":"java.util.EnumMap.java-putAll(Map)","Corresponding Source":"// Bulk Operations\n\n    /**\n     * Copies all of the mappings from the specified map to this map.\n     * These mappings will replace any mappings that this map had for\n     * any of the keys currently in the specified map.\n     *\n     * @param m the mappings to be stored in this map\n     * @throws NullPointerException the specified map is null, or if\n     *     one or more keys in the specified map are null\n     */\n    public void putAll(Map<? extends K, ? extends V> m) {\n        if (m instanceof EnumMap) {\n            EnumMap<?, ?> em = (EnumMap<?, ?>)m;\n            if (em.keyType != keyType) {\n                if (em.isEmpty())\n                    return;\n                throw new ClassCastException(em.keyType + \" != \" + keyType);\n            }\n\n            for (int i = 0; i < keyUniverse.length; i++) {\n                Object emValue = em.vals[i];\n                if (emValue != null) {\n                    if (vals[i] == null)\n                        size++;\n                    vals[i] = emValue;\n                }\n            }\n        } else {\n            super.putAll(m);\n        }\n    }"}
{"Number":"1028","API Relative Path":"java.util.FormatFlagsConversionMismatchException.java-FormatFlagsConversionMismatchException(String-char)","Corresponding Source":"/**\n     * Constructs an instance of this class with the specified flag\n     * and conversion.\n     *\n     * @param  f\n     *         The flag\n     *\n     * @param  c\n     *         The conversion\n     */\n    public FormatFlagsConversionMismatchException(String f, char c) {\n        if (f == null)\n            throw new NullPointerException();\n        this.f = f;\n        this.c = c;\n    }"}
{"Number":"1029","API Relative Path":"java.util.Formatter.java-Formatter(File-String-Locale)","Corresponding Source":"/**\n     * Constructs a new formatter with the specified file, charset, and\n     * locale.\n     *\n     * @param  file\n     *         The file to use as the destination of this formatter.  If the\n     *         file exists then it will be truncated to zero size; otherwise,\n     *         a new file will be created.  The output will be written to the\n     *         file and is buffered.\n     *\n     * @param  csn\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @param  l\n     *         The {@linkplain java.util.Locale locale} to apply during\n     *         formatting.  If {@code l} is {@code null} then no localization\n     *         is applied.\n     *\n     * @throws  FileNotFoundException\n     *          If the given file object does not denote an existing, writable\n     *          regular file and a new regular file of that name cannot be\n     *          created, or if some other error occurs while opening or\n     *          creating the file\n     *\n     * @throws  SecurityException\n     *          If a security manager is present and {@link\n     *          SecurityManager#checkWrite checkWrite(file.getPath())} denies\n     *          write access to the file\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     */\n    public Formatter(File file, String csn, Locale l)\n        throws FileNotFoundException, UnsupportedEncodingException\n    {\n        this(toCharset(csn), l, file);\n    }"}
{"Number":"1030","API Relative Path":"java.util.Formatter.java-Formatter(OutputStream-String-Locale)","Corresponding Source":"/**\n     * Constructs a new formatter with the specified output stream, charset,\n     * and locale.\n     *\n     * @param  os\n     *         The output stream to use as the destination of this formatter.\n     *         The output will be buffered.\n     *\n     * @param  csn\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @param  l\n     *         The {@linkplain java.util.Locale locale} to apply during\n     *         formatting.  If {@code l} is {@code null} then no localization\n     *         is applied.\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     */\n    public Formatter(OutputStream os, String csn, Locale l)\n        throws UnsupportedEncodingException\n    {\n        this(l, new BufferedWriter(new OutputStreamWriter(os, csn)));\n    }"}
{"Number":"1031","API Relative Path":"java.util.Formatter.java-Formatter(PrintStream)","Corresponding Source":"/**\n     * Constructs a new formatter with the specified print stream.\n     *\n     * <p> The locale used is the {@linkplain\n     * Locale#getDefault(Locale.Category) default locale} for\n     * {@linkplain Locale.Category#FORMAT formatting} for this instance of the Java\n     * virtual machine.\n     *\n     * <p> Characters are written to the given {@link java.io.PrintStream\n     * PrintStream} object and are therefore encoded using that object's\n     * charset.\n     *\n     * @param  ps\n     *         The stream to use as the destination of this formatter.\n     */\n    public Formatter(PrintStream ps) {\n        this(Locale.getDefault(Locale.Category.FORMAT),\n             (Appendable)Objects.requireNonNull(ps));\n    }"}
{"Number":"1032","API Relative Path":"java.util.Formatter.java-Formatter(String)","Corresponding Source":"/**\n     * Constructs a new formatter with the specified file name.\n     *\n     * <p> The charset used is the {@linkplain\n     * java.nio.charset.Charset#defaultCharset() default charset} for this\n     * instance of the Java virtual machine.\n     *\n     * <p> The locale used is the {@linkplain\n     * Locale#getDefault(Locale.Category) default locale} for\n     * {@linkplain Locale.Category#FORMAT formatting} for this instance of the Java\n     * virtual machine.\n     *\n     * @param  fileName\n     *         The name of the file to use as the destination of this\n     *         formatter.  If the file exists then it will be truncated to\n     *         zero size; otherwise, a new file will be created.  The output\n     *         will be written to the file and is buffered.\n     *\n     * @throws  SecurityException\n     *          If a security manager is present and {@link\n     *          SecurityManager#checkWrite checkWrite(fileName)} denies write\n     *          access to the file\n     *\n     * @throws  FileNotFoundException\n     *          If the given file name does not denote an existing, writable\n     *          regular file and a new regular file of that name cannot be\n     *          created, or if some other error occurs while opening or\n     *          creating the file\n     */\n    public Formatter(String fileName) throws FileNotFoundException {\n        this(Locale.getDefault(Locale.Category.FORMAT),\n             new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileName))));\n    }"}
{"Number":"1033","API Relative Path":"java.util.Formatter.java-Formatter(String-String-Locale)","Corresponding Source":"/**\n     * Constructs a new formatter with the specified file name, charset, and\n     * locale.\n     *\n     * @param  fileName\n     *         The name of the file to use as the destination of this\n     *         formatter.  If the file exists then it will be truncated to\n     *         zero size; otherwise, a new file will be created.  The output\n     *         will be written to the file and is buffered.\n     *\n     * @param  csn\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @param  l\n     *         The {@linkplain java.util.Locale locale} to apply during\n     *         formatting.  If {@code l} is {@code null} then no localization\n     *         is applied.\n     *\n     * @throws  FileNotFoundException\n     *          If the given file name does not denote an existing, writable\n     *          regular file and a new regular file of that name cannot be\n     *          created, or if some other error occurs while opening or\n     *          creating the file\n     *\n     * @throws  SecurityException\n     *          If a security manager is present and {@link\n     *          SecurityManager#checkWrite checkWrite(fileName)} denies write\n     *          access to the file\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     */\n    public Formatter(String fileName, String csn, Locale l)\n        throws FileNotFoundException, UnsupportedEncodingException\n    {\n        this(toCharset(csn), l, new File(fileName));\n    }"}
{"Number":"1034","API Relative Path":"java.util.Formatter.java-Formatter(String-String-Locale)","Corresponding Source":"/**\n     * Constructs a new formatter with the specified file name, charset, and\n     * locale.\n     *\n     * @param  fileName\n     *         The name of the file to use as the destination of this\n     *         formatter.  If the file exists then it will be truncated to\n     *         zero size; otherwise, a new file will be created.  The output\n     *         will be written to the file and is buffered.\n     *\n     * @param  csn\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @param  l\n     *         The {@linkplain java.util.Locale locale} to apply during\n     *         formatting.  If {@code l} is {@code null} then no localization\n     *         is applied.\n     *\n     * @throws  FileNotFoundException\n     *          If the given file name does not denote an existing, writable\n     *          regular file and a new regular file of that name cannot be\n     *          created, or if some other error occurs while opening or\n     *          creating the file\n     *\n     * @throws  SecurityException\n     *          If a security manager is present and {@link\n     *          SecurityManager#checkWrite checkWrite(fileName)} denies write\n     *          access to the file\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     */\n    public Formatter(String fileName, String csn, Locale l)\n        throws FileNotFoundException, UnsupportedEncodingException\n    {\n        this(toCharset(csn), l, new File(fileName));\n    }"}
{"Number":"1035","API Relative Path":"java.util.function.BinaryOperator.java-maxBy(Comparator)","Corresponding Source":"/**\n     * Returns a {@link BinaryOperator} which returns the greater of two elements\n     * according to the specified {@code Comparator}.\n     *\n     * @param <T> the type of the input arguments of the comparator\n     * @param comparator a {@code Comparator} for comparing the two values\n     * @return a {@code BinaryOperator} which returns the greater of its operands,\n     *         according to the supplied {@code Comparator}\n     * @throws NullPointerException if the argument is null\n     */\n    public static <T> BinaryOperator<T> maxBy(Comparator<? super T> comparator) {\n        Objects.requireNonNull(comparator);\n        return (a, b) -> comparator.compare(a, b) >= 0 ? a : b;\n    }"}
{"Number":"1036","API Relative Path":"java.util.function.BinaryOperator.java-minBy(Comparator)","Corresponding Source":"/**\n     * Returns a {@link BinaryOperator} which returns the lesser of two elements\n     * according to the specified {@code Comparator}.\n     *\n     * @param <T> the type of the input arguments of the comparator\n     * @param comparator a {@code Comparator} for comparing the two values\n     * @return a {@code BinaryOperator} which returns the lesser of its operands,\n     *         according to the supplied {@code Comparator}\n     * @throws NullPointerException if the argument is null\n     */\n    public static <T> BinaryOperator<T> minBy(Comparator<? super T> comparator) {\n        Objects.requireNonNull(comparator);\n        return (a, b) -> comparator.compare(a, b) <= 0 ? a : b;\n    }"}
{"Number":"1037","API Relative Path":"java.util.GregorianCalendar.java-add(int-int)","Corresponding Source":"/**\n     * Adds the specified (signed) amount of time to the given calendar field,\n     * based on the calendar's rules.\n     *\n     * <p><em>Add rule 1<\/em>. The value of <code>field<\/code>\n     * after the call minus the value of <code>field<\/code> before the\n     * call is <code>amount<\/code>, modulo any overflow that has occurred in\n     * <code>field<\/code>. Overflow occurs when a field value exceeds its\n     * range and, as a result, the next larger field is incremented or\n     * decremented and the field value is adjusted back into its range.<\/p>\n     *\n     * <p><em>Add rule 2<\/em>. If a smaller field is expected to be\n     * invariant, but it is impossible for it to be equal to its\n     * prior value because of changes in its minimum or maximum after\n     * <code>field<\/code> is changed, then its value is adjusted to be as close\n     * as possible to its expected value. A smaller field represents a\n     * smaller unit of time. <code>HOUR<\/code> is a smaller field than\n     * <code>DAY_OF_MONTH<\/code>. No adjustment is made to smaller fields\n     * that are not expected to be invariant. The calendar system\n     * determines what fields are expected to be invariant.<\/p>\n     *\n     * @param field the calendar field.\n     * @param amount the amount of date or time to be added to the field.\n     * @exception IllegalArgumentException if <code>field<\/code> is\n     * <code>ZONE_OFFSET<\/code>, <code>DST_OFFSET<\/code>, or unknown,\n     * or if any calendar fields have out-of-range values in\n     * non-lenient mode.\n     */\n    @Override\n    public void add(int field, int amount) {\n        // If amount == 0, do nothing even the given field is out of\n        // range. This is tested by JCK.\n        if (amount == 0) {\n            return;   // Do nothing!\n        }\n\n        if (field < 0 || field >= ZONE_OFFSET) {\n            throw new IllegalArgumentException();\n        }\n\n        // Sync the time and calendar fields.\n        complete();\n\n        if (field == YEAR) {\n            int year = internalGet(YEAR);\n            if (internalGetEra() == CE) {\n                year += amount;\n                if (year > 0) {\n                    set(YEAR, year);\n                } else { // year <= 0\n                    set(YEAR, 1 - year);\n                    // if year == 0, you get 1 BCE.\n                    set(ERA, BCE);\n                }\n            }\n            else { // era == BCE\n                year -= amount;\n                if (year > 0) {\n                    set(YEAR, year);\n                } else { // year <= 0\n                    set(YEAR, 1 - year);\n                    // if year == 0, you get 1 CE\n                    set(ERA, CE);\n                }\n            }\n            pinDayOfMonth();\n        } else if (field == MONTH) {\n            int month = internalGet(MONTH) + amount;\n            int year = internalGet(YEAR);\n            int y_amount;\n\n            if (month >= 0) {\n                y_amount = month/12;\n            } else {\n                y_amount = (month+1)/12 - 1;\n            }\n            if (y_amount != 0) {\n                if (internalGetEra() == CE) {\n                    year += y_amount;\n                    if (year > 0) {\n                        set(YEAR, year);\n                    } else { // year <= 0\n                        set(YEAR, 1 - year);\n                        // if year == 0, you get 1 BCE\n                        set(ERA, BCE);\n                    }\n                }\n                else { // era == BCE\n                    year -= y_amount;\n                    if (year > 0) {\n                        set(YEAR, year);\n                    } else { // year <= 0\n                        set(YEAR, 1 - year);\n                        // if year == 0, you get 1 CE\n                        set(ERA, CE);\n                    }\n                }\n            }\n\n            if (month >= 0) {\n                set(MONTH,  month % 12);\n            } else {\n                // month < 0\n                month %= 12;\n                if (month < 0) {\n                    month += 12;\n                }\n                set(MONTH, JANUARY + month);\n            }\n            pinDayOfMonth();\n        } else if (field == ERA) {\n            int era = internalGet(ERA) + amount;\n            if (era < 0) {\n                era = 0;\n            }\n            if (era > 1) {\n                era = 1;\n            }\n            set(ERA, era);\n        } else {\n            long delta = amount;\n            long timeOfDay = 0;\n            switch (field) {\n            // Handle the time fields here. Convert the given\n            // amount to milliseconds and call setTimeInMillis.\n            case HOUR:\n            case HOUR_OF_DAY:\n                delta *= 60 * 60 * 1000;        // hours to minutes\n                break;\n\n            case MINUTE:\n                delta *= 60 * 1000;             // minutes to seconds\n                break;\n\n            case SECOND:\n                delta *= 1000;                  // seconds to milliseconds\n                break;\n\n            case MILLISECOND:\n                break;\n\n            // Handle week, day and AM_PM fields which involves\n            // time zone offset change adjustment. Convert the\n            // given amount to the number of days.\n            case WEEK_OF_YEAR:\n            case WEEK_OF_MONTH:\n            case DAY_OF_WEEK_IN_MONTH:\n                delta *= 7;\n                break;\n\n            case DAY_OF_MONTH: // synonym of DATE\n            case DAY_OF_YEAR:\n            case DAY_OF_WEEK:\n                break;\n\n            case AM_PM:\n                // Convert the amount to the number of days (delta)\n                // and +12 or -12 hours (timeOfDay).\n                delta = amount / 2;\n                timeOfDay = 12 * (amount % 2);\n                break;\n            }\n\n            // The time fields don't require time zone offset change\n            // adjustment.\n            if (field >= HOUR) {\n                setTimeInMillis(time + delta);\n                return;\n            }\n\n            // The rest of the fields (week, day or AM_PM fields)\n            // require time zone offset (both GMT and DST) change\n            // adjustment.\n\n            // Translate the current time to the fixed date and time\n            // of the day.\n            long fd = getCurrentFixedDate();\n            timeOfDay += internalGet(HOUR_OF_DAY);\n            timeOfDay *= 60;\n            timeOfDay += internalGet(MINUTE);\n            timeOfDay *= 60;\n            timeOfDay += internalGet(SECOND);\n            timeOfDay *= 1000;\n            timeOfDay += internalGet(MILLISECOND);\n            if (timeOfDay >= ONE_DAY) {\n                fd++;\n                timeOfDay -= ONE_DAY;\n            } else if (timeOfDay < 0) {\n                fd--;\n                timeOfDay += ONE_DAY;\n            }\n\n            fd += delta; // fd is the expected fixed date after the calculation\n            int zoneOffset = internalGet(ZONE_OFFSET) + internalGet(DST_OFFSET);\n            setTimeInMillis((fd - EPOCH_OFFSET) * ONE_DAY + timeOfDay - zoneOffset);\n            zoneOffset -= internalGet(ZONE_OFFSET) + internalGet(DST_OFFSET);\n            // If the time zone offset has changed, then adjust the difference.\n            if (zoneOffset != 0) {\n                setTimeInMillis(time + zoneOffset);\n                long fd2 = getCurrentFixedDate();\n                // If the adjustment has changed the date, then take\n                // the previous one.\n                if (fd2 != fd) {\n                    setTimeInMillis(time - zoneOffset);\n                }\n            }\n        }\n    }"}
{"Number":"1038","API Relative Path":"java.util.GregorianCalendar.java-roll(int-int)","Corresponding Source":"/**\n     * Adds a signed amount to the specified calendar field without changing larger fields.\n     * A negative roll amount means to subtract from field without changing\n     * larger fields. If the specified amount is 0, this method performs nothing.\n     *\n     * <p>This method calls {@link #complete()} before adding the\n     * amount so that all the calendar fields are normalized. If there\n     * is any calendar field having an out-of-range value in non-lenient mode, then an\n     * <code>IllegalArgumentException<\/code> is thrown.\n     *\n     * <p>\n     * <em>Example<\/em>: Consider a <code>GregorianCalendar<\/code>\n     * originally set to August 31, 1999. Calling <code>roll(Calendar.MONTH,\n     * 8)<\/code> sets the calendar to April 30, <strong>1999<\/strong>. Using a\n     * <code>GregorianCalendar<\/code>, the <code>DAY_OF_MONTH<\/code> field cannot\n     * be 31 in the month April. <code>DAY_OF_MONTH<\/code> is set to the closest possible\n     * value, 30. The <code>YEAR<\/code> field maintains the value of 1999 because it\n     * is a larger field than <code>MONTH<\/code>.\n     * <p>\n     * <em>Example<\/em>: Consider a <code>GregorianCalendar<\/code>\n     * originally set to Sunday June 6, 1999. Calling\n     * <code>roll(Calendar.WEEK_OF_MONTH, -1)<\/code> sets the calendar to\n     * Tuesday June 1, 1999, whereas calling\n     * <code>add(Calendar.WEEK_OF_MONTH, -1)<\/code> sets the calendar to\n     * Sunday May 30, 1999. This is because the roll rule imposes an\n     * additional constraint: The <code>MONTH<\/code> must not change when the\n     * <code>WEEK_OF_MONTH<\/code> is rolled. Taken together with add rule 1,\n     * the resultant date must be between Tuesday June 1 and Saturday June\n     * 5. According to add rule 2, the <code>DAY_OF_WEEK<\/code>, an invariant\n     * when changing the <code>WEEK_OF_MONTH<\/code>, is set to Tuesday, the\n     * closest possible value to Sunday (where Sunday is the first day of the\n     * week).<\/p>\n     *\n     * @param field the calendar field.\n     * @param amount the signed amount to add to <code>field<\/code>.\n     * @exception IllegalArgumentException if <code>field<\/code> is\n     * <code>ZONE_OFFSET<\/code>, <code>DST_OFFSET<\/code>, or unknown,\n     * or if any calendar fields have out-of-range values in\n     * non-lenient mode.\n     * @see #roll(int,boolean)\n     * @see #add(int,int)\n     * @see #set(int,int)\n     * @since 1.2\n     */\n    @Override\n    public void roll(int field, int amount) {\n        // If amount == 0, do nothing even the given field is out of\n        // range. This is tested by JCK.\n        if (amount == 0) {\n            return;\n        }\n\n        if (field < 0 || field >= ZONE_OFFSET) {\n            throw new IllegalArgumentException();\n        }\n\n        // Sync the time and calendar fields.\n        complete();\n\n        int min = getMinimum(field);\n        int max = getMaximum(field);\n\n        switch (field) {\n        case AM_PM:\n        case ERA:\n        case YEAR:\n        case MINUTE:\n        case SECOND:\n        case MILLISECOND:\n            // These fields are handled simply, since they have fixed minima\n            // and maxima.  The field DAY_OF_MONTH is almost as simple.  Other\n            // fields are complicated, since the range within they must roll\n            // varies depending on the date.\n            break;\n\n        case HOUR:\n        case HOUR_OF_DAY:\n            {\n                int unit = max + 1; // 12 or 24 hours\n                int h = internalGet(field);\n                int nh = (h + amount) % unit;\n                if (nh < 0) {\n                    nh += unit;\n                }\n                time += ONE_HOUR * (nh - h);\n\n                // The day might have changed, which could happen if\n                // the daylight saving time transition brings it to\n                // the next day, although it's very unlikely. But we\n                // have to make sure not to change the larger fields.\n                CalendarDate d = calsys.getCalendarDate(time, getZone());\n                if (internalGet(DAY_OF_MONTH) != d.getDayOfMonth()) {\n                    d.setDate(internalGet(YEAR),\n                              internalGet(MONTH) + 1,\n                              internalGet(DAY_OF_MONTH));\n                    if (field == HOUR) {\n                        assert (internalGet(AM_PM) == PM);\n                        d.addHours(+12); // restore PM\n                    }\n                    time = calsys.getTime(d);\n                }\n                int hourOfDay = d.getHours();\n                internalSet(field, hourOfDay % unit);\n                if (field == HOUR) {\n                    internalSet(HOUR_OF_DAY, hourOfDay);\n                } else {\n                    internalSet(AM_PM, hourOfDay / 12);\n                    internalSet(HOUR, hourOfDay % 12);\n                }\n\n                // Time zone offset and/or daylight saving might have changed.\n                int zoneOffset = d.getZoneOffset();\n                int saving = d.getDaylightSaving();\n                internalSet(ZONE_OFFSET, zoneOffset - saving);\n                internalSet(DST_OFFSET, saving);\n                return;\n            }\n\n        case MONTH:\n            // Rolling the month involves both pinning the final value to [0, 11]\n            // and adjusting the DAY_OF_MONTH if necessary.  We only adjust the\n            // DAY_OF_MONTH if, after updating the MONTH field, it is illegal.\n            // E.g., <jan31>.roll(MONTH, 1) -> <feb28> or <feb29>.\n            {\n                if (!isCutoverYear(cdate.getNormalizedYear())) {\n                    int mon = (internalGet(MONTH) + amount) % 12;\n                    if (mon < 0) {\n                        mon += 12;\n                    }\n                    set(MONTH, mon);\n\n                    // Keep the day of month in the range.  We don't want to spill over\n                    // into the next month; e.g., we don't want jan31 + 1 mo -> feb31 ->\n                    // mar3.\n                    int monthLen = monthLength(mon);\n                    if (internalGet(DAY_OF_MONTH) > monthLen) {\n                        set(DAY_OF_MONTH, monthLen);\n                    }\n                } else {\n                    // We need to take care of different lengths in\n                    // year and month due to the cutover.\n                    int yearLength = getActualMaximum(MONTH) + 1;\n                    int mon = (internalGet(MONTH) + amount) % yearLength;\n                    if (mon < 0) {\n                        mon += yearLength;\n                    }\n                    set(MONTH, mon);\n                    int monthLen = getActualMaximum(DAY_OF_MONTH);\n                    if (internalGet(DAY_OF_MONTH) > monthLen) {\n                        set(DAY_OF_MONTH, monthLen);\n                    }\n                }\n                return;\n            }\n\n        case WEEK_OF_YEAR:\n            {\n                int y = cdate.getNormalizedYear();\n                max = getActualMaximum(WEEK_OF_YEAR);\n                set(DAY_OF_WEEK, internalGet(DAY_OF_WEEK));\n                int woy = internalGet(WEEK_OF_YEAR);\n                int value = woy + amount;\n                if (!isCutoverYear(y)) {\n                    int weekYear = getWeekYear();\n                    if (weekYear == y) {\n                        // If the new value is in between min and max\n                        // (exclusive), then we can use the value.\n                        if (value > min && value < max) {\n                            set(WEEK_OF_YEAR, value);\n                            return;\n                        }\n                        long fd = getCurrentFixedDate();\n                        // Make sure that the min week has the current DAY_OF_WEEK\n                        // in the calendar year\n                        long day1 = fd - (7 * (woy - min));\n                        if (calsys.getYearFromFixedDate(day1) != y) {\n                            min++;\n                        }\n\n                        // Make sure the same thing for the max week\n                        fd += 7 * (max - internalGet(WEEK_OF_YEAR));\n                        if (calsys.getYearFromFixedDate(fd) != y) {\n                            max--;\n                        }\n                    } else {\n                        // When WEEK_OF_YEAR and YEAR are out of sync,\n                        // adjust woy and amount to stay in the calendar year.\n                        if (weekYear > y) {\n                            if (amount < 0) {\n                                amount++;\n                            }\n                            woy = max;\n                        } else {\n                            if (amount > 0) {\n                                amount -= woy - max;\n                            }\n                            woy = min;\n                        }\n                    }\n                    set(field, getRolledValue(woy, amount, min, max));\n                    return;\n                }\n\n                // Handle cutover here.\n                long fd = getCurrentFixedDate();\n                BaseCalendar cal;\n                if (gregorianCutoverYear == gregorianCutoverYearJulian) {\n                    cal = getCutoverCalendarSystem();\n                } else if (y == gregorianCutoverYear) {\n                    cal = gcal;\n                } else {\n                    cal = getJulianCalendarSystem();\n                }\n                long day1 = fd - (7 * (woy - min));\n                // Make sure that the min week has the current DAY_OF_WEEK\n                if (cal.getYearFromFixedDate(day1) != y) {\n                    min++;\n                }\n\n                // Make sure the same thing for the max week\n                fd += 7 * (max - woy);\n                cal = (fd >= gregorianCutoverDate) ? gcal : getJulianCalendarSystem();\n                if (cal.getYearFromFixedDate(fd) != y) {\n                    max--;\n                }\n                // value: the new WEEK_OF_YEAR which must be converted\n                // to month and day of month.\n                value = getRolledValue(woy, amount, min, max) - 1;\n                BaseCalendar.Date d = getCalendarDate(day1 + value * 7);\n                set(MONTH, d.getMonth() - 1);\n                set(DAY_OF_MONTH, d.getDayOfMonth());\n                return;\n            }\n\n        case WEEK_OF_MONTH:\n            {\n                boolean isCutoverYear = isCutoverYear(cdate.getNormalizedYear());\n                // dow: relative day of week from first day of week\n                int dow = internalGet(DAY_OF_WEEK) - getFirstDayOfWeek();\n                if (dow < 0) {\n                    dow += 7;\n                }\n\n                long fd = getCurrentFixedDate();\n                long month1;     // fixed date of the first day (usually 1) of the month\n                int monthLength; // actual month length\n                if (isCutoverYear) {\n                    month1 = getFixedDateMonth1(cdate, fd);\n                    monthLength = actualMonthLength();\n                } else {\n                    month1 = fd - internalGet(DAY_OF_MONTH) + 1;\n                    monthLength = calsys.getMonthLength(cdate);\n                }\n\n                // the first day of week of the month.\n                long monthDay1st = BaseCalendar.getDayOfWeekDateOnOrBefore(month1 + 6,\n                                                                           getFirstDayOfWeek());\n                // if the week has enough days to form a week, the\n                // week starts from the previous month.\n                if ((int)(monthDay1st - month1) >= getMinimalDaysInFirstWeek()) {\n                    monthDay1st -= 7;\n                }\n                max = getActualMaximum(field);\n\n                // value: the new WEEK_OF_MONTH value\n                int value = getRolledValue(internalGet(field), amount, 1, max) - 1;\n\n                // nfd: fixed date of the rolled date\n                long nfd = monthDay1st + value * 7 + dow;\n\n                // Unlike WEEK_OF_YEAR, we need to change day of week if the\n                // nfd is out of the month.\n                if (nfd < month1) {\n                    nfd = month1;\n                } else if (nfd >= (month1 + monthLength)) {\n                    nfd = month1 + monthLength - 1;\n                }\n                int dayOfMonth;\n                if (isCutoverYear) {\n                    // If we are in the cutover year, convert nfd to\n                    // its calendar date and use dayOfMonth.\n                    BaseCalendar.Date d = getCalendarDate(nfd);\n                    dayOfMonth = d.getDayOfMonth();\n                } else {\n                    dayOfMonth = (int)(nfd - month1) + 1;\n                }\n                set(DAY_OF_MONTH, dayOfMonth);\n                return;\n            }\n\n        case DAY_OF_MONTH:\n            {\n                if (!isCutoverYear(cdate.getNormalizedYear())) {\n                    max = calsys.getMonthLength(cdate);\n                    break;\n                }\n\n                // Cutover year handling\n                long fd = getCurrentFixedDate();\n                long month1 = getFixedDateMonth1(cdate, fd);\n                // It may not be a regular month. Convert the date and range to\n                // the relative values, perform the roll, and\n                // convert the result back to the rolled date.\n                int value = getRolledValue((int)(fd - month1), amount, 0, actualMonthLength() - 1);\n                BaseCalendar.Date d = getCalendarDate(month1 + value);\n                assert d.getMonth()-1 == internalGet(MONTH);\n                set(DAY_OF_MONTH, d.getDayOfMonth());\n                return;\n            }\n\n        case DAY_OF_YEAR:\n            {\n                max = getActualMaximum(field);\n                if (!isCutoverYear(cdate.getNormalizedYear())) {\n                    break;\n                }\n\n                // Handle cutover here.\n                long fd = getCurrentFixedDate();\n                long jan1 = fd - internalGet(DAY_OF_YEAR) + 1;\n                int value = getRolledValue((int)(fd - jan1) + 1, amount, min, max);\n                BaseCalendar.Date d = getCalendarDate(jan1 + value - 1);\n                set(MONTH, d.getMonth() - 1);\n                set(DAY_OF_MONTH, d.getDayOfMonth());\n                return;\n            }\n\n        case DAY_OF_WEEK:\n            {\n                if (!isCutoverYear(cdate.getNormalizedYear())) {\n                    // If the week of year is in the same year, we can\n                    // just change DAY_OF_WEEK.\n                    int weekOfYear = internalGet(WEEK_OF_YEAR);\n                    if (weekOfYear > 1 && weekOfYear < 52) {\n                        set(WEEK_OF_YEAR, weekOfYear); // update stamp[WEEK_OF_YEAR]\n                        max = SATURDAY;\n                        break;\n                    }\n                }\n\n                // We need to handle it in a different way around year\n                // boundaries and in the cutover year. Note that\n                // changing era and year values violates the roll\n                // rule: not changing larger calendar fields...\n                amount %= 7;\n                if (amount == 0) {\n                    return;\n                }\n                long fd = getCurrentFixedDate();\n                long dowFirst = BaseCalendar.getDayOfWeekDateOnOrBefore(fd, getFirstDayOfWeek());\n                fd += amount;\n                if (fd < dowFirst) {\n                    fd += 7;\n                } else if (fd >= dowFirst + 7) {\n                    fd -= 7;\n                }\n                BaseCalendar.Date d = getCalendarDate(fd);\n                set(ERA, (d.getNormalizedYear() <= 0 ? BCE : CE));\n                set(d.getYear(), d.getMonth() - 1, d.getDayOfMonth());\n                return;\n            }\n\n        case DAY_OF_WEEK_IN_MONTH:\n            {\n                min = 1; // after normalized, min should be 1.\n                if (!isCutoverYear(cdate.getNormalizedYear())) {\n                    int dom = internalGet(DAY_OF_MONTH);\n                    int monthLength = calsys.getMonthLength(cdate);\n                    int lastDays = monthLength % 7;\n                    max = monthLength / 7;\n                    int x = (dom - 1) % 7;\n                    if (x < lastDays) {\n                        max++;\n                    }\n                    set(DAY_OF_WEEK, internalGet(DAY_OF_WEEK));\n                    break;\n                }\n\n                // Cutover year handling\n                long fd = getCurrentFixedDate();\n                long month1 = getFixedDateMonth1(cdate, fd);\n                int monthLength = actualMonthLength();\n                int lastDays = monthLength % 7;\n                max = monthLength / 7;\n                int x = (int)(fd - month1) % 7;\n                if (x < lastDays) {\n                    max++;\n                }\n                int value = getRolledValue(internalGet(field), amount, min, max) - 1;\n                fd = month1 + value * 7 + x;\n                BaseCalendar cal = (fd >= gregorianCutoverDate) ? gcal : getJulianCalendarSystem();\n                BaseCalendar.Date d = (BaseCalendar.Date) cal.newCalendarDate(TimeZone.NO_TIMEZONE);\n                cal.getCalendarDateFromFixedDate(d, fd);\n                set(DAY_OF_MONTH, d.getDayOfMonth());\n                return;\n            }\n        }\n\n        set(field, getRolledValue(internalGet(field), amount, min, max));\n    }"}
{"Number":"1039","API Relative Path":"java.util.GregorianCalendar.java-setWeekDate(int-int-int)","Corresponding Source":"/**\n     * Sets this {@code GregorianCalendar} to the date given by the\n     * date specifiers - <a href=\"#week_year\">{@code weekYear}<\/a>,\n     * {@code weekOfYear}, and {@code dayOfWeek}. {@code weekOfYear}\n     * follows the <a href=\"#week_and_year\">{@code WEEK_OF_YEAR}\n     * numbering<\/a>.  The {@code dayOfWeek} value must be one of the\n     * {@link Calendar#DAY_OF_WEEK DAY_OF_WEEK} values: {@link\n     * Calendar#SUNDAY SUNDAY} to {@link Calendar#SATURDAY SATURDAY}.\n     *\n     * <p>Note that the numeric day-of-week representation differs from\n     * the ISO 8601 standard, and that the {@code weekOfYear}\n     * numbering is compatible with the standard when {@code\n     * getFirstDayOfWeek()} is {@code MONDAY} and {@code\n     * getMinimalDaysInFirstWeek()} is 4.\n     *\n     * <p>Unlike the {@code set} method, all of the calendar fields\n     * and the instant of time value are calculated upon return.\n     *\n     * <p>If {@code weekOfYear} is out of the valid week-of-year\n     * range in {@code weekYear}, the {@code weekYear}\n     * and {@code weekOfYear} values are adjusted in lenient\n     * mode, or an {@code IllegalArgumentException} is thrown in\n     * non-lenient mode.\n     *\n     * @param weekYear    the week year\n     * @param weekOfYear  the week number based on {@code weekYear}\n     * @param dayOfWeek   the day of week value: one of the constants\n     *                    for the {@link #DAY_OF_WEEK DAY_OF_WEEK} field:\n     *                    {@link Calendar#SUNDAY SUNDAY}, ...,\n     *                    {@link Calendar#SATURDAY SATURDAY}.\n     * @exception IllegalArgumentException\n     *            if any of the given date specifiers is invalid,\n     *            or if any of the calendar fields are inconsistent\n     *            with the given date specifiers in non-lenient mode\n     * @see GregorianCalendar#isWeekDateSupported()\n     * @see Calendar#getFirstDayOfWeek()\n     * @see Calendar#getMinimalDaysInFirstWeek()\n     * @since 1.7\n     */\n    @Override\n    public void setWeekDate(int weekYear, int weekOfYear, int dayOfWeek) {\n        if (dayOfWeek < SUNDAY || dayOfWeek > SATURDAY) {\n            throw new IllegalArgumentException(\"invalid dayOfWeek: \" + dayOfWeek);\n        }\n\n        // To avoid changing the time of day fields by date\n        // calculations, use a clone with the GMT time zone.\n        GregorianCalendar gc = (GregorianCalendar) clone();\n        gc.setLenient(true);\n        int era = gc.get(ERA);\n        gc.clear();\n        gc.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n        gc.set(ERA, era);\n        gc.set(YEAR, weekYear);\n        gc.set(WEEK_OF_YEAR, 1);\n        gc.set(DAY_OF_WEEK, getFirstDayOfWeek());\n        int days = dayOfWeek - getFirstDayOfWeek();\n        if (days < 0) {\n            days += 7;\n        }\n        days += 7 * (weekOfYear - 1);\n        if (days != 0) {\n            gc.add(DAY_OF_YEAR, days);\n        } else {\n            gc.complete();\n        }\n\n        if (!isLenient() &&\n            (gc.getWeekYear() != weekYear\n             || gc.internalGet(WEEK_OF_YEAR) != weekOfYear\n             || gc.internalGet(DAY_OF_WEEK) != dayOfWeek)) {\n            throw new IllegalArgumentException();\n        }\n\n        set(ERA, gc.internalGet(ERA));\n        set(YEAR, gc.internalGet(YEAR));\n        set(MONTH, gc.internalGet(MONTH));\n        set(DAY_OF_MONTH, gc.internalGet(DAY_OF_MONTH));\n\n        // to avoid throwing an IllegalArgumentException in\n        // non-lenient, set WEEK_OF_YEAR internally\n        internalSet(WEEK_OF_YEAR, weekOfYear);\n        complete();\n    }"}
{"Number":"1040","API Relative Path":"java.util.HashMap.java-HashMap(int-float)","Corresponding Source":"/* ---------------- Public operations -------------- */\n\n    /**\n     * Constructs an empty <tt>HashMap<\/tt> with the specified initial\n     * capacity and load factor.\n     *\n     * @param  initialCapacity the initial capacity\n     * @param  loadFactor      the load factor\n     * @throws IllegalArgumentException if the initial capacity is negative\n     *         or the load factor is nonpositive\n     */\n    public HashMap(int initialCapacity, float loadFactor) {\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException(\"Illegal initial capacity: \" +\n                                               initialCapacity);\n        if (initialCapacity > MAXIMUM_CAPACITY)\n            initialCapacity = MAXIMUM_CAPACITY;\n        if (loadFactor <= 0 || Float.isNaN(loadFactor))\n            throw new IllegalArgumentException(\"Illegal load factor: \" +\n                                               loadFactor);\n        this.loadFactor = loadFactor;\n        this.threshold = tableSizeFor(initialCapacity);\n    }"}
{"Number":"1041","API Relative Path":"java.util.HashMap.java-HashMap(int-float)","Corresponding Source":"/* ---------------- Public operations -------------- */\n\n    /**\n     * Constructs an empty <tt>HashMap<\/tt> with the specified initial\n     * capacity and load factor.\n     *\n     * @param  initialCapacity the initial capacity\n     * @param  loadFactor      the load factor\n     * @throws IllegalArgumentException if the initial capacity is negative\n     *         or the load factor is nonpositive\n     */\n    public HashMap(int initialCapacity, float loadFactor) {\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException(\"Illegal initial capacity: \" +\n                                               initialCapacity);\n        if (initialCapacity > MAXIMUM_CAPACITY)\n            initialCapacity = MAXIMUM_CAPACITY;\n        if (loadFactor <= 0 || Float.isNaN(loadFactor))\n            throw new IllegalArgumentException(\"Illegal load factor: \" +\n                                               loadFactor);\n        this.loadFactor = loadFactor;\n        this.threshold = tableSizeFor(initialCapacity);\n    }"}
{"Number":"1042","API Relative Path":"java.util.Hashtable.java-Hashtable(int-float)","Corresponding Source":"/**\n     * Constructs a new, empty hashtable with the specified initial\n     * capacity and the specified load factor.\n     *\n     * @param      initialCapacity   the initial capacity of the hashtable.\n     * @param      loadFactor        the load factor of the hashtable.\n     * @exception  IllegalArgumentException  if the initial capacity is less\n     *             than zero, or if the load factor is nonpositive.\n     */\n    public Hashtable(int initialCapacity, float loadFactor) {\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException(\"Illegal Capacity: \"+\n                                               initialCapacity);\n        if (loadFactor <= 0 || Float.isNaN(loadFactor))\n            throw new IllegalArgumentException(\"Illegal Load: \"+loadFactor);\n\n        if (initialCapacity==0)\n            initialCapacity = 1;\n        this.loadFactor = loadFactor;\n        table = new Entry<?,?>[initialCapacity];\n        threshold = (int)Math.min(initialCapacity * loadFactor, MAX_ARRAY_SIZE + 1);\n    }"}
{"Number":"1043","API Relative Path":"java.util.Hashtable.java-Hashtable(int-float)","Corresponding Source":"/**\n     * Constructs a new, empty hashtable with the specified initial\n     * capacity and the specified load factor.\n     *\n     * @param      initialCapacity   the initial capacity of the hashtable.\n     * @param      loadFactor        the load factor of the hashtable.\n     * @exception  IllegalArgumentException  if the initial capacity is less\n     *             than zero, or if the load factor is nonpositive.\n     */\n    public Hashtable(int initialCapacity, float loadFactor) {\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException(\"Illegal Capacity: \"+\n                                               initialCapacity);\n        if (loadFactor <= 0 || Float.isNaN(loadFactor))\n            throw new IllegalArgumentException(\"Illegal Load: \"+loadFactor);\n\n        if (initialCapacity==0)\n            initialCapacity = 1;\n        this.loadFactor = loadFactor;\n        table = new Entry<?,?>[initialCapacity];\n        threshold = (int)Math.min(initialCapacity * loadFactor, MAX_ARRAY_SIZE + 1);\n    }"}
{"Number":"1044","API Relative Path":"java.util.IllegalFormatConversionException.java-IllegalFormatConversionException(char-Class)","Corresponding Source":"/**\n     * Constructs an instance of this class with the mismatched conversion and\n     * the corresponding argument class.\n     *\n     * @param  c\n     *         Inapplicable conversion\n     *\n     * @param  arg\n     *         Class of the mismatched argument\n     */\n    public IllegalFormatConversionException(char c, Class<?> arg) {\n        if (arg == null)\n            throw new NullPointerException();\n        this.c = c;\n        this.arg = arg;\n    }"}
{"Number":"1045","API Relative Path":"java.util.IllegalFormatFlagsException.java-IllegalFormatFlagsException(String)","Corresponding Source":"/**\n     * Constructs an instance of this class with the specified flags.\n     *\n     * @param  f\n     *         The set of format flags which contain an illegal combination\n     */\n    public IllegalFormatFlagsException(String f) {\n        if (f == null)\n            throw new NullPointerException();\n        this.flags = f;\n    }"}
{"Number":"1046","API Relative Path":"java.util.InvalidPropertiesFormatException.java-InvalidPropertiesFormatException(Throwable)","Corresponding Source":"/**\n     * Constructs an InvalidPropertiesFormatException with the specified\n     * cause.\n     *\n     * @param  cause the cause (which is saved for later retrieval by the\n     *         {@link Throwable#getCause()} method).\n     */\n    public InvalidPropertiesFormatException(Throwable cause) {\n        super(cause==null ? null : cause.toString());\n        this.initCause(cause);\n    }"}
{"Number":"1047","API Relative Path":"java.util.InvalidPropertiesFormatException.java-InvalidPropertiesFormatException(Throwable)","Corresponding Source":"/**\n     * Constructs an InvalidPropertiesFormatException with the specified\n     * cause.\n     *\n     * @param  cause the cause (which is saved for later retrieval by the\n     *         {@link Throwable#getCause()} method).\n     */\n    public InvalidPropertiesFormatException(Throwable cause) {\n        super(cause==null ? null : cause.toString());\n        this.initCause(cause);\n    }"}
{"Number":"1048","API Relative Path":"java.util.JapaneseImperialCalendar.java-add(int-int)","Corresponding Source":"/**\n     * Adds the specified (signed) amount of time to the given calendar field,\n     * based on the calendar's rules.\n     *\n     * <p><em>Add rule 1<\/em>. The value of <code>field<\/code>\n     * after the call minus the value of <code>field<\/code> before the\n     * call is <code>amount<\/code>, modulo any overflow that has occurred in\n     * <code>field<\/code>. Overflow occurs when a field value exceeds its\n     * range and, as a result, the next larger field is incremented or\n     * decremented and the field value is adjusted back into its range.<\/p>\n     *\n     * <p><em>Add rule 2<\/em>. If a smaller field is expected to be\n     * invariant, but it is impossible for it to be equal to its\n     * prior value because of changes in its minimum or maximum after\n     * <code>field<\/code> is changed, then its value is adjusted to be as close\n     * as possible to its expected value. A smaller field represents a\n     * smaller unit of time. <code>HOUR<\/code> is a smaller field than\n     * <code>DAY_OF_MONTH<\/code>. No adjustment is made to smaller fields\n     * that are not expected to be invariant. The calendar system\n     * determines what fields are expected to be invariant.<\/p>\n     *\n     * @param field the calendar field.\n     * @param amount the amount of date or time to be added to the field.\n     * @exception IllegalArgumentException if <code>field<\/code> is\n     * <code>ZONE_OFFSET<\/code>, <code>DST_OFFSET<\/code>, or unknown,\n     * or if any calendar fields have out-of-range values in\n     * non-lenient mode.\n     */\n    public void add(int field, int amount) {\n        // If amount == 0, do nothing even the given field is out of\n        // range. This is tested by JCK.\n        if (amount == 0) {\n            return;   // Do nothing!\n        }\n\n        if (field < 0 || field >= ZONE_OFFSET) {\n            throw new IllegalArgumentException();\n        }\n\n        // Sync the time and calendar fields.\n        complete();\n\n        if (field == YEAR) {\n            LocalGregorianCalendar.Date d = (LocalGregorianCalendar.Date) jdate.clone();\n            d.addYear(amount);\n            pinDayOfMonth(d);\n            set(ERA, getEraIndex(d));\n            set(YEAR, d.getYear());\n            set(MONTH, d.getMonth() - 1);\n            set(DAY_OF_MONTH, d.getDayOfMonth());\n        } else if (field == MONTH) {\n            LocalGregorianCalendar.Date d = (LocalGregorianCalendar.Date) jdate.clone();\n            d.addMonth(amount);\n            pinDayOfMonth(d);\n            set(ERA, getEraIndex(d));\n            set(YEAR, d.getYear());\n            set(MONTH, d.getMonth() - 1);\n            set(DAY_OF_MONTH, d.getDayOfMonth());\n        } else if (field == ERA) {\n            int era = internalGet(ERA) + amount;\n            if (era < 0) {\n                era = 0;\n            } else if (era > eras.length - 1) {\n                era = eras.length - 1;\n            }\n            set(ERA, era);\n        } else {\n            long delta = amount;\n            long timeOfDay = 0;\n            switch (field) {\n            // Handle the time fields here. Convert the given\n            // amount to milliseconds and call setTimeInMillis.\n            case HOUR:\n            case HOUR_OF_DAY:\n                delta *= 60 * 60 * 1000;        // hours to milliseconds\n                break;\n\n            case MINUTE:\n                delta *= 60 * 1000;             // minutes to milliseconds\n                break;\n\n            case SECOND:\n                delta *= 1000;                  // seconds to milliseconds\n                break;\n\n            case MILLISECOND:\n                break;\n\n            // Handle week, day and AM_PM fields which involves\n            // time zone offset change adjustment. Convert the\n            // given amount to the number of days.\n            case WEEK_OF_YEAR:\n            case WEEK_OF_MONTH:\n            case DAY_OF_WEEK_IN_MONTH:\n                delta *= 7;\n                break;\n\n            case DAY_OF_MONTH: // synonym of DATE\n            case DAY_OF_YEAR:\n            case DAY_OF_WEEK:\n                break;\n\n            case AM_PM:\n                // Convert the amount to the number of days (delta)\n                // and +12 or -12 hours (timeOfDay).\n                delta = amount / 2;\n                timeOfDay = 12 * (amount % 2);\n                break;\n            }\n\n            // The time fields don't require time zone offset change\n            // adjustment.\n            if (field >= HOUR) {\n                setTimeInMillis(time + delta);\n                return;\n            }\n\n            // The rest of the fields (week, day or AM_PM fields)\n            // require time zone offset (both GMT and DST) change\n            // adjustment.\n\n            // Translate the current time to the fixed date and time\n            // of the day.\n            long fd = cachedFixedDate;\n            timeOfDay += internalGet(HOUR_OF_DAY);\n            timeOfDay *= 60;\n            timeOfDay += internalGet(MINUTE);\n            timeOfDay *= 60;\n            timeOfDay += internalGet(SECOND);\n            timeOfDay *= 1000;\n            timeOfDay += internalGet(MILLISECOND);\n            if (timeOfDay >= ONE_DAY) {\n                fd++;\n                timeOfDay -= ONE_DAY;\n            } else if (timeOfDay < 0) {\n                fd--;\n                timeOfDay += ONE_DAY;\n            }\n\n            fd += delta; // fd is the expected fixed date after the calculation\n            int zoneOffset = internalGet(ZONE_OFFSET) + internalGet(DST_OFFSET);\n            setTimeInMillis((fd - EPOCH_OFFSET) * ONE_DAY + timeOfDay - zoneOffset);\n            zoneOffset -= internalGet(ZONE_OFFSET) + internalGet(DST_OFFSET);\n            // If the time zone offset has changed, then adjust the difference.\n            if (zoneOffset != 0) {\n                setTimeInMillis(time + zoneOffset);\n                long fd2 = cachedFixedDate;\n                // If the adjustment has changed the date, then take\n                // the previous one.\n                if (fd2 != fd) {\n                    setTimeInMillis(time - zoneOffset);\n                }\n            }\n        }\n    }"}
{"Number":"1049","API Relative Path":"java.util.JapaneseImperialCalendar.java-roll(int-int)","Corresponding Source":"/**\n     * Adds a signed amount to the specified calendar field without changing larger fields.\n     * A negative roll amount means to subtract from field without changing\n     * larger fields. If the specified amount is 0, this method performs nothing.\n     *\n     * <p>This method calls {@link #complete()} before adding the\n     * amount so that all the calendar fields are normalized. If there\n     * is any calendar field having an out-of-range value in non-lenient mode, then an\n     * <code>IllegalArgumentException<\/code> is thrown.\n     *\n     * @param field the calendar field.\n     * @param amount the signed amount to add to <code>field<\/code>.\n     * @exception IllegalArgumentException if <code>field<\/code> is\n     * <code>ZONE_OFFSET<\/code>, <code>DST_OFFSET<\/code>, or unknown,\n     * or if any calendar fields have out-of-range values in\n     * non-lenient mode.\n     * @see #roll(int,boolean)\n     * @see #add(int,int)\n     * @see #set(int,int)\n     */\n    public void roll(int field, int amount) {\n        // If amount == 0, do nothing even the given field is out of\n        // range. This is tested by JCK.\n        if (amount == 0) {\n            return;\n        }\n\n        if (field < 0 || field >= ZONE_OFFSET) {\n            throw new IllegalArgumentException();\n        }\n\n        // Sync the time and calendar fields.\n        complete();\n\n        int min = getMinimum(field);\n        int max = getMaximum(field);\n\n        switch (field) {\n        case ERA:\n        case AM_PM:\n        case MINUTE:\n        case SECOND:\n        case MILLISECOND:\n            // These fields are handled simply, since they have fixed\n            // minima and maxima. Other fields are complicated, since\n            // the range within they must roll varies depending on the\n            // date, a time zone and the era transitions.\n            break;\n\n        case HOUR:\n        case HOUR_OF_DAY:\n            {\n                int unit = max + 1; // 12 or 24 hours\n                int h = internalGet(field);\n                int nh = (h + amount) % unit;\n                if (nh < 0) {\n                    nh += unit;\n                }\n                time += ONE_HOUR * (nh - h);\n\n                // The day might have changed, which could happen if\n                // the daylight saving time transition brings it to\n                // the next day, although it's very unlikely. But we\n                // have to make sure not to change the larger fields.\n                CalendarDate d = jcal.getCalendarDate(time, getZone());\n                if (internalGet(DAY_OF_MONTH) != d.getDayOfMonth()) {\n                    d.setEra(jdate.getEra());\n                    d.setDate(internalGet(YEAR),\n                              internalGet(MONTH) + 1,\n                              internalGet(DAY_OF_MONTH));\n                    if (field == HOUR) {\n                        assert (internalGet(AM_PM) == PM);\n                        d.addHours(+12); // restore PM\n                    }\n                    time = jcal.getTime(d);\n                }\n                int hourOfDay = d.getHours();\n                internalSet(field, hourOfDay % unit);\n                if (field == HOUR) {\n                    internalSet(HOUR_OF_DAY, hourOfDay);\n                } else {\n                    internalSet(AM_PM, hourOfDay / 12);\n                    internalSet(HOUR, hourOfDay % 12);\n                }\n\n                // Time zone offset and/or daylight saving might have changed.\n                int zoneOffset = d.getZoneOffset();\n                int saving = d.getDaylightSaving();\n                internalSet(ZONE_OFFSET, zoneOffset - saving);\n                internalSet(DST_OFFSET, saving);\n                return;\n            }\n\n        case YEAR:\n            min = getActualMinimum(field);\n            max = getActualMaximum(field);\n            break;\n\n        case MONTH:\n            // Rolling the month involves both pinning the final value to [0, 11]\n            // and adjusting the DAY_OF_MONTH if necessary.  We only adjust the\n            // DAY_OF_MONTH if, after updating the MONTH field, it is illegal.\n            // E.g., <jan31>.roll(MONTH, 1) -> <feb28> or <feb29>.\n            {\n                if (!isTransitionYear(jdate.getNormalizedYear())) {\n                    int year = jdate.getYear();\n                    if (year == getMaximum(YEAR)) {\n                        CalendarDate jd = jcal.getCalendarDate(time, getZone());\n                        CalendarDate d = jcal.getCalendarDate(Long.MAX_VALUE, getZone());\n                        max = d.getMonth() - 1;\n                        int n = getRolledValue(internalGet(field), amount, min, max);\n                        if (n == max) {\n                            // To avoid overflow, use an equivalent year.\n                            jd.addYear(-400);\n                            jd.setMonth(n + 1);\n                            if (jd.getDayOfMonth() > d.getDayOfMonth()) {\n                                jd.setDayOfMonth(d.getDayOfMonth());\n                                jcal.normalize(jd);\n                            }\n                            if (jd.getDayOfMonth() == d.getDayOfMonth()\n                                && jd.getTimeOfDay() > d.getTimeOfDay()) {\n                                jd.setMonth(n + 1);\n                                jd.setDayOfMonth(d.getDayOfMonth() - 1);\n                                jcal.normalize(jd);\n                                // Month may have changed by the normalization.\n                                n = jd.getMonth() - 1;\n                            }\n                            set(DAY_OF_MONTH, jd.getDayOfMonth());\n                        }\n                        set(MONTH, n);\n                    } else if (year == getMinimum(YEAR)) {\n                        CalendarDate jd = jcal.getCalendarDate(time, getZone());\n                        CalendarDate d = jcal.getCalendarDate(Long.MIN_VALUE, getZone());\n                        min = d.getMonth() - 1;\n                        int n = getRolledValue(internalGet(field), amount, min, max);\n                        if (n == min) {\n                            // To avoid underflow, use an equivalent year.\n                            jd.addYear(+400);\n                            jd.setMonth(n + 1);\n                            if (jd.getDayOfMonth() < d.getDayOfMonth()) {\n                                jd.setDayOfMonth(d.getDayOfMonth());\n                                jcal.normalize(jd);\n                            }\n                            if (jd.getDayOfMonth() == d.getDayOfMonth()\n                                && jd.getTimeOfDay() < d.getTimeOfDay()) {\n                                jd.setMonth(n + 1);\n                                jd.setDayOfMonth(d.getDayOfMonth() + 1);\n                                jcal.normalize(jd);\n                                // Month may have changed by the normalization.\n                                n = jd.getMonth() - 1;\n                            }\n                            set(DAY_OF_MONTH, jd.getDayOfMonth());\n                        }\n                        set(MONTH, n);\n                    } else {\n                        int mon = (internalGet(MONTH) + amount) % 12;\n                        if (mon < 0) {\n                            mon += 12;\n                        }\n                        set(MONTH, mon);\n\n                        // Keep the day of month in the range.  We\n                        // don't want to spill over into the next\n                        // month; e.g., we don't want jan31 + 1 mo ->\n                        // feb31 -> mar3.\n                        int monthLen = monthLength(mon);\n                        if (internalGet(DAY_OF_MONTH) > monthLen) {\n                            set(DAY_OF_MONTH, monthLen);\n                        }\n                    }\n                } else {\n                    int eraIndex = getEraIndex(jdate);\n                    CalendarDate transition = null;\n                    if (jdate.getYear() == 1) {\n                        transition = eras[eraIndex].getSinceDate();\n                        min = transition.getMonth() - 1;\n                    } else {\n                        if (eraIndex < eras.length - 1) {\n                            transition = eras[eraIndex + 1].getSinceDate();\n                            if (transition.getYear() == jdate.getNormalizedYear()) {\n                                max = transition.getMonth() - 1;\n                                if (transition.getDayOfMonth() == 1) {\n                                    max--;\n                                }\n                            }\n                        }\n                    }\n\n                    if (min == max) {\n                        // The year has only one month. No need to\n                        // process further. (Showa Gan-nen (year 1)\n                        // and the last year have only one month.)\n                        return;\n                    }\n                    int n = getRolledValue(internalGet(field), amount, min, max);\n                    set(MONTH, n);\n                    if (n == min) {\n                        if (!(transition.getMonth() == BaseCalendar.JANUARY\n                              && transition.getDayOfMonth() == 1)) {\n                            if (jdate.getDayOfMonth() < transition.getDayOfMonth()) {\n                                set(DAY_OF_MONTH, transition.getDayOfMonth());\n                            }\n                        }\n                    } else if (n == max && (transition.getMonth() - 1 == n)) {\n                        int dom = transition.getDayOfMonth();\n                        if (jdate.getDayOfMonth() >= dom) {\n                            set(DAY_OF_MONTH, dom - 1);\n                        }\n                    }\n                }\n                return;\n            }\n\n        case WEEK_OF_YEAR:\n            {\n                int y = jdate.getNormalizedYear();\n                max = getActualMaximum(WEEK_OF_YEAR);\n                set(DAY_OF_WEEK, internalGet(DAY_OF_WEEK)); // update stamp[field]\n                int woy = internalGet(WEEK_OF_YEAR);\n                int value = woy + amount;\n                if (!isTransitionYear(jdate.getNormalizedYear())) {\n                    int year = jdate.getYear();\n                    if (year == getMaximum(YEAR)) {\n                        max = getActualMaximum(WEEK_OF_YEAR);\n                    } else if (year == getMinimum(YEAR)) {\n                        min = getActualMinimum(WEEK_OF_YEAR);\n                        max = getActualMaximum(WEEK_OF_YEAR);\n                        if (value > min && value < max) {\n                            set(WEEK_OF_YEAR, value);\n                            return;\n                        }\n\n                    }\n                    // If the new value is in between min and max\n                    // (exclusive), then we can use the value.\n                    if (value > min && value < max) {\n                        set(WEEK_OF_YEAR, value);\n                        return;\n                    }\n                    long fd = cachedFixedDate;\n                    // Make sure that the min week has the current DAY_OF_WEEK\n                    long day1 = fd - (7 * (woy - min));\n                    if (year != getMinimum(YEAR)) {\n                        if (gcal.getYearFromFixedDate(day1) != y) {\n                            min++;\n                        }\n                    } else {\n                        CalendarDate d = jcal.getCalendarDate(Long.MIN_VALUE, getZone());\n                        if (day1 < jcal.getFixedDate(d)) {\n                            min++;\n                        }\n                    }\n\n                    // Make sure the same thing for the max week\n                    fd += 7 * (max - internalGet(WEEK_OF_YEAR));\n                    if (gcal.getYearFromFixedDate(fd) != y) {\n                        max--;\n                    }\n                    break;\n                }\n\n                // Handle transition here.\n                long fd = cachedFixedDate;\n                long day1 = fd - (7 * (woy - min));\n                // Make sure that the min week has the current DAY_OF_WEEK\n                LocalGregorianCalendar.Date d = getCalendarDate(day1);\n                if (!(d.getEra() == jdate.getEra() && d.getYear() == jdate.getYear())) {\n                    min++;\n                }\n\n                // Make sure the same thing for the max week\n                fd += 7 * (max - woy);\n                jcal.getCalendarDateFromFixedDate(d, fd);\n                if (!(d.getEra() == jdate.getEra() && d.getYear() == jdate.getYear())) {\n                    max--;\n                }\n                // value: the new WEEK_OF_YEAR which must be converted\n                // to month and day of month.\n                value = getRolledValue(woy, amount, min, max) - 1;\n                d = getCalendarDate(day1 + value * 7);\n                set(MONTH, d.getMonth() - 1);\n                set(DAY_OF_MONTH, d.getDayOfMonth());\n                return;\n            }\n\n        case WEEK_OF_MONTH:\n            {\n                boolean isTransitionYear = isTransitionYear(jdate.getNormalizedYear());\n                // dow: relative day of week from the first day of week\n                int dow = internalGet(DAY_OF_WEEK) - getFirstDayOfWeek();\n                if (dow < 0) {\n                    dow += 7;\n                }\n\n                long fd = cachedFixedDate;\n                long month1;     // fixed date of the first day (usually 1) of the month\n                int monthLength; // actual month length\n                if (isTransitionYear) {\n                    month1 = getFixedDateMonth1(jdate, fd);\n                    monthLength = actualMonthLength();\n                } else {\n                    month1 = fd - internalGet(DAY_OF_MONTH) + 1;\n                    monthLength = jcal.getMonthLength(jdate);\n                }\n\n                // the first day of week of the month.\n                long monthDay1st = LocalGregorianCalendar.getDayOfWeekDateOnOrBefore(month1 + 6,\n                                                                                     getFirstDayOfWeek());\n                // if the week has enough days to form a week, the\n                // week starts from the previous month.\n                if ((int)(monthDay1st - month1) >= getMinimalDaysInFirstWeek()) {\n                    monthDay1st -= 7;\n                }\n                max = getActualMaximum(field);\n\n                // value: the new WEEK_OF_MONTH value\n                int value = getRolledValue(internalGet(field), amount, 1, max) - 1;\n\n                // nfd: fixed date of the rolled date\n                long nfd = monthDay1st + value * 7 + dow;\n\n                // Unlike WEEK_OF_YEAR, we need to change day of week if the\n                // nfd is out of the month.\n                if (nfd < month1) {\n                    nfd = month1;\n                } else if (nfd >= (month1 + monthLength)) {\n                    nfd = month1 + monthLength - 1;\n                }\n                set(DAY_OF_MONTH, (int)(nfd - month1) + 1);\n                return;\n            }\n\n        case DAY_OF_MONTH:\n            {\n                if (!isTransitionYear(jdate.getNormalizedYear())) {\n                    max = jcal.getMonthLength(jdate);\n                    break;\n                }\n\n                // TODO: Need to change the spec to be usable DAY_OF_MONTH rolling...\n\n                // Transition handling. We can't change year and era\n                // values here due to the Calendar roll spec!\n                long month1 = getFixedDateMonth1(jdate, cachedFixedDate);\n\n                // It may not be a regular month. Convert the date and range to\n                // the relative values, perform the roll, and\n                // convert the result back to the rolled date.\n                int value = getRolledValue((int)(cachedFixedDate - month1), amount,\n                                           0, actualMonthLength() - 1);\n                LocalGregorianCalendar.Date d = getCalendarDate(month1 + value);\n                assert getEraIndex(d) == internalGetEra()\n                    && d.getYear() == internalGet(YEAR) && d.getMonth()-1 == internalGet(MONTH);\n                set(DAY_OF_MONTH, d.getDayOfMonth());\n                return;\n            }\n\n        case DAY_OF_YEAR:\n            {\n                max = getActualMaximum(field);\n                if (!isTransitionYear(jdate.getNormalizedYear())) {\n                    break;\n                }\n\n                // Handle transition. We can't change year and era values\n                // here due to the Calendar roll spec.\n                int value = getRolledValue(internalGet(DAY_OF_YEAR), amount, min, max);\n                long jan0 = cachedFixedDate - internalGet(DAY_OF_YEAR);\n                LocalGregorianCalendar.Date d = getCalendarDate(jan0 + value);\n                assert getEraIndex(d) == internalGetEra() && d.getYear() == internalGet(YEAR);\n                set(MONTH, d.getMonth() - 1);\n                set(DAY_OF_MONTH, d.getDayOfMonth());\n                return;\n            }\n\n        case DAY_OF_WEEK:\n            {\n                int normalizedYear = jdate.getNormalizedYear();\n                if (!isTransitionYear(normalizedYear) && !isTransitionYear(normalizedYear - 1)) {\n                    // If the week of year is in the same year, we can\n                    // just change DAY_OF_WEEK.\n                    int weekOfYear = internalGet(WEEK_OF_YEAR);\n                    if (weekOfYear > 1 && weekOfYear < 52) {\n                        set(WEEK_OF_YEAR, internalGet(WEEK_OF_YEAR));\n                        max = SATURDAY;\n                        break;\n                    }\n                }\n\n                // We need to handle it in a different way around year\n                // boundaries and in the transition year. Note that\n                // changing era and year values violates the roll\n                // rule: not changing larger calendar fields...\n                amount %= 7;\n                if (amount == 0) {\n                    return;\n                }\n                long fd = cachedFixedDate;\n                long dowFirst = LocalGregorianCalendar.getDayOfWeekDateOnOrBefore(fd, getFirstDayOfWeek());\n                fd += amount;\n                if (fd < dowFirst) {\n                    fd += 7;\n                } else if (fd >= dowFirst + 7) {\n                    fd -= 7;\n                }\n                LocalGregorianCalendar.Date d = getCalendarDate(fd);\n                set(ERA, getEraIndex(d));\n                set(d.getYear(), d.getMonth() - 1, d.getDayOfMonth());\n                return;\n            }\n\n        case DAY_OF_WEEK_IN_MONTH:\n            {\n                min = 1; // after having normalized, min should be 1.\n                if (!isTransitionYear(jdate.getNormalizedYear())) {\n                    int dom = internalGet(DAY_OF_MONTH);\n                    int monthLength = jcal.getMonthLength(jdate);\n                    int lastDays = monthLength % 7;\n                    max = monthLength / 7;\n                    int x = (dom - 1) % 7;\n                    if (x < lastDays) {\n                        max++;\n                    }\n                    set(DAY_OF_WEEK, internalGet(DAY_OF_WEEK));\n                    break;\n                }\n\n                // Transition year handling.\n                long fd = cachedFixedDate;\n                long month1 = getFixedDateMonth1(jdate, fd);\n                int monthLength = actualMonthLength();\n                int lastDays = monthLength % 7;\n                max = monthLength / 7;\n                int x = (int)(fd - month1) % 7;\n                if (x < lastDays) {\n                    max++;\n                }\n                int value = getRolledValue(internalGet(field), amount, min, max) - 1;\n                fd = month1 + value * 7 + x;\n                LocalGregorianCalendar.Date d = getCalendarDate(fd);\n                set(DAY_OF_MONTH, d.getDayOfMonth());\n                return;\n            }\n        }\n\n        set(field, getRolledValue(internalGet(field), amount, min, max));\n    }"}
{"Number":"1050","API Relative Path":"java.util.jar.JarFile.java-JarFile(String)","Corresponding Source":"/**\n     * Creates a new <code>JarFile<\/code> to read from the specified\n     * file <code>name<\/code>. The <code>JarFile<\/code> will be verified if\n     * it is signed.\n     * @param name the name of the jar file to be opened for reading\n     * @throws IOException if an I/O error has occurred\n     * @throws SecurityException if access to the file is denied\n     *         by the SecurityManager\n     */\n    public JarFile(String name) throws IOException {\n        this(new File(name), true, ZipFile.OPEN_READ);\n    }"}
{"Number":"1051","API Relative Path":"java.util.jar.JarFile.java-JarFile(String-boolean)","Corresponding Source":"/**\n     * Creates a new <code>JarFile<\/code> to read from the specified\n     * file <code>name<\/code>.\n     * @param name the name of the jar file to be opened for reading\n     * @param verify whether or not to verify the jar file if\n     * it is signed.\n     * @throws IOException if an I/O error has occurred\n     * @throws SecurityException if access to the file is denied\n     *         by the SecurityManager\n     */\n    public JarFile(String name, boolean verify) throws IOException {\n        this(new File(name), verify, ZipFile.OPEN_READ);\n    }"}
{"Number":"1052","API Relative Path":"java.util.jar.JarOutputStream.java-JarOutputStream(OutputStream-Manifest)","Corresponding Source":"/**\n     * Creates a new <code>JarOutputStream<\/code> with the specified\n     * <code>Manifest<\/code>. The manifest is written as the first\n     * entry to the output stream.\n     *\n     * @param out the actual output stream\n     * @param man the optional <code>Manifest<\/code>\n     * @exception IOException if an I/O error has occurred\n     */\n    public JarOutputStream(OutputStream out, Manifest man) throws IOException {\n        super(out);\n        if (man == null) {\n            throw new NullPointerException(\"man\");\n        }\n        ZipEntry e = new ZipEntry(JarFile.MANIFEST_NAME);\n        putNextEntry(e);\n        man.write(new BufferedOutputStream(this));\n        closeEntry();\n    }"}
{"Number":"1053","API Relative Path":"java.util.jar.JarVerifier.java-beginEntry(JarEntry-ManifestEntryVerifier)","Corresponding Source":"/**\n     * This method scans to see which entry we're parsing and\n     * keeps various state information depending on what type of\n     * file is being parsed.\n     */\n    public void beginEntry(JarEntry je, ManifestEntryVerifier mev)\n        throws IOException\n    {\n        if (je == null)\n            return;\n\n        if (debug != null) {\n            debug.println(\"beginEntry \"+je.getName());\n        }\n\n        String name = je.getName();\n\n        /*\n         * Assumptions:\n         * 1. The manifest should be the first entry in the META-INF directory.\n         * 2. The .SF/.DSA/.EC files follow the manifest, before any normal entries\n         * 3. Any of the following will throw a SecurityException:\n         *    a. digest mismatch between a manifest section and\n         *       the SF section.\n         *    b. digest mismatch between the actual jar entry and the manifest\n         */\n\n        if (parsingMeta) {\n            String uname = name.toUpperCase(Locale.ENGLISH);\n            if ((uname.startsWith(\"META-INF/\") ||\n                 uname.startsWith(\"/META-INF/\"))) {\n\n                if (je.isDirectory()) {\n                    mev.setEntry(null, je);\n                    return;\n                }\n\n                if (uname.equals(JarFile.MANIFEST_NAME) ||\n                        uname.equals(JarIndex.INDEX_NAME)) {\n                    return;\n                }\n\n                if (SignatureFileVerifier.isBlockOrSF(uname)) {\n                    /* We parse only DSA, RSA or EC PKCS7 blocks. */\n                    parsingBlockOrSF = true;\n                    baos.reset();\n                    mev.setEntry(null, je);\n                    return;\n                }\n\n                // If a META-INF entry is not MF or block or SF, they should\n                // be normal entries. According to 2 above, no more block or\n                // SF will appear. Let's doneWithMeta.\n            }\n        }\n\n        if (parsingMeta) {\n            doneWithMeta();\n        }\n\n        if (je.isDirectory()) {\n            mev.setEntry(null, je);\n            return;\n        }\n\n        // be liberal in what you accept. If the name starts with ./, remove\n        // it as we internally canonicalize it with out the ./.\n        if (name.startsWith(\"./\"))\n            name = name.substring(2);\n\n        // be liberal in what you accept. If the name starts with /, remove\n        // it as we internally canonicalize it with out the /.\n        if (name.startsWith(\"/\"))\n            name = name.substring(1);\n\n        // only set the jev object for entries that have a signature\n        // (either verified or not)\n        if (sigFileSigners.get(name) != null ||\n                verifiedSigners.get(name) != null) {\n            mev.setEntry(name, je);\n            return;\n        }\n\n        // don't compute the digest for this entry\n        mev.setEntry(null, je);\n\n        return;\n    }"}
{"Number":"1054","API Relative Path":"java.util.Locale.java-Locale(String-String-String)","Corresponding Source":"/**\n     * Construct a locale from language, country and variant.\n     * This constructor normalizes the language value to lowercase and\n     * the country value to uppercase.\n     * <p>\n     * <b>Note:<\/b>\n     * <ul>\n     * <li>ISO 639 is not a stable standard; some of the language codes it defines\n     * (specifically \"iw\", \"ji\", and \"in\") have changed.  This constructor accepts both the\n     * old codes (\"iw\", \"ji\", and \"in\") and the new codes (\"he\", \"yi\", and \"id\"), but all other\n     * API on Locale will return only the OLD codes.\n     * <li>For backward compatibility reasons, this constructor does not make\n     * any syntactic checks on the input.\n     * <li>The two cases (\"ja\", \"JP\", \"JP\") and (\"th\", \"TH\", \"TH\") are handled specially,\n     * see <a href=\"#special_cases_constructor\">Special Cases<\/a> for more information.\n     * <\/ul>\n     *\n     * @param language An ISO 639 alpha-2 or alpha-3 language code, or a language subtag\n     * up to 8 characters in length.  See the <code>Locale<\/code> class description about\n     * valid language values.\n     * @param country An ISO 3166 alpha-2 country code or a UN M.49 numeric-3 area code.\n     * See the <code>Locale<\/code> class description about valid country values.\n     * @param variant Any arbitrary value used to indicate a variation of a <code>Locale<\/code>.\n     * See the <code>Locale<\/code> class description for the details.\n     * @exception NullPointerException thrown if any argument is null.\n     */\n    public Locale(String language, String country, String variant) {\n        if (language== null || country == null || variant == null) {\n            throw new NullPointerException();\n        }\n        baseLocale = BaseLocale.getInstance(convertOldISOCodes(language), \"\", country, variant);\n        localeExtensions = getCompatibilityExtensions(language, \"\", country, variant);\n    }"}
{"Number":"1055","API Relative Path":"java.util.logging.Handler.java-setErrorManager(ErrorManager)","Corresponding Source":"/**\n     * Define an ErrorManager for this Handler.\n     * <p>\n     * The ErrorManager's \"error\" method will be invoked if any\n     * errors occur while using this Handler.\n     *\n     * @param em  the new ErrorManager\n     * @exception  SecurityException  if a security manager exists and if\n     *             the caller does not have <tt>LoggingPermission(\"control\")<\/tt>.\n     */\n    public synchronized void setErrorManager(ErrorManager em) {\n        checkPermission();\n        if (em == null) {\n           throw new NullPointerException();\n        }\n        errorManager = em;\n    }"}
{"Number":"1056","API Relative Path":"java.util.logging.Handler.java-setLevel(Level)","Corresponding Source":"/**\n     * Set the log level specifying which message levels will be\n     * logged by this <tt>Handler<\/tt>.  Message levels lower than this\n     * value will be discarded.\n     * <p>\n     * The intention is to allow developers to turn on voluminous\n     * logging, but to limit the messages that are sent to certain\n     * <tt>Handlers<\/tt>.\n     *\n     * @param newLevel   the new value for the log level\n     * @exception  SecurityException  if a security manager exists and if\n     *             the caller does not have <tt>LoggingPermission(\"control\")<\/tt>.\n     */\n    public synchronized void setLevel(Level newLevel) throws SecurityException {\n        if (newLevel == null) {\n            throw new NullPointerException();\n        }\n        checkPermission();\n        logLevel = newLevel;\n    }"}
{"Number":"1057","API Relative Path":"java.util.logging.Logger.java-getLogger(String-String)","Corresponding Source":"/**\n     * Find or create a logger for a named subsystem.  If a logger has\n     * already been created with the given name it is returned.  Otherwise\n     * a new logger is created.\n     * <p>\n     * If a new logger is created its log level will be configured\n     * based on the LogManager and it will configured to also send logging\n     * output to its parent's Handlers.  It will be registered in\n     * the LogManager global namespace.\n     * <p>\n     * Note: The LogManager may only retain a weak reference to the newly\n     * created Logger. It is important to understand that a previously\n     * created Logger with the given name may be garbage collected at any\n     * time if there is no strong reference to the Logger. In particular,\n     * this means that two back-to-back calls like\n     * {@code getLogger(\"MyLogger\", ...).log(...)} may use different Logger\n     * objects named \"MyLogger\" if there is no strong reference to the\n     * Logger named \"MyLogger\" elsewhere in the program.\n     * <p>\n     * If the named Logger already exists and does not yet have a\n     * localization resource bundle then the given resource bundle\n     * name is used.  If the named Logger already exists and has\n     * a different resource bundle name then an IllegalArgumentException\n     * is thrown.\n     * <p>\n     * @param   name    A name for the logger.  This should\n     *                          be a dot-separated name and should normally\n     *                          be based on the package name or class name\n     *                          of the subsystem, such as java.net\n     *                          or javax.swing\n     * @param   resourceBundleName  name of ResourceBundle to be used for localizing\n     *                          messages for this logger. May be {@code null}\n     *                          if none of the messages require localization.\n     * @return a suitable Logger\n     * @throws MissingResourceException if the resourceBundleName is non-null and\n     *             no corresponding resource can be found.\n     * @throws IllegalArgumentException if the Logger already exists and uses\n     *             a different resource bundle name; or if\n     *             {@code resourceBundleName} is {@code null} but the named\n     *             logger has a resource bundle set.\n     * @throws NullPointerException if the name is null.\n     */\n\n    // Synchronization is not required here. All synchronization for\n    // adding a new Logger object is handled by LogManager.addLogger().\n    @CallerSensitive\n    public static Logger getLogger(String name, String resourceBundleName) {\n        Class<?> callerClass = Reflection.getCallerClass();\n        Logger result = demandLogger(name, resourceBundleName, callerClass);\n\n        // MissingResourceException or IllegalArgumentException can be\n        // thrown by setupResourceInfo().\n        // We have to set the callers ClassLoader here in case demandLogger\n        // above found a previously created Logger.  This can happen, for\n        // example, if Logger.getLogger(name) is called and subsequently\n        // Logger.getLogger(name, resourceBundleName) is called.  In this case\n        // we won't necessarily have the correct classloader saved away, so\n        // we need to set it here, too.\n\n        result.setupResourceInfo(resourceBundleName, callerClass);\n        return result;\n    }"}
{"Number":"1058","API Relative Path":"java.util.logging.Logger.java-log(LogRecord)","Corresponding Source":"// private support method for logging.\n    // We fill in the logger name, resource bundle name, and\n    // resource bundle and then call \"void log(LogRecord)\".\n    private void doLog(LogRecord lr) {\n        lr.setLoggerName(name);\n        final LoggerBundle lb = getEffectiveLoggerBundle();\n        final ResourceBundle  bundle = lb.userBundle;\n        final String ebname = lb.resourceBundleName;\n        if (ebname != null && bundle != null) {\n            lr.setResourceBundleName(ebname);\n            lr.setResourceBundle(bundle);\n        }\n        log(lr);\n    }"}
{"Number":"1059","API Relative Path":"java.util.logging.Logger.java-setParent(Logger)","Corresponding Source":"// Private method to do the work for parenting a child\n    // Logger onto a parent logger.\n    private void doSetParent(Logger newParent) {\n\n        // System.err.println(\"doSetParent \\\"\" + getName() + \"\\\" \\\"\"\n        //                              + newParent.getName() + \"\\\"\");\n\n        synchronized (treeLock) {\n\n            // Remove ourself from any previous parent.\n            LogManager.LoggerWeakRef ref = null;\n            if (parent != null) {\n                // assert parent.kids != null;\n                for (Iterator<LogManager.LoggerWeakRef> iter = parent.kids.iterator(); iter.hasNext(); ) {\n                    ref = iter.next();\n                    Logger kid =  ref.get();\n                    if (kid == this) {\n                        // ref is used down below to complete the reparenting\n                        iter.remove();\n                        break;\n                    } else {\n                        ref = null;\n                    }\n                }\n                // We have now removed ourself from our parents' kids.\n            }\n\n            // Set our new parent.\n            parent = newParent;\n            if (parent.kids == null) {\n                parent.kids = new ArrayList<>(2);\n            }\n            if (ref == null) {\n                // we didn't have a previous parent\n                ref = manager.new LoggerWeakRef(this);\n            }\n            ref.setParentRef(new WeakReference<>(parent));\n            parent.kids.add(ref);\n\n            // As a result of the reparenting, the effective level\n            // may have changed for us and our children.\n            updateEffectiveLevel();\n\n        }\n    }"}
{"Number":"1060","API Relative Path":"java.util.logging.LogManager.java-removePropertyChangeListener(PropertyChangeListener)","Corresponding Source":"/**\n     * Removes an event listener for property change events.\n     * If the same listener instance has been added to the listener table\n     * through multiple invocations of <CODE>addPropertyChangeListener<\/CODE>,\n     * then an equivalent number of\n     * <CODE>removePropertyChangeListener<\/CODE> invocations are required to remove\n     * all instances of that listener from the listener table.\n     * <P>\n     * Returns silently if the given listener is not found.\n     *\n     * <p><b>WARNING:<\/b> This method is omitted from this class in all subset\n     * Profiles of Java SE that do not include the {@code java.beans} package.\n     * <\/p>\n     *\n     * @param l  event listener (can be null)\n     * @exception  SecurityException  if a security manager exists and if\n     *             the caller does not have LoggingPermission(\"control\").\n     * @deprecated The dependency on {@code PropertyChangeListener} creates a\n     *             significant impediment to future modularization of the Java\n     *             platform. This method will be removed in a future release.\n     *             The global {@code LogManager} can detect changes to the\n     *             logging configuration by overridding the {@link\n     *             #readConfiguration readConfiguration} method.\n     */\n    @Deprecated\n    public void removePropertyChangeListener(PropertyChangeListener l) throws SecurityException {\n        checkPermission();\n        if (l != null) {\n            PropertyChangeListener listener = l;\n            synchronized (listenerMap) {\n                Integer value = listenerMap.get(listener);\n                if (value != null) {\n                    // remove from map if registration count is 1, otherwise\n                    // just decrement its count\n                    int i = value.intValue();\n                    if (i == 1) {\n                        listenerMap.remove(listener);\n                    } else {\n                        assert i > 1;\n                        listenerMap.put(listener, i - 1);\n                    }\n                }\n            }\n        }\n    }"}
{"Number":"1061","API Relative Path":"java.util.logging.LogRecord.java-setLevel(Level)","Corresponding Source":"/**\n     * Set the logging message level, for example Level.SEVERE.\n     * @param level the logging message level\n     */\n    public void setLevel(Level level) {\n        if (level == null) {\n            throw new NullPointerException();\n        }\n        this.level = level;\n    }"}
{"Number":"1062","API Relative Path":"java.util.logging.MemoryHandler.java-MemoryHandler(Handler-int-Level)","Corresponding Source":"/**\n     * Create a <tt>MemoryHandler<\/tt>.\n     * <p>\n     * The <tt>MemoryHandler<\/tt> is configured based on <tt>LogManager<\/tt>\n     * properties (or their default values) except that the given <tt>pushLevel<\/tt>\n     * argument and buffer size argument are used.\n     *\n     * @param target  the Handler to which to publish output.\n     * @param size    the number of log records to buffer (must be greater than zero)\n     * @param pushLevel  message level to push on\n     *\n     * @throws IllegalArgumentException if {@code size is <= 0}\n     */\n    public MemoryHandler(Handler target, int size, Level pushLevel) {\n        if (target == null || pushLevel == null) {\n            throw new NullPointerException();\n        }\n        if (size <= 0) {\n            throw new IllegalArgumentException();\n        }\n        sealed = false;\n        configure();\n        sealed = true;\n        this.target = target;\n        this.pushLevel = pushLevel;\n        this.size = size;\n        init();\n    }"}
{"Number":"1063","API Relative Path":"java.util.logging.MemoryHandler.java-setPushLevel(Level)","Corresponding Source":"/**\n     * Set the <tt>pushLevel<\/tt>.  After a <tt>LogRecord<\/tt> is copied\n     * into our internal buffer, if its level is greater than or equal to\n     * the <tt>pushLevel<\/tt>, then <tt>push<\/tt> will be called.\n     *\n     * @param newLevel the new value of the <tt>pushLevel<\/tt>\n     * @exception  SecurityException  if a security manager exists and if\n     *             the caller does not have <tt>LoggingPermission(\"control\")<\/tt>.\n     */\n    public synchronized void setPushLevel(Level newLevel) throws SecurityException {\n        if (newLevel == null) {\n            throw new NullPointerException();\n        }\n        checkPermission();\n        pushLevel = newLevel;\n    }"}
{"Number":"1064","API Relative Path":"java.util.logging.StreamHandler.java-setEncoding(String)","Corresponding Source":"/**\n     * Set (or change) the character encoding used by this <tt>Handler<\/tt>.\n     * <p>\n     * The encoding should be set before any <tt>LogRecords<\/tt> are written\n     * to the <tt>Handler<\/tt>.\n     *\n     * @param encoding  The name of a supported character encoding.\n     *        May be null, to indicate the default platform encoding.\n     * @exception  SecurityException  if a security manager exists and if\n     *             the caller does not have <tt>LoggingPermission(\"control\")<\/tt>.\n     * @exception  UnsupportedEncodingException if the named encoding is\n     *          not supported.\n     */\n    @Override\n    public synchronized void setEncoding(String encoding)\n                        throws SecurityException, java.io.UnsupportedEncodingException {\n        super.setEncoding(encoding);\n        if (output == null) {\n            return;\n        }\n        // Replace the current writer with a writer for the new encoding.\n        flush();\n        if (encoding == null) {\n            writer = new OutputStreamWriter(output);\n        } else {\n            writer = new OutputStreamWriter(output, encoding);\n        }\n    }"}
{"Number":"1065","API Relative Path":"java.util.logging.StreamHandler.java-StreamHandler(OutputStream-Formatter)","Corresponding Source":"/**\n     * Create a <tt>StreamHandler<\/tt> with a given <tt>Formatter<\/tt>\n     * and output stream.\n     * <p>\n     * @param out         the target output stream\n     * @param formatter   Formatter to be used to format output\n     */\n    public StreamHandler(OutputStream out, Formatter formatter) {\n        sealed = false;\n        configure();\n        setFormatter(formatter);\n        setOutputStream(out);\n        sealed = true;\n    }"}
{"Number":"1066","API Relative Path":"java.util.MissingFormatArgumentException.java-MissingFormatArgumentException(String)","Corresponding Source":"/**\n     * Constructs an instance of this class with the unmatched format\n     * specifier.\n     *\n     * @param  s\n     *         Format specifier which does not have a corresponding argument\n     */\n    public MissingFormatArgumentException(String s) {\n        if (s == null)\n            throw new NullPointerException();\n        this.s = s;\n    }"}
{"Number":"1067","API Relative Path":"java.util.MissingFormatWidthException.java-MissingFormatWidthException(String)","Corresponding Source":"/**\n     * Constructs an instance of this class with the specified format\n     * specifier.\n     *\n     * @param  s\n     *         The format specifier which does not have a width\n     */\n    public MissingFormatWidthException(String s) {\n        if (s == null)\n            throw new NullPointerException();\n        this.s = s;\n    }"}
{"Number":"1068","API Relative Path":"java.util.prefs.AbstractPreferences.java-remove(String)","Corresponding Source":"/**\n     * Implements the <tt>remove(String)<\/tt> method as per the specification\n     * in {@link Preferences#remove(String)}.\n     *\n     * <p>This implementation obtains this preference node's lock,\n     * checks that the node has not been removed, invokes\n     * {@link #removeSpi(String)} and if there are any preference\n     * change listeners, enqueues a notification event for processing by the\n     * event dispatch thread.\n     *\n     * @param key key whose mapping is to be removed from the preference node.\n     * @throws IllegalStateException if this node (or an ancestor) has been\n     *         removed with the {@link #removeNode()} method.\n     * @throws NullPointerException {@inheritDoc}.\n     */\n    public void remove(String key) {\n        Objects.requireNonNull(key, \"Specified key cannot be null\");\n        synchronized(lock) {\n            if (removed)\n                throw new IllegalStateException(\"Node has been removed.\");\n\n            removeSpi(key);\n            enqueuePreferenceChangeEvent(key, null);\n        }\n    }"}
{"Number":"1069","API Relative Path":"java.util.regex.Matcher.java-end(int)","Corresponding Source":"/**\n     * Returns the offset after the last character of the subsequence\n     * captured by the given group during the previous match operation.\n     *\n     * <p> <a href=\"Pattern.html#cg\">Capturing groups<\/a> are indexed from left\n     * to right, starting at one.  Group zero denotes the entire pattern, so\n     * the expression <i>m.<\/i><tt>end(0)<\/tt> is equivalent to\n     * <i>m.<\/i><tt>end()<\/tt>.  <\/p>\n     *\n     * @param  group\n     *         The index of a capturing group in this matcher's pattern\n     *\n     * @return  The offset after the last character captured by the group,\n     *          or <tt>-1<\/tt> if the match was successful\n     *          but the group itself did not match anything\n     *\n     * @throws  IllegalStateException\n     *          If no match has yet been attempted,\n     *          or if the previous match operation failed\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If there is no capturing group in the pattern\n     *          with the given index\n     */\n    public int end(int group) {\n        if (first < 0)\n            throw new IllegalStateException(\"No match available\");\n        if (group < 0 || group > groupCount())\n            throw new IndexOutOfBoundsException(\"No group \" + group);\n        return groups[group * 2 + 1];\n    }"}
{"Number":"1070","API Relative Path":"java.util.regex.Matcher.java-end(String)","Corresponding Source":"/**\n     * Returns the offset after the last character of the subsequence\n     * captured by the given <a href=\"Pattern.html#groupname\">named-capturing\n     * group<\/a> during the previous match operation.\n     *\n     * @param  name\n     *         The name of a named-capturing group in this matcher's pattern\n     *\n     * @return  The offset after the last character captured by the group,\n     *          or {@code -1} if the match was successful\n     *          but the group itself did not match anything\n     *\n     * @throws  IllegalStateException\n     *          If no match has yet been attempted,\n     *          or if the previous match operation failed\n     *\n     * @throws  IllegalArgumentException\n     *          If there is no capturing group in the pattern\n     *          with the given name\n     * @since 1.8\n     */\n    public int end(String name) {\n        return groups[getMatchedGroupIndex(name) * 2 + 1];\n    }"}
{"Number":"1071","API Relative Path":"java.util.regex.Matcher.java-find(int)","Corresponding Source":"/**\n     * Resets this matcher and then attempts to find the next subsequence of\n     * the input sequence that matches the pattern, starting at the specified\n     * index.\n     *\n     * <p> If the match succeeds then more information can be obtained via the\n     * <tt>start<\/tt>, <tt>end<\/tt>, and <tt>group<\/tt> methods, and subsequent\n     * invocations of the {@link #find()} method will start at the first\n     * character not matched by this match.  <\/p>\n     *\n     * @param start the index to start searching for a match\n     * @throws  IndexOutOfBoundsException\n     *          If start is less than zero or if start is greater than the\n     *          length of the input sequence.\n     *\n     * @return  <tt>true<\/tt> if, and only if, a subsequence of the input\n     *          sequence starting at the given index matches this matcher's\n     *          pattern\n     */\n    public boolean find(int start) {\n        int limit = getTextLength();\n        if ((start < 0) || (start > limit))\n            throw new IndexOutOfBoundsException(\"Illegal start index\");\n        reset();\n        return search(start);\n    }"}
{"Number":"1072","API Relative Path":"java.util.regex.Matcher.java-getMatchedGroupIndex(String)","Corresponding Source":"/**\n     * Returns the group index of the matched capturing group.\n     *\n     * @return the index of the named-capturing group\n     */\n    int getMatchedGroupIndex(String name) {\n        Objects.requireNonNull(name, \"Group name\");\n        if (first < 0)\n            throw new IllegalStateException(\"No match found\");\n        if (!parentPattern.namedGroups().containsKey(name))\n            throw new IllegalArgumentException(\"No group with name <\" + name + \">\");\n        return parentPattern.namedGroups().get(name);\n    }"}
{"Number":"1073","API Relative Path":"java.util.regex.Matcher.java-group(int)","Corresponding Source":"/**\n     * Returns the input subsequence captured by the given group during the\n     * previous match operation.\n     *\n     * <p> For a matcher <i>m<\/i>, input sequence <i>s<\/i>, and group index\n     * <i>g<\/i>, the expressions <i>m.<\/i><tt>group(<\/tt><i>g<\/i><tt>)<\/tt> and\n     * <i>s.<\/i><tt>substring(<\/tt><i>m.<\/i><tt>start(<\/tt><i>g<\/i><tt>),<\/tt>&nbsp;<i>m.<\/i><tt>end(<\/tt><i>g<\/i><tt>))<\/tt>\n     * are equivalent.  <\/p>\n     *\n     * <p> <a href=\"Pattern.html#cg\">Capturing groups<\/a> are indexed from left\n     * to right, starting at one.  Group zero denotes the entire pattern, so\n     * the expression <tt>m.group(0)<\/tt> is equivalent to <tt>m.group()<\/tt>.\n     * <\/p>\n     *\n     * <p> If the match was successful but the group specified failed to match\n     * any part of the input sequence, then <tt>null<\/tt> is returned. Note\n     * that some groups, for example <tt>(a*)<\/tt>, match the empty string.\n     * This method will return the empty string when such a group successfully\n     * matches the empty string in the input.  <\/p>\n     *\n     * @param  group\n     *         The index of a capturing group in this matcher's pattern\n     *\n     * @return  The (possibly empty) subsequence captured by the group\n     *          during the previous match, or <tt>null<\/tt> if the group\n     *          failed to match part of the input\n     *\n     * @throws  IllegalStateException\n     *          If no match has yet been attempted,\n     *          or if the previous match operation failed\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If there is no capturing group in the pattern\n     *          with the given index\n     */\n    public String group(int group) {\n        if (first < 0)\n            throw new IllegalStateException(\"No match found\");\n        if (group < 0 || group > groupCount())\n            throw new IndexOutOfBoundsException(\"No group \" + group);\n        if ((groups[group*2] == -1) || (groups[group*2+1] == -1))\n            return null;\n        return getSubSequence(groups[group * 2], groups[group * 2 + 1]).toString();\n    }"}
{"Number":"1074","API Relative Path":"java.util.regex.Matcher.java-group(String)","Corresponding Source":"/**\n     * Returns the input subsequence captured by the given\n     * <a href=\"Pattern.html#groupname\">named-capturing group<\/a> during the previous\n     * match operation.\n     *\n     * <p> If the match was successful but the group specified failed to match\n     * any part of the input sequence, then <tt>null<\/tt> is returned. Note\n     * that some groups, for example <tt>(a*)<\/tt>, match the empty string.\n     * This method will return the empty string when such a group successfully\n     * matches the empty string in the input.  <\/p>\n     *\n     * @param  name\n     *         The name of a named-capturing group in this matcher's pattern\n     *\n     * @return  The (possibly empty) subsequence captured by the named group\n     *          during the previous match, or <tt>null<\/tt> if the group\n     *          failed to match part of the input\n     *\n     * @throws  IllegalStateException\n     *          If no match has yet been attempted,\n     *          or if the previous match operation failed\n     *\n     * @throws  IllegalArgumentException\n     *          If there is no capturing group in the pattern\n     *          with the given name\n     * @since 1.7\n     */\n    public String group(String name) {\n        int group = getMatchedGroupIndex(name);\n        if ((groups[group*2] == -1) || (groups[group*2+1] == -1))\n            return null;\n        return getSubSequence(groups[group * 2], groups[group * 2 + 1]).toString();\n    }"}
{"Number":"1075","API Relative Path":"java.util.regex.Matcher.java-region(int-int)","Corresponding Source":"/**\n     * Sets the limits of this matcher's region. The region is the part of the\n     * input sequence that will be searched to find a match. Invoking this\n     * method resets the matcher, and then sets the region to start at the\n     * index specified by the <code>start<\/code> parameter and end at the\n     * index specified by the <code>end<\/code> parameter.\n     *\n     * <p>Depending on the transparency and anchoring being used (see\n     * {@link #useTransparentBounds useTransparentBounds} and\n     * {@link #useAnchoringBounds useAnchoringBounds}), certain constructs such\n     * as anchors may behave differently at or around the boundaries of the\n     * region.\n     *\n     * @param  start\n     *         The index to start searching at (inclusive)\n     * @param  end\n     *         The index to end searching at (exclusive)\n     * @throws  IndexOutOfBoundsException\n     *          If start or end is less than zero, if\n     *          start is greater than the length of the input sequence, if\n     *          end is greater than the length of the input sequence, or if\n     *          start is greater than end.\n     * @return  this matcher\n     * @since 1.5\n     */\n    public Matcher region(int start, int end) {\n        if ((start < 0) || (start > getTextLength()))\n            throw new IndexOutOfBoundsException(\"start\");\n        if ((end < 0) || (end > getTextLength()))\n            throw new IndexOutOfBoundsException(\"end\");\n        if (start > end)\n            throw new IndexOutOfBoundsException(\"start > end\");\n        reset();\n        from = start;\n        to = end;\n        return this;\n    }"}
{"Number":"1076","API Relative Path":"java.util.regex.Matcher.java-region(int-int)","Corresponding Source":"/**\n     * Sets the limits of this matcher's region. The region is the part of the\n     * input sequence that will be searched to find a match. Invoking this\n     * method resets the matcher, and then sets the region to start at the\n     * index specified by the <code>start<\/code> parameter and end at the\n     * index specified by the <code>end<\/code> parameter.\n     *\n     * <p>Depending on the transparency and anchoring being used (see\n     * {@link #useTransparentBounds useTransparentBounds} and\n     * {@link #useAnchoringBounds useAnchoringBounds}), certain constructs such\n     * as anchors may behave differently at or around the boundaries of the\n     * region.\n     *\n     * @param  start\n     *         The index to start searching at (inclusive)\n     * @param  end\n     *         The index to end searching at (exclusive)\n     * @throws  IndexOutOfBoundsException\n     *          If start or end is less than zero, if\n     *          start is greater than the length of the input sequence, if\n     *          end is greater than the length of the input sequence, or if\n     *          start is greater than end.\n     * @return  this matcher\n     * @since 1.5\n     */\n    public Matcher region(int start, int end) {\n        if ((start < 0) || (start > getTextLength()))\n            throw new IndexOutOfBoundsException(\"start\");\n        if ((end < 0) || (end > getTextLength()))\n            throw new IndexOutOfBoundsException(\"end\");\n        if (start > end)\n            throw new IndexOutOfBoundsException(\"start > end\");\n        reset();\n        from = start;\n        to = end;\n        return this;\n    }"}
{"Number":"1077","API Relative Path":"java.util.regex.Matcher.java-replaceFirst(String)","Corresponding Source":"/**\n     * Replaces the first subsequence of the input sequence that matches the\n     * pattern with the given replacement string.\n     *\n     * <p> This method first resets this matcher.  It then scans the input\n     * sequence looking for a match of the pattern.  Characters that are not\n     * part of the match are appended directly to the result string; the match\n     * is replaced in the result by the replacement string.  The replacement\n     * string may contain references to captured subsequences as in the {@link\n     * #appendReplacement appendReplacement} method.\n     *\n     * <p>Note that backslashes (<tt>\\<\/tt>) and dollar signs (<tt>$<\/tt>) in\n     * the replacement string may cause the results to be different than if it\n     * were being treated as a literal replacement string. Dollar signs may be\n     * treated as references to captured subsequences as described above, and\n     * backslashes are used to escape literal characters in the replacement\n     * string.\n     *\n     * <p> Given the regular expression <tt>dog<\/tt>, the input\n     * <tt>\"zzzdogzzzdogzzz\"<\/tt>, and the replacement string\n     * <tt>\"cat\"<\/tt>, an invocation of this method on a matcher for that\n     * expression would yield the string <tt>\"zzzcatzzzdogzzz\"<\/tt>.  <\/p>\n     *\n     * <p> Invoking this method changes this matcher's state.  If the matcher\n     * is to be used in further matching operations then it should first be\n     * reset.  <\/p>\n     *\n     * @param  replacement\n     *         The replacement string\n     * @return  The string constructed by replacing the first matching\n     *          subsequence by the replacement string, substituting captured\n     *          subsequences as needed\n     */\n    public String replaceFirst(String replacement) {\n        if (replacement == null)\n            throw new NullPointerException(\"replacement\");\n        reset();\n        if (!find())\n            return text.toString();\n        StringBuffer sb = new StringBuffer();\n        appendReplacement(sb, replacement);\n        appendTail(sb);\n        return sb.toString();\n    }"}
{"Number":"1078","API Relative Path":"java.util.regex.Matcher.java-start(int)","Corresponding Source":"/**\n     * Returns the start index of the subsequence captured by the given group\n     * during the previous match operation.\n     *\n     * <p> <a href=\"Pattern.html#cg\">Capturing groups<\/a> are indexed from left\n     * to right, starting at one.  Group zero denotes the entire pattern, so\n     * the expression <i>m.<\/i><tt>start(0)<\/tt> is equivalent to\n     * <i>m.<\/i><tt>start()<\/tt>.  <\/p>\n     *\n     * @param  group\n     *         The index of a capturing group in this matcher's pattern\n     *\n     * @return  The index of the first character captured by the group,\n     *          or <tt>-1<\/tt> if the match was successful but the group\n     *          itself did not match anything\n     *\n     * @throws  IllegalStateException\n     *          If no match has yet been attempted,\n     *          or if the previous match operation failed\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If there is no capturing group in the pattern\n     *          with the given index\n     */\n    public int start(int group) {\n        if (first < 0)\n            throw new IllegalStateException(\"No match available\");\n        if (group < 0 || group > groupCount())\n            throw new IndexOutOfBoundsException(\"No group \" + group);\n        return groups[group * 2];\n    }"}
{"Number":"1079","API Relative Path":"java.util.regex.Matcher.java-start(String)","Corresponding Source":"/**\n     * Returns the start index of the subsequence captured by the given\n     * <a href=\"Pattern.html#groupname\">named-capturing group<\/a> during the\n     * previous match operation.\n     *\n     * @param  name\n     *         The name of a named-capturing group in this matcher's pattern\n     *\n     * @return  The index of the first character captured by the group,\n     *          or {@code -1} if the match was successful but the group\n     *          itself did not match anything\n     *\n     * @throws  IllegalStateException\n     *          If no match has yet been attempted,\n     *          or if the previous match operation failed\n     *\n     * @throws  IllegalArgumentException\n     *          If there is no capturing group in the pattern\n     *          with the given name\n     * @since 1.8\n     */\n    public int start(String name) {\n        return groups[getMatchedGroupIndex(name) * 2];\n    }"}
{"Number":"1080","API Relative Path":"java.util.ResourceBundle.java-getBundle(String-Locale-ClassLoader)","Corresponding Source":"/**\n     * Gets a resource bundle using the specified base name, locale, and class\n     * loader.\n     *\n     * <p>This method behaves the same as calling\n     * {@link #getBundle(String, Locale, ClassLoader, Control)} passing a\n     * default instance of {@link Control} unless another {@link Control} is\n     * provided with the {@link ResourceBundleControlProvider} SPI. Refer to the\n     * description of <a href=\"#modify_default_behavior\">modifying the default\n     * behavior<\/a>.\n     *\n     * <p><a name=\"default_behavior\">The following describes the default\n     * behavior<\/a>.\n     *\n     * <p><code>getBundle<\/code> uses the base name, the specified locale, and\n     * the default locale (obtained from {@link java.util.Locale#getDefault()\n     * Locale.getDefault}) to generate a sequence of <a\n     * name=\"candidates\"><em>candidate bundle names<\/em><\/a>.  If the specified\n     * locale's language, script, country, and variant are all empty strings,\n     * then the base name is the only candidate bundle name.  Otherwise, a list\n     * of candidate locales is generated from the attribute values of the\n     * specified locale (language, script, country and variant) and appended to\n     * the base name.  Typically, this will look like the following:\n     *\n     * <pre>\n     *     baseName + \"_\" + language + \"_\" + script + \"_\" + country + \"_\" + variant\n     *     baseName + \"_\" + language + \"_\" + script + \"_\" + country\n     *     baseName + \"_\" + language + \"_\" + script\n     *     baseName + \"_\" + language + \"_\" + country + \"_\" + variant\n     *     baseName + \"_\" + language + \"_\" + country\n     *     baseName + \"_\" + language\n     * <\/pre>\n     *\n     * <p>Candidate bundle names where the final component is an empty string\n     * are omitted, along with the underscore.  For example, if country is an\n     * empty string, the second and the fifth candidate bundle names above\n     * would be omitted.  Also, if script is an empty string, the candidate names\n     * including script are omitted.  For example, a locale with language \"de\"\n     * and variant \"JAVA\" will produce candidate names with base name\n     * \"MyResource\" below.\n     *\n     * <pre>\n     *     MyResource_de__JAVA\n     *     MyResource_de\n     * <\/pre>\n     *\n     * In the case that the variant contains one or more underscores ('_'), a\n     * sequence of bundle names generated by truncating the last underscore and\n     * the part following it is inserted after a candidate bundle name with the\n     * original variant.  For example, for a locale with language \"en\", script\n     * \"Latn, country \"US\" and variant \"WINDOWS_VISTA\", and bundle base name\n     * \"MyResource\", the list of candidate bundle names below is generated:\n     *\n     * <pre>\n     * MyResource_en_Latn_US_WINDOWS_VISTA\n     * MyResource_en_Latn_US_WINDOWS\n     * MyResource_en_Latn_US\n     * MyResource_en_Latn\n     * MyResource_en_US_WINDOWS_VISTA\n     * MyResource_en_US_WINDOWS\n     * MyResource_en_US\n     * MyResource_en\n     * <\/pre>\n     *\n     * <blockquote><b>Note:<\/b> For some <code>Locale<\/code>s, the list of\n     * candidate bundle names contains extra names, or the order of bundle names\n     * is slightly modified.  See the description of the default implementation\n     * of {@link Control#getCandidateLocales(String, Locale)\n     * getCandidateLocales} for details.<\/blockquote>\n     *\n     * <p><code>getBundle<\/code> then iterates over the candidate bundle names\n     * to find the first one for which it can <em>instantiate<\/em> an actual\n     * resource bundle. It uses the default controls' {@link Control#getFormats\n     * getFormats} method, which generates two bundle names for each generated\n     * name, the first a class name and the second a properties file name. For\n     * each candidate bundle name, it attempts to create a resource bundle:\n     *\n     * <ul><li>First, it attempts to load a class using the generated class name.\n     * If such a class can be found and loaded using the specified class\n     * loader, is assignment compatible with ResourceBundle, is accessible from\n     * ResourceBundle, and can be instantiated, <code>getBundle<\/code> creates a\n     * new instance of this class and uses it as the <em>result resource\n     * bundle<\/em>.\n     *\n     * <li>Otherwise, <code>getBundle<\/code> attempts to locate a property\n     * resource file using the generated properties file name.  It generates a\n     * path name from the candidate bundle name by replacing all \".\" characters\n     * with \"/\" and appending the string \".properties\".  It attempts to find a\n     * \"resource\" with this name using {@link\n     * java.lang.ClassLoader#getResource(java.lang.String)\n     * ClassLoader.getResource}.  (Note that a \"resource\" in the sense of\n     * <code>getResource<\/code> has nothing to do with the contents of a\n     * resource bundle, it is just a container of data, such as a file.)  If it\n     * finds a \"resource\", it attempts to create a new {@link\n     * PropertyResourceBundle} instance from its contents.  If successful, this\n     * instance becomes the <em>result resource bundle<\/em>.  <\/ul>\n     *\n     * <p>This continues until a result resource bundle is instantiated or the\n     * list of candidate bundle names is exhausted.  If no matching resource\n     * bundle is found, the default control's {@link Control#getFallbackLocale\n     * getFallbackLocale} method is called, which returns the current default\n     * locale.  A new sequence of candidate locale names is generated using this\n     * locale and and searched again, as above.\n     *\n     * <p>If still no result bundle is found, the base name alone is looked up. If\n     * this still fails, a <code>MissingResourceException<\/code> is thrown.\n     *\n     * <p><a name=\"parent_chain\"> Once a result resource bundle has been found,\n     * its <em>parent chain<\/em> is instantiated<\/a>.  If the result bundle already\n     * has a parent (perhaps because it was returned from a cache) the chain is\n     * complete.\n     *\n     * <p>Otherwise, <code>getBundle<\/code> examines the remainder of the\n     * candidate locale list that was used during the pass that generated the\n     * result resource bundle.  (As before, candidate bundle names where the\n     * final component is an empty string are omitted.)  When it comes to the\n     * end of the candidate list, it tries the plain bundle name.  With each of the\n     * candidate bundle names it attempts to instantiate a resource bundle (first\n     * looking for a class and then a properties file, as described above).\n     *\n     * <p>Whenever it succeeds, it calls the previously instantiated resource\n     * bundle's {@link #setParent(java.util.ResourceBundle) setParent} method\n     * with the new resource bundle.  This continues until the list of names\n     * is exhausted or the current bundle already has a non-null parent.\n     *\n     * <p>Once the parent chain is complete, the bundle is returned.\n     *\n     * <p><b>Note:<\/b> <code>getBundle<\/code> caches instantiated resource\n     * bundles and might return the same resource bundle instance multiple times.\n     *\n     * <p><b>Note:<\/b>The <code>baseName<\/code> argument should be a fully\n     * qualified class name. However, for compatibility with earlier versions,\n     * Sun's Java SE Runtime Environments do not verify this, and so it is\n     * possible to access <code>PropertyResourceBundle<\/code>s by specifying a\n     * path name (using \"/\") instead of a fully qualified class name (using\n     * \".\").\n     *\n     * <p><a name=\"default_behavior_example\">\n     * <strong>Example:<\/strong><\/a>\n     * <p>\n     * The following class and property files are provided:\n     * <pre>\n     *     MyResources.class\n     *     MyResources.properties\n     *     MyResources_fr.properties\n     *     MyResources_fr_CH.class\n     *     MyResources_fr_CH.properties\n     *     MyResources_en.properties\n     *     MyResources_es_ES.class\n     * <\/pre>\n     *\n     * The contents of all files are valid (that is, public non-abstract\n     * subclasses of <code>ResourceBundle<\/code> for the \".class\" files,\n     * syntactically correct \".properties\" files).  The default locale is\n     * <code>Locale(\"en\", \"GB\")<\/code>.\n     *\n     * <p>Calling <code>getBundle<\/code> with the locale arguments below will\n     * instantiate resource bundles as follows:\n     *\n     * <table summary=\"getBundle() locale to resource bundle mapping\">\n     * <tr><td>Locale(\"fr\", \"CH\")<\/td><td>MyResources_fr_CH.class, parent MyResources_fr.properties, parent MyResources.class<\/td><\/tr>\n     * <tr><td>Locale(\"fr\", \"FR\")<\/td><td>MyResources_fr.properties, parent MyResources.class<\/td><\/tr>\n     * <tr><td>Locale(\"de\", \"DE\")<\/td><td>MyResources_en.properties, parent MyResources.class<\/td><\/tr>\n     * <tr><td>Locale(\"en\", \"US\")<\/td><td>MyResources_en.properties, parent MyResources.class<\/td><\/tr>\n     * <tr><td>Locale(\"es\", \"ES\")<\/td><td>MyResources_es_ES.class, parent MyResources.class<\/td><\/tr>\n     * <\/table>\n     *\n     * <p>The file MyResources_fr_CH.properties is never used because it is\n     * hidden by the MyResources_fr_CH.class. Likewise, MyResources.properties\n     * is also hidden by MyResources.class.\n     *\n     * @param baseName the base name of the resource bundle, a fully qualified class name\n     * @param locale the locale for which a resource bundle is desired\n     * @param loader the class loader from which to load the resource bundle\n     * @return a resource bundle for the given base name and locale\n     * @exception java.lang.NullPointerException\n     *        if <code>baseName<\/code>, <code>locale<\/code>, or <code>loader<\/code> is <code>null<\/code>\n     * @exception MissingResourceException\n     *        if no resource bundle for the specified base name can be found\n     * @since 1.2\n     */\n    public static ResourceBundle getBundle(String baseName, Locale locale,\n                                           ClassLoader loader)\n    {\n        if (loader == null) {\n            throw new NullPointerException();\n        }\n        return getBundleImpl(baseName, locale, loader, getDefaultControl(baseName));\n    }"}
{"Number":"1081","API Relative Path":"java.util.ResourceBundle.java-getBundle(String-Locale-ClassLoader-Control)","Corresponding Source":"/**\n     * Returns a resource bundle using the specified base name, target\n     * locale, class loader and control. Unlike the {@linkplain\n     * #getBundle(String, Locale, ClassLoader) <code>getBundle<\/code>\n     * factory methods with no <code>control<\/code> argument}, the given\n     * <code>control<\/code> specifies how to locate and instantiate resource\n     * bundles. Conceptually, the bundle loading process with the given\n     * <code>control<\/code> is performed in the following steps.\n     *\n     * <ol>\n     * <li>This factory method looks up the resource bundle in the cache for\n     * the specified <code>baseName<\/code>, <code>targetLocale<\/code> and\n     * <code>loader<\/code>.  If the requested resource bundle instance is\n     * found in the cache and the time-to-live periods of the instance and\n     * all of its parent instances have not expired, the instance is returned\n     * to the caller. Otherwise, this factory method proceeds with the\n     * loading process below.<\/li>\n     *\n     * <li>The {@link ResourceBundle.Control#getFormats(String)\n     * control.getFormats} method is called to get resource bundle formats\n     * to produce bundle or resource names. The strings\n     * <code>\"java.class\"<\/code> and <code>\"java.properties\"<\/code>\n     * designate class-based and {@linkplain PropertyResourceBundle\n     * property}-based resource bundles, respectively. Other strings\n     * starting with <code>\"java.\"<\/code> are reserved for future extensions\n     * and must not be used for application-defined formats. Other strings\n     * designate application-defined formats.<\/li>\n     *\n     * <li>The {@link ResourceBundle.Control#getCandidateLocales(String,\n     * Locale) control.getCandidateLocales} method is called with the target\n     * locale to get a list of <em>candidate <code>Locale<\/code>s<\/em> for\n     * which resource bundles are searched.<\/li>\n     *\n     * <li>The {@link ResourceBundle.Control#newBundle(String, Locale,\n     * String, ClassLoader, boolean) control.newBundle} method is called to\n     * instantiate a <code>ResourceBundle<\/code> for the base bundle name, a\n     * candidate locale, and a format. (Refer to the note on the cache\n     * lookup below.) This step is iterated over all combinations of the\n     * candidate locales and formats until the <code>newBundle<\/code> method\n     * returns a <code>ResourceBundle<\/code> instance or the iteration has\n     * used up all the combinations. For example, if the candidate locales\n     * are <code>Locale(\"de\", \"DE\")<\/code>, <code>Locale(\"de\")<\/code> and\n     * <code>Locale(\"\")<\/code> and the formats are <code>\"java.class\"<\/code>\n     * and <code>\"java.properties\"<\/code>, then the following is the\n     * sequence of locale-format combinations to be used to call\n     * <code>control.newBundle<\/code>.\n     *\n     * <table style=\"width: 50%; text-align: left; margin-left: 40px;\"\n     *  border=\"0\" cellpadding=\"2\" cellspacing=\"2\" summary=\"locale-format combinations for newBundle\">\n     * <tbody>\n     * <tr>\n     * <td\n     * style=\"vertical-align: top; text-align: left; font-weight: bold; width: 50%;\"><code>Locale<\/code><br>\n     * <\/td>\n     * <td\n     * style=\"vertical-align: top; text-align: left; font-weight: bold; width: 50%;\"><code>format<\/code><br>\n     * <\/td>\n     * <\/tr>\n     * <tr>\n     * <td style=\"vertical-align: top; width: 50%;\"><code>Locale(\"de\", \"DE\")<\/code><br>\n     * <\/td>\n     * <td style=\"vertical-align: top; width: 50%;\"><code>java.class<\/code><br>\n     * <\/td>\n     * <\/tr>\n     * <tr>\n     * <td style=\"vertical-align: top; width: 50%;\"><code>Locale(\"de\", \"DE\")<\/code><\/td>\n     * <td style=\"vertical-align: top; width: 50%;\"><code>java.properties<\/code><br>\n     * <\/td>\n     * <\/tr>\n     * <tr>\n     * <td style=\"vertical-align: top; width: 50%;\"><code>Locale(\"de\")<\/code><\/td>\n     * <td style=\"vertical-align: top; width: 50%;\"><code>java.class<\/code><\/td>\n     * <\/tr>\n     * <tr>\n     * <td style=\"vertical-align: top; width: 50%;\"><code>Locale(\"de\")<\/code><\/td>\n     * <td style=\"vertical-align: top; width: 50%;\"><code>java.properties<\/code><\/td>\n     * <\/tr>\n     * <tr>\n     * <td style=\"vertical-align: top; width: 50%;\"><code>Locale(\"\")<\/code><br>\n     * <\/td>\n     * <td style=\"vertical-align: top; width: 50%;\"><code>java.class<\/code><\/td>\n     * <\/tr>\n     * <tr>\n     * <td style=\"vertical-align: top; width: 50%;\"><code>Locale(\"\")<\/code><\/td>\n     * <td style=\"vertical-align: top; width: 50%;\"><code>java.properties<\/code><\/td>\n     * <\/tr>\n     * <\/tbody>\n     * <\/table>\n     * <\/li>\n     *\n     * <li>If the previous step has found no resource bundle, proceed to\n     * Step 6. If a bundle has been found that is a base bundle (a bundle\n     * for <code>Locale(\"\")<\/code>), and the candidate locale list only contained\n     * <code>Locale(\"\")<\/code>, return the bundle to the caller. If a bundle\n     * has been found that is a base bundle, but the candidate locale list\n     * contained locales other than Locale(\"\"), put the bundle on hold and\n     * proceed to Step 6. If a bundle has been found that is not a base\n     * bundle, proceed to Step 7.<\/li>\n     *\n     * <li>The {@link ResourceBundle.Control#getFallbackLocale(String,\n     * Locale) control.getFallbackLocale} method is called to get a fallback\n     * locale (alternative to the current target locale) to try further\n     * finding a resource bundle. If the method returns a non-null locale,\n     * it becomes the next target locale and the loading process starts over\n     * from Step 3. Otherwise, if a base bundle was found and put on hold in\n     * a previous Step 5, it is returned to the caller now. Otherwise, a\n     * MissingResourceException is thrown.<\/li>\n     *\n     * <li>At this point, we have found a resource bundle that's not the\n     * base bundle. If this bundle set its parent during its instantiation,\n     * it is returned to the caller. Otherwise, its <a\n     * href=\"./ResourceBundle.html#parent_chain\">parent chain<\/a> is\n     * instantiated based on the list of candidate locales from which it was\n     * found. Finally, the bundle is returned to the caller.<\/li>\n     * <\/ol>\n     *\n     * <p>During the resource bundle loading process above, this factory\n     * method looks up the cache before calling the {@link\n     * Control#newBundle(String, Locale, String, ClassLoader, boolean)\n     * control.newBundle} method.  If the time-to-live period of the\n     * resource bundle found in the cache has expired, the factory method\n     * calls the {@link ResourceBundle.Control#needsReload(String, Locale,\n     * String, ClassLoader, ResourceBundle, long) control.needsReload}\n     * method to determine whether the resource bundle needs to be reloaded.\n     * If reloading is required, the factory method calls\n     * <code>control.newBundle<\/code> to reload the resource bundle.  If\n     * <code>control.newBundle<\/code> returns <code>null<\/code>, the factory\n     * method puts a dummy resource bundle in the cache as a mark of\n     * nonexistent resource bundles in order to avoid lookup overhead for\n     * subsequent requests. Such dummy resource bundles are under the same\n     * expiration control as specified by <code>control<\/code>.\n     *\n     * <p>All resource bundles loaded are cached by default. Refer to\n     * {@link Control#getTimeToLive(String,Locale)\n     * control.getTimeToLive} for details.\n     *\n     * <p>The following is an example of the bundle loading process with the\n     * default <code>ResourceBundle.Control<\/code> implementation.\n     *\n     * <p>Conditions:\n     * <ul>\n     * <li>Base bundle name: <code>foo.bar.Messages<\/code>\n     * <li>Requested <code>Locale<\/code>: {@link Locale#ITALY}<\/li>\n     * <li>Default <code>Locale<\/code>: {@link Locale#FRENCH}<\/li>\n     * <li>Available resource bundles:\n     * <code>foo/bar/Messages_fr.properties<\/code> and\n     * <code>foo/bar/Messages.properties<\/code><\/li>\n     * <\/ul>\n     *\n     * <p>First, <code>getBundle<\/code> tries loading a resource bundle in\n     * the following sequence.\n     *\n     * <ul>\n     * <li>class <code>foo.bar.Messages_it_IT<\/code>\n     * <li>file <code>foo/bar/Messages_it_IT.properties<\/code>\n     * <li>class <code>foo.bar.Messages_it<\/code><\/li>\n     * <li>file <code>foo/bar/Messages_it.properties<\/code><\/li>\n     * <li>class <code>foo.bar.Messages<\/code><\/li>\n     * <li>file <code>foo/bar/Messages.properties<\/code><\/li>\n     * <\/ul>\n     *\n     * <p>At this point, <code>getBundle<\/code> finds\n     * <code>foo/bar/Messages.properties<\/code>, which is put on hold\n     * because it's the base bundle.  <code>getBundle<\/code> calls {@link\n     * Control#getFallbackLocale(String, Locale)\n     * control.getFallbackLocale(\"foo.bar.Messages\", Locale.ITALY)} which\n     * returns <code>Locale.FRENCH<\/code>. Next, <code>getBundle<\/code>\n     * tries loading a bundle in the following sequence.\n     *\n     * <ul>\n     * <li>class <code>foo.bar.Messages_fr<\/code><\/li>\n     * <li>file <code>foo/bar/Messages_fr.properties<\/code><\/li>\n     * <li>class <code>foo.bar.Messages<\/code><\/li>\n     * <li>file <code>foo/bar/Messages.properties<\/code><\/li>\n     * <\/ul>\n     *\n     * <p><code>getBundle<\/code> finds\n     * <code>foo/bar/Messages_fr.properties<\/code> and creates a\n     * <code>ResourceBundle<\/code> instance. Then, <code>getBundle<\/code>\n     * sets up its parent chain from the list of the candidate locales.  Only\n     * <code>foo/bar/Messages.properties<\/code> is found in the list and\n     * <code>getBundle<\/code> creates a <code>ResourceBundle<\/code> instance\n     * that becomes the parent of the instance for\n     * <code>foo/bar/Messages_fr.properties<\/code>.\n     *\n     * @param baseName\n     *        the base name of the resource bundle, a fully qualified\n     *        class name\n     * @param targetLocale\n     *        the locale for which a resource bundle is desired\n     * @param loader\n     *        the class loader from which to load the resource bundle\n     * @param control\n     *        the control which gives information for the resource\n     *        bundle loading process\n     * @return a resource bundle for the given base name and locale\n     * @exception NullPointerException\n     *        if <code>baseName<\/code>, <code>targetLocale<\/code>,\n     *        <code>loader<\/code>, or <code>control<\/code> is\n     *        <code>null<\/code>\n     * @exception MissingResourceException\n     *        if no resource bundle for the specified base name can be found\n     * @exception IllegalArgumentException\n     *        if the given <code>control<\/code> doesn't perform properly\n     *        (e.g., <code>control.getCandidateLocales<\/code> returns null.)\n     *        Note that validation of <code>control<\/code> is performed as\n     *        needed.\n     * @since 1.6\n     */\n    public static ResourceBundle getBundle(String baseName, Locale targetLocale,\n                                           ClassLoader loader, Control control) {\n        if (loader == null || control == null) {\n            throw new NullPointerException();\n        }\n        return getBundleImpl(baseName, targetLocale, loader, control);\n    }"}
{"Number":"1082","API Relative Path":"java.util.ResourceBundle.java-getBundle(String-Locale-ClassLoader-Control)","Corresponding Source":"/**\n     * Returns a resource bundle using the specified base name, target\n     * locale, class loader and control. Unlike the {@linkplain\n     * #getBundle(String, Locale, ClassLoader) <code>getBundle<\/code>\n     * factory methods with no <code>control<\/code> argument}, the given\n     * <code>control<\/code> specifies how to locate and instantiate resource\n     * bundles. Conceptually, the bundle loading process with the given\n     * <code>control<\/code> is performed in the following steps.\n     *\n     * <ol>\n     * <li>This factory method looks up the resource bundle in the cache for\n     * the specified <code>baseName<\/code>, <code>targetLocale<\/code> and\n     * <code>loader<\/code>.  If the requested resource bundle instance is\n     * found in the cache and the time-to-live periods of the instance and\n     * all of its parent instances have not expired, the instance is returned\n     * to the caller. Otherwise, this factory method proceeds with the\n     * loading process below.<\/li>\n     *\n     * <li>The {@link ResourceBundle.Control#getFormats(String)\n     * control.getFormats} method is called to get resource bundle formats\n     * to produce bundle or resource names. The strings\n     * <code>\"java.class\"<\/code> and <code>\"java.properties\"<\/code>\n     * designate class-based and {@linkplain PropertyResourceBundle\n     * property}-based resource bundles, respectively. Other strings\n     * starting with <code>\"java.\"<\/code> are reserved for future extensions\n     * and must not be used for application-defined formats. Other strings\n     * designate application-defined formats.<\/li>\n     *\n     * <li>The {@link ResourceBundle.Control#getCandidateLocales(String,\n     * Locale) control.getCandidateLocales} method is called with the target\n     * locale to get a list of <em>candidate <code>Locale<\/code>s<\/em> for\n     * which resource bundles are searched.<\/li>\n     *\n     * <li>The {@link ResourceBundle.Control#newBundle(String, Locale,\n     * String, ClassLoader, boolean) control.newBundle} method is called to\n     * instantiate a <code>ResourceBundle<\/code> for the base bundle name, a\n     * candidate locale, and a format. (Refer to the note on the cache\n     * lookup below.) This step is iterated over all combinations of the\n     * candidate locales and formats until the <code>newBundle<\/code> method\n     * returns a <code>ResourceBundle<\/code> instance or the iteration has\n     * used up all the combinations. For example, if the candidate locales\n     * are <code>Locale(\"de\", \"DE\")<\/code>, <code>Locale(\"de\")<\/code> and\n     * <code>Locale(\"\")<\/code> and the formats are <code>\"java.class\"<\/code>\n     * and <code>\"java.properties\"<\/code>, then the following is the\n     * sequence of locale-format combinations to be used to call\n     * <code>control.newBundle<\/code>.\n     *\n     * <table style=\"width: 50%; text-align: left; margin-left: 40px;\"\n     *  border=\"0\" cellpadding=\"2\" cellspacing=\"2\" summary=\"locale-format combinations for newBundle\">\n     * <tbody>\n     * <tr>\n     * <td\n     * style=\"vertical-align: top; text-align: left; font-weight: bold; width: 50%;\"><code>Locale<\/code><br>\n     * <\/td>\n     * <td\n     * style=\"vertical-align: top; text-align: left; font-weight: bold; width: 50%;\"><code>format<\/code><br>\n     * <\/td>\n     * <\/tr>\n     * <tr>\n     * <td style=\"vertical-align: top; width: 50%;\"><code>Locale(\"de\", \"DE\")<\/code><br>\n     * <\/td>\n     * <td style=\"vertical-align: top; width: 50%;\"><code>java.class<\/code><br>\n     * <\/td>\n     * <\/tr>\n     * <tr>\n     * <td style=\"vertical-align: top; width: 50%;\"><code>Locale(\"de\", \"DE\")<\/code><\/td>\n     * <td style=\"vertical-align: top; width: 50%;\"><code>java.properties<\/code><br>\n     * <\/td>\n     * <\/tr>\n     * <tr>\n     * <td style=\"vertical-align: top; width: 50%;\"><code>Locale(\"de\")<\/code><\/td>\n     * <td style=\"vertical-align: top; width: 50%;\"><code>java.class<\/code><\/td>\n     * <\/tr>\n     * <tr>\n     * <td style=\"vertical-align: top; width: 50%;\"><code>Locale(\"de\")<\/code><\/td>\n     * <td style=\"vertical-align: top; width: 50%;\"><code>java.properties<\/code><\/td>\n     * <\/tr>\n     * <tr>\n     * <td style=\"vertical-align: top; width: 50%;\"><code>Locale(\"\")<\/code><br>\n     * <\/td>\n     * <td style=\"vertical-align: top; width: 50%;\"><code>java.class<\/code><\/td>\n     * <\/tr>\n     * <tr>\n     * <td style=\"vertical-align: top; width: 50%;\"><code>Locale(\"\")<\/code><\/td>\n     * <td style=\"vertical-align: top; width: 50%;\"><code>java.properties<\/code><\/td>\n     * <\/tr>\n     * <\/tbody>\n     * <\/table>\n     * <\/li>\n     *\n     * <li>If the previous step has found no resource bundle, proceed to\n     * Step 6. If a bundle has been found that is a base bundle (a bundle\n     * for <code>Locale(\"\")<\/code>), and the candidate locale list only contained\n     * <code>Locale(\"\")<\/code>, return the bundle to the caller. If a bundle\n     * has been found that is a base bundle, but the candidate locale list\n     * contained locales other than Locale(\"\"), put the bundle on hold and\n     * proceed to Step 6. If a bundle has been found that is not a base\n     * bundle, proceed to Step 7.<\/li>\n     *\n     * <li>The {@link ResourceBundle.Control#getFallbackLocale(String,\n     * Locale) control.getFallbackLocale} method is called to get a fallback\n     * locale (alternative to the current target locale) to try further\n     * finding a resource bundle. If the method returns a non-null locale,\n     * it becomes the next target locale and the loading process starts over\n     * from Step 3. Otherwise, if a base bundle was found and put on hold in\n     * a previous Step 5, it is returned to the caller now. Otherwise, a\n     * MissingResourceException is thrown.<\/li>\n     *\n     * <li>At this point, we have found a resource bundle that's not the\n     * base bundle. If this bundle set its parent during its instantiation,\n     * it is returned to the caller. Otherwise, its <a\n     * href=\"./ResourceBundle.html#parent_chain\">parent chain<\/a> is\n     * instantiated based on the list of candidate locales from which it was\n     * found. Finally, the bundle is returned to the caller.<\/li>\n     * <\/ol>\n     *\n     * <p>During the resource bundle loading process above, this factory\n     * method looks up the cache before calling the {@link\n     * Control#newBundle(String, Locale, String, ClassLoader, boolean)\n     * control.newBundle} method.  If the time-to-live period of the\n     * resource bundle found in the cache has expired, the factory method\n     * calls the {@link ResourceBundle.Control#needsReload(String, Locale,\n     * String, ClassLoader, ResourceBundle, long) control.needsReload}\n     * method to determine whether the resource bundle needs to be reloaded.\n     * If reloading is required, the factory method calls\n     * <code>control.newBundle<\/code> to reload the resource bundle.  If\n     * <code>control.newBundle<\/code> returns <code>null<\/code>, the factory\n     * method puts a dummy resource bundle in the cache as a mark of\n     * nonexistent resource bundles in order to avoid lookup overhead for\n     * subsequent requests. Such dummy resource bundles are under the same\n     * expiration control as specified by <code>control<\/code>.\n     *\n     * <p>All resource bundles loaded are cached by default. Refer to\n     * {@link Control#getTimeToLive(String,Locale)\n     * control.getTimeToLive} for details.\n     *\n     * <p>The following is an example of the bundle loading process with the\n     * default <code>ResourceBundle.Control<\/code> implementation.\n     *\n     * <p>Conditions:\n     * <ul>\n     * <li>Base bundle name: <code>foo.bar.Messages<\/code>\n     * <li>Requested <code>Locale<\/code>: {@link Locale#ITALY}<\/li>\n     * <li>Default <code>Locale<\/code>: {@link Locale#FRENCH}<\/li>\n     * <li>Available resource bundles:\n     * <code>foo/bar/Messages_fr.properties<\/code> and\n     * <code>foo/bar/Messages.properties<\/code><\/li>\n     * <\/ul>\n     *\n     * <p>First, <code>getBundle<\/code> tries loading a resource bundle in\n     * the following sequence.\n     *\n     * <ul>\n     * <li>class <code>foo.bar.Messages_it_IT<\/code>\n     * <li>file <code>foo/bar/Messages_it_IT.properties<\/code>\n     * <li>class <code>foo.bar.Messages_it<\/code><\/li>\n     * <li>file <code>foo/bar/Messages_it.properties<\/code><\/li>\n     * <li>class <code>foo.bar.Messages<\/code><\/li>\n     * <li>file <code>foo/bar/Messages.properties<\/code><\/li>\n     * <\/ul>\n     *\n     * <p>At this point, <code>getBundle<\/code> finds\n     * <code>foo/bar/Messages.properties<\/code>, which is put on hold\n     * because it's the base bundle.  <code>getBundle<\/code> calls {@link\n     * Control#getFallbackLocale(String, Locale)\n     * control.getFallbackLocale(\"foo.bar.Messages\", Locale.ITALY)} which\n     * returns <code>Locale.FRENCH<\/code>. Next, <code>getBundle<\/code>\n     * tries loading a bundle in the following sequence.\n     *\n     * <ul>\n     * <li>class <code>foo.bar.Messages_fr<\/code><\/li>\n     * <li>file <code>foo/bar/Messages_fr.properties<\/code><\/li>\n     * <li>class <code>foo.bar.Messages<\/code><\/li>\n     * <li>file <code>foo/bar/Messages.properties<\/code><\/li>\n     * <\/ul>\n     *\n     * <p><code>getBundle<\/code> finds\n     * <code>foo/bar/Messages_fr.properties<\/code> and creates a\n     * <code>ResourceBundle<\/code> instance. Then, <code>getBundle<\/code>\n     * sets up its parent chain from the list of the candidate locales.  Only\n     * <code>foo/bar/Messages.properties<\/code> is found in the list and\n     * <code>getBundle<\/code> creates a <code>ResourceBundle<\/code> instance\n     * that becomes the parent of the instance for\n     * <code>foo/bar/Messages_fr.properties<\/code>.\n     *\n     * @param baseName\n     *        the base name of the resource bundle, a fully qualified\n     *        class name\n     * @param targetLocale\n     *        the locale for which a resource bundle is desired\n     * @param loader\n     *        the class loader from which to load the resource bundle\n     * @param control\n     *        the control which gives information for the resource\n     *        bundle loading process\n     * @return a resource bundle for the given base name and locale\n     * @exception NullPointerException\n     *        if <code>baseName<\/code>, <code>targetLocale<\/code>,\n     *        <code>loader<\/code>, or <code>control<\/code> is\n     *        <code>null<\/code>\n     * @exception MissingResourceException\n     *        if no resource bundle for the specified base name can be found\n     * @exception IllegalArgumentException\n     *        if the given <code>control<\/code> doesn't perform properly\n     *        (e.g., <code>control.getCandidateLocales<\/code> returns null.)\n     *        Note that validation of <code>control<\/code> is performed as\n     *        needed.\n     * @since 1.6\n     */\n    public static ResourceBundle getBundle(String baseName, Locale targetLocale,\n                                           ClassLoader loader, Control control) {\n        if (loader == null || control == null) {\n            throw new NullPointerException();\n        }\n        return getBundleImpl(baseName, targetLocale, loader, control);\n    }"}
{"Number":"1083","API Relative Path":"java.util.ResourceBundle.java-getBundle(String-Locale-Control)","Corresponding Source":"/**\n     * Returns a resource bundle using the specified base name, target\n     * locale and control, and the caller's class loader. Calling this\n     * method is equivalent to calling\n     * <pre>\n     * getBundle(baseName, targetLocale, this.getClass().getClassLoader(),\n     *           control),\n     * <\/pre>\n     * except that <code>getClassLoader()<\/code> is run with the security\n     * privileges of <code>ResourceBundle<\/code>.  See {@link\n     * #getBundle(String, Locale, ClassLoader, Control) getBundle} for the\n     * complete description of the resource bundle loading process with a\n     * <code>ResourceBundle.Control<\/code>.\n     *\n     * @param baseName\n     *        the base name of the resource bundle, a fully qualified\n     *        class name\n     * @param targetLocale\n     *        the locale for which a resource bundle is desired\n     * @param control\n     *        the control which gives information for the resource\n     *        bundle loading process\n     * @return a resource bundle for the given base name and a\n     *        <code>Locale<\/code> in <code>locales<\/code>\n     * @exception NullPointerException\n     *        if <code>baseName<\/code>, <code>locales<\/code> or\n     *        <code>control<\/code> is <code>null<\/code>\n     * @exception MissingResourceException\n     *        if no resource bundle for the specified base name in any\n     *        of the <code>locales<\/code> can be found.\n     * @exception IllegalArgumentException\n     *        if the given <code>control<\/code> doesn't perform properly\n     *        (e.g., <code>control.getCandidateLocales<\/code> returns null.)\n     *        Note that validation of <code>control<\/code> is performed as\n     *        needed.\n     * @since 1.6\n     */\n    @CallerSensitive\n    public static final ResourceBundle getBundle(String baseName, Locale targetLocale,\n                                                 Control control) {\n        return getBundleImpl(baseName, targetLocale,\n                             getLoader(Reflection.getCallerClass()),\n                             control);\n    }"}
{"Number":"1084","API Relative Path":"java.util.Scanner.java-findInLine(Pattern)","Corresponding Source":"/**\n     * Attempts to find the next occurrence of the specified pattern ignoring\n     * delimiters. If the pattern is found before the next line separator, the\n     * scanner advances past the input that matched and returns the string that\n     * matched the pattern.\n     * If no such pattern is detected in the input up to the next line\n     * separator, then <code>null<\/code> is returned and the scanner's\n     * position is unchanged. This method may block waiting for input that\n     * matches the pattern.\n     *\n     * <p>Since this method continues to search through the input looking\n     * for the specified pattern, it may buffer all of the input searching for\n     * the desired token if no line separators are present.\n     *\n     * @param pattern the pattern to scan for\n     * @return the text that matched the specified pattern\n     * @throws IllegalStateException if this scanner is closed\n     */\n    public String findInLine(Pattern pattern) {\n        ensureOpen();\n        if (pattern == null)\n            throw new NullPointerException();\n        clearCaches();\n        // Expand buffer to include the next newline or end of input\n        int endPosition = 0;\n        saveState();\n        while (true) {\n            String token = findPatternInBuffer(separatorPattern(), 0);\n            if (token != null) {\n                endPosition = matcher.start();\n                break; // up to next newline\n            }\n            if (needInput) {\n                readInput();\n            } else {\n                endPosition = buf.limit();\n                break; // up to end of input\n            }\n        }\n        revertState();\n        int horizonForLine = endPosition - position;\n        // If there is nothing between the current pos and the next\n        // newline simply return null, invoking findWithinHorizon\n        // with \"horizon=0\" will scan beyond the line bound.\n        if (horizonForLine == 0)\n            return null;\n        // Search for the pattern\n        return findWithinHorizon(pattern, horizonForLine);\n    }"}
{"Number":"1085","API Relative Path":"java.util.Scanner.java-findInLine(Pattern)","Corresponding Source":"/**\n     * Attempts to find the next occurrence of the specified pattern ignoring\n     * delimiters. If the pattern is found before the next line separator, the\n     * scanner advances past the input that matched and returns the string that\n     * matched the pattern.\n     * If no such pattern is detected in the input up to the next line\n     * separator, then <code>null<\/code> is returned and the scanner's\n     * position is unchanged. This method may block waiting for input that\n     * matches the pattern.\n     *\n     * <p>Since this method continues to search through the input looking\n     * for the specified pattern, it may buffer all of the input searching for\n     * the desired token if no line separators are present.\n     *\n     * @param pattern the pattern to scan for\n     * @return the text that matched the specified pattern\n     * @throws IllegalStateException if this scanner is closed\n     */\n    public String findInLine(Pattern pattern) {\n        ensureOpen();\n        if (pattern == null)\n            throw new NullPointerException();\n        clearCaches();\n        // Expand buffer to include the next newline or end of input\n        int endPosition = 0;\n        saveState();\n        while (true) {\n            String token = findPatternInBuffer(separatorPattern(), 0);\n            if (token != null) {\n                endPosition = matcher.start();\n                break; // up to next newline\n            }\n            if (needInput) {\n                readInput();\n            } else {\n                endPosition = buf.limit();\n                break; // up to end of input\n            }\n        }\n        revertState();\n        int horizonForLine = endPosition - position;\n        // If there is nothing between the current pos and the next\n        // newline simply return null, invoking findWithinHorizon\n        // with \"horizon=0\" will scan beyond the line bound.\n        if (horizonForLine == 0)\n            return null;\n        // Search for the pattern\n        return findWithinHorizon(pattern, horizonForLine);\n    }"}
{"Number":"1086","API Relative Path":"java.util.Scanner.java-findInLine(Pattern)","Corresponding Source":"/**\n     * Attempts to find the next occurrence of the specified pattern ignoring\n     * delimiters. If the pattern is found before the next line separator, the\n     * scanner advances past the input that matched and returns the string that\n     * matched the pattern.\n     * If no such pattern is detected in the input up to the next line\n     * separator, then <code>null<\/code> is returned and the scanner's\n     * position is unchanged. This method may block waiting for input that\n     * matches the pattern.\n     *\n     * <p>Since this method continues to search through the input looking\n     * for the specified pattern, it may buffer all of the input searching for\n     * the desired token if no line separators are present.\n     *\n     * @param pattern the pattern to scan for\n     * @return the text that matched the specified pattern\n     * @throws IllegalStateException if this scanner is closed\n     */\n    public String findInLine(Pattern pattern) {\n        ensureOpen();\n        if (pattern == null)\n            throw new NullPointerException();\n        clearCaches();\n        // Expand buffer to include the next newline or end of input\n        int endPosition = 0;\n        saveState();\n        while (true) {\n            String token = findPatternInBuffer(separatorPattern(), 0);\n            if (token != null) {\n                endPosition = matcher.start();\n                break; // up to next newline\n            }\n            if (needInput) {\n                readInput();\n            } else {\n                endPosition = buf.limit();\n                break; // up to end of input\n            }\n        }\n        revertState();\n        int horizonForLine = endPosition - position;\n        // If there is nothing between the current pos and the next\n        // newline simply return null, invoking findWithinHorizon\n        // with \"horizon=0\" will scan beyond the line bound.\n        if (horizonForLine == 0)\n            return null;\n        // Search for the pattern\n        return findWithinHorizon(pattern, horizonForLine);\n    }"}
{"Number":"1087","API Relative Path":"java.util.Scanner.java-findWithinHorizon(Pattern-int)","Corresponding Source":"/**\n     * Attempts to find the next occurrence of the specified pattern.\n     *\n     * <p>This method searches through the input up to the specified\n     * search horizon, ignoring delimiters. If the pattern is found the\n     * scanner advances past the input that matched and returns the string\n     * that matched the pattern. If no such pattern is detected then the\n     * null is returned and the scanner's position remains unchanged. This\n     * method may block waiting for input that matches the pattern.\n     *\n     * <p>A scanner will never search more than <code>horizon<\/code> code\n     * points beyond its current position. Note that a match may be clipped\n     * by the horizon; that is, an arbitrary match result may have been\n     * different if the horizon had been larger. The scanner treats the\n     * horizon as a transparent, non-anchoring bound (see {@link\n     * Matcher#useTransparentBounds} and {@link Matcher#useAnchoringBounds}).\n     *\n     * <p>If horizon is <code>0<\/code>, then the horizon is ignored and\n     * this method continues to search through the input looking for the\n     * specified pattern without bound. In this case it may buffer all of\n     * the input searching for the pattern.\n     *\n     * <p>If horizon is negative, then an IllegalArgumentException is\n     * thrown.\n     *\n     * @param pattern the pattern to scan for\n     * @param horizon the search horizon\n     * @return the text that matched the specified pattern\n     * @throws IllegalStateException if this scanner is closed\n     * @throws IllegalArgumentException if horizon is negative\n     */\n    public String findWithinHorizon(Pattern pattern, int horizon) {\n        ensureOpen();\n        if (pattern == null)\n            throw new NullPointerException();\n        if (horizon < 0)\n            throw new IllegalArgumentException(\"horizon < 0\");\n        clearCaches();\n\n        // Search for the pattern\n        while (true) {\n            String token = findPatternInBuffer(pattern, horizon);\n            if (token != null) {\n                matchValid = true;\n                return token;\n            }\n            if (needInput)\n                readInput();\n            else\n                break; // up to end of input\n        }\n        return null;\n    }"}
{"Number":"1088","API Relative Path":"java.util.Scanner.java-findWithinHorizon(Pattern-int)","Corresponding Source":"/**\n     * Attempts to find the next occurrence of the specified pattern.\n     *\n     * <p>This method searches through the input up to the specified\n     * search horizon, ignoring delimiters. If the pattern is found the\n     * scanner advances past the input that matched and returns the string\n     * that matched the pattern. If no such pattern is detected then the\n     * null is returned and the scanner's position remains unchanged. This\n     * method may block waiting for input that matches the pattern.\n     *\n     * <p>A scanner will never search more than <code>horizon<\/code> code\n     * points beyond its current position. Note that a match may be clipped\n     * by the horizon; that is, an arbitrary match result may have been\n     * different if the horizon had been larger. The scanner treats the\n     * horizon as a transparent, non-anchoring bound (see {@link\n     * Matcher#useTransparentBounds} and {@link Matcher#useAnchoringBounds}).\n     *\n     * <p>If horizon is <code>0<\/code>, then the horizon is ignored and\n     * this method continues to search through the input looking for the\n     * specified pattern without bound. In this case it may buffer all of\n     * the input searching for the pattern.\n     *\n     * <p>If horizon is negative, then an IllegalArgumentException is\n     * thrown.\n     *\n     * @param pattern the pattern to scan for\n     * @param horizon the search horizon\n     * @return the text that matched the specified pattern\n     * @throws IllegalStateException if this scanner is closed\n     * @throws IllegalArgumentException if horizon is negative\n     */\n    public String findWithinHorizon(Pattern pattern, int horizon) {\n        ensureOpen();\n        if (pattern == null)\n            throw new NullPointerException();\n        if (horizon < 0)\n            throw new IllegalArgumentException(\"horizon < 0\");\n        clearCaches();\n\n        // Search for the pattern\n        while (true) {\n            String token = findPatternInBuffer(pattern, horizon);\n            if (token != null) {\n                matchValid = true;\n                return token;\n            }\n            if (needInput)\n                readInput();\n            else\n                break; // up to end of input\n        }\n        return null;\n    }"}
{"Number":"1089","API Relative Path":"java.util.Scanner.java-hasNext(Pattern)","Corresponding Source":"/**\n     * Returns true if the next complete token matches the specified pattern.\n     * A complete token is prefixed and postfixed by input that matches\n     * the delimiter pattern. This method may block while waiting for input.\n     * The scanner does not advance past any input.\n     *\n     * @param pattern the pattern to scan for\n     * @return true if and only if this scanner has another token matching\n     *         the specified pattern\n     * @throws IllegalStateException if this scanner is closed\n     */\n    public boolean hasNext(Pattern pattern) {\n        ensureOpen();\n        if (pattern == null)\n            throw new NullPointerException();\n        hasNextPattern = null;\n        saveState();\n\n        while (true) {\n            if (getCompleteTokenInBuffer(pattern) != null) {\n                matchValid = true;\n                cacheResult();\n                return revertState(true);\n            }\n            if (needInput)\n                readInput();\n            else\n                return revertState(false);\n        }\n    }"}
{"Number":"1090","API Relative Path":"java.util.Scanner.java-next(Pattern)","Corresponding Source":"/**\n     * Returns the next token if it matches the specified pattern. This\n     * method may block while waiting for input to scan, even if a previous\n     * invocation of {@link #hasNext(Pattern)} returned <code>true<\/code>.\n     * If the match is successful, the scanner advances past the input that\n     * matched the pattern.\n     *\n     * @param pattern the pattern to scan for\n     * @return the next token\n     * @throws NoSuchElementException if no more tokens are available\n     * @throws IllegalStateException if this scanner is closed\n     */\n    public String next(Pattern pattern) {\n        ensureOpen();\n        if (pattern == null)\n            throw new NullPointerException();\n\n        // Did we already find this pattern?\n        if (hasNextPattern == pattern)\n            return getCachedResult();\n        clearCaches();\n\n        // Search for the pattern\n        while (true) {\n            String token = getCompleteTokenInBuffer(pattern);\n            if (token != null) {\n                matchValid = true;\n                skipped = false;\n                return token;\n            }\n            if (needInput)\n                readInput();\n            else\n                throwFor();\n        }\n    }"}
{"Number":"1091","API Relative Path":"java.util.Scanner.java-next(Pattern)","Corresponding Source":"/**\n     * Returns the next token if it matches the specified pattern. This\n     * method may block while waiting for input to scan, even if a previous\n     * invocation of {@link #hasNext(Pattern)} returned <code>true<\/code>.\n     * If the match is successful, the scanner advances past the input that\n     * matched the pattern.\n     *\n     * @param pattern the pattern to scan for\n     * @return the next token\n     * @throws NoSuchElementException if no more tokens are available\n     * @throws IllegalStateException if this scanner is closed\n     */\n    public String next(Pattern pattern) {\n        ensureOpen();\n        if (pattern == null)\n            throw new NullPointerException();\n\n        // Did we already find this pattern?\n        if (hasNextPattern == pattern)\n            return getCachedResult();\n        clearCaches();\n\n        // Search for the pattern\n        while (true) {\n            String token = getCompleteTokenInBuffer(pattern);\n            if (token != null) {\n                matchValid = true;\n                skipped = false;\n                return token;\n            }\n            if (needInput)\n                readInput();\n            else\n                throwFor();\n        }\n    }"}
{"Number":"1092","API Relative Path":"java.util.Scanner.java-Scanner(File-String)","Corresponding Source":"/**\n     * Constructs a new <code>Scanner<\/code> that produces values scanned\n     * from the specified file. Bytes from the file are converted into\n     * characters using the specified charset.\n     *\n     * @param  source A file to be scanned\n     * @param charsetName The encoding type used to convert bytes from the file\n     *        into characters to be scanned\n     * @throws FileNotFoundException if source is not found\n     * @throws IllegalArgumentException if the specified encoding is\n     *         not found\n     */\n    public Scanner(File source, String charsetName)\n        throws FileNotFoundException\n    {\n        this(Objects.requireNonNull(source), toDecoder(charsetName));\n    }"}
{"Number":"1093","API Relative Path":"java.util.Scanner.java-Scanner(File-String)","Corresponding Source":"/**\n     * Constructs a new <code>Scanner<\/code> that produces values scanned\n     * from the specified file. Bytes from the file are converted into\n     * characters using the specified charset.\n     *\n     * @param  source A file to be scanned\n     * @param charsetName The encoding type used to convert bytes from the file\n     *        into characters to be scanned\n     * @throws FileNotFoundException if source is not found\n     * @throws IllegalArgumentException if the specified encoding is\n     *         not found\n     */\n    public Scanner(File source, String charsetName)\n        throws FileNotFoundException\n    {\n        this(Objects.requireNonNull(source), toDecoder(charsetName));\n    }"}
{"Number":"1094","API Relative Path":"java.util.Scanner.java-Scanner(InputStream-String)","Corresponding Source":"/**\n     * Constructs a new <code>Scanner<\/code> that produces values scanned\n     * from the specified input stream. Bytes from the stream are converted\n     * into characters using the specified charset.\n     *\n     * @param  source An input stream to be scanned\n     * @param charsetName The encoding type used to convert bytes from the\n     *        stream into characters to be scanned\n     * @throws IllegalArgumentException if the specified character set\n     *         does not exist\n     */\n    public Scanner(InputStream source, String charsetName) {\n        this(makeReadable(Objects.requireNonNull(source, \"source\"), toCharset(charsetName)),\n             WHITESPACE_PATTERN);\n    }"}
{"Number":"1095","API Relative Path":"java.util.Scanner.java-Scanner(InputStream-String)","Corresponding Source":"/**\n     * Constructs a new <code>Scanner<\/code> that produces values scanned\n     * from the specified input stream. Bytes from the stream are converted\n     * into characters using the specified charset.\n     *\n     * @param  source An input stream to be scanned\n     * @param charsetName The encoding type used to convert bytes from the\n     *        stream into characters to be scanned\n     * @throws IllegalArgumentException if the specified character set\n     *         does not exist\n     */\n    public Scanner(InputStream source, String charsetName) {\n        this(makeReadable(Objects.requireNonNull(source, \"source\"), toCharset(charsetName)),\n             WHITESPACE_PATTERN);\n    }"}
{"Number":"1096","API Relative Path":"java.util.Scanner.java-Scanner(Path-String)","Corresponding Source":"/**\n     * Constructs a new <code>Scanner<\/code> that produces values scanned\n     * from the specified file. Bytes from the file are converted into\n     * characters using the specified charset.\n     *\n     * @param   source\n     *          the path to the file to be scanned\n     * @param   charsetName\n     *          The encoding type used to convert bytes from the file\n     *          into characters to be scanned\n     * @throws  IOException\n     *          if an I/O error occurs opening source\n     * @throws  IllegalArgumentException\n     *          if the specified encoding is not found\n     * @since   1.7\n     */\n    public Scanner(Path source, String charsetName) throws IOException {\n        this(Objects.requireNonNull(source), toCharset(charsetName));\n    }"}
{"Number":"1097","API Relative Path":"java.util.Scanner.java-Scanner(Path-String)","Corresponding Source":"/**\n     * Constructs a new <code>Scanner<\/code> that produces values scanned\n     * from the specified file. Bytes from the file are converted into\n     * characters using the specified charset.\n     *\n     * @param   source\n     *          the path to the file to be scanned\n     * @param   charsetName\n     *          The encoding type used to convert bytes from the file\n     *          into characters to be scanned\n     * @throws  IOException\n     *          if an I/O error occurs opening source\n     * @throws  IllegalArgumentException\n     *          if the specified encoding is not found\n     * @since   1.7\n     */\n    public Scanner(Path source, String charsetName) throws IOException {\n        this(Objects.requireNonNull(source), toCharset(charsetName));\n    }"}
{"Number":"1098","API Relative Path":"java.util.Scanner.java-Scanner(Readable)","Corresponding Source":"/**\n     * Constructs a new <code>Scanner<\/code> that produces values scanned\n     * from the specified channel. Bytes from the source are converted into\n     * characters using the underlying platform's\n     * {@linkplain java.nio.charset.Charset#defaultCharset() default charset}.\n     *\n     * @param  source A channel to scan\n     */\n    public Scanner(ReadableByteChannel source) {\n        this(makeReadable(Objects.requireNonNull(source, \"source\")),\n             WHITESPACE_PATTERN);\n    }"}
{"Number":"1099","API Relative Path":"java.util.Scanner.java-Scanner(ReadableByteChannel)","Corresponding Source":"/**\n     * Constructs a new <code>Scanner<\/code> that produces values scanned\n     * from the specified channel. Bytes from the source are converted into\n     * characters using the underlying platform's\n     * {@linkplain java.nio.charset.Charset#defaultCharset() default charset}.\n     *\n     * @param  source A channel to scan\n     */\n    public Scanner(ReadableByteChannel source) {\n        this(makeReadable(Objects.requireNonNull(source, \"source\")),\n             WHITESPACE_PATTERN);\n    }"}
{"Number":"1100","API Relative Path":"java.util.Scanner.java-Scanner(ReadableByteChannel-String)","Corresponding Source":"/**\n     * Constructs a new <code>Scanner<\/code> that produces values scanned\n     * from the specified channel. Bytes from the source are converted into\n     * characters using the specified charset.\n     *\n     * @param  source A channel to scan\n     * @param charsetName The encoding type used to convert bytes from the\n     *        channel into characters to be scanned\n     * @throws IllegalArgumentException if the specified character set\n     *         does not exist\n     */\n    public Scanner(ReadableByteChannel source, String charsetName) {\n        this(makeReadable(Objects.requireNonNull(source, \"source\"), toDecoder(charsetName)),\n             WHITESPACE_PATTERN);\n    }"}
{"Number":"1101","API Relative Path":"java.util.Scanner.java-Scanner(ReadableByteChannel-String)","Corresponding Source":"/**\n     * Constructs a new <code>Scanner<\/code> that produces values scanned\n     * from the specified channel. Bytes from the source are converted into\n     * characters using the specified charset.\n     *\n     * @param  source A channel to scan\n     * @param charsetName The encoding type used to convert bytes from the\n     *        channel into characters to be scanned\n     * @throws IllegalArgumentException if the specified character set\n     *         does not exist\n     */\n    public Scanner(ReadableByteChannel source, String charsetName) {\n        this(makeReadable(Objects.requireNonNull(source, \"source\"), toDecoder(charsetName)),\n             WHITESPACE_PATTERN);\n    }"}
{"Number":"1102","API Relative Path":"java.util.Scanner.java-skip(Pattern)","Corresponding Source":"/**\n     * Skips input that matches the specified pattern, ignoring delimiters.\n     * This method will skip input if an anchored match of the specified\n     * pattern succeeds.\n     *\n     * <p>If a match to the specified pattern is not found at the\n     * current position, then no input is skipped and a\n     * <tt>NoSuchElementException<\/tt> is thrown.\n     *\n     * <p>Since this method seeks to match the specified pattern starting at\n     * the scanner's current position, patterns that can match a lot of\n     * input (\".*\", for example) may cause the scanner to buffer a large\n     * amount of input.\n     *\n     * <p>Note that it is possible to skip something without risking a\n     * <code>NoSuchElementException<\/code> by using a pattern that can\n     * match nothing, e.g., <code>sc.skip(\"[ \\t]*\")<\/code>.\n     *\n     * @param pattern a string specifying the pattern to skip over\n     * @return this scanner\n     * @throws NoSuchElementException if the specified pattern is not found\n     * @throws IllegalStateException if this scanner is closed\n     */\n    public Scanner skip(Pattern pattern) {\n        ensureOpen();\n        if (pattern == null)\n            throw new NullPointerException();\n        clearCaches();\n\n        // Search for the pattern\n        while (true) {\n            String token = matchPatternInBuffer(pattern);\n            if (token != null) {\n                matchValid = true;\n                position = matcher.end();\n                return this;\n            }\n            if (needInput)\n                readInput();\n            else\n                throw new NoSuchElementException();\n        }\n    }"}
{"Number":"1103","API Relative Path":"java.util.Scanner.java-skip(Pattern)","Corresponding Source":"/**\n     * Skips input that matches the specified pattern, ignoring delimiters.\n     * This method will skip input if an anchored match of the specified\n     * pattern succeeds.\n     *\n     * <p>If a match to the specified pattern is not found at the\n     * current position, then no input is skipped and a\n     * <tt>NoSuchElementException<\/tt> is thrown.\n     *\n     * <p>Since this method seeks to match the specified pattern starting at\n     * the scanner's current position, patterns that can match a lot of\n     * input (\".*\", for example) may cause the scanner to buffer a large\n     * amount of input.\n     *\n     * <p>Note that it is possible to skip something without risking a\n     * <code>NoSuchElementException<\/code> by using a pattern that can\n     * match nothing, e.g., <code>sc.skip(\"[ \\t]*\")<\/code>.\n     *\n     * @param pattern a string specifying the pattern to skip over\n     * @return this scanner\n     * @throws NoSuchElementException if the specified pattern is not found\n     * @throws IllegalStateException if this scanner is closed\n     */\n    public Scanner skip(Pattern pattern) {\n        ensureOpen();\n        if (pattern == null)\n            throw new NullPointerException();\n        clearCaches();\n\n        // Search for the pattern\n        while (true) {\n            String token = matchPatternInBuffer(pattern);\n            if (token != null) {\n                matchValid = true;\n                position = matcher.end();\n                return this;\n            }\n            if (needInput)\n                readInput();\n            else\n                throw new NoSuchElementException();\n        }\n    }"}
{"Number":"1104","API Relative Path":"java.util.Scanner.java-useRadix(int)","Corresponding Source":"/**\n     * Sets this scanner's default radix to the specified radix.\n     *\n     * <p>A scanner's radix affects elements of its default\n     * number matching regular expressions; see\n     * <a href= \"#localized-numbers\">localized numbers<\/a> above.\n     *\n     * <p>If the radix is less than <code>Character.MIN_RADIX<\/code>\n     * or greater than <code>Character.MAX_RADIX<\/code>, then an\n     * <code>IllegalArgumentException<\/code> is thrown.\n     *\n     * <p>Invoking the {@link #reset} method will set the scanner's radix to\n     * <code>10<\/code>.\n     *\n     * @param radix The radix to use when scanning numbers\n     * @return this scanner\n     * @throws IllegalArgumentException if radix is out of range\n     */\n    public Scanner useRadix(int radix) {\n        if ((radix < Character.MIN_RADIX) || (radix > Character.MAX_RADIX))\n            throw new IllegalArgumentException(\"radix:\"+radix);\n\n        if (this.defaultRadix == radix)\n            return this;\n        this.defaultRadix = radix;\n        // Force rebuilding and recompilation of radix dependent patterns\n        integerPattern = null;\n        return this;\n    }"}
{"Number":"1105","API Relative Path":"java.util.SimpleTimeZone.java-getOffset(int-int-int-int-int-int)","Corresponding Source":"/**\n     * Returns the difference in milliseconds between local time and\n     * UTC, taking into account both the raw offset and the effect of\n     * daylight saving, for the specified date and time.  This method\n     * assumes that the start and end month are distinct.  It also\n     * uses a default {@link GregorianCalendar} object as its\n     * underlying calendar, such as for determining leap years.  Do\n     * not use the result of this method with a calendar other than a\n     * default <code>GregorianCalendar<\/code>.\n     *\n     * <p><em>Note:  In general, clients should use\n     * <code>Calendar.get(ZONE_OFFSET) + Calendar.get(DST_OFFSET)<\/code>\n     * instead of calling this method.<\/em>\n     *\n     * @param era       The era of the given date.\n     * @param year      The year in the given date.\n     * @param month     The month in the given date. Month is 0-based. e.g.,\n     *                  0 for January.\n     * @param day       The day-in-month of the given date.\n     * @param dayOfWeek The day-of-week of the given date.\n     * @param millis    The milliseconds in day in <em>standard<\/em> local time.\n     * @return          The milliseconds to add to UTC to get local time.\n     * @exception       IllegalArgumentException the <code>era<\/code>,\n     *                  <code>month<\/code>, <code>day<\/code>, <code>dayOfWeek<\/code>,\n     *                  or <code>millis<\/code> parameters are out of range\n     */\n    public int getOffset(int era, int year, int month, int day, int dayOfWeek,\n                         int millis)\n    {\n        if (era != GregorianCalendar.AD && era != GregorianCalendar.BC) {\n            throw new IllegalArgumentException(\"Illegal era \" + era);\n        }\n\n        int y = year;\n        if (era == GregorianCalendar.BC) {\n            // adjust y with the GregorianCalendar-style year numbering.\n            y = 1 - y;\n        }\n\n        // If the year isn't representable with the 64-bit long\n        // integer in milliseconds, convert the year to an\n        // equivalent year. This is required to pass some JCK test cases\n        // which are actually useless though because the specified years\n        // can't be supported by the Java time system.\n        if (y >= 292278994) {\n            y = 2800 + y % 2800;\n        } else if (y <= -292269054) {\n            // y %= 28 also produces an equivalent year, but positive\n            // year numbers would be convenient to use the UNIX cal\n            // command.\n            y = (int) CalendarUtils.mod((long) y, 28);\n        }\n\n        // convert year to its 1-based month value\n        int m = month + 1;\n\n        // First, calculate time as a Gregorian date.\n        BaseCalendar cal = gcal;\n        BaseCalendar.Date cdate = (BaseCalendar.Date) cal.newCalendarDate(TimeZone.NO_TIMEZONE);\n        cdate.setDate(y, m, day);\n        long time = cal.getTime(cdate); // normalize cdate\n        time += millis - rawOffset; // UTC time\n\n        // If the time value represents a time before the default\n        // Gregorian cutover, recalculate time using the Julian\n        // calendar system. For the Julian calendar system, the\n        // normalized year numbering is ..., -2 (BCE 2), -1 (BCE 1),\n        // 1, 2 ... which is different from the GregorianCalendar\n        // style year numbering (..., -1, 0 (BCE 1), 1, 2, ...).\n        if (time < GregorianCalendar.DEFAULT_GREGORIAN_CUTOVER) {\n            cal = (BaseCalendar) CalendarSystem.forName(\"julian\");\n            cdate = (BaseCalendar.Date) cal.newCalendarDate(TimeZone.NO_TIMEZONE);\n            cdate.setNormalizedDate(y, m, day);\n            time = cal.getTime(cdate) + millis - rawOffset;\n        }\n\n        if ((cdate.getNormalizedYear() != y)\n            || (cdate.getMonth() != m)\n            || (cdate.getDayOfMonth() != day)\n            // The validation should be cdate.getDayOfWeek() ==\n            // dayOfWeek. However, we don't check dayOfWeek for\n            // compatibility.\n            || (dayOfWeek < Calendar.SUNDAY || dayOfWeek > Calendar.SATURDAY)\n            || (millis < 0 || millis >= (24*60*60*1000))) {\n            throw new IllegalArgumentException();\n        }\n\n        if (!useDaylight || year < startYear || era != GregorianCalendar.CE) {\n            return rawOffset;\n        }\n\n        return getOffset(cal, cdate, y, time);\n    }"}
{"Number":"1106","API Relative Path":"java.util.SimpleTimeZone.java-getOffset(int-int-int-int-int-int)","Corresponding Source":"/**\n     * Returns the difference in milliseconds between local time and\n     * UTC, taking into account both the raw offset and the effect of\n     * daylight saving, for the specified date and time.  This method\n     * assumes that the start and end month are distinct.  It also\n     * uses a default {@link GregorianCalendar} object as its\n     * underlying calendar, such as for determining leap years.  Do\n     * not use the result of this method with a calendar other than a\n     * default <code>GregorianCalendar<\/code>.\n     *\n     * <p><em>Note:  In general, clients should use\n     * <code>Calendar.get(ZONE_OFFSET) + Calendar.get(DST_OFFSET)<\/code>\n     * instead of calling this method.<\/em>\n     *\n     * @param era       The era of the given date.\n     * @param year      The year in the given date.\n     * @param month     The month in the given date. Month is 0-based. e.g.,\n     *                  0 for January.\n     * @param day       The day-in-month of the given date.\n     * @param dayOfWeek The day-of-week of the given date.\n     * @param millis    The milliseconds in day in <em>standard<\/em> local time.\n     * @return          The milliseconds to add to UTC to get local time.\n     * @exception       IllegalArgumentException the <code>era<\/code>,\n     *                  <code>month<\/code>, <code>day<\/code>, <code>dayOfWeek<\/code>,\n     *                  or <code>millis<\/code> parameters are out of range\n     */\n    public int getOffset(int era, int year, int month, int day, int dayOfWeek,\n                         int millis)\n    {\n        if (era != GregorianCalendar.AD && era != GregorianCalendar.BC) {\n            throw new IllegalArgumentException(\"Illegal era \" + era);\n        }\n\n        int y = year;\n        if (era == GregorianCalendar.BC) {\n            // adjust y with the GregorianCalendar-style year numbering.\n            y = 1 - y;\n        }\n\n        // If the year isn't representable with the 64-bit long\n        // integer in milliseconds, convert the year to an\n        // equivalent year. This is required to pass some JCK test cases\n        // which are actually useless though because the specified years\n        // can't be supported by the Java time system.\n        if (y >= 292278994) {\n            y = 2800 + y % 2800;\n        } else if (y <= -292269054) {\n            // y %= 28 also produces an equivalent year, but positive\n            // year numbers would be convenient to use the UNIX cal\n            // command.\n            y = (int) CalendarUtils.mod((long) y, 28);\n        }\n\n        // convert year to its 1-based month value\n        int m = month + 1;\n\n        // First, calculate time as a Gregorian date.\n        BaseCalendar cal = gcal;\n        BaseCalendar.Date cdate = (BaseCalendar.Date) cal.newCalendarDate(TimeZone.NO_TIMEZONE);\n        cdate.setDate(y, m, day);\n        long time = cal.getTime(cdate); // normalize cdate\n        time += millis - rawOffset; // UTC time\n\n        // If the time value represents a time before the default\n        // Gregorian cutover, recalculate time using the Julian\n        // calendar system. For the Julian calendar system, the\n        // normalized year numbering is ..., -2 (BCE 2), -1 (BCE 1),\n        // 1, 2 ... which is different from the GregorianCalendar\n        // style year numbering (..., -1, 0 (BCE 1), 1, 2, ...).\n        if (time < GregorianCalendar.DEFAULT_GREGORIAN_CUTOVER) {\n            cal = (BaseCalendar) CalendarSystem.forName(\"julian\");\n            cdate = (BaseCalendar.Date) cal.newCalendarDate(TimeZone.NO_TIMEZONE);\n            cdate.setNormalizedDate(y, m, day);\n            time = cal.getTime(cdate) + millis - rawOffset;\n        }\n\n        if ((cdate.getNormalizedYear() != y)\n            || (cdate.getMonth() != m)\n            || (cdate.getDayOfMonth() != day)\n            // The validation should be cdate.getDayOfWeek() ==\n            // dayOfWeek. However, we don't check dayOfWeek for\n            // compatibility.\n            || (dayOfWeek < Calendar.SUNDAY || dayOfWeek > Calendar.SATURDAY)\n            || (millis < 0 || millis >= (24*60*60*1000))) {\n            throw new IllegalArgumentException();\n        }\n\n        if (!useDaylight || year < startYear || era != GregorianCalendar.CE) {\n            return rawOffset;\n        }\n\n        return getOffset(cal, cdate, y, time);\n    }"}
{"Number":"1107","API Relative Path":"java.util.SimpleTimeZone.java-SimpleTimeZone(int-String)","Corresponding Source":"/**\n     * Constructs a SimpleTimeZone with the given base time zone offset from GMT\n     * and time zone ID with no daylight saving time schedule.\n     *\n     * @param rawOffset  The base time zone offset in milliseconds to GMT.\n     * @param ID         The time zone name that is given to this instance.\n     */\n    public SimpleTimeZone(int rawOffset, String ID)\n    {\n        this.rawOffset = rawOffset;\n        setID (ID);\n        dstSavings = millisPerHour; // In case user sets rules later\n    }"}
{"Number":"1108","API Relative Path":"java.util.SimpleTimeZone.java-SimpleTimeZone(int-String-int-int-int-int-int-int-int-int-int-int-int)","Corresponding Source":"/**\n     * Constructs a SimpleTimeZone with the given base time zone offset from\n     * GMT, time zone ID, and rules for starting and ending the daylight\n     * time.\n     * This constructor takes the full set of the start and end rules\n     * parameters, including modes of <code>startTime<\/code> and\n     * <code>endTime<\/code>. The mode specifies either {@link #WALL_TIME wall\n     * time} or {@link #STANDARD_TIME standard time} or {@link #UTC_TIME UTC\n     * time}.\n     *\n     * @param rawOffset       The given base time zone offset from GMT.\n     * @param ID              The time zone ID which is given to this object.\n     * @param startMonth      The daylight saving time starting month. Month is\n     *                        a {@link Calendar#MONTH MONTH} field\n     *                        value (0-based. e.g., 0 for January).\n     * @param startDay        The day of the month on which the daylight saving time starts.\n     *                        See the class description for the special cases of this parameter.\n     * @param startDayOfWeek  The daylight saving time starting day-of-week.\n     *                        See the class description for the special cases of this parameter.\n     * @param startTime       The daylight saving time starting time in the time mode\n     *                        specified by <code>startTimeMode<\/code>.\n     * @param startTimeMode   The mode of the start time specified by startTime.\n     * @param endMonth        The daylight saving time ending month. Month is\n     *                        a {@link Calendar#MONTH MONTH} field\n     *                        value (0-based. e.g., 9 for October).\n     * @param endDay          The day of the month on which the daylight saving time ends.\n     *                        See the class description for the special cases of this parameter.\n     * @param endDayOfWeek    The daylight saving time ending day-of-week.\n     *                        See the class description for the special cases of this parameter.\n     * @param endTime         The daylight saving ending time in time time mode\n     *                        specified by <code>endTimeMode<\/code>.\n     * @param endTimeMode     The mode of the end time specified by endTime\n     * @param dstSavings      The amount of time in milliseconds saved during\n     *                        daylight saving time.\n     *\n     * @exception IllegalArgumentException if the month, day, dayOfWeek, time more, or\n     * time parameters are out of range for the start or end rule, or if a time mode\n     * value is invalid.\n     *\n     * @see #WALL_TIME\n     * @see #STANDARD_TIME\n     * @see #UTC_TIME\n     *\n     * @since 1.4\n     */\n    public SimpleTimeZone(int rawOffset, String ID,\n                          int startMonth, int startDay, int startDayOfWeek,\n                          int startTime, int startTimeMode,\n                          int endMonth, int endDay, int endDayOfWeek,\n                          int endTime, int endTimeMode,\n                          int dstSavings) {\n\n        setID(ID);\n        this.rawOffset      = rawOffset;\n        this.startMonth     = startMonth;\n        this.startDay       = startDay;\n        this.startDayOfWeek = startDayOfWeek;\n        this.startTime      = startTime;\n        this.startTimeMode  = startTimeMode;\n        this.endMonth       = endMonth;\n        this.endDay         = endDay;\n        this.endDayOfWeek   = endDayOfWeek;\n        this.endTime        = endTime;\n        this.endTimeMode    = endTimeMode;\n        this.dstSavings     = dstSavings;\n\n        // this.useDaylight is set by decodeRules\n        decodeRules();\n        if (dstSavings <= 0) {\n            throw new IllegalArgumentException(\"Illegal daylight saving value: \" + dstSavings);\n        }\n    }"}
{"Number":"1109","API Relative Path":"java.util.SimpleTimeZone.java-SimpleTimeZone(int-String-int-int-int-int-int-int-int-int-int-int-int)","Corresponding Source":"/**\n     * Constructs a SimpleTimeZone with the given base time zone offset from\n     * GMT, time zone ID, and rules for starting and ending the daylight\n     * time.\n     * This constructor takes the full set of the start and end rules\n     * parameters, including modes of <code>startTime<\/code> and\n     * <code>endTime<\/code>. The mode specifies either {@link #WALL_TIME wall\n     * time} or {@link #STANDARD_TIME standard time} or {@link #UTC_TIME UTC\n     * time}.\n     *\n     * @param rawOffset       The given base time zone offset from GMT.\n     * @param ID              The time zone ID which is given to this object.\n     * @param startMonth      The daylight saving time starting month. Month is\n     *                        a {@link Calendar#MONTH MONTH} field\n     *                        value (0-based. e.g., 0 for January).\n     * @param startDay        The day of the month on which the daylight saving time starts.\n     *                        See the class description for the special cases of this parameter.\n     * @param startDayOfWeek  The daylight saving time starting day-of-week.\n     *                        See the class description for the special cases of this parameter.\n     * @param startTime       The daylight saving time starting time in the time mode\n     *                        specified by <code>startTimeMode<\/code>.\n     * @param startTimeMode   The mode of the start time specified by startTime.\n     * @param endMonth        The daylight saving time ending month. Month is\n     *                        a {@link Calendar#MONTH MONTH} field\n     *                        value (0-based. e.g., 9 for October).\n     * @param endDay          The day of the month on which the daylight saving time ends.\n     *                        See the class description for the special cases of this parameter.\n     * @param endDayOfWeek    The daylight saving time ending day-of-week.\n     *                        See the class description for the special cases of this parameter.\n     * @param endTime         The daylight saving ending time in time time mode\n     *                        specified by <code>endTimeMode<\/code>.\n     * @param endTimeMode     The mode of the end time specified by endTime\n     * @param dstSavings      The amount of time in milliseconds saved during\n     *                        daylight saving time.\n     *\n     * @exception IllegalArgumentException if the month, day, dayOfWeek, time more, or\n     * time parameters are out of range for the start or end rule, or if a time mode\n     * value is invalid.\n     *\n     * @see #WALL_TIME\n     * @see #STANDARD_TIME\n     * @see #UTC_TIME\n     *\n     * @since 1.4\n     */\n    public SimpleTimeZone(int rawOffset, String ID,\n                          int startMonth, int startDay, int startDayOfWeek,\n                          int startTime, int startTimeMode,\n                          int endMonth, int endDay, int endDayOfWeek,\n                          int endTime, int endTimeMode,\n                          int dstSavings) {\n\n        setID(ID);\n        this.rawOffset      = rawOffset;\n        this.startMonth     = startMonth;\n        this.startDay       = startDay;\n        this.startDayOfWeek = startDayOfWeek;\n        this.startTime      = startTime;\n        this.startTimeMode  = startTimeMode;\n        this.endMonth       = endMonth;\n        this.endDay         = endDay;\n        this.endDayOfWeek   = endDayOfWeek;\n        this.endTime        = endTime;\n        this.endTimeMode    = endTimeMode;\n        this.dstSavings     = dstSavings;\n\n        // this.useDaylight is set by decodeRules\n        decodeRules();\n        if (dstSavings <= 0) {\n            throw new IllegalArgumentException(\"Illegal daylight saving value: \" + dstSavings);\n        }\n    }"}
{"Number":"1110","API Relative Path":"java.util.spi.CurrencyNameProvider.java-getDisplayName(String-Locale)","Corresponding Source":"/**\n     * Returns a name for the currency that is appropriate for display to the\n     * user.  The default implementation returns null.\n     *\n     * @param currencyCode the ISO 4217 currency code, which\n     *     consists of three upper-case letters between 'A' (U+0041) and\n     *     'Z' (U+005A)\n     * @param locale the desired locale\n     * @return the name for the currency that is appropriate for display to the\n     *     user, or null if the name is not available for the locale\n     * @exception IllegalArgumentException if <code>currencyCode<\/code> is not in\n     *     the form of three upper-case letters, or <code>locale<\/code> isn't\n     *     one of the locales returned from\n     *     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales()\n     *     getAvailableLocales()}.\n     * @exception NullPointerException if <code>currencyCode<\/code> or\n     *     <code>locale<\/code> is <code>null<\/code>\n     * @since 1.7\n     */\n    public String getDisplayName(String currencyCode, Locale locale) {\n        if (currencyCode == null || locale == null) {\n            throw new NullPointerException();\n        }\n\n        // Check whether the currencyCode is valid\n        char[] charray = currencyCode.toCharArray();\n        if (charray.length != 3) {\n            throw new IllegalArgumentException(\"The currencyCode is not in the form of three upper-case letters.\");\n        }\n        for (char c : charray) {\n            if (c < 'A' || c > 'Z') {\n                throw new IllegalArgumentException(\"The currencyCode is not in the form of three upper-case letters.\");\n            }\n        }\n\n        // Check whether the locale is valid\n        Control c = Control.getNoFallbackControl(Control.FORMAT_DEFAULT);\n        for (Locale l : getAvailableLocales()) {\n            if (c.getCandidateLocales(\"\", l).contains(locale)) {\n                return null;\n            }\n        }\n\n        throw new IllegalArgumentException(\"The locale is not available\");\n    }"}
{"Number":"1111","API Relative Path":"java.util.Spliterators.java-spliterator(double[]-int-int-int)","Corresponding Source":"/**\n     * Creates a {@code Spliterator.OfDouble} covering a range of elements of a\n     * given array, using a customized set of spliterator characteristics.\n     *\n     * <p>This method is provided as an implementation convenience for\n     * Spliterators which store portions of their elements in arrays, and need\n     * fine control over Spliterator characteristics.  Most other situations in\n     * which a Spliterator for an array is needed should use\n     * {@link Arrays#spliterator(double[], int, int)}.\n     *\n     * <p>The returned spliterator always reports the characteristics\n     * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional\n     * characteristics for the spliterator to report.  (For example, if it is\n     * known the array will not be further modified, specify {@code IMMUTABLE};\n     * if the array data is considered to have an an encounter order, specify\n     * {@code ORDERED}).  The method {@link Arrays#spliterator(long[], int, int)} can\n     * often be used instead, which returns a spliterator that reports\n     * {@code SIZED}, {@code SUBSIZED}, {@code IMMUTABLE}, and {@code ORDERED}.\n     *\n     * @param array The array, assumed to be unmodified during use\n     * @param fromIndex The least index (inclusive) to cover\n     * @param toIndex One past the greatest index to cover\n     * @param additionalCharacteristics Additional spliterator characteristics\n     *        of this spliterator's source or elements beyond {@code SIZED} and\n     *        {@code SUBSIZED} which are are always reported\n     * @return A spliterator for an array\n     * @throws NullPointerException if the given array is {@code null}\n     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex} is negative,\n     *         {@code toIndex} is less than {@code fromIndex}, or\n     *         {@code toIndex} is greater than the array size\n     * @see Arrays#spliterator(double[], int, int)\n     */\n    public static Spliterator.OfDouble spliterator(double[] array, int fromIndex, int toIndex,\n                                                   int additionalCharacteristics) {\n        checkFromToBounds(Objects.requireNonNull(array).length, fromIndex, toIndex);\n        return new DoubleArraySpliterator(array, fromIndex, toIndex, additionalCharacteristics);\n    }"}
{"Number":"1112","API Relative Path":"java.util.Spliterators.java-spliterator(double[]-int-int-int)","Corresponding Source":"/**\n     * Creates a {@code Spliterator.OfDouble} covering a range of elements of a\n     * given array, using a customized set of spliterator characteristics.\n     *\n     * <p>This method is provided as an implementation convenience for\n     * Spliterators which store portions of their elements in arrays, and need\n     * fine control over Spliterator characteristics.  Most other situations in\n     * which a Spliterator for an array is needed should use\n     * {@link Arrays#spliterator(double[], int, int)}.\n     *\n     * <p>The returned spliterator always reports the characteristics\n     * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional\n     * characteristics for the spliterator to report.  (For example, if it is\n     * known the array will not be further modified, specify {@code IMMUTABLE};\n     * if the array data is considered to have an an encounter order, specify\n     * {@code ORDERED}).  The method {@link Arrays#spliterator(long[], int, int)} can\n     * often be used instead, which returns a spliterator that reports\n     * {@code SIZED}, {@code SUBSIZED}, {@code IMMUTABLE}, and {@code ORDERED}.\n     *\n     * @param array The array, assumed to be unmodified during use\n     * @param fromIndex The least index (inclusive) to cover\n     * @param toIndex One past the greatest index to cover\n     * @param additionalCharacteristics Additional spliterator characteristics\n     *        of this spliterator's source or elements beyond {@code SIZED} and\n     *        {@code SUBSIZED} which are are always reported\n     * @return A spliterator for an array\n     * @throws NullPointerException if the given array is {@code null}\n     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex} is negative,\n     *         {@code toIndex} is less than {@code fromIndex}, or\n     *         {@code toIndex} is greater than the array size\n     * @see Arrays#spliterator(double[], int, int)\n     */\n    public static Spliterator.OfDouble spliterator(double[] array, int fromIndex, int toIndex,\n                                                   int additionalCharacteristics) {\n        checkFromToBounds(Objects.requireNonNull(array).length, fromIndex, toIndex);\n        return new DoubleArraySpliterator(array, fromIndex, toIndex, additionalCharacteristics);\n    }"}
{"Number":"1113","API Relative Path":"java.util.Spliterators.java-spliterator(double[]-int-int-int)","Corresponding Source":"/**\n     * Creates a {@code Spliterator.OfDouble} covering a range of elements of a\n     * given array, using a customized set of spliterator characteristics.\n     *\n     * <p>This method is provided as an implementation convenience for\n     * Spliterators which store portions of their elements in arrays, and need\n     * fine control over Spliterator characteristics.  Most other situations in\n     * which a Spliterator for an array is needed should use\n     * {@link Arrays#spliterator(double[], int, int)}.\n     *\n     * <p>The returned spliterator always reports the characteristics\n     * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional\n     * characteristics for the spliterator to report.  (For example, if it is\n     * known the array will not be further modified, specify {@code IMMUTABLE};\n     * if the array data is considered to have an an encounter order, specify\n     * {@code ORDERED}).  The method {@link Arrays#spliterator(long[], int, int)} can\n     * often be used instead, which returns a spliterator that reports\n     * {@code SIZED}, {@code SUBSIZED}, {@code IMMUTABLE}, and {@code ORDERED}.\n     *\n     * @param array The array, assumed to be unmodified during use\n     * @param fromIndex The least index (inclusive) to cover\n     * @param toIndex One past the greatest index to cover\n     * @param additionalCharacteristics Additional spliterator characteristics\n     *        of this spliterator's source or elements beyond {@code SIZED} and\n     *        {@code SUBSIZED} which are are always reported\n     * @return A spliterator for an array\n     * @throws NullPointerException if the given array is {@code null}\n     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex} is negative,\n     *         {@code toIndex} is less than {@code fromIndex}, or\n     *         {@code toIndex} is greater than the array size\n     * @see Arrays#spliterator(double[], int, int)\n     */\n    public static Spliterator.OfDouble spliterator(double[] array, int fromIndex, int toIndex,\n                                                   int additionalCharacteristics) {\n        checkFromToBounds(Objects.requireNonNull(array).length, fromIndex, toIndex);\n        return new DoubleArraySpliterator(array, fromIndex, toIndex, additionalCharacteristics);\n    }"}
{"Number":"1114","API Relative Path":"java.util.Spliterators.java-spliterator(int[]-int-int-int)","Corresponding Source":"/**\n     * Creates a {@code Spliterator.OfInt} covering a range of elements of a\n     * given array, using a customized set of spliterator characteristics.\n     *\n     * <p>This method is provided as an implementation convenience for\n     * Spliterators which store portions of their elements in arrays, and need\n     * fine control over Spliterator characteristics.  Most other situations in\n     * which a Spliterator for an array is needed should use\n     * {@link Arrays#spliterator(int[], int, int)}.\n     *\n     * <p>The returned spliterator always reports the characteristics\n     * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional\n     * characteristics for the spliterator to report; it is common to\n     * additionally specify {@code IMMUTABLE} and {@code ORDERED}.\n     *\n     * @param array The array, assumed to be unmodified during use\n     * @param fromIndex The least index (inclusive) to cover\n     * @param toIndex One past the greatest index to cover\n     * @param additionalCharacteristics Additional spliterator characteristics\n     *        of this spliterator's source or elements beyond {@code SIZED} and\n     *        {@code SUBSIZED} which are are always reported\n     * @return A spliterator for an array\n     * @throws NullPointerException if the given array is {@code null}\n     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex} is negative,\n     *         {@code toIndex} is less than {@code fromIndex}, or\n     *         {@code toIndex} is greater than the array size\n     * @see Arrays#spliterator(int[], int, int)\n     */\n    public static Spliterator.OfInt spliterator(int[] array, int fromIndex, int toIndex,\n                                                int additionalCharacteristics) {\n        checkFromToBounds(Objects.requireNonNull(array).length, fromIndex, toIndex);\n        return new IntArraySpliterator(array, fromIndex, toIndex, additionalCharacteristics);\n    }"}
{"Number":"1115","API Relative Path":"java.util.Spliterators.java-spliterator(int[]-int-int-int)","Corresponding Source":"/**\n     * Creates a {@code Spliterator.OfInt} covering a range of elements of a\n     * given array, using a customized set of spliterator characteristics.\n     *\n     * <p>This method is provided as an implementation convenience for\n     * Spliterators which store portions of their elements in arrays, and need\n     * fine control over Spliterator characteristics.  Most other situations in\n     * which a Spliterator for an array is needed should use\n     * {@link Arrays#spliterator(int[], int, int)}.\n     *\n     * <p>The returned spliterator always reports the characteristics\n     * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional\n     * characteristics for the spliterator to report; it is common to\n     * additionally specify {@code IMMUTABLE} and {@code ORDERED}.\n     *\n     * @param array The array, assumed to be unmodified during use\n     * @param fromIndex The least index (inclusive) to cover\n     * @param toIndex One past the greatest index to cover\n     * @param additionalCharacteristics Additional spliterator characteristics\n     *        of this spliterator's source or elements beyond {@code SIZED} and\n     *        {@code SUBSIZED} which are are always reported\n     * @return A spliterator for an array\n     * @throws NullPointerException if the given array is {@code null}\n     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex} is negative,\n     *         {@code toIndex} is less than {@code fromIndex}, or\n     *         {@code toIndex} is greater than the array size\n     * @see Arrays#spliterator(int[], int, int)\n     */\n    public static Spliterator.OfInt spliterator(int[] array, int fromIndex, int toIndex,\n                                                int additionalCharacteristics) {\n        checkFromToBounds(Objects.requireNonNull(array).length, fromIndex, toIndex);\n        return new IntArraySpliterator(array, fromIndex, toIndex, additionalCharacteristics);\n    }"}
{"Number":"1116","API Relative Path":"java.util.Spliterators.java-spliterator(int[]-int-int-int)","Corresponding Source":"/**\n     * Creates a {@code Spliterator.OfInt} covering a range of elements of a\n     * given array, using a customized set of spliterator characteristics.\n     *\n     * <p>This method is provided as an implementation convenience for\n     * Spliterators which store portions of their elements in arrays, and need\n     * fine control over Spliterator characteristics.  Most other situations in\n     * which a Spliterator for an array is needed should use\n     * {@link Arrays#spliterator(int[], int, int)}.\n     *\n     * <p>The returned spliterator always reports the characteristics\n     * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional\n     * characteristics for the spliterator to report; it is common to\n     * additionally specify {@code IMMUTABLE} and {@code ORDERED}.\n     *\n     * @param array The array, assumed to be unmodified during use\n     * @param fromIndex The least index (inclusive) to cover\n     * @param toIndex One past the greatest index to cover\n     * @param additionalCharacteristics Additional spliterator characteristics\n     *        of this spliterator's source or elements beyond {@code SIZED} and\n     *        {@code SUBSIZED} which are are always reported\n     * @return A spliterator for an array\n     * @throws NullPointerException if the given array is {@code null}\n     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex} is negative,\n     *         {@code toIndex} is less than {@code fromIndex}, or\n     *         {@code toIndex} is greater than the array size\n     * @see Arrays#spliterator(int[], int, int)\n     */\n    public static Spliterator.OfInt spliterator(int[] array, int fromIndex, int toIndex,\n                                                int additionalCharacteristics) {\n        checkFromToBounds(Objects.requireNonNull(array).length, fromIndex, toIndex);\n        return new IntArraySpliterator(array, fromIndex, toIndex, additionalCharacteristics);\n    }"}
{"Number":"1117","API Relative Path":"java.util.Spliterators.java-spliterator(long[]-int-int-int)","Corresponding Source":"/**\n     * Creates a {@code Spliterator.OfLong} covering a range of elements of a\n     * given array, using a customized set of spliterator characteristics.\n     *\n     * <p>This method is provided as an implementation convenience for\n     * Spliterators which store portions of their elements in arrays, and need\n     * fine control over Spliterator characteristics.  Most other situations in\n     * which a Spliterator for an array is needed should use\n     * {@link Arrays#spliterator(long[], int, int)}.\n     *\n     * <p>The returned spliterator always reports the characteristics\n     * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional\n     * characteristics for the spliterator to report.  (For example, if it is\n     * known the array will not be further modified, specify {@code IMMUTABLE};\n     * if the array data is considered to have an an encounter order, specify\n     * {@code ORDERED}).  The method {@link Arrays#spliterator(long[], int, int)} can\n     * often be used instead, which returns a spliterator that reports\n     * {@code SIZED}, {@code SUBSIZED}, {@code IMMUTABLE}, and {@code ORDERED}.\n     *\n     * @param array The array, assumed to be unmodified during use\n     * @param fromIndex The least index (inclusive) to cover\n     * @param toIndex One past the greatest index to cover\n     * @param additionalCharacteristics Additional spliterator characteristics\n     *        of this spliterator's source or elements beyond {@code SIZED} and\n     *        {@code SUBSIZED} which are are always reported\n     * @return A spliterator for an array\n     * @throws NullPointerException if the given array is {@code null}\n     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex} is negative,\n     *         {@code toIndex} is less than {@code fromIndex}, or\n     *         {@code toIndex} is greater than the array size\n     * @see Arrays#spliterator(long[], int, int)\n     */\n    public static Spliterator.OfLong spliterator(long[] array, int fromIndex, int toIndex,\n                                                 int additionalCharacteristics) {\n        checkFromToBounds(Objects.requireNonNull(array).length, fromIndex, toIndex);\n        return new LongArraySpliterator(array, fromIndex, toIndex, additionalCharacteristics);\n    }"}
{"Number":"1118","API Relative Path":"java.util.Spliterators.java-spliterator(long[]-int-int-int)","Corresponding Source":"/**\n     * Creates a {@code Spliterator.OfLong} covering a range of elements of a\n     * given array, using a customized set of spliterator characteristics.\n     *\n     * <p>This method is provided as an implementation convenience for\n     * Spliterators which store portions of their elements in arrays, and need\n     * fine control over Spliterator characteristics.  Most other situations in\n     * which a Spliterator for an array is needed should use\n     * {@link Arrays#spliterator(long[], int, int)}.\n     *\n     * <p>The returned spliterator always reports the characteristics\n     * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional\n     * characteristics for the spliterator to report.  (For example, if it is\n     * known the array will not be further modified, specify {@code IMMUTABLE};\n     * if the array data is considered to have an an encounter order, specify\n     * {@code ORDERED}).  The method {@link Arrays#spliterator(long[], int, int)} can\n     * often be used instead, which returns a spliterator that reports\n     * {@code SIZED}, {@code SUBSIZED}, {@code IMMUTABLE}, and {@code ORDERED}.\n     *\n     * @param array The array, assumed to be unmodified during use\n     * @param fromIndex The least index (inclusive) to cover\n     * @param toIndex One past the greatest index to cover\n     * @param additionalCharacteristics Additional spliterator characteristics\n     *        of this spliterator's source or elements beyond {@code SIZED} and\n     *        {@code SUBSIZED} which are are always reported\n     * @return A spliterator for an array\n     * @throws NullPointerException if the given array is {@code null}\n     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex} is negative,\n     *         {@code toIndex} is less than {@code fromIndex}, or\n     *         {@code toIndex} is greater than the array size\n     * @see Arrays#spliterator(long[], int, int)\n     */\n    public static Spliterator.OfLong spliterator(long[] array, int fromIndex, int toIndex,\n                                                 int additionalCharacteristics) {\n        checkFromToBounds(Objects.requireNonNull(array).length, fromIndex, toIndex);\n        return new LongArraySpliterator(array, fromIndex, toIndex, additionalCharacteristics);\n    }"}
{"Number":"1119","API Relative Path":"java.util.Spliterators.java-spliterator(long[]-int-int-int)","Corresponding Source":"/**\n     * Creates a {@code Spliterator.OfLong} covering a range of elements of a\n     * given array, using a customized set of spliterator characteristics.\n     *\n     * <p>This method is provided as an implementation convenience for\n     * Spliterators which store portions of their elements in arrays, and need\n     * fine control over Spliterator characteristics.  Most other situations in\n     * which a Spliterator for an array is needed should use\n     * {@link Arrays#spliterator(long[], int, int)}.\n     *\n     * <p>The returned spliterator always reports the characteristics\n     * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional\n     * characteristics for the spliterator to report.  (For example, if it is\n     * known the array will not be further modified, specify {@code IMMUTABLE};\n     * if the array data is considered to have an an encounter order, specify\n     * {@code ORDERED}).  The method {@link Arrays#spliterator(long[], int, int)} can\n     * often be used instead, which returns a spliterator that reports\n     * {@code SIZED}, {@code SUBSIZED}, {@code IMMUTABLE}, and {@code ORDERED}.\n     *\n     * @param array The array, assumed to be unmodified during use\n     * @param fromIndex The least index (inclusive) to cover\n     * @param toIndex One past the greatest index to cover\n     * @param additionalCharacteristics Additional spliterator characteristics\n     *        of this spliterator's source or elements beyond {@code SIZED} and\n     *        {@code SUBSIZED} which are are always reported\n     * @return A spliterator for an array\n     * @throws NullPointerException if the given array is {@code null}\n     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex} is negative,\n     *         {@code toIndex} is less than {@code fromIndex}, or\n     *         {@code toIndex} is greater than the array size\n     * @see Arrays#spliterator(long[], int, int)\n     */\n    public static Spliterator.OfLong spliterator(long[] array, int fromIndex, int toIndex,\n                                                 int additionalCharacteristics) {\n        checkFromToBounds(Objects.requireNonNull(array).length, fromIndex, toIndex);\n        return new LongArraySpliterator(array, fromIndex, toIndex, additionalCharacteristics);\n    }"}
{"Number":"1120","API Relative Path":"java.util.Spliterators.java-spliterator(Object[]-int-int-int)","Corresponding Source":"/**\n     * Creates a {@code Spliterator} covering a range of elements of a given\n     * array, using a customized set of spliterator characteristics.\n     *\n     * <p>This method is provided as an implementation convenience for\n     * Spliterators which store portions of their elements in arrays, and need\n     * fine control over Spliterator characteristics.  Most other situations in\n     * which a Spliterator for an array is needed should use\n     * {@link Arrays#spliterator(Object[])}.\n     *\n     * <p>The returned spliterator always reports the characteristics\n     * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional\n     * characteristics for the spliterator to report; it is common to\n     * additionally specify {@code IMMUTABLE} and {@code ORDERED}.\n     *\n     * @param <T> Type of elements\n     * @param array The array, assumed to be unmodified during use\n     * @param fromIndex The least index (inclusive) to cover\n     * @param toIndex One past the greatest index to cover\n     * @param additionalCharacteristics Additional spliterator characteristics\n     *        of this spliterator's source or elements beyond {@code SIZED} and\n     *        {@code SUBSIZED} which are are always reported\n     * @return A spliterator for an array\n     * @throws NullPointerException if the given array is {@code null}\n     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex} is negative,\n     *         {@code toIndex} is less than {@code fromIndex}, or\n     *         {@code toIndex} is greater than the array size\n     * @see Arrays#spliterator(Object[], int, int)\n     */\n    public static <T> Spliterator<T> spliterator(Object[] array, int fromIndex, int toIndex,\n                                                 int additionalCharacteristics) {\n        checkFromToBounds(Objects.requireNonNull(array).length, fromIndex, toIndex);\n        return new ArraySpliterator<>(array, fromIndex, toIndex, additionalCharacteristics);\n    }"}
{"Number":"1121","API Relative Path":"java.util.Spliterators.java-spliterator(Object[]-int-int-int)","Corresponding Source":"/**\n     * Creates a {@code Spliterator} covering a range of elements of a given\n     * array, using a customized set of spliterator characteristics.\n     *\n     * <p>This method is provided as an implementation convenience for\n     * Spliterators which store portions of their elements in arrays, and need\n     * fine control over Spliterator characteristics.  Most other situations in\n     * which a Spliterator for an array is needed should use\n     * {@link Arrays#spliterator(Object[])}.\n     *\n     * <p>The returned spliterator always reports the characteristics\n     * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional\n     * characteristics for the spliterator to report; it is common to\n     * additionally specify {@code IMMUTABLE} and {@code ORDERED}.\n     *\n     * @param <T> Type of elements\n     * @param array The array, assumed to be unmodified during use\n     * @param fromIndex The least index (inclusive) to cover\n     * @param toIndex One past the greatest index to cover\n     * @param additionalCharacteristics Additional spliterator characteristics\n     *        of this spliterator's source or elements beyond {@code SIZED} and\n     *        {@code SUBSIZED} which are are always reported\n     * @return A spliterator for an array\n     * @throws NullPointerException if the given array is {@code null}\n     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex} is negative,\n     *         {@code toIndex} is less than {@code fromIndex}, or\n     *         {@code toIndex} is greater than the array size\n     * @see Arrays#spliterator(Object[], int, int)\n     */\n    public static <T> Spliterator<T> spliterator(Object[] array, int fromIndex, int toIndex,\n                                                 int additionalCharacteristics) {\n        checkFromToBounds(Objects.requireNonNull(array).length, fromIndex, toIndex);\n        return new ArraySpliterator<>(array, fromIndex, toIndex, additionalCharacteristics);\n    }"}
{"Number":"1122","API Relative Path":"java.util.Spliterators.java-spliterator(Object[]-int-int-int)","Corresponding Source":"/**\n     * Creates a {@code Spliterator} covering a range of elements of a given\n     * array, using a customized set of spliterator characteristics.\n     *\n     * <p>This method is provided as an implementation convenience for\n     * Spliterators which store portions of their elements in arrays, and need\n     * fine control over Spliterator characteristics.  Most other situations in\n     * which a Spliterator for an array is needed should use\n     * {@link Arrays#spliterator(Object[])}.\n     *\n     * <p>The returned spliterator always reports the characteristics\n     * {@code SIZED} and {@code SUBSIZED}.  The caller may provide additional\n     * characteristics for the spliterator to report; it is common to\n     * additionally specify {@code IMMUTABLE} and {@code ORDERED}.\n     *\n     * @param <T> Type of elements\n     * @param array The array, assumed to be unmodified during use\n     * @param fromIndex The least index (inclusive) to cover\n     * @param toIndex One past the greatest index to cover\n     * @param additionalCharacteristics Additional spliterator characteristics\n     *        of this spliterator's source or elements beyond {@code SIZED} and\n     *        {@code SUBSIZED} which are are always reported\n     * @return A spliterator for an array\n     * @throws NullPointerException if the given array is {@code null}\n     * @throws ArrayIndexOutOfBoundsException if {@code fromIndex} is negative,\n     *         {@code toIndex} is less than {@code fromIndex}, or\n     *         {@code toIndex} is greater than the array size\n     * @see Arrays#spliterator(Object[], int, int)\n     */\n    public static <T> Spliterator<T> spliterator(Object[] array, int fromIndex, int toIndex,\n                                                 int additionalCharacteristics) {\n        checkFromToBounds(Objects.requireNonNull(array).length, fromIndex, toIndex);\n        return new ArraySpliterator<>(array, fromIndex, toIndex, additionalCharacteristics);\n    }"}
{"Number":"1123","API Relative Path":"java.util.stream.AbstractShortCircuitTask.java-shortCircuit(R)","Corresponding Source":"/**\n     * Declares that a globally valid result has been found.  If another task has\n     * not already found the answer, the result is installed in\n     * {@code sharedResult}.  The {@code compute()} method will check\n     * {@code sharedResult} before proceeding with computation, so this causes\n     * the computation to terminate early.\n     *\n     * @param result the result found\n     */\n    protected void shortCircuit(R result) {\n        if (result != null)\n            sharedResult.compareAndSet(null, result);\n    }"}
{"Number":"1124","API Relative Path":"java.util.stream.AbstractSpinedBuffer.java-AbstractSpinedBuffer(int)","Corresponding Source":"/**\n     * Construct with a specified initial capacity.\n     *\n     * @param initialCapacity The minimum expected number of elements\n     */\n    protected AbstractSpinedBuffer(int initialCapacity) {\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException(\"Illegal Capacity: \"+ initialCapacity);\n\n        this.initialChunkPower = Math.max(MIN_CHUNK_POWER,\n                                          Integer.SIZE - Integer.numberOfLeadingZeros(initialCapacity - 1));\n    }"}
{"Number":"1125","API Relative Path":"java.util.stream.AbstractTask.java-setRawResult(R)","Corresponding Source":"/**\n     * Does nothing; instead, subclasses should use\n     * {@link #setLocalResult(Object)}} to manage results.\n     *\n     * @param result must be null, or an exception is thrown (this is a safety\n     *        tripwire to detect when {@code setRawResult()} is being used\n     *        instead of {@code setLocalResult()}\n     */\n    @Override\n    protected void setRawResult(R result) {\n        if (result != null)\n            throw new IllegalStateException();\n    }"}
{"Number":"1126","API Relative Path":"java.util.stream.Collectors.java-collectingAndThen(Collector-Function)","Corresponding Source":"/**\n     * Adapts a {@code Collector} to perform an additional finishing\n     * transformation.  For example, one could adapt the {@link #toList()}\n     * collector to always produce an immutable list with:\n     * <pre>{@code\n     *     List<String> people\n     *         = people.stream().collect(collectingAndThen(toList(), Collections::unmodifiableList));\n     * }<\/pre>\n     *\n     * @param <T> the type of the input elements\n     * @param <A> intermediate accumulation type of the downstream collector\n     * @param <R> result type of the downstream collector\n     * @param <RR> result type of the resulting collector\n     * @param downstream a collector\n     * @param finisher a function to be applied to the final result of the downstream collector\n     * @return a collector which performs the action of the downstream collector,\n     * followed by an additional finishing step\n     */\n    public static<T,A,R,RR> Collector<T,A,RR> collectingAndThen(Collector<T,A,R> downstream,\n                                                                Function<R,RR> finisher) {\n        Set<Collector.Characteristics> characteristics = downstream.characteristics();\n        if (characteristics.contains(Collector.Characteristics.IDENTITY_FINISH)) {\n            if (characteristics.size() == 1)\n                characteristics = Collectors.CH_NOID;\n            else {\n                characteristics = EnumSet.copyOf(characteristics);\n                characteristics.remove(Collector.Characteristics.IDENTITY_FINISH);\n                characteristics = Collections.unmodifiableSet(characteristics);\n            }\n        }\n        return new CollectorImpl<>(downstream.supplier(),\n                                   downstream.accumulator(),\n                                   downstream.combiner(),\n                                   downstream.finisher().andThen(finisher),\n                                   characteristics);\n    }"}
{"Number":"1127","API Relative Path":"java.util.stream.DoubleStream.java-concat(DoubleStream-DoubleStream)","Corresponding Source":"/**\n     * Creates a lazily concatenated stream whose elements are all the\n     * elements of the first stream followed by all the elements of the\n     * second stream.  The resulting stream is ordered if both\n     * of the input streams are ordered, and parallel if either of the input\n     * streams is parallel.  When the resulting stream is closed, the close\n     * handlers for both input streams are invoked.\n     *\n     * @implNote\n     * Use caution when constructing streams from repeated concatenation.\n     * Accessing an element of a deeply concatenated stream can result in deep\n     * call chains, or even {@code StackOverflowException}.\n     *\n     * @param a the first stream\n     * @param b the second stream\n     * @return the concatenation of the two input streams\n     */\n    public static DoubleStream concat(DoubleStream a, DoubleStream b) {\n        Objects.requireNonNull(a);\n        Objects.requireNonNull(b);\n\n        Spliterator.OfDouble split = new Streams.ConcatSpliterator.OfDouble(\n                a.spliterator(), b.spliterator());\n        DoubleStream stream = StreamSupport.doubleStream(split, a.isParallel() || b.isParallel());\n        return stream.onClose(Streams.composedClose(a, b));\n    }"}
{"Number":"1128","API Relative Path":"java.util.stream.DoubleStream.java-generate(DoubleSupplier)","Corresponding Source":"/**\n     * Returns an infinite sequential unordered stream where each element is\n     * generated by the provided {@code DoubleSupplier}.  This is suitable for\n     * generating constant streams, streams of random elements, etc.\n     *\n     * @param s the {@code DoubleSupplier} for generated elements\n     * @return a new infinite sequential unordered {@code DoubleStream}\n     */\n    public static DoubleStream generate(DoubleSupplier s) {\n        Objects.requireNonNull(s);\n        return StreamSupport.doubleStream(\n                new StreamSpliterators.InfiniteSupplyingSpliterator.OfDouble(Long.MAX_VALUE, s), false);\n    }"}
{"Number":"1129","API Relative Path":"java.util.stream.DoubleStream.java-iterate(double-DoubleUnaryOperator)","Corresponding Source":"/**\n     * Returns an infinite sequential ordered {@code DoubleStream} produced by iterative\n     * application of a function {@code f} to an initial element {@code seed},\n     * producing a {@code Stream} consisting of {@code seed}, {@code f(seed)},\n     * {@code f(f(seed))}, etc.\n     *\n     * <p>The first element (position {@code 0}) in the {@code DoubleStream}\n     * will be the provided {@code seed}.  For {@code n > 0}, the element at\n     * position {@code n}, will be the result of applying the function {@code f}\n     *  to the element at position {@code n - 1}.\n     *\n     * @param seed the initial element\n     * @param f a function to be applied to to the previous element to produce\n     *          a new element\n     * @return a new sequential {@code DoubleStream}\n     */\n    public static DoubleStream iterate(final double seed, final DoubleUnaryOperator f) {\n        Objects.requireNonNull(f);\n        final PrimitiveIterator.OfDouble iterator = new PrimitiveIterator.OfDouble() {\n            double t = seed;\n\n            @Override\n            public boolean hasNext() {\n                return true;\n            }\n\n            @Override\n            public double nextDouble() {\n                double v = t;\n                t = f.applyAsDouble(t);\n                return v;\n            }\n        };\n        return StreamSupport.doubleStream(Spliterators.spliteratorUnknownSize(\n                iterator,\n                Spliterator.ORDERED | Spliterator.IMMUTABLE | Spliterator.NONNULL), false);\n    }"}
{"Number":"1130","API Relative Path":"java.util.stream.ForEachOps.java-makeDouble(DoubleConsumer-boolean)","Corresponding Source":"/**\n     * Constructs a {@code TerminalOp} that perform an action for every element\n     * of a {@code DoubleStream}.\n     *\n     * @param action the {@code DoubleConsumer} that receives all elements of\n     *        a stream\n     * @param ordered whether an ordered traversal is requested\n     * @return the {@code TerminalOp} instance\n     */\n    public static TerminalOp<Double, Void> makeDouble(DoubleConsumer action,\n                                                      boolean ordered) {\n        Objects.requireNonNull(action);\n        return new ForEachOp.OfDouble(action, ordered);\n    }"}
{"Number":"1131","API Relative Path":"java.util.stream.ForEachOps.java-makeInt(IntConsumer-boolean)","Corresponding Source":"/**\n     * Constructs a {@code TerminalOp} that perform an action for every element\n     * of an {@code IntStream}.\n     *\n     * @param action the {@code IntConsumer} that receives all elements of a\n     *        stream\n     * @param ordered whether an ordered traversal is requested\n     * @return the {@code TerminalOp} instance\n     */\n    public static TerminalOp<Integer, Void> makeInt(IntConsumer action,\n                                                    boolean ordered) {\n        Objects.requireNonNull(action);\n        return new ForEachOp.OfInt(action, ordered);\n    }"}
{"Number":"1132","API Relative Path":"java.util.stream.ForEachOps.java-makeLong(LongConsumer-boolean)","Corresponding Source":"/**\n     * Constructs a {@code TerminalOp} that perform an action for every element\n     * of a {@code LongStream}.\n     *\n     * @param action the {@code LongConsumer} that receives all elements of a\n     *        stream\n     * @param ordered whether an ordered traversal is requested\n     * @return the {@code TerminalOp} instance\n     */\n    public static TerminalOp<Long, Void> makeLong(LongConsumer action,\n                                                  boolean ordered) {\n        Objects.requireNonNull(action);\n        return new ForEachOp.OfLong(action, ordered);\n    }"}
{"Number":"1133","API Relative Path":"java.util.stream.ForEachOps.java-makeRef(Consumer-boolean)","Corresponding Source":"/**\n     * Constructs a {@code TerminalOp} that perform an action for every element\n     * of a stream.\n     *\n     * @param action the {@code Consumer} that receives all elements of a\n     *        stream\n     * @param ordered whether an ordered traversal is requested\n     * @param <T> the type of the stream elements\n     * @return the {@code TerminalOp} instance\n     */\n    public static <T> TerminalOp<T, Void> makeRef(Consumer<? super T> action,\n                                                  boolean ordered) {\n        Objects.requireNonNull(action);\n        return new ForEachOp.OfRef<>(action, ordered);\n    }"}
{"Number":"1134","API Relative Path":"java.util.stream.IntStream.java-concat(IntStream-IntStream)","Corresponding Source":"/**\n     * Creates a lazily concatenated stream whose elements are all the\n     * elements of the first stream followed by all the elements of the\n     * second stream.  The resulting stream is ordered if both\n     * of the input streams are ordered, and parallel if either of the input\n     * streams is parallel.  When the resulting stream is closed, the close\n     * handlers for both input streams are invoked.\n     *\n     * @implNote\n     * Use caution when constructing streams from repeated concatenation.\n     * Accessing an element of a deeply concatenated stream can result in deep\n     * call chains, or even {@code StackOverflowException}.\n     *\n     * @param a the first stream\n     * @param b the second stream\n     * @return the concatenation of the two input streams\n     */\n    public static IntStream concat(IntStream a, IntStream b) {\n        Objects.requireNonNull(a);\n        Objects.requireNonNull(b);\n\n        Spliterator.OfInt split = new Streams.ConcatSpliterator.OfInt(\n                a.spliterator(), b.spliterator());\n        IntStream stream = StreamSupport.intStream(split, a.isParallel() || b.isParallel());\n        return stream.onClose(Streams.composedClose(a, b));\n    }"}
{"Number":"1135","API Relative Path":"java.util.stream.IntStream.java-generate(IntSupplier)","Corresponding Source":"/**\n     * Returns an infinite sequential unordered stream where each element is\n     * generated by the provided {@code IntSupplier}.  This is suitable for\n     * generating constant streams, streams of random elements, etc.\n     *\n     * @param s the {@code IntSupplier} for generated elements\n     * @return a new infinite sequential unordered {@code IntStream}\n     */\n    public static IntStream generate(IntSupplier s) {\n        Objects.requireNonNull(s);\n        return StreamSupport.intStream(\n                new StreamSpliterators.InfiniteSupplyingSpliterator.OfInt(Long.MAX_VALUE, s), false);\n    }"}
{"Number":"1136","API Relative Path":"java.util.stream.IntStream.java-iterate(int-IntUnaryOperator)","Corresponding Source":"/**\n     * Returns an infinite sequential ordered {@code IntStream} produced by iterative\n     * application of a function {@code f} to an initial element {@code seed},\n     * producing a {@code Stream} consisting of {@code seed}, {@code f(seed)},\n     * {@code f(f(seed))}, etc.\n     *\n     * <p>The first element (position {@code 0}) in the {@code IntStream} will be\n     * the provided {@code seed}.  For {@code n > 0}, the element at position\n     * {@code n}, will be the result of applying the function {@code f} to the\n     * element at position {@code n - 1}.\n     *\n     * @param seed the initial element\n     * @param f a function to be applied to to the previous element to produce\n     *          a new element\n     * @return A new sequential {@code IntStream}\n     */\n    public static IntStream iterate(final int seed, final IntUnaryOperator f) {\n        Objects.requireNonNull(f);\n        final PrimitiveIterator.OfInt iterator = new PrimitiveIterator.OfInt() {\n            int t = seed;\n\n            @Override\n            public boolean hasNext() {\n                return true;\n            }\n\n            @Override\n            public int nextInt() {\n                int v = t;\n                t = f.applyAsInt(t);\n                return v;\n            }\n        };\n        return StreamSupport.intStream(Spliterators.spliteratorUnknownSize(\n                iterator,\n                Spliterator.ORDERED | Spliterator.IMMUTABLE | Spliterator.NONNULL), false);\n    }"}
{"Number":"1137","API Relative Path":"java.util.stream.LongStream.java-concat(LongStream-LongStream)","Corresponding Source":"/**\n     * Creates a lazily concatenated stream whose elements are all the\n     * elements of the first stream followed by all the elements of the\n     * second stream.  The resulting stream is ordered if both\n     * of the input streams are ordered, and parallel if either of the input\n     * streams is parallel.  When the resulting stream is closed, the close\n     * handlers for both input streams are invoked.\n     *\n     * @implNote\n     * Use caution when constructing streams from repeated concatenation.\n     * Accessing an element of a deeply concatenated stream can result in deep\n     * call chains, or even {@code StackOverflowException}.\n     *\n     * @param a the first stream\n     * @param b the second stream\n     * @return the concatenation of the two input streams\n     */\n    public static LongStream concat(LongStream a, LongStream b) {\n        Objects.requireNonNull(a);\n        Objects.requireNonNull(b);\n\n        Spliterator.OfLong split = new Streams.ConcatSpliterator.OfLong(\n                a.spliterator(), b.spliterator());\n        LongStream stream = StreamSupport.longStream(split, a.isParallel() || b.isParallel());\n        return stream.onClose(Streams.composedClose(a, b));\n    }"}
{"Number":"1138","API Relative Path":"java.util.stream.LongStream.java-generate(LongSupplier)","Corresponding Source":"/**\n     * Returns an infinite sequential unordered stream where each element is\n     * generated by the provided {@code LongSupplier}.  This is suitable for\n     * generating constant streams, streams of random elements, etc.\n     *\n     * @param s the {@code LongSupplier} for generated elements\n     * @return a new infinite sequential unordered {@code LongStream}\n     */\n    public static LongStream generate(LongSupplier s) {\n        Objects.requireNonNull(s);\n        return StreamSupport.longStream(\n                new StreamSpliterators.InfiniteSupplyingSpliterator.OfLong(Long.MAX_VALUE, s), false);\n    }"}
{"Number":"1139","API Relative Path":"java.util.stream.LongStream.java-iterate(long-LongUnaryOperator)","Corresponding Source":"/**\n     * Returns an infinite sequential ordered {@code LongStream} produced by iterative\n     * application of a function {@code f} to an initial element {@code seed},\n     * producing a {@code Stream} consisting of {@code seed}, {@code f(seed)},\n     * {@code f(f(seed))}, etc.\n     *\n     * <p>The first element (position {@code 0}) in the {@code LongStream} will\n     * be the provided {@code seed}.  For {@code n > 0}, the element at position\n     * {@code n}, will be the result of applying the function {@code f} to the\n     * element at position {@code n - 1}.\n     *\n     * @param seed the initial element\n     * @param f a function to be applied to to the previous element to produce\n     *          a new element\n     * @return a new sequential {@code LongStream}\n     */\n    public static LongStream iterate(final long seed, final LongUnaryOperator f) {\n        Objects.requireNonNull(f);\n        final PrimitiveIterator.OfLong iterator = new PrimitiveIterator.OfLong() {\n            long t = seed;\n\n            @Override\n            public boolean hasNext() {\n                return true;\n            }\n\n            @Override\n            public long nextLong() {\n                long v = t;\n                t = f.applyAsLong(t);\n                return v;\n            }\n        };\n        return StreamSupport.longStream(Spliterators.spliteratorUnknownSize(\n                iterator,\n                Spliterator.ORDERED | Spliterator.IMMUTABLE | Spliterator.NONNULL), false);\n    }"}
{"Number":"1140","API Relative Path":"java.util.stream.MatchOps.java-makeDouble(DoublePredicate-MatchKind)","Corresponding Source":"/**\n     * Constructs a quantified predicate matcher for a {@code DoubleStream}.\n     *\n     * @param predicate the {@code Predicate} to apply to stream elements\n     * @param matchKind the kind of quantified match (all, any, none)\n     * @return a {@code TerminalOp} implementing the desired quantified match\n     *         criteria\n     */\n    public static TerminalOp<Double, Boolean> makeDouble(DoublePredicate predicate,\n                                                         MatchKind matchKind) {\n        Objects.requireNonNull(predicate);\n        Objects.requireNonNull(matchKind);\n        class MatchSink extends BooleanTerminalSink<Double> implements Sink.OfDouble {\n\n            MatchSink() {\n                super(matchKind);\n            }\n\n            @Override\n            public void accept(double t) {\n                if (!stop && predicate.test(t) == matchKind.stopOnPredicateMatches) {\n                    stop = true;\n                    value = matchKind.shortCircuitResult;\n                }\n            }\n        }\n\n        return new MatchOp<>(StreamShape.DOUBLE_VALUE, matchKind, MatchSink::new);\n    }"}
{"Number":"1141","API Relative Path":"java.util.stream.MatchOps.java-makeInt(IntPredicate-MatchKind)","Corresponding Source":"/**\n     * Constructs a quantified predicate matcher for an {@code IntStream}.\n     *\n     * @param predicate the {@code Predicate} to apply to stream elements\n     * @param matchKind the kind of quantified match (all, any, none)\n     * @return a {@code TerminalOp} implementing the desired quantified match\n     *         criteria\n     */\n    public static TerminalOp<Integer, Boolean> makeInt(IntPredicate predicate,\n                                                       MatchKind matchKind) {\n        Objects.requireNonNull(predicate);\n        Objects.requireNonNull(matchKind);\n        class MatchSink extends BooleanTerminalSink<Integer> implements Sink.OfInt {\n            MatchSink() {\n                super(matchKind);\n            }\n\n            @Override\n            public void accept(int t) {\n                if (!stop && predicate.test(t) == matchKind.stopOnPredicateMatches) {\n                    stop = true;\n                    value = matchKind.shortCircuitResult;\n                }\n            }\n        }\n\n        return new MatchOp<>(StreamShape.INT_VALUE, matchKind, MatchSink::new);\n    }"}
{"Number":"1142","API Relative Path":"java.util.stream.MatchOps.java-makeLong(LongPredicate-MatchKind)","Corresponding Source":"/**\n     * Constructs a quantified predicate matcher for a {@code LongStream}.\n     *\n     * @param predicate the {@code Predicate} to apply to stream elements\n     * @param matchKind the kind of quantified match (all, any, none)\n     * @return a {@code TerminalOp} implementing the desired quantified match\n     *         criteria\n     */\n    public static TerminalOp<Long, Boolean> makeLong(LongPredicate predicate,\n                                                     MatchKind matchKind) {\n        Objects.requireNonNull(predicate);\n        Objects.requireNonNull(matchKind);\n        class MatchSink extends BooleanTerminalSink<Long> implements Sink.OfLong {\n\n            MatchSink() {\n                super(matchKind);\n            }\n\n            @Override\n            public void accept(long t) {\n                if (!stop && predicate.test(t) == matchKind.stopOnPredicateMatches) {\n                    stop = true;\n                    value = matchKind.shortCircuitResult;\n                }\n            }\n        }\n\n        return new MatchOp<>(StreamShape.LONG_VALUE, matchKind, MatchSink::new);\n    }"}
{"Number":"1143","API Relative Path":"java.util.stream.MatchOps.java-makeRef(Predicate-MatchKind)","Corresponding Source":"/**\n     * Constructs a quantified predicate matcher for a Stream.\n     *\n     * @param <T> the type of stream elements\n     * @param predicate the {@code Predicate} to apply to stream elements\n     * @param matchKind the kind of quantified match (all, any, none)\n     * @return a {@code TerminalOp} implementing the desired quantified match\n     *         criteria\n     */\n    public static <T> TerminalOp<T, Boolean> makeRef(Predicate<? super T> predicate,\n            MatchKind matchKind) {\n        Objects.requireNonNull(predicate);\n        Objects.requireNonNull(matchKind);\n        class MatchSink extends BooleanTerminalSink<T> {\n            MatchSink() {\n                super(matchKind);\n            }\n\n            @Override\n            public void accept(T t) {\n                if (!stop && predicate.test(t) == matchKind.stopOnPredicateMatches) {\n                    stop = true;\n                    value = matchKind.shortCircuitResult;\n                }\n            }\n        }\n\n        return new MatchOp<>(StreamShape.REFERENCE, matchKind, MatchSink::new);\n    }"}
{"Number":"1144","API Relative Path":"java.util.stream.ReduceOps.java-makeDouble(double-DoubleBinaryOperator)","Corresponding Source":"/**\n     * Constructs a {@code TerminalOp} that implements a functional reduce on\n     * {@code double} values.\n     *\n     * @param identity the identity for the combining function\n     * @param operator the combining function\n     * @return a {@code TerminalOp} implementing the reduction\n     */\n    public static TerminalOp<Double, Double>\n    makeDouble(double identity, DoubleBinaryOperator operator) {\n        Objects.requireNonNull(operator);\n        class ReducingSink\n                implements AccumulatingSink<Double, Double, ReducingSink>, Sink.OfDouble {\n            private double state;\n\n            @Override\n            public void begin(long size) {\n                state = identity;\n            }\n\n            @Override\n            public void accept(double t) {\n                state = operator.applyAsDouble(state, t);\n            }\n\n            @Override\n            public Double get() {\n                return state;\n            }\n\n            @Override\n            public void combine(ReducingSink other) {\n                accept(other.state);\n            }\n        }\n        return new ReduceOp<Double, Double, ReducingSink>(StreamShape.DOUBLE_VALUE) {\n            @Override\n            public ReducingSink makeSink() {\n                return new ReducingSink();\n            }\n        };\n    }"}
{"Number":"1145","API Relative Path":"java.util.stream.ReduceOps.java-makeDouble(DoubleBinaryOperator)","Corresponding Source":"/**\n     * Constructs a {@code TerminalOp} that implements a functional reduce on\n     * {@code double} values, producing an optional double result.\n     *\n     * @param operator the combining function\n     * @return a {@code TerminalOp} implementing the reduction\n     */\n    public static TerminalOp<Double, OptionalDouble>\n    makeDouble(DoubleBinaryOperator operator) {\n        Objects.requireNonNull(operator);\n        class ReducingSink\n                implements AccumulatingSink<Double, OptionalDouble, ReducingSink>, Sink.OfDouble {\n            private boolean empty;\n            private double state;\n\n            public void begin(long size) {\n                empty = true;\n                state = 0;\n            }\n\n            @Override\n            public void accept(double t) {\n                if (empty) {\n                    empty = false;\n                    state = t;\n                }\n                else {\n                    state = operator.applyAsDouble(state, t);\n                }\n            }\n\n            @Override\n            public OptionalDouble get() {\n                return empty ? OptionalDouble.empty() : OptionalDouble.of(state);\n            }\n\n            @Override\n            public void combine(ReducingSink other) {\n                if (!other.empty)\n                    accept(other.state);\n            }\n        }\n        return new ReduceOp<Double, OptionalDouble, ReducingSink>(StreamShape.DOUBLE_VALUE) {\n            @Override\n            public ReducingSink makeSink() {\n                return new ReducingSink();\n            }\n        };\n    }"}
{"Number":"1146","API Relative Path":"java.util.stream.ReduceOps.java-makeDouble(Supplier-ObjDoubleConsumer-BinaryOperator)","Corresponding Source":"/**\n     * Constructs a {@code TerminalOp} that implements a mutable reduce on\n     * {@code double} values.\n     *\n     * @param <R> the type of the result\n     * @param supplier a factory to produce a new accumulator of the result type\n     * @param accumulator a function to incorporate an int into an\n     *        accumulator\n     * @param combiner a function to combine an accumulator into another\n     * @return a {@code TerminalOp} implementing the reduction\n     */\n    public static <R> TerminalOp<Double, R>\n    makeDouble(Supplier<R> supplier,\n               ObjDoubleConsumer<R> accumulator,\n               BinaryOperator<R> combiner) {\n        Objects.requireNonNull(supplier);\n        Objects.requireNonNull(accumulator);\n        Objects.requireNonNull(combiner);\n        class ReducingSink extends Box<R>\n                implements AccumulatingSink<Double, R, ReducingSink>, Sink.OfDouble {\n            @Override\n            public void begin(long size) {\n                state = supplier.get();\n            }\n\n            @Override\n            public void accept(double t) {\n                accumulator.accept(state, t);\n            }\n\n            @Override\n            public void combine(ReducingSink other) {\n                state = combiner.apply(state, other.state);\n            }\n        }\n        return new ReduceOp<Double, R, ReducingSink>(StreamShape.DOUBLE_VALUE) {\n            @Override\n            public ReducingSink makeSink() {\n                return new ReducingSink();\n            }\n        };\n    }"}
{"Number":"1147","API Relative Path":"java.util.stream.ReduceOps.java-makeInt(int-IntBinaryOperator)","Corresponding Source":"/**\n     * Constructs a {@code TerminalOp} that implements a functional reduce on\n     * {@code int} values.\n     *\n     * @param identity the identity for the combining function\n     * @param operator the combining function\n     * @return a {@code TerminalOp} implementing the reduction\n     */\n    public static TerminalOp<Integer, Integer>\n    makeInt(int identity, IntBinaryOperator operator) {\n        Objects.requireNonNull(operator);\n        class ReducingSink\n                implements AccumulatingSink<Integer, Integer, ReducingSink>, Sink.OfInt {\n            private int state;\n\n            @Override\n            public void begin(long size) {\n                state = identity;\n            }\n\n            @Override\n            public void accept(int t) {\n                state = operator.applyAsInt(state, t);\n            }\n\n            @Override\n            public Integer get() {\n                return state;\n            }\n\n            @Override\n            public void combine(ReducingSink other) {\n                accept(other.state);\n            }\n        }\n        return new ReduceOp<Integer, Integer, ReducingSink>(StreamShape.INT_VALUE) {\n            @Override\n            public ReducingSink makeSink() {\n                return new ReducingSink();\n            }\n        };\n    }"}
{"Number":"1148","API Relative Path":"java.util.stream.ReduceOps.java-makeInt(IntBinaryOperator)","Corresponding Source":"/**\n     * Constructs a {@code TerminalOp} that implements a functional reduce on\n     * {@code int} values, producing an optional integer result.\n     *\n     * @param operator the combining function\n     * @return a {@code TerminalOp} implementing the reduction\n     */\n    public static TerminalOp<Integer, OptionalInt>\n    makeInt(IntBinaryOperator operator) {\n        Objects.requireNonNull(operator);\n        class ReducingSink\n                implements AccumulatingSink<Integer, OptionalInt, ReducingSink>, Sink.OfInt {\n            private boolean empty;\n            private int state;\n\n            public void begin(long size) {\n                empty = true;\n                state = 0;\n            }\n\n            @Override\n            public void accept(int t) {\n                if (empty) {\n                    empty = false;\n                    state = t;\n                }\n                else {\n                    state = operator.applyAsInt(state, t);\n                }\n            }\n\n            @Override\n            public OptionalInt get() {\n                return empty ? OptionalInt.empty() : OptionalInt.of(state);\n            }\n\n            @Override\n            public void combine(ReducingSink other) {\n                if (!other.empty)\n                    accept(other.state);\n            }\n        }\n        return new ReduceOp<Integer, OptionalInt, ReducingSink>(StreamShape.INT_VALUE) {\n            @Override\n            public ReducingSink makeSink() {\n                return new ReducingSink();\n            }\n        };\n    }"}
{"Number":"1149","API Relative Path":"java.util.stream.ReduceOps.java-makeInt(Supplier-ObjIntConsumer-BinaryOperator)","Corresponding Source":"/**\n     * Constructs a {@code TerminalOp} that implements a mutable reduce on\n     * {@code int} values.\n     *\n     * @param <R> The type of the result\n     * @param supplier a factory to produce a new accumulator of the result type\n     * @param accumulator a function to incorporate an int into an\n     *        accumulator\n     * @param combiner a function to combine an accumulator into another\n     * @return A {@code ReduceOp} implementing the reduction\n     */\n    public static <R> TerminalOp<Integer, R>\n    makeInt(Supplier<R> supplier,\n            ObjIntConsumer<R> accumulator,\n            BinaryOperator<R> combiner) {\n        Objects.requireNonNull(supplier);\n        Objects.requireNonNull(accumulator);\n        Objects.requireNonNull(combiner);\n        class ReducingSink extends Box<R>\n                implements AccumulatingSink<Integer, R, ReducingSink>, Sink.OfInt {\n            @Override\n            public void begin(long size) {\n                state = supplier.get();\n            }\n\n            @Override\n            public void accept(int t) {\n                accumulator.accept(state, t);\n            }\n\n            @Override\n            public void combine(ReducingSink other) {\n                state = combiner.apply(state, other.state);\n            }\n        }\n        return new ReduceOp<Integer, R, ReducingSink>(StreamShape.INT_VALUE) {\n            @Override\n            public ReducingSink makeSink() {\n                return new ReducingSink();\n            }\n        };\n    }"}
{"Number":"1150","API Relative Path":"java.util.stream.ReduceOps.java-makeLong(long-LongBinaryOperator)","Corresponding Source":"/**\n     * Constructs a {@code TerminalOp} that implements a functional reduce on\n     * {@code long} values.\n     *\n     * @param identity the identity for the combining function\n     * @param operator the combining function\n     * @return a {@code TerminalOp} implementing the reduction\n     */\n    public static TerminalOp<Long, Long>\n    makeLong(long identity, LongBinaryOperator operator) {\n        Objects.requireNonNull(operator);\n        class ReducingSink\n                implements AccumulatingSink<Long, Long, ReducingSink>, Sink.OfLong {\n            private long state;\n\n            @Override\n            public void begin(long size) {\n                state = identity;\n            }\n\n            @Override\n            public void accept(long t) {\n                state = operator.applyAsLong(state, t);\n            }\n\n            @Override\n            public Long get() {\n                return state;\n            }\n\n            @Override\n            public void combine(ReducingSink other) {\n                accept(other.state);\n            }\n        }\n        return new ReduceOp<Long, Long, ReducingSink>(StreamShape.LONG_VALUE) {\n            @Override\n            public ReducingSink makeSink() {\n                return new ReducingSink();\n            }\n        };\n    }"}
{"Number":"1151","API Relative Path":"java.util.stream.ReduceOps.java-makeLong(LongBinaryOperator)","Corresponding Source":"/**\n     * Constructs a {@code TerminalOp} that implements a functional reduce on\n     * {@code long} values, producing an optional long result.\n     *\n     * @param operator the combining function\n     * @return a {@code TerminalOp} implementing the reduction\n     */\n    public static TerminalOp<Long, OptionalLong>\n    makeLong(LongBinaryOperator operator) {\n        Objects.requireNonNull(operator);\n        class ReducingSink\n                implements AccumulatingSink<Long, OptionalLong, ReducingSink>, Sink.OfLong {\n            private boolean empty;\n            private long state;\n\n            public void begin(long size) {\n                empty = true;\n                state = 0;\n            }\n\n            @Override\n            public void accept(long t) {\n                if (empty) {\n                    empty = false;\n                    state = t;\n                }\n                else {\n                    state = operator.applyAsLong(state, t);\n                }\n            }\n\n            @Override\n            public OptionalLong get() {\n                return empty ? OptionalLong.empty() : OptionalLong.of(state);\n            }\n\n            @Override\n            public void combine(ReducingSink other) {\n                if (!other.empty)\n                    accept(other.state);\n            }\n        }\n        return new ReduceOp<Long, OptionalLong, ReducingSink>(StreamShape.LONG_VALUE) {\n            @Override\n            public ReducingSink makeSink() {\n                return new ReducingSink();\n            }\n        };\n    }"}
{"Number":"1152","API Relative Path":"java.util.stream.ReduceOps.java-makeLong(Supplier-ObjLongConsumer-BinaryOperator)","Corresponding Source":"/**\n     * Constructs a {@code TerminalOp} that implements a mutable reduce on\n     * {@code long} values.\n     *\n     * @param <R> the type of the result\n     * @param supplier a factory to produce a new accumulator of the result type\n     * @param accumulator a function to incorporate an int into an\n     *        accumulator\n     * @param combiner a function to combine an accumulator into another\n     * @return a {@code TerminalOp} implementing the reduction\n     */\n    public static <R> TerminalOp<Long, R>\n    makeLong(Supplier<R> supplier,\n             ObjLongConsumer<R> accumulator,\n             BinaryOperator<R> combiner) {\n        Objects.requireNonNull(supplier);\n        Objects.requireNonNull(accumulator);\n        Objects.requireNonNull(combiner);\n        class ReducingSink extends Box<R>\n                implements AccumulatingSink<Long, R, ReducingSink>, Sink.OfLong {\n            @Override\n            public void begin(long size) {\n                state = supplier.get();\n            }\n\n            @Override\n            public void accept(long t) {\n                accumulator.accept(state, t);\n            }\n\n            @Override\n            public void combine(ReducingSink other) {\n                state = combiner.apply(state, other.state);\n            }\n        }\n        return new ReduceOp<Long, R, ReducingSink>(StreamShape.LONG_VALUE) {\n            @Override\n            public ReducingSink makeSink() {\n                return new ReducingSink();\n            }\n        };\n    }"}
{"Number":"1153","API Relative Path":"java.util.stream.ReduceOps.java-makeRef(BinaryOperator)","Corresponding Source":"/**\n     * Constructs a {@code TerminalOp} that implements a functional reduce on\n     * reference values producing an optional reference result.\n     *\n     * @param <T> The type of the input elements, and the type of the result\n     * @param operator The reducing function\n     * @return A {@code TerminalOp} implementing the reduction\n     */\n    public static <T> TerminalOp<T, Optional<T>>\n    makeRef(BinaryOperator<T> operator) {\n        Objects.requireNonNull(operator);\n        class ReducingSink\n                implements AccumulatingSink<T, Optional<T>, ReducingSink> {\n            private boolean empty;\n            private T state;\n\n            public void begin(long size) {\n                empty = true;\n                state = null;\n            }\n\n            @Override\n            public void accept(T t) {\n                if (empty) {\n                    empty = false;\n                    state = t;\n                } else {\n                    state = operator.apply(state, t);\n                }\n            }\n\n            @Override\n            public Optional<T> get() {\n                return empty ? Optional.empty() : Optional.of(state);\n            }\n\n            @Override\n            public void combine(ReducingSink other) {\n                if (!other.empty)\n                    accept(other.state);\n            }\n        }\n        return new ReduceOp<T, Optional<T>, ReducingSink>(StreamShape.REFERENCE) {\n            @Override\n            public ReducingSink makeSink() {\n                return new ReducingSink();\n            }\n        };\n    }"}
{"Number":"1154","API Relative Path":"java.util.stream.ReduceOps.java-makeRef(Collector)","Corresponding Source":"/**\n     * Constructs a {@code TerminalOp} that implements a mutable reduce on\n     * reference values.\n     *\n     * @param <T> the type of the input elements\n     * @param <I> the type of the intermediate reduction result\n     * @param collector a {@code Collector} defining the reduction\n     * @return a {@code ReduceOp} implementing the reduction\n     */\n    public static <T, I> TerminalOp<T, I>\n    makeRef(Collector<? super T, I, ?> collector) {\n        Supplier<I> supplier = Objects.requireNonNull(collector).supplier();\n        BiConsumer<I, ? super T> accumulator = collector.accumulator();\n        BinaryOperator<I> combiner = collector.combiner();\n        class ReducingSink extends Box<I>\n                implements AccumulatingSink<T, I, ReducingSink> {\n            @Override\n            public void begin(long size) {\n                state = supplier.get();\n            }\n\n            @Override\n            public void accept(T t) {\n                accumulator.accept(state, t);\n            }\n\n            @Override\n            public void combine(ReducingSink other) {\n                state = combiner.apply(state, other.state);\n            }\n        }\n        return new ReduceOp<T, I, ReducingSink>(StreamShape.REFERENCE) {\n            @Override\n            public ReducingSink makeSink() {\n                return new ReducingSink();\n            }\n\n            @Override\n            public int getOpFlags() {\n                return collector.characteristics().contains(Collector.Characteristics.UNORDERED)\n                       ? StreamOpFlag.NOT_ORDERED\n                       : 0;\n            }\n        };\n    }"}
{"Number":"1155","API Relative Path":"java.util.stream.ReduceOps.java-makeRef(Supplier-BiConsumer-BiConsumer)","Corresponding Source":"/**\n     * Constructs a {@code TerminalOp} that implements a mutable reduce on\n     * reference values.\n     *\n     * @param <T> the type of the input elements\n     * @param <R> the type of the result\n     * @param seedFactory a factory to produce a new base accumulator\n     * @param accumulator a function to incorporate an element into an\n     *        accumulator\n     * @param reducer a function to combine an accumulator into another\n     * @return a {@code TerminalOp} implementing the reduction\n     */\n    public static <T, R> TerminalOp<T, R>\n    makeRef(Supplier<R> seedFactory,\n            BiConsumer<R, ? super T> accumulator,\n            BiConsumer<R,R> reducer) {\n        Objects.requireNonNull(seedFactory);\n        Objects.requireNonNull(accumulator);\n        Objects.requireNonNull(reducer);\n        class ReducingSink extends Box<R>\n                implements AccumulatingSink<T, R, ReducingSink> {\n            @Override\n            public void begin(long size) {\n                state = seedFactory.get();\n            }\n\n            @Override\n            public void accept(T t) {\n                accumulator.accept(state, t);\n            }\n\n            @Override\n            public void combine(ReducingSink other) {\n                reducer.accept(state, other.state);\n            }\n        }\n        return new ReduceOp<T, R, ReducingSink>(StreamShape.REFERENCE) {\n            @Override\n            public ReducingSink makeSink() {\n                return new ReducingSink();\n            }\n        };\n    }"}
{"Number":"1156","API Relative Path":"java.util.stream.ReduceOps.java-makeRef(U-BiFunction-BinaryOperator)","Corresponding Source":"/**\n     * Constructs a {@code TerminalOp} that implements a functional reduce on\n     * reference values.\n     *\n     * @param <T> the type of the input elements\n     * @param <U> the type of the result\n     * @param seed the identity element for the reduction\n     * @param reducer the accumulating function that incorporates an additional\n     *        input element into the result\n     * @param combiner the combining function that combines two intermediate\n     *        results\n     * @return a {@code TerminalOp} implementing the reduction\n     */\n    public static <T, U> TerminalOp<T, U>\n    makeRef(U seed, BiFunction<U, ? super T, U> reducer, BinaryOperator<U> combiner) {\n        Objects.requireNonNull(reducer);\n        Objects.requireNonNull(combiner);\n        class ReducingSink extends Box<U> implements AccumulatingSink<T, U, ReducingSink> {\n            @Override\n            public void begin(long size) {\n                state = seed;\n            }\n\n            @Override\n            public void accept(T t) {\n                state = reducer.apply(state, t);\n            }\n\n            @Override\n            public void combine(ReducingSink other) {\n                state = combiner.apply(state, other.state);\n            }\n        }\n        return new ReduceOp<T, U, ReducingSink>(StreamShape.REFERENCE) {\n            @Override\n            public ReducingSink makeSink() {\n                return new ReducingSink();\n            }\n        };\n    }"}
{"Number":"1157","API Relative Path":"java.util.stream.SpinedBuffer.java-copyInto(E[]-int)","Corresponding Source":"/**\n     * Copy the elements, starting at the specified offset, into the specified\n     * array.\n     */\n    public void copyInto(E[] array, int offset) {\n        long finalOffset = offset + count();\n        if (finalOffset > array.length || finalOffset < offset) {\n            throw new IndexOutOfBoundsException(\"does not fit\");\n        }\n\n        if (spineIndex == 0)\n            System.arraycopy(curChunk, 0, array, offset, elementIndex);\n        else {\n            // full chunks\n            for (int i=0; i < spineIndex; i++) {\n                System.arraycopy(spine[i], 0, array, offset, spine[i].length);\n                offset += spine[i].length;\n            }\n            if (elementIndex > 0)\n                System.arraycopy(curChunk, 0, array, offset, elementIndex);\n        }\n    }"}
{"Number":"1158","API Relative Path":"java.util.stream.SpinedBuffer.java-get(long)","Corresponding Source":"/**\n     * Retrieve the element at the specified index.\n     */\n    public E get(long index) {\n        // @@@ can further optimize by caching last seen spineIndex,\n        // which is going to be right most of the time\n\n        // Casts to int are safe since the spine array index is the index minus\n        // the prior element count from the current spine\n        if (spineIndex == 0) {\n            if (index < elementIndex)\n                return curChunk[((int) index)];\n            else\n                throw new IndexOutOfBoundsException(Long.toString(index));\n        }\n\n        if (index >= count())\n            throw new IndexOutOfBoundsException(Long.toString(index));\n\n        for (int j=0; j <= spineIndex; j++)\n            if (index < priorElementCount[j] + spine[j].length)\n                return spine[j][((int) (index - priorElementCount[j]))];\n\n        throw new IndexOutOfBoundsException(Long.toString(index));\n    }"}
{"Number":"1159","API Relative Path":"java.util.stream.Stream.java-concat(Stream-Stream)","Corresponding Source":"/**\n     * Creates a lazily concatenated stream whose elements are all the\n     * elements of the first stream followed by all the elements of the\n     * second stream.  The resulting stream is ordered if both\n     * of the input streams are ordered, and parallel if either of the input\n     * streams is parallel.  When the resulting stream is closed, the close\n     * handlers for both input streams are invoked.\n     *\n     * @implNote\n     * Use caution when constructing streams from repeated concatenation.\n     * Accessing an element of a deeply concatenated stream can result in deep\n     * call chains, or even {@code StackOverflowException}.\n     *\n     * @param <T> The type of stream elements\n     * @param a the first stream\n     * @param b the second stream\n     * @return the concatenation of the two input streams\n     */\n    public static <T> Stream<T> concat(Stream<? extends T> a, Stream<? extends T> b) {\n        Objects.requireNonNull(a);\n        Objects.requireNonNull(b);\n\n        @SuppressWarnings(\"unchecked\")\n        Spliterator<T> split = new Streams.ConcatSpliterator.OfRef<>(\n                (Spliterator<T>) a.spliterator(), (Spliterator<T>) b.spliterator());\n        Stream<T> stream = StreamSupport.stream(split, a.isParallel() || b.isParallel());\n        return stream.onClose(Streams.composedClose(a, b));\n    }"}
{"Number":"1160","API Relative Path":"java.util.stream.Stream.java-generate(Supplier)","Corresponding Source":"/**\n     * Returns an infinite sequential unordered stream where each element is\n     * generated by the provided {@code Supplier}.  This is suitable for\n     * generating constant streams, streams of random elements, etc.\n     *\n     * @param <T> the type of stream elements\n     * @param s the {@code Supplier} of generated elements\n     * @return a new infinite sequential unordered {@code Stream}\n     */\n    public static<T> Stream<T> generate(Supplier<T> s) {\n        Objects.requireNonNull(s);\n        return StreamSupport.stream(\n                new StreamSpliterators.InfiniteSupplyingSpliterator.OfRef<>(Long.MAX_VALUE, s), false);\n    }"}
{"Number":"1161","API Relative Path":"java.util.stream.Stream.java-iterate(T-UnaryOperator)","Corresponding Source":"/**\n     * Returns an infinite sequential ordered {@code Stream} produced by iterative\n     * application of a function {@code f} to an initial element {@code seed},\n     * producing a {@code Stream} consisting of {@code seed}, {@code f(seed)},\n     * {@code f(f(seed))}, etc.\n     *\n     * <p>The first element (position {@code 0}) in the {@code Stream} will be\n     * the provided {@code seed}.  For {@code n > 0}, the element at position\n     * {@code n}, will be the result of applying the function {@code f} to the\n     * element at position {@code n - 1}.\n     *\n     * @param <T> the type of stream elements\n     * @param seed the initial element\n     * @param f a function to be applied to to the previous element to produce\n     *          a new element\n     * @return a new sequential {@code Stream}\n     */\n    public static<T> Stream<T> iterate(final T seed, final UnaryOperator<T> f) {\n        Objects.requireNonNull(f);\n        final Iterator<T> iterator = new Iterator<T>() {\n            @SuppressWarnings(\"unchecked\")\n            T t = (T) Streams.NONE;\n\n            @Override\n            public boolean hasNext() {\n                return true;\n            }\n\n            @Override\n            public T next() {\n                return t = (t == Streams.NONE) ? seed : f.apply(t);\n            }\n        };\n        return StreamSupport.stream(Spliterators.spliteratorUnknownSize(\n                iterator,\n                Spliterator.ORDERED | Spliterator.IMMUTABLE), false);\n    }"}
{"Number":"1162","API Relative Path":"java.util.stream.StreamSupport.java-stream(Spliterator-boolean)","Corresponding Source":"/**\n     * Creates a new sequential or parallel {@code DoubleStream} from a\n     * {@code Spliterator.OfDouble}.\n     *\n     * <p>The spliterator is only traversed, split, or queried for estimated size\n     * after the terminal operation of the stream pipeline commences.\n     *\n     * <p>It is strongly recommended the spliterator report a characteristic of\n     * {@code IMMUTABLE} or {@code CONCURRENT}, or be\n     * <a href=\"../Spliterator.html#binding\">late-binding<\/a>.  Otherwise,\n     * {@link #doubleStream(java.util.function.Supplier, int, boolean)} should\n     * be used to reduce the scope of potential interference with the source.  See\n     * <a href=\"package-summary.html#NonInterference\">Non-Interference<\/a> for\n     * more details.\n     *\n     * @param spliterator A {@code Spliterator.OfDouble} describing the stream elements\n     * @param parallel if {@code true} then the returned stream is a parallel\n     *        stream; if {@code false} the returned stream is a sequential\n     *        stream.\n     * @return a new sequential or parallel {@code DoubleStream}\n     */\n    public static DoubleStream doubleStream(Spliterator.OfDouble spliterator,\n                                            boolean parallel) {\n        return new DoublePipeline.Head<>(spliterator,\n                                         StreamOpFlag.fromCharacteristics(spliterator),\n                                         parallel);\n    }"}
{"Number":"1163","API Relative Path":"java.util.stream.StreamSupport.java-stream(Supplier-int-boolean)","Corresponding Source":"/**\n     * Creates a new sequential or parallel {@code DoubleStream} from a\n     * {@code Supplier} of {@code Spliterator.OfDouble}.\n     *\n     * <p>The {@link Supplier#get()} method will be invoked on the supplier no\n     * more than once, and only after the terminal operation of the stream pipeline\n     * commences.\n     *\n     * <p>For spliterators that report a characteristic of {@code IMMUTABLE}\n     * or {@code CONCURRENT}, or that are\n     * <a href=\"../Spliterator.html#binding\">late-binding<\/a>, it is likely\n     * more efficient to use {@link #doubleStream(java.util.Spliterator.OfDouble, boolean)}\n     * instead.\n     * <p>The use of a {@code Supplier} in this form provides a level of\n     * indirection that reduces the scope of potential interference with the\n     * source.  Since the supplier is only invoked after the terminal operation\n     * commences, any modifications to the source up to the start of the\n     * terminal operation are reflected in the stream result.  See\n     * <a href=\"package-summary.html#NonInterference\">Non-Interference<\/a> for\n     * more details.\n     *\n     * @param supplier A {@code Supplier} of a {@code Spliterator.OfDouble}\n     * @param characteristics Spliterator characteristics of the supplied\n     *        {@code Spliterator.OfDouble}.  The characteristics must be equal to\n     *        {@code supplier.get().characteristics()}, otherwise undefined\n     *        behavior may occur when terminal operation commences.\n     * @param parallel if {@code true} then the returned stream is a parallel\n     *        stream; if {@code false} the returned stream is a sequential\n     *        stream.\n     * @return a new sequential or parallel {@code DoubleStream}\n     * @see #doubleStream(java.util.Spliterator.OfDouble, boolean)\n     */\n    public static DoubleStream doubleStream(Supplier<? extends Spliterator.OfDouble> supplier,\n                                            int characteristics,\n                                            boolean parallel) {\n        return new DoublePipeline.Head<>(supplier,\n                                         StreamOpFlag.fromCharacteristics(characteristics),\n                                         parallel);\n    }"}
{"Number":"1164","API Relative Path":"java.util.StringJoiner.java-StringJoiner(CharSequence-CharSequence-CharSequence)","Corresponding Source":"/**\n     * Constructs a {@code StringJoiner} with no characters in it using copies\n     * of the supplied {@code prefix}, {@code delimiter} and {@code suffix}.\n     * If no characters are added to the {@code StringJoiner} and methods\n     * accessing the string value of it are invoked, it will return the\n     * {@code prefix + suffix} (or properties thereof) in the result, unless\n     * {@code setEmptyValue} has first been called.\n     *\n     * @param  delimiter the sequence of characters to be used between each\n     *         element added to the {@code StringJoiner}\n     * @param  prefix the sequence of characters to be used at the beginning\n     * @param  suffix the sequence of characters to be used at the end\n     * @throws NullPointerException if {@code prefix}, {@code delimiter}, or\n     *         {@code suffix} is {@code null}\n     */\n    public StringJoiner(CharSequence delimiter,\n                        CharSequence prefix,\n                        CharSequence suffix) {\n        Objects.requireNonNull(prefix, \"The prefix must not be null\");\n        Objects.requireNonNull(delimiter, \"The delimiter must not be null\");\n        Objects.requireNonNull(suffix, \"The suffix must not be null\");\n        // make defensive copies of arguments\n        this.prefix = prefix.toString();\n        this.delimiter = delimiter.toString();\n        this.suffix = suffix.toString();\n        this.emptyValue = this.prefix + this.suffix;\n    }"}
{"Number":"1165","API Relative Path":"java.util.Timer.java-schedule(TimerTask-Date)","Corresponding Source":"/**\n     * Schedules the specified task for execution at the specified time.  If\n     * the time is in the past, the task is scheduled for immediate execution.\n     *\n     * @param task task to be scheduled.\n     * @param time time at which task is to be executed.\n     * @throws IllegalArgumentException if <tt>time.getTime()<\/tt> is negative.\n     * @throws IllegalStateException if task was already scheduled or\n     *         cancelled, timer was cancelled, or timer thread terminated.\n     * @throws NullPointerException if {@code task} or {@code time} is null\n     */\n    public void schedule(TimerTask task, Date time) {\n        sched(task, time.getTime(), 0);\n    }"}
{"Number":"1166","API Relative Path":"java.util.Timer.java-schedule(TimerTask-Date-long)","Corresponding Source":"/**\n     * Schedules the specified task for repeated <i>fixed-delay execution<\/i>,\n     * beginning at the specified time. Subsequent executions take place at\n     * approximately regular intervals, separated by the specified period.\n     *\n     * <p>In fixed-delay execution, each execution is scheduled relative to\n     * the actual execution time of the previous execution.  If an execution\n     * is delayed for any reason (such as garbage collection or other\n     * background activity), subsequent executions will be delayed as well.\n     * In the long run, the frequency of execution will generally be slightly\n     * lower than the reciprocal of the specified period (assuming the system\n     * clock underlying <tt>Object.wait(long)<\/tt> is accurate).  As a\n     * consequence of the above, if the scheduled first time is in the past,\n     * it is scheduled for immediate execution.\n     *\n     * <p>Fixed-delay execution is appropriate for recurring activities\n     * that require \"smoothness.\"  In other words, it is appropriate for\n     * activities where it is more important to keep the frequency accurate\n     * in the short run than in the long run.  This includes most animation\n     * tasks, such as blinking a cursor at regular intervals.  It also includes\n     * tasks wherein regular activity is performed in response to human\n     * input, such as automatically repeating a character as long as a key\n     * is held down.\n     *\n     * @param task   task to be scheduled.\n     * @param firstTime First time at which task is to be executed.\n     * @param period time in milliseconds between successive task executions.\n     * @throws IllegalArgumentException if {@code firstTime.getTime() < 0}, or\n     *         {@code period <= 0}\n     * @throws IllegalStateException if task was already scheduled or\n     *         cancelled, timer was cancelled, or timer thread terminated.\n     * @throws NullPointerException if {@code task} or {@code firstTime} is null\n     */\n    public void schedule(TimerTask task, Date firstTime, long period) {\n        if (period <= 0)\n            throw new IllegalArgumentException(\"Non-positive period.\");\n        sched(task, firstTime.getTime(), -period);\n    }"}
{"Number":"1167","API Relative Path":"java.util.Timer.java-schedule(TimerTask-long)","Corresponding Source":"/**\n     * Schedules the specified task for execution after the specified delay.\n     *\n     * @param task  task to be scheduled.\n     * @param delay delay in milliseconds before task is to be executed.\n     * @throws IllegalArgumentException if <tt>delay<\/tt> is negative, or\n     *         <tt>delay + System.currentTimeMillis()<\/tt> is negative.\n     * @throws IllegalStateException if task was already scheduled or\n     *         cancelled, timer was cancelled, or timer thread terminated.\n     * @throws NullPointerException if {@code task} is null\n     */\n    public void schedule(TimerTask task, long delay) {\n        if (delay < 0)\n            throw new IllegalArgumentException(\"Negative delay.\");\n        sched(task, System.currentTimeMillis()+delay, 0);\n    }"}
{"Number":"1168","API Relative Path":"java.util.Timer.java-schedule(TimerTask-long-long)","Corresponding Source":"/**\n     * Schedules the specified task for repeated <i>fixed-delay execution<\/i>,\n     * beginning after the specified delay.  Subsequent executions take place\n     * at approximately regular intervals separated by the specified period.\n     *\n     * <p>In fixed-delay execution, each execution is scheduled relative to\n     * the actual execution time of the previous execution.  If an execution\n     * is delayed for any reason (such as garbage collection or other\n     * background activity), subsequent executions will be delayed as well.\n     * In the long run, the frequency of execution will generally be slightly\n     * lower than the reciprocal of the specified period (assuming the system\n     * clock underlying <tt>Object.wait(long)<\/tt> is accurate).\n     *\n     * <p>Fixed-delay execution is appropriate for recurring activities\n     * that require \"smoothness.\"  In other words, it is appropriate for\n     * activities where it is more important to keep the frequency accurate\n     * in the short run than in the long run.  This includes most animation\n     * tasks, such as blinking a cursor at regular intervals.  It also includes\n     * tasks wherein regular activity is performed in response to human\n     * input, such as automatically repeating a character as long as a key\n     * is held down.\n     *\n     * @param task   task to be scheduled.\n     * @param delay  delay in milliseconds before task is to be executed.\n     * @param period time in milliseconds between successive task executions.\n     * @throws IllegalArgumentException if {@code delay < 0}, or\n     *         {@code delay + System.currentTimeMillis() < 0}, or\n     *         {@code period <= 0}\n     * @throws IllegalStateException if task was already scheduled or\n     *         cancelled, timer was cancelled, or timer thread terminated.\n     * @throws NullPointerException if {@code task} is null\n     */\n    public void schedule(TimerTask task, long delay, long period) {\n        if (delay < 0)\n            throw new IllegalArgumentException(\"Negative delay.\");\n        if (period <= 0)\n            throw new IllegalArgumentException(\"Non-positive period.\");\n        sched(task, System.currentTimeMillis()+delay, -period);\n    }"}
{"Number":"1169","API Relative Path":"java.util.Timer.java-scheduleAtFixedRate(TimerTask-Date-long)","Corresponding Source":"/**\n     * Schedules the specified task for repeated <i>fixed-rate execution<\/i>,\n     * beginning at the specified time. Subsequent executions take place at\n     * approximately regular intervals, separated by the specified period.\n     *\n     * <p>In fixed-rate execution, each execution is scheduled relative to the\n     * scheduled execution time of the initial execution.  If an execution is\n     * delayed for any reason (such as garbage collection or other background\n     * activity), two or more executions will occur in rapid succession to\n     * \"catch up.\"  In the long run, the frequency of execution will be\n     * exactly the reciprocal of the specified period (assuming the system\n     * clock underlying <tt>Object.wait(long)<\/tt> is accurate).  As a\n     * consequence of the above, if the scheduled first time is in the past,\n     * then any \"missed\" executions will be scheduled for immediate \"catch up\"\n     * execution.\n     *\n     * <p>Fixed-rate execution is appropriate for recurring activities that\n     * are sensitive to <i>absolute<\/i> time, such as ringing a chime every\n     * hour on the hour, or running scheduled maintenance every day at a\n     * particular time.  It is also appropriate for recurring activities\n     * where the total time to perform a fixed number of executions is\n     * important, such as a countdown timer that ticks once every second for\n     * ten seconds.  Finally, fixed-rate execution is appropriate for\n     * scheduling multiple repeating timer tasks that must remain synchronized\n     * with respect to one another.\n     *\n     * @param task   task to be scheduled.\n     * @param firstTime First time at which task is to be executed.\n     * @param period time in milliseconds between successive task executions.\n     * @throws IllegalArgumentException if {@code firstTime.getTime() < 0} or\n     *         {@code period <= 0}\n     * @throws IllegalStateException if task was already scheduled or\n     *         cancelled, timer was cancelled, or timer thread terminated.\n     * @throws NullPointerException if {@code task} or {@code firstTime} is null\n     */\n    public void scheduleAtFixedRate(TimerTask task, Date firstTime,\n                                    long period) {\n        if (period <= 0)\n            throw new IllegalArgumentException(\"Non-positive period.\");\n        sched(task, firstTime.getTime(), period);\n    }"}
{"Number":"1170","API Relative Path":"java.util.Timer.java-scheduleAtFixedRate(TimerTask-long-long)","Corresponding Source":"/**\n     * Schedules the specified task for repeated <i>fixed-rate execution<\/i>,\n     * beginning after the specified delay.  Subsequent executions take place\n     * at approximately regular intervals, separated by the specified period.\n     *\n     * <p>In fixed-rate execution, each execution is scheduled relative to the\n     * scheduled execution time of the initial execution.  If an execution is\n     * delayed for any reason (such as garbage collection or other background\n     * activity), two or more executions will occur in rapid succession to\n     * \"catch up.\"  In the long run, the frequency of execution will be\n     * exactly the reciprocal of the specified period (assuming the system\n     * clock underlying <tt>Object.wait(long)<\/tt> is accurate).\n     *\n     * <p>Fixed-rate execution is appropriate for recurring activities that\n     * are sensitive to <i>absolute<\/i> time, such as ringing a chime every\n     * hour on the hour, or running scheduled maintenance every day at a\n     * particular time.  It is also appropriate for recurring activities\n     * where the total time to perform a fixed number of executions is\n     * important, such as a countdown timer that ticks once every second for\n     * ten seconds.  Finally, fixed-rate execution is appropriate for\n     * scheduling multiple repeating timer tasks that must remain synchronized\n     * with respect to one another.\n     *\n     * @param task   task to be scheduled.\n     * @param delay  delay in milliseconds before task is to be executed.\n     * @param period time in milliseconds between successive task executions.\n     * @throws IllegalArgumentException if {@code delay < 0}, or\n     *         {@code delay + System.currentTimeMillis() < 0}, or\n     *         {@code period <= 0}\n     * @throws IllegalStateException if task was already scheduled or\n     *         cancelled, timer was cancelled, or timer thread terminated.\n     * @throws NullPointerException if {@code task} is null\n     */\n    public void scheduleAtFixedRate(TimerTask task, long delay, long period) {\n        if (delay < 0)\n            throw new IllegalArgumentException(\"Negative delay.\");\n        if (period <= 0)\n            throw new IllegalArgumentException(\"Non-positive period.\");\n        sched(task, System.currentTimeMillis()+delay, period);\n    }"}
{"Number":"1171","API Relative Path":"java.util.TimeZone.java-getDisplayName(boolean-int-Locale)","Corresponding Source":"/**\n     * Returns a name in the specified {@code style} of this {@code TimeZone}\n     * suitable for presentation to the user in the specified {@code\n     * locale}. If the specified {@code daylight} is {@code true}, a Daylight\n     * Saving Time name is returned (even if this {@code TimeZone} doesn't\n     * observe Daylight Saving Time). Otherwise, a Standard Time name is\n     * returned.\n     *\n     * <p>When looking up a time zone name, the {@linkplain\n     * ResourceBundle.Control#getCandidateLocales(String,Locale) default\n     * <code>Locale<\/code> search path of <code>ResourceBundle<\/code>} derived\n     * from the specified {@code locale} is used. (No {@linkplain\n     * ResourceBundle.Control#getFallbackLocale(String,Locale) fallback\n     * <code>Locale<\/code>} search is performed.) If a time zone name in any\n     * {@code Locale} of the search path, including {@link Locale#ROOT}, is\n     * found, the name is returned. Otherwise, a string in the\n     * <a href=\"#NormalizedCustomID\">normalized custom ID format<\/a> is returned.\n     *\n     * @param daylight {@code true} specifying a Daylight Saving Time name, or\n     *                 {@code false} specifying a Standard Time name\n     * @param style either {@link #LONG} or {@link #SHORT}\n     * @param locale   the locale in which to supply the display name.\n     * @return the human-readable name of this time zone in the given locale.\n     * @exception IllegalArgumentException if {@code style} is invalid.\n     * @exception NullPointerException if {@code locale} is {@code null}.\n     * @since 1.2\n     * @see java.text.DateFormatSymbols#getZoneStrings()\n     */\n    public String getDisplayName(boolean daylight, int style, Locale locale) {\n        if (style != SHORT && style != LONG) {\n            throw new IllegalArgumentException(\"Illegal style: \" + style);\n        }\n        String id = getID();\n        String name = TimeZoneNameUtility.retrieveDisplayName(id, daylight, style, locale);\n        if (name != null) {\n            return name;\n        }\n\n        if (id.startsWith(\"GMT\") && id.length() > 3) {\n            char sign = id.charAt(3);\n            if (sign == '+' || sign == '-') {\n                return id;\n            }\n        }\n        int offset = getRawOffset();\n        if (daylight) {\n            offset += getDSTSavings();\n        }\n        return ZoneInfoFile.toCustomID(offset);\n    }"}
{"Number":"1172","API Relative Path":"java.util.TimeZone.java-setID(String)","Corresponding Source":"/**\n     * Sets the time zone ID. This does not change any other data in\n     * the time zone object.\n     * @param ID the new time zone ID.\n     */\n    public void setID(String ID)\n    {\n        if (ID == null) {\n            throw new NullPointerException();\n        }\n        this.ID = ID;\n    }"}
{"Number":"1173","API Relative Path":"java.util.TreeMap.java-predecessor(Entry)","Corresponding Source":"/**\n     * Returns the predecessor of the specified Entry, or null if no such.\n     */\n    static <K,V> Entry<K,V> predecessor(Entry<K,V> t) {\n        if (t == null)\n            return null;\n        else if (t.left != null) {\n            Entry<K,V> p = t.left;\n            while (p.right != null)\n                p = p.right;\n            return p;\n        } else {\n            Entry<K,V> p = t.parent;\n            Entry<K,V> ch = t;\n            while (p != null && ch == p.left) {\n                ch = p;\n                p = p.parent;\n            }\n            return p;\n        }\n    }"}
{"Number":"1174","API Relative Path":"java.util.TreeMap.java-successor(Entry)","Corresponding Source":"/**\n     * Returns the successor of the specified Entry, or null if no such.\n     */\n    static <K,V> TreeMap.Entry<K,V> successor(Entry<K,V> t) {\n        if (t == null)\n            return null;\n        else if (t.right != null) {\n            Entry<K,V> p = t.right;\n            while (p.left != null)\n                p = p.left;\n            return p;\n        } else {\n            Entry<K,V> p = t.parent;\n            Entry<K,V> ch = t;\n            while (p != null && ch == p.right) {\n                ch = p;\n                p = p.parent;\n            }\n            return p;\n        }\n    }"}
{"Number":"1175","API Relative Path":"java.util.UnknownFormatConversionException.java-UnknownFormatConversionException(String)","Corresponding Source":"/**\n     * Constructs an instance of this class with the unknown conversion.\n     *\n     * @param  s\n     *         Unknown conversion\n     */\n    public UnknownFormatConversionException(String s) {\n        if (s == null)\n            throw new NullPointerException();\n        this.s = s;\n    }"}
{"Number":"1176","API Relative Path":"java.util.UnknownFormatFlagsException.java-UnknownFormatFlagsException(String)","Corresponding Source":"/**\n     * Constructs an instance of this class with the specified flags.\n     *\n     * @param  f\n     *         The set of format flags which contain an unknown flag\n     */\n    public UnknownFormatFlagsException(String f) {\n        if (f == null)\n            throw new NullPointerException();\n        this.flags = f;\n    }"}
{"Number":"1177","API Relative Path":"java.util.Vector.java-add(int-E)","Corresponding Source":"/**\n     * Inserts the specified element at the specified position in this Vector.\n     * Shifts the element currently at that position (if any) and any\n     * subsequent elements to the right (adds one to their indices).\n     *\n     * @param index index at which the specified element is to be inserted\n     * @param element element to be inserted\n     * @throws ArrayIndexOutOfBoundsException if the index is out of range\n     *         ({@code index < 0 || index > size()})\n     * @since 1.2\n     */\n    public void add(int index, E element) {\n        insertElementAt(element, index);\n    }"}
{"Number":"1178","API Relative Path":"java.util.Vector.java-addAll(int-Collection)","Corresponding Source":"/**\n     * Inserts all of the elements in the specified Collection into this\n     * Vector at the specified position.  Shifts the element currently at\n     * that position (if any) and any subsequent elements to the right\n     * (increases their indices).  The new elements will appear in the Vector\n     * in the order that they are returned by the specified Collection's\n     * iterator.\n     *\n     * @param index index at which to insert the first element from the\n     *              specified collection\n     * @param c elements to be inserted into this Vector\n     * @return {@code true} if this Vector changed as a result of the call\n     * @throws ArrayIndexOutOfBoundsException if the index is out of range\n     *         ({@code index < 0 || index > size()})\n     * @throws NullPointerException if the specified collection is null\n     * @since 1.2\n     */\n    public synchronized boolean addAll(int index, Collection<? extends E> c) {\n        modCount++;\n        if (index < 0 || index > elementCount)\n            throw new ArrayIndexOutOfBoundsException(index);\n\n        Object[] a = c.toArray();\n        int numNew = a.length;\n        ensureCapacityHelper(elementCount + numNew);\n\n        int numMoved = elementCount - index;\n        if (numMoved > 0)\n            System.arraycopy(elementData, index, elementData, index + numNew,\n                             numMoved);\n\n        System.arraycopy(a, 0, elementData, index, numNew);\n        elementCount += numNew;\n        return numNew != 0;\n    }"}
{"Number":"1179","API Relative Path":"java.util.Vector.java-elementAt(int)","Corresponding Source":"/**\n     * Deletes the component at the specified index. Each component in\n     * this vector with an index greater or equal to the specified\n     * {@code index} is shifted downward to have an index one\n     * smaller than the value it had previously. The size of this vector\n     * is decreased by {@code 1}.\n     *\n     * <p>The index must be a value greater than or equal to {@code 0}\n     * and less than the current size of the vector.\n     *\n     * <p>This method is identical in functionality to the {@link #remove(int)}\n     * method (which is part of the {@link List} interface).  Note that the\n     * {@code remove} method returns the old value that was stored at the\n     * specified position.\n     *\n     * @param      index   the index of the object to remove\n     * @throws ArrayIndexOutOfBoundsException if the index is out of range\n     *         ({@code index < 0 || index >= size()})\n     */\n    public synchronized void removeElementAt(int index) {\n        modCount++;\n        if (index >= elementCount) {\n            throw new ArrayIndexOutOfBoundsException(index + \" >= \" +\n                                                     elementCount);\n        }\n        else if (index < 0) {\n            throw new ArrayIndexOutOfBoundsException(index);\n        }\n        int j = elementCount - index - 1;\n        if (j > 0) {\n            System.arraycopy(elementData, index + 1, elementData, index, j);\n        }\n        elementCount--;\n        elementData[elementCount] = null; /* to let gc do its work */\n    }"}
{"Number":"1180","API Relative Path":"java.util.Vector.java-ensureCapacity(int)","Corresponding Source":"/**\n     * Increases the capacity of this vector, if necessary, to ensure\n     * that it can hold at least the number of components specified by\n     * the minimum capacity argument.\n     *\n     * <p>If the current capacity of this vector is less than\n     * {@code minCapacity}, then its capacity is increased by replacing its\n     * internal data array, kept in the field {@code elementData}, with a\n     * larger one.  The size of the new data array will be the old size plus\n     * {@code capacityIncrement}, unless the value of\n     * {@code capacityIncrement} is less than or equal to zero, in which case\n     * the new capacity will be twice the old capacity; but if this new size\n     * is still smaller than {@code minCapacity}, then the new capacity will\n     * be {@code minCapacity}.\n     *\n     * @param minCapacity the desired minimum capacity\n     */\n    public synchronized void ensureCapacity(int minCapacity) {\n        if (minCapacity > 0) {\n            modCount++;\n            ensureCapacityHelper(minCapacity);\n        }\n    }"}
{"Number":"1181","API Relative Path":"java.util.Vector.java-get(int)","Corresponding Source":"/**\n     * Returns the element at the specified position in this Vector.\n     *\n     * @param index index of the element to return\n     * @return object at the specified index\n     * @throws ArrayIndexOutOfBoundsException if the index is out of range\n     *            ({@code index < 0 || index >= size()})\n     * @since 1.2\n     */\n    public synchronized E get(int index) {\n        if (index >= elementCount)\n            throw new ArrayIndexOutOfBoundsException(index);\n\n        return elementData(index);\n    }"}
{"Number":"1182","API Relative Path":"java.util.Vector.java-insertElementAt(E-int)","Corresponding Source":"/**\n     * Inserts the specified object as a component in this vector at the\n     * specified {@code index}. Each component in this vector with\n     * an index greater or equal to the specified {@code index} is\n     * shifted upward to have an index one greater than the value it had\n     * previously.\n     *\n     * <p>The index must be a value greater than or equal to {@code 0}\n     * and less than or equal to the current size of the vector. (If the\n     * index is equal to the current size of the vector, the new element\n     * is appended to the Vector.)\n     *\n     * <p>This method is identical in functionality to the\n     * {@link #add(int, Object) add(int, E)}\n     * method (which is part of the {@link List} interface).  Note that the\n     * {@code add} method reverses the order of the parameters, to more closely\n     * match array usage.\n     *\n     * @param      obj     the component to insert\n     * @param      index   where to insert the new component\n     * @throws ArrayIndexOutOfBoundsException if the index is out of range\n     *         ({@code index < 0 || index > size()})\n     */\n    public synchronized void insertElementAt(E obj, int index) {\n        modCount++;\n        if (index > elementCount) {\n            throw new ArrayIndexOutOfBoundsException(index\n                                                     + \" > \" + elementCount);\n        }\n        ensureCapacityHelper(elementCount + 1);\n        System.arraycopy(elementData, index, elementData, index + 1, elementCount - index);\n        elementData[index] = obj;\n        elementCount++;\n    }"}
{"Number":"1183","API Relative Path":"java.util.Vector.java-lastIndexOf(Object-int)","Corresponding Source":"/**\n     * Returns the index of the last occurrence of the specified element in\n     * this vector, searching backwards from {@code index}, or returns -1 if\n     * the element is not found.\n     * More formally, returns the highest index {@code i} such that\n     * <tt>(i&nbsp;&lt;=&nbsp;index&nbsp;&amp;&amp;&nbsp;(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i))))<\/tt>,\n     * or -1 if there is no such index.\n     *\n     * @param o element to search for\n     * @param index index to start searching backwards from\n     * @return the index of the last occurrence of the element at position\n     *         less than or equal to {@code index} in this vector;\n     *         -1 if the element is not found.\n     * @throws IndexOutOfBoundsException if the specified index is greater\n     *         than or equal to the current size of this vector\n     */\n    public synchronized int lastIndexOf(Object o, int index) {\n        if (index >= elementCount)\n            throw new IndexOutOfBoundsException(index + \" >= \"+ elementCount);\n\n        if (o == null) {\n            for (int i = index; i >= 0; i--)\n                if (elementData[i]==null)\n                    return i;\n        } else {\n            for (int i = index; i >= 0; i--)\n                if (o.equals(elementData[i]))\n                    return i;\n        }\n        return -1;\n    }"}
{"Number":"1184","API Relative Path":"java.util.Vector.java-listIterator(int)","Corresponding Source":"/**\n     * Returns a list iterator over the elements in this list (in proper\n     * sequence), starting at the specified position in the list.\n     * The specified index indicates the first element that would be\n     * returned by an initial call to {@link ListIterator#next next}.\n     * An initial call to {@link ListIterator#previous previous} would\n     * return the element with the specified index minus one.\n     *\n     * <p>The returned list iterator is <a href=\"#fail-fast\"><i>fail-fast<\/i><\/a>.\n     *\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     */\n    public synchronized ListIterator<E> listIterator(int index) {\n        if (index < 0 || index > elementCount)\n            throw new IndexOutOfBoundsException(\"Index: \"+index);\n        return new ListItr(index);\n    }"}
{"Number":"1185","API Relative Path":"java.util.Vector.java-remove(int)","Corresponding Source":"/**\n     * Removes the element at the specified position in this Vector.\n     * Shifts any subsequent elements to the left (subtracts one from their\n     * indices).  Returns the element that was removed from the Vector.\n     *\n     * @throws ArrayIndexOutOfBoundsException if the index is out of range\n     *         ({@code index < 0 || index >= size()})\n     * @param index the index of the element to be removed\n     * @return element that was removed\n     * @since 1.2\n     */\n    public synchronized E remove(int index) {\n        modCount++;\n        if (index >= elementCount)\n            throw new ArrayIndexOutOfBoundsException(index);\n        E oldValue = elementData(index);\n\n        int numMoved = elementCount - index - 1;\n        if (numMoved > 0)\n            System.arraycopy(elementData, index+1, elementData, index,\n                             numMoved);\n        elementData[--elementCount] = null; // Let gc do its work\n\n        return oldValue;\n    }"}
{"Number":"1186","API Relative Path":"java.util.Vector.java-removeElementAt(int)","Corresponding Source":"/**\n     * Deletes the component at the specified index. Each component in\n     * this vector with an index greater or equal to the specified\n     * {@code index} is shifted downward to have an index one\n     * smaller than the value it had previously. The size of this vector\n     * is decreased by {@code 1}.\n     *\n     * <p>The index must be a value greater than or equal to {@code 0}\n     * and less than the current size of the vector.\n     *\n     * <p>This method is identical in functionality to the {@link #remove(int)}\n     * method (which is part of the {@link List} interface).  Note that the\n     * {@code remove} method returns the old value that was stored at the\n     * specified position.\n     *\n     * @param      index   the index of the object to remove\n     * @throws ArrayIndexOutOfBoundsException if the index is out of range\n     *         ({@code index < 0 || index >= size()})\n     */\n    public synchronized void removeElementAt(int index) {\n        modCount++;\n        if (index >= elementCount) {\n            throw new ArrayIndexOutOfBoundsException(index + \" >= \" +\n                                                     elementCount);\n        }\n        else if (index < 0) {\n            throw new ArrayIndexOutOfBoundsException(index);\n        }\n        int j = elementCount - index - 1;\n        if (j > 0) {\n            System.arraycopy(elementData, index + 1, elementData, index, j);\n        }\n        elementCount--;\n        elementData[elementCount] = null; /* to let gc do its work */\n    }"}
{"Number":"1187","API Relative Path":"java.util.Vector.java-removeElementAt(int)","Corresponding Source":"/**\n     * Deletes the component at the specified index. Each component in\n     * this vector with an index greater or equal to the specified\n     * {@code index} is shifted downward to have an index one\n     * smaller than the value it had previously. The size of this vector\n     * is decreased by {@code 1}.\n     *\n     * <p>The index must be a value greater than or equal to {@code 0}\n     * and less than the current size of the vector.\n     *\n     * <p>This method is identical in functionality to the {@link #remove(int)}\n     * method (which is part of the {@link List} interface).  Note that the\n     * {@code remove} method returns the old value that was stored at the\n     * specified position.\n     *\n     * @param      index   the index of the object to remove\n     * @throws ArrayIndexOutOfBoundsException if the index is out of range\n     *         ({@code index < 0 || index >= size()})\n     */\n    public synchronized void removeElementAt(int index) {\n        modCount++;\n        if (index >= elementCount) {\n            throw new ArrayIndexOutOfBoundsException(index + \" >= \" +\n                                                     elementCount);\n        }\n        else if (index < 0) {\n            throw new ArrayIndexOutOfBoundsException(index);\n        }\n        int j = elementCount - index - 1;\n        if (j > 0) {\n            System.arraycopy(elementData, index + 1, elementData, index, j);\n        }\n        elementCount--;\n        elementData[elementCount] = null; /* to let gc do its work */\n    }"}
{"Number":"1188","API Relative Path":"java.util.Vector.java-set(int-E)","Corresponding Source":"/**\n     * Replaces the element at the specified position in this Vector with the\n     * specified element.\n     *\n     * @param index index of the element to replace\n     * @param element element to be stored at the specified position\n     * @return the element previously at the specified position\n     * @throws ArrayIndexOutOfBoundsException if the index is out of range\n     *         ({@code index < 0 || index >= size()})\n     * @since 1.2\n     */\n    public synchronized E set(int index, E element) {\n        if (index >= elementCount)\n            throw new ArrayIndexOutOfBoundsException(index);\n\n        E oldValue = elementData(index);\n        elementData[index] = element;\n        return oldValue;\n    }"}
{"Number":"1189","API Relative Path":"java.util.Vector.java-setElementAt(E-int)","Corresponding Source":"/**\n     * Sets the component at the specified {@code index} of this\n     * vector to be the specified object. The previous component at that\n     * position is discarded.\n     *\n     * <p>The index must be a value greater than or equal to {@code 0}\n     * and less than the current size of the vector.\n     *\n     * <p>This method is identical in functionality to the\n     * {@link #set(int, Object) set(int, E)}\n     * method (which is part of the {@link List} interface). Note that the\n     * {@code set} method reverses the order of the parameters, to more closely\n     * match array usage.  Note also that the {@code set} method returns the\n     * old value that was stored at the specified position.\n     *\n     * @param      obj     what the component is to be set to\n     * @param      index   the specified index\n     * @throws ArrayIndexOutOfBoundsException if the index is out of range\n     *         ({@code index < 0 || index >= size()})\n     */\n    public synchronized void setElementAt(E obj, int index) {\n        if (index >= elementCount) {\n            throw new ArrayIndexOutOfBoundsException(index + \" >= \" +\n                                                     elementCount);\n        }\n        elementData[index] = obj;\n    }"}
{"Number":"1190","API Relative Path":"java.util.Vector.java-setSize(int)","Corresponding Source":"/**\n     * Sets the size of this vector. If the new size is greater than the\n     * current size, new {@code null} items are added to the end of\n     * the vector. If the new size is less than the current size, all\n     * components at index {@code newSize} and greater are discarded.\n     *\n     * @param  newSize   the new size of this vector\n     * @throws ArrayIndexOutOfBoundsException if the new size is negative\n     */\n    public synchronized void setSize(int newSize) {\n        modCount++;\n        if (newSize > elementCount) {\n            ensureCapacityHelper(newSize);\n        } else {\n            for (int i = newSize ; i < elementCount ; i++) {\n                elementData[i] = null;\n            }\n        }\n        elementCount = newSize;\n    }"}
{"Number":"1191","API Relative Path":"java.util.Vector.java-Vector(int-int)","Corresponding Source":"/**\n     * Constructs an empty vector with the specified initial capacity and\n     * capacity increment.\n     *\n     * @param   initialCapacity     the initial capacity of the vector\n     * @param   capacityIncrement   the amount by which the capacity is\n     *                              increased when the vector overflows\n     * @throws IllegalArgumentException if the specified initial capacity\n     *         is negative\n     */\n    public Vector(int initialCapacity, int capacityIncrement) {\n        super();\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException(\"Illegal Capacity: \"+\n                                               initialCapacity);\n        this.elementData = new Object[initialCapacity];\n        this.capacityIncrement = capacityIncrement;\n    }"}
{"Number":"1192","API Relative Path":"java.util.WeakHashMap.java-WeakHashMap(int-float)","Corresponding Source":"/**\n     * Constructs a new, empty <tt>WeakHashMap<\/tt> with the given initial\n     * capacity and the given load factor.\n     *\n     * @param  initialCapacity The initial capacity of the <tt>WeakHashMap<\/tt>\n     * @param  loadFactor      The load factor of the <tt>WeakHashMap<\/tt>\n     * @throws IllegalArgumentException if the initial capacity is negative,\n     *         or if the load factor is nonpositive.\n     */\n    public WeakHashMap(int initialCapacity, float loadFactor) {\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException(\"Illegal Initial Capacity: \"+\n                                               initialCapacity);\n        if (initialCapacity > MAXIMUM_CAPACITY)\n            initialCapacity = MAXIMUM_CAPACITY;\n\n        if (loadFactor <= 0 || Float.isNaN(loadFactor))\n            throw new IllegalArgumentException(\"Illegal Load factor: \"+\n                                               loadFactor);\n        int capacity = 1;\n        while (capacity < initialCapacity)\n            capacity <<= 1;\n        table = newTable(capacity);\n        this.loadFactor = loadFactor;\n        threshold = (int)(capacity * loadFactor);\n    }"}
{"Number":"1193","API Relative Path":"java.util.WeakHashMap.java-WeakHashMap(int-float)","Corresponding Source":"/**\n     * Constructs a new, empty <tt>WeakHashMap<\/tt> with the given initial\n     * capacity and the given load factor.\n     *\n     * @param  initialCapacity The initial capacity of the <tt>WeakHashMap<\/tt>\n     * @param  loadFactor      The load factor of the <tt>WeakHashMap<\/tt>\n     * @throws IllegalArgumentException if the initial capacity is negative,\n     *         or if the load factor is nonpositive.\n     */\n    public WeakHashMap(int initialCapacity, float loadFactor) {\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException(\"Illegal Initial Capacity: \"+\n                                               initialCapacity);\n        if (initialCapacity > MAXIMUM_CAPACITY)\n            initialCapacity = MAXIMUM_CAPACITY;\n\n        if (loadFactor <= 0 || Float.isNaN(loadFactor))\n            throw new IllegalArgumentException(\"Illegal Load factor: \"+\n                                               loadFactor);\n        int capacity = 1;\n        while (capacity < initialCapacity)\n            capacity <<= 1;\n        table = newTable(capacity);\n        this.loadFactor = loadFactor;\n        threshold = (int)(capacity * loadFactor);\n    }"}
{"Number":"1194","API Relative Path":"java.util.zip.Adler32.java-update(byte[]-int-int)","Corresponding Source":"/**\n     * Updates the checksum with the specified array of bytes.\n     *\n     * @throws  ArrayIndexOutOfBoundsException\n     *          if {@code off} is negative, or {@code len} is negative,\n     *          or {@code off+len} is greater than the length of the\n     *          array {@code b}\n     */\n    public void update(byte[] b, int off, int len) {\n        if (b == null) {\n            throw new NullPointerException();\n        }\n        if (off < 0 || len < 0 || off > b.length - len) {\n            throw new ArrayIndexOutOfBoundsException();\n        }\n        adler = updateBytes(adler, b, off, len);\n    }"}
{"Number":"1195","API Relative Path":"java.util.zip.Adler32.java-update(byte[]-int-int)","Corresponding Source":"/**\n     * Updates the checksum with the specified array of bytes.\n     *\n     * @throws  ArrayIndexOutOfBoundsException\n     *          if {@code off} is negative, or {@code len} is negative,\n     *          or {@code off+len} is greater than the length of the\n     *          array {@code b}\n     */\n    public void update(byte[] b, int off, int len) {\n        if (b == null) {\n            throw new NullPointerException();\n        }\n        if (off < 0 || len < 0 || off > b.length - len) {\n            throw new ArrayIndexOutOfBoundsException();\n        }\n        adler = updateBytes(adler, b, off, len);\n    }"}
{"Number":"1196","API Relative Path":"java.util.zip.CRC32.java-update(byte[]-int-int)","Corresponding Source":"/**\n     * Updates the CRC-32 checksum with the specified array of bytes.\n     *\n     * @throws  ArrayIndexOutOfBoundsException\n     *          if {@code off} is negative, or {@code len} is negative,\n     *          or {@code off+len} is greater than the length of the\n     *          array {@code b}\n     */\n    public void update(byte[] b, int off, int len) {\n        if (b == null) {\n            throw new NullPointerException();\n        }\n        if (off < 0 || len < 0 || off > b.length - len) {\n            throw new ArrayIndexOutOfBoundsException();\n        }\n        crc = updateBytes(crc, b, off, len);\n    }"}
{"Number":"1197","API Relative Path":"java.util.zip.CRC32.java-update(byte[]-int-int)","Corresponding Source":"/**\n     * Updates the CRC-32 checksum with the specified array of bytes.\n     *\n     * @throws  ArrayIndexOutOfBoundsException\n     *          if {@code off} is negative, or {@code len} is negative,\n     *          or {@code off+len} is greater than the length of the\n     *          array {@code b}\n     */\n    public void update(byte[] b, int off, int len) {\n        if (b == null) {\n            throw new NullPointerException();\n        }\n        if (off < 0 || len < 0 || off > b.length - len) {\n            throw new ArrayIndexOutOfBoundsException();\n        }\n        crc = updateBytes(crc, b, off, len);\n    }"}
{"Number":"1198","API Relative Path":"java.util.zip.Deflater.java-deflate(byte[]-int-int-int)","Corresponding Source":"/**\n     * Compresses the input data and fills the specified buffer with compressed\n     * data. Returns actual number of bytes of data compressed.\n     *\n     * <p>Compression flush mode is one of the following three modes:\n     *\n     * <ul>\n     * <li>{@link #NO_FLUSH}: allows the deflater to decide how much data\n     * to accumulate, before producing output, in order to achieve the best\n     * compression (should be used in normal use scenario). A return value\n     * of 0 in this flush mode indicates that {@link #needsInput()} should\n     * be called in order to determine if more input data is required.\n     *\n     * <li>{@link #SYNC_FLUSH}: all pending output in the deflater is flushed,\n     * to the specified output buffer, so that an inflater that works on\n     * compressed data can get all input data available so far (In particular\n     * the {@link #needsInput()} returns {@code true} after this invocation\n     * if enough output space is provided). Flushing with {@link #SYNC_FLUSH}\n     * may degrade compression for some compression algorithms and so it\n     * should be used only when necessary.\n     *\n     * <li>{@link #FULL_FLUSH}: all pending output is flushed out as with\n     * {@link #SYNC_FLUSH}. The compression state is reset so that the inflater\n     * that works on the compressed output data can restart from this point\n     * if previous compressed data has been damaged or if random access is\n     * desired. Using {@link #FULL_FLUSH} too often can seriously degrade\n     * compression.\n     * <\/ul>\n     *\n     * <p>In the case of {@link #FULL_FLUSH} or {@link #SYNC_FLUSH}, if\n     * the return value is {@code len}, the space available in output\n     * buffer {@code b}, this method should be invoked again with the same\n     * {@code flush} parameter and more output space.\n     *\n     * @param b the buffer for the compressed data\n     * @param off the start offset of the data\n     * @param len the maximum number of bytes of compressed data\n     * @param flush the compression flush mode\n     * @return the actual number of bytes of compressed data written to\n     *         the output buffer\n     *\n     * @throws IllegalArgumentException if the flush mode is invalid\n     * @since 1.7\n     */\n    public int deflate(byte[] b, int off, int len, int flush) {\n        if (b == null) {\n            throw new NullPointerException();\n        }\n        if (off < 0 || len < 0 || off > b.length - len) {\n            throw new ArrayIndexOutOfBoundsException();\n        }\n        synchronized (zsRef) {\n            ensureOpen();\n            if (flush == NO_FLUSH || flush == SYNC_FLUSH ||\n                flush == FULL_FLUSH) {\n                int thisLen = this.len;\n                int n = deflateBytes(zsRef.address(), b, off, len, flush);\n                bytesWritten += n;\n                bytesRead += (thisLen - this.len);\n                return n;\n            }\n            throw new IllegalArgumentException();\n        }\n    }"}
{"Number":"1199","API Relative Path":"java.util.zip.Deflater.java-deflate(byte[]-int-int-int)","Corresponding Source":"/**\n     * Compresses the input data and fills the specified buffer with compressed\n     * data. Returns actual number of bytes of data compressed.\n     *\n     * <p>Compression flush mode is one of the following three modes:\n     *\n     * <ul>\n     * <li>{@link #NO_FLUSH}: allows the deflater to decide how much data\n     * to accumulate, before producing output, in order to achieve the best\n     * compression (should be used in normal use scenario). A return value\n     * of 0 in this flush mode indicates that {@link #needsInput()} should\n     * be called in order to determine if more input data is required.\n     *\n     * <li>{@link #SYNC_FLUSH}: all pending output in the deflater is flushed,\n     * to the specified output buffer, so that an inflater that works on\n     * compressed data can get all input data available so far (In particular\n     * the {@link #needsInput()} returns {@code true} after this invocation\n     * if enough output space is provided). Flushing with {@link #SYNC_FLUSH}\n     * may degrade compression for some compression algorithms and so it\n     * should be used only when necessary.\n     *\n     * <li>{@link #FULL_FLUSH}: all pending output is flushed out as with\n     * {@link #SYNC_FLUSH}. The compression state is reset so that the inflater\n     * that works on the compressed output data can restart from this point\n     * if previous compressed data has been damaged or if random access is\n     * desired. Using {@link #FULL_FLUSH} too often can seriously degrade\n     * compression.\n     * <\/ul>\n     *\n     * <p>In the case of {@link #FULL_FLUSH} or {@link #SYNC_FLUSH}, if\n     * the return value is {@code len}, the space available in output\n     * buffer {@code b}, this method should be invoked again with the same\n     * {@code flush} parameter and more output space.\n     *\n     * @param b the buffer for the compressed data\n     * @param off the start offset of the data\n     * @param len the maximum number of bytes of compressed data\n     * @param flush the compression flush mode\n     * @return the actual number of bytes of compressed data written to\n     *         the output buffer\n     *\n     * @throws IllegalArgumentException if the flush mode is invalid\n     * @since 1.7\n     */\n    public int deflate(byte[] b, int off, int len, int flush) {\n        if (b == null) {\n            throw new NullPointerException();\n        }\n        if (off < 0 || len < 0 || off > b.length - len) {\n            throw new ArrayIndexOutOfBoundsException();\n        }\n        synchronized (zsRef) {\n            ensureOpen();\n            if (flush == NO_FLUSH || flush == SYNC_FLUSH ||\n                flush == FULL_FLUSH) {\n                int thisLen = this.len;\n                int n = deflateBytes(zsRef.address(), b, off, len, flush);\n                bytesWritten += n;\n                bytesRead += (thisLen - this.len);\n                return n;\n            }\n            throw new IllegalArgumentException();\n        }\n    }"}
{"Number":"1200","API Relative Path":"java.util.zip.Deflater.java-setDictionary(byte[]-int-int)","Corresponding Source":"/**\n     * Sets preset dictionary for compression. A preset dictionary is used\n     * when the history buffer can be predetermined. When the data is later\n     * uncompressed with Inflater.inflate(), Inflater.getAdler() can be called\n     * in order to get the Adler-32 value of the dictionary required for\n     * decompression.\n     * @param b the dictionary data bytes\n     * @param off the start offset of the data\n     * @param len the length of the data\n     * @see Inflater#inflate\n     * @see Inflater#getAdler\n     */\n    public void setDictionary(byte[] b, int off, int len) {\n        if (b == null) {\n            throw new NullPointerException();\n        }\n        if (off < 0 || len < 0 || off > b.length - len) {\n            throw new ArrayIndexOutOfBoundsException();\n        }\n        synchronized (zsRef) {\n            ensureOpen();\n            setDictionary(zsRef.address(), b, off, len);\n        }\n    }"}
{"Number":"1201","API Relative Path":"java.util.zip.Deflater.java-setDictionary(byte[]-int-int)","Corresponding Source":"/**\n     * Sets preset dictionary for compression. A preset dictionary is used\n     * when the history buffer can be predetermined. When the data is later\n     * uncompressed with Inflater.inflate(), Inflater.getAdler() can be called\n     * in order to get the Adler-32 value of the dictionary required for\n     * decompression.\n     * @param b the dictionary data bytes\n     * @param off the start offset of the data\n     * @param len the length of the data\n     * @see Inflater#inflate\n     * @see Inflater#getAdler\n     */\n    public void setDictionary(byte[] b, int off, int len) {\n        if (b == null) {\n            throw new NullPointerException();\n        }\n        if (off < 0 || len < 0 || off > b.length - len) {\n            throw new ArrayIndexOutOfBoundsException();\n        }\n        synchronized (zsRef) {\n            ensureOpen();\n            setDictionary(zsRef.address(), b, off, len);\n        }\n    }"}
{"Number":"1202","API Relative Path":"java.util.zip.Deflater.java-setInput(byte[]-int-int)","Corresponding Source":"/**\n     * Sets input data for compression. This should be called whenever\n     * needsInput() returns true indicating that more input data is required.\n     * @param b the input data bytes\n     * @param off the start offset of the data\n     * @param len the length of the data\n     * @see Deflater#needsInput\n     */\n    public void setInput(byte[] b, int off, int len) {\n        if (b== null) {\n            throw new NullPointerException();\n        }\n        if (off < 0 || len < 0 || off > b.length - len) {\n            throw new ArrayIndexOutOfBoundsException();\n        }\n        synchronized (zsRef) {\n            this.buf = b;\n            this.off = off;\n            this.len = len;\n        }\n    }"}
{"Number":"1203","API Relative Path":"java.util.zip.Deflater.java-setInput(byte[]-int-int)","Corresponding Source":"/**\n     * Sets input data for compression. This should be called whenever\n     * needsInput() returns true indicating that more input data is required.\n     * @param b the input data bytes\n     * @param off the start offset of the data\n     * @param len the length of the data\n     * @see Deflater#needsInput\n     */\n    public void setInput(byte[] b, int off, int len) {\n        if (b== null) {\n            throw new NullPointerException();\n        }\n        if (off < 0 || len < 0 || off > b.length - len) {\n            throw new ArrayIndexOutOfBoundsException();\n        }\n        synchronized (zsRef) {\n            this.buf = b;\n            this.off = off;\n            this.len = len;\n        }\n    }"}
{"Number":"1204","API Relative Path":"java.util.zip.Deflater.java-setLevel(int)","Corresponding Source":"/**\n     * Sets the compression level to the specified value.\n     *\n     * <p> If the compression level is changed, the next invocation\n     * of {@code deflate} will compress the input available so far\n     * with the old level (and may be flushed); the new level will\n     * take effect only after that invocation.\n     *\n     * @param level the new compression level (0-9)\n     * @exception IllegalArgumentException if the compression level is invalid\n     */\n    public void setLevel(int level) {\n        if ((level < 0 || level > 9) && level != DEFAULT_COMPRESSION) {\n            throw new IllegalArgumentException(\"invalid compression level\");\n        }\n        synchronized (zsRef) {\n            if (this.level != level) {\n                this.level = level;\n                setParams = true;\n            }\n        }\n    }"}
{"Number":"1205","API Relative Path":"java.util.zip.DeflaterInputStream.java-DeflaterInputStream(InputStream-Deflater-int)","Corresponding Source":"/**\n     * Creates a new input stream with the specified compressor and buffer\n     * size.\n     *\n     * @param in input stream to read the uncompressed data to\n     * @param defl compressor (\"deflater\") for this stream\n     * @param bufLen compression buffer size\n     * @throws IllegalArgumentException if {@code bufLen <= 0}\n     * @throws NullPointerException if {@code in} or {@code defl} is null\n     */\n    public DeflaterInputStream(InputStream in, Deflater defl, int bufLen) {\n        super(in);\n\n        // Sanity checks\n        if (in == null)\n            throw new NullPointerException(\"Null input\");\n        if (defl == null)\n            throw new NullPointerException(\"Null deflater\");\n        if (bufLen < 1)\n            throw new IllegalArgumentException(\"Buffer size < 1\");\n\n        // Initialize\n        def = defl;\n        buf = new byte[bufLen];\n    }"}
{"Number":"1206","API Relative Path":"java.util.zip.DeflaterInputStream.java-DeflaterInputStream(InputStream-Deflater-int)","Corresponding Source":"/**\n     * Creates a new input stream with the specified compressor and buffer\n     * size.\n     *\n     * @param in input stream to read the uncompressed data to\n     * @param defl compressor (\"deflater\") for this stream\n     * @param bufLen compression buffer size\n     * @throws IllegalArgumentException if {@code bufLen <= 0}\n     * @throws NullPointerException if {@code in} or {@code defl} is null\n     */\n    public DeflaterInputStream(InputStream in, Deflater defl, int bufLen) {\n        super(in);\n\n        // Sanity checks\n        if (in == null)\n            throw new NullPointerException(\"Null input\");\n        if (defl == null)\n            throw new NullPointerException(\"Null deflater\");\n        if (bufLen < 1)\n            throw new IllegalArgumentException(\"Buffer size < 1\");\n\n        // Initialize\n        def = defl;\n        buf = new byte[bufLen];\n    }"}
{"Number":"1207","API Relative Path":"java.util.zip.DeflaterInputStream.java-read(byte[]-int-int)","Corresponding Source":"/**\n     * Reads compressed data into a byte array.\n     * This method will block until some input can be read and compressed.\n     *\n     * @param b buffer into which the data is read\n     * @param off starting offset of the data within {@code b}\n     * @param len maximum number of compressed bytes to read into {@code b}\n     * @return the actual number of bytes read, or -1 if the end of the\n     * uncompressed input stream is reached\n     * @throws IndexOutOfBoundsException  if {@code len > b.length - off}\n     * @throws IOException if an I/O error occurs or if this input stream is\n     * already closed\n     */\n    public int read(byte[] b, int off, int len) throws IOException {\n        // Sanity checks\n        ensureOpen();\n        if (b == null) {\n            throw new NullPointerException(\"Null buffer for read\");\n        } else if (off < 0 || len < 0 || len > b.length - off) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return 0;\n        }\n\n        // Read and compress (deflate) input data bytes\n        int cnt = 0;\n        while (len > 0 && !def.finished()) {\n            int n;\n\n            // Read data from the input stream\n            if (def.needsInput()) {\n                n = in.read(buf, 0, buf.length);\n                if (n < 0) {\n                    // End of the input stream reached\n                    def.finish();\n                } else if (n > 0) {\n                    def.setInput(buf, 0, n);\n                }\n            }\n\n            // Compress the input data, filling the read buffer\n            n = def.deflate(b, off, len);\n            cnt += n;\n            off += n;\n            len -= n;\n        }\n        if (cnt == 0 && def.finished()) {\n            reachEOF = true;\n            cnt = -1;\n        }\n\n        return cnt;\n    }"}
{"Number":"1208","API Relative Path":"java.util.zip.DeflaterInputStream.java-read(byte[]-int-int)","Corresponding Source":"/**\n     * Reads compressed data into a byte array.\n     * This method will block until some input can be read and compressed.\n     *\n     * @param b buffer into which the data is read\n     * @param off starting offset of the data within {@code b}\n     * @param len maximum number of compressed bytes to read into {@code b}\n     * @return the actual number of bytes read, or -1 if the end of the\n     * uncompressed input stream is reached\n     * @throws IndexOutOfBoundsException  if {@code len > b.length - off}\n     * @throws IOException if an I/O error occurs or if this input stream is\n     * already closed\n     */\n    public int read(byte[] b, int off, int len) throws IOException {\n        // Sanity checks\n        ensureOpen();\n        if (b == null) {\n            throw new NullPointerException(\"Null buffer for read\");\n        } else if (off < 0 || len < 0 || len > b.length - off) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return 0;\n        }\n\n        // Read and compress (deflate) input data bytes\n        int cnt = 0;\n        while (len > 0 && !def.finished()) {\n            int n;\n\n            // Read data from the input stream\n            if (def.needsInput()) {\n                n = in.read(buf, 0, buf.length);\n                if (n < 0) {\n                    // End of the input stream reached\n                    def.finish();\n                } else if (n > 0) {\n                    def.setInput(buf, 0, n);\n                }\n            }\n\n            // Compress the input data, filling the read buffer\n            n = def.deflate(b, off, len);\n            cnt += n;\n            off += n;\n            len -= n;\n        }\n        if (cnt == 0 && def.finished()) {\n            reachEOF = true;\n            cnt = -1;\n        }\n\n        return cnt;\n    }"}
{"Number":"1209","API Relative Path":"java.util.zip.DeflaterInputStream.java-skip(long)","Corresponding Source":"/**\n     * Skips over and discards data from the input stream.\n     * This method may block until the specified number of bytes are read and\n     * skipped. <em>Note:<\/em> While {@code n} is given as a {@code long},\n     * the maximum number of bytes which can be skipped is\n     * {@code Integer.MAX_VALUE}.\n     *\n     * @param n number of bytes to be skipped\n     * @return the actual number of bytes skipped\n     * @throws IOException if an I/O error occurs or if this stream is\n     * already closed\n     */\n    public long skip(long n) throws IOException {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"negative skip length\");\n        }\n        ensureOpen();\n\n        // Skip bytes by repeatedly decompressing small blocks\n        if (rbuf.length < 512)\n            rbuf = new byte[512];\n\n        int total = (int)Math.min(n, Integer.MAX_VALUE);\n        long cnt = 0;\n        while (total > 0) {\n            // Read a small block of uncompressed bytes\n            int len = read(rbuf, 0, (total <= rbuf.length ? total : rbuf.length));\n\n            if (len < 0) {\n                break;\n            }\n            cnt += len;\n            total -= len;\n        }\n        return cnt;\n    }"}
{"Number":"1210","API Relative Path":"java.util.zip.DeflaterOutputStream.java-DeflaterOutputStream(OutputStream-Deflater-int-boolean)","Corresponding Source":"/**\n     * Creates a new output stream with the specified compressor,\n     * buffer size and flush mode.\n\n     * @param out the output stream\n     * @param def the compressor (\"deflater\")\n     * @param size the output buffer size\n     * @param syncFlush\n     *        if {@code true} the {@link #flush()} method of this\n     *        instance flushes the compressor with flush mode\n     *        {@link Deflater#SYNC_FLUSH} before flushing the output\n     *        stream, otherwise only flushes the output stream\n     *\n     * @throws IllegalArgumentException if {@code size <= 0}\n     *\n     * @since 1.7\n     */\n    public DeflaterOutputStream(OutputStream out,\n                                Deflater def,\n                                int size,\n                                boolean syncFlush) {\n        super(out);\n        if (out == null || def == null) {\n            throw new NullPointerException();\n        } else if (size <= 0) {\n            throw new IllegalArgumentException(\"buffer size <= 0\");\n        }\n        this.def = def;\n        this.buf = new byte[size];\n        this.syncFlush = syncFlush;\n    }"}
{"Number":"1211","API Relative Path":"java.util.zip.DeflaterOutputStream.java-write(byte[]-int-int)","Corresponding Source":"/**\n     * Writes an array of bytes to the compressed output stream. This\n     * method will block until all the bytes are written.\n     * @param b the data to be written\n     * @param off the start offset of the data\n     * @param len the length of the data\n     * @exception IOException if an I/O error has occurred\n     */\n    public void write(byte[] b, int off, int len) throws IOException {\n        if (def.finished()) {\n            throw new IOException(\"write beyond end of stream\");\n        }\n        if ((off | len | (off + len) | (b.length - (off + len))) < 0) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return;\n        }\n        if (!def.finished()) {\n            def.setInput(b, off, len);\n            while (!def.needsInput()) {\n                deflate();\n            }\n        }\n    }"}
{"Number":"1212","API Relative Path":"java.util.zip.DeflaterOutputStream.java-write(byte[]-int-int)","Corresponding Source":"/**\n     * Writes an array of bytes to the compressed output stream. This\n     * method will block until all the bytes are written.\n     * @param b the data to be written\n     * @param off the start offset of the data\n     * @param len the length of the data\n     * @exception IOException if an I/O error has occurred\n     */\n    public void write(byte[] b, int off, int len) throws IOException {\n        if (def.finished()) {\n            throw new IOException(\"write beyond end of stream\");\n        }\n        if ((off | len | (off + len) | (b.length - (off + len))) < 0) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return;\n        }\n        if (!def.finished()) {\n            def.setInput(b, off, len);\n            while (!def.needsInput()) {\n                deflate();\n            }\n        }\n    }"}
{"Number":"1213","API Relative Path":"java.util.zip.DeflaterOutputStream.java-write(byte[]-int-int)","Corresponding Source":"/**\n     * Writes an array of bytes to the compressed output stream. This\n     * method will block until all the bytes are written.\n     * @param b the data to be written\n     * @param off the start offset of the data\n     * @param len the length of the data\n     * @exception IOException if an I/O error has occurred\n     */\n    public void write(byte[] b, int off, int len) throws IOException {\n        if (def.finished()) {\n            throw new IOException(\"write beyond end of stream\");\n        }\n        if ((off | len | (off + len) | (b.length - (off + len))) < 0) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return;\n        }\n        if (!def.finished()) {\n            def.setInput(b, off, len);\n            while (!def.needsInput()) {\n                deflate();\n            }\n        }\n    }"}
{"Number":"1214","API Relative Path":"java.util.zip.GZIPInputStream.java-read(byte[]-int-int)","Corresponding Source":"/**\n     * Reads uncompressed data into an array of bytes. If <code>len<\/code> is not\n     * zero, the method will block until some input can be decompressed; otherwise,\n     * no bytes are read and <code>0<\/code> is returned.\n     * @param buf the buffer into which the data is read\n     * @param off the start offset in the destination array <code>b<\/code>\n     * @param len the maximum number of bytes read\n     * @return  the actual number of bytes read, or -1 if the end of the\n     *          compressed input stream is reached\n     *\n     * @exception  NullPointerException If <code>buf<\/code> is <code>null<\/code>.\n     * @exception  IndexOutOfBoundsException If <code>off<\/code> is negative,\n     * <code>len<\/code> is negative, or <code>len<\/code> is greater than\n     * <code>buf.length - off<\/code>\n     * @exception ZipException if the compressed input data is corrupt.\n     * @exception IOException if an I/O error has occurred.\n     *\n     */\n    public int read(byte[] buf, int off, int len) throws IOException {\n        ensureOpen();\n        if (eos) {\n            return -1;\n        }\n        int n = super.read(buf, off, len);\n        if (n == -1) {\n            if (readTrailer())\n                eos = true;\n            else\n                return this.read(buf, off, len);\n        } else {\n            crc.update(buf, off, n);\n        }\n        return n;\n    }"}
{"Number":"1215","API Relative Path":"java.util.zip.GZIPOutputStream.java-write(byte[]-int-int)","Corresponding Source":"/**\n     * Writes array of bytes to the compressed output stream. This method\n     * will block until all the bytes are written.\n     * @param buf the data to be written\n     * @param off the start offset of the data\n     * @param len the length of the data\n     * @exception IOException If an I/O error has occurred.\n     */\n    public synchronized void write(byte[] buf, int off, int len)\n        throws IOException\n    {\n        super.write(buf, off, len);\n        crc.update(buf, off, len);\n    }"}
{"Number":"1216","API Relative Path":"java.util.zip.GZIPOutputStream.java-write(byte[]-int-int)","Corresponding Source":"/**\n     * Writes array of bytes to the compressed output stream. This method\n     * will block until all the bytes are written.\n     * @param buf the data to be written\n     * @param off the start offset of the data\n     * @param len the length of the data\n     * @exception IOException If an I/O error has occurred.\n     */\n    public synchronized void write(byte[] buf, int off, int len)\n        throws IOException\n    {\n        super.write(buf, off, len);\n        crc.update(buf, off, len);\n    }"}
{"Number":"1217","API Relative Path":"java.util.zip.Inflater.java-inflate(byte[]-int-int)","Corresponding Source":"/**\n     * Uncompresses bytes into specified buffer. Returns actual number\n     * of bytes uncompressed. A return value of 0 indicates that\n     * needsInput() or needsDictionary() should be called in order to\n     * determine if more input data or a preset dictionary is required.\n     * In the latter case, getAdler() can be used to get the Adler-32\n     * value of the dictionary required.\n     * @param b the buffer for the uncompressed data\n     * @param off the start offset of the data\n     * @param len the maximum number of uncompressed bytes\n     * @return the actual number of uncompressed bytes\n     * @exception DataFormatException if the compressed data format is invalid\n     * @see Inflater#needsInput\n     * @see Inflater#needsDictionary\n     */\n    public int inflate(byte[] b, int off, int len)\n        throws DataFormatException\n    {\n        if (b == null) {\n            throw new NullPointerException();\n        }\n        if (off < 0 || len < 0 || off > b.length - len) {\n            throw new ArrayIndexOutOfBoundsException();\n        }\n        synchronized (zsRef) {\n            ensureOpen();\n            int thisLen = this.len;\n            int n = inflateBytes(zsRef.address(), b, off, len);\n            bytesWritten += n;\n            bytesRead += (thisLen - this.len);\n            return n;\n        }\n    }"}
{"Number":"1218","API Relative Path":"java.util.zip.Inflater.java-inflate(byte[]-int-int)","Corresponding Source":"/**\n     * Uncompresses bytes into specified buffer. Returns actual number\n     * of bytes uncompressed. A return value of 0 indicates that\n     * needsInput() or needsDictionary() should be called in order to\n     * determine if more input data or a preset dictionary is required.\n     * In the latter case, getAdler() can be used to get the Adler-32\n     * value of the dictionary required.\n     * @param b the buffer for the uncompressed data\n     * @param off the start offset of the data\n     * @param len the maximum number of uncompressed bytes\n     * @return the actual number of uncompressed bytes\n     * @exception DataFormatException if the compressed data format is invalid\n     * @see Inflater#needsInput\n     * @see Inflater#needsDictionary\n     */\n    public int inflate(byte[] b, int off, int len)\n        throws DataFormatException\n    {\n        if (b == null) {\n            throw new NullPointerException();\n        }\n        if (off < 0 || len < 0 || off > b.length - len) {\n            throw new ArrayIndexOutOfBoundsException();\n        }\n        synchronized (zsRef) {\n            ensureOpen();\n            int thisLen = this.len;\n            int n = inflateBytes(zsRef.address(), b, off, len);\n            bytesWritten += n;\n            bytesRead += (thisLen - this.len);\n            return n;\n        }\n    }"}
{"Number":"1219","API Relative Path":"java.util.zip.Inflater.java-setDictionary(byte[]-int-int)","Corresponding Source":"/**\n     * Sets the preset dictionary to the given array of bytes. Should be\n     * called when inflate() returns 0 and needsDictionary() returns true\n     * indicating that a preset dictionary is required. The method getAdler()\n     * can be used to get the Adler-32 value of the dictionary needed.\n     * @param b the dictionary data bytes\n     * @param off the start offset of the data\n     * @param len the length of the data\n     * @see Inflater#needsDictionary\n     * @see Inflater#getAdler\n     */\n    public void setDictionary(byte[] b, int off, int len) {\n        if (b == null) {\n            throw new NullPointerException();\n        }\n        if (off < 0 || len < 0 || off > b.length - len) {\n            throw new ArrayIndexOutOfBoundsException();\n        }\n        synchronized (zsRef) {\n            ensureOpen();\n            setDictionary(zsRef.address(), b, off, len);\n            needDict = false;\n        }\n    }"}
{"Number":"1220","API Relative Path":"java.util.zip.Inflater.java-setDictionary(byte[]-int-int)","Corresponding Source":"/**\n     * Sets the preset dictionary to the given array of bytes. Should be\n     * called when inflate() returns 0 and needsDictionary() returns true\n     * indicating that a preset dictionary is required. The method getAdler()\n     * can be used to get the Adler-32 value of the dictionary needed.\n     * @param b the dictionary data bytes\n     * @param off the start offset of the data\n     * @param len the length of the data\n     * @see Inflater#needsDictionary\n     * @see Inflater#getAdler\n     */\n    public void setDictionary(byte[] b, int off, int len) {\n        if (b == null) {\n            throw new NullPointerException();\n        }\n        if (off < 0 || len < 0 || off > b.length - len) {\n            throw new ArrayIndexOutOfBoundsException();\n        }\n        synchronized (zsRef) {\n            ensureOpen();\n            setDictionary(zsRef.address(), b, off, len);\n            needDict = false;\n        }\n    }"}
{"Number":"1221","API Relative Path":"java.util.zip.Inflater.java-setInput(byte[]-int-int)","Corresponding Source":"/**\n     * Sets input data for decompression. Should be called whenever\n     * needsInput() returns true indicating that more input data is\n     * required.\n     * @param b the input data bytes\n     * @param off the start offset of the input data\n     * @param len the length of the input data\n     * @see Inflater#needsInput\n     */\n    public void setInput(byte[] b, int off, int len) {\n        if (b == null) {\n            throw new NullPointerException();\n        }\n        if (off < 0 || len < 0 || off > b.length - len) {\n            throw new ArrayIndexOutOfBoundsException();\n        }\n        synchronized (zsRef) {\n            this.buf = b;\n            this.off = off;\n            this.len = len;\n        }\n    }"}
{"Number":"1222","API Relative Path":"java.util.zip.Inflater.java-setInput(byte[]-int-int)","Corresponding Source":"/**\n     * Sets input data for decompression. Should be called whenever\n     * needsInput() returns true indicating that more input data is\n     * required.\n     * @param b the input data bytes\n     * @param off the start offset of the input data\n     * @param len the length of the input data\n     * @see Inflater#needsInput\n     */\n    public void setInput(byte[] b, int off, int len) {\n        if (b == null) {\n            throw new NullPointerException();\n        }\n        if (off < 0 || len < 0 || off > b.length - len) {\n            throw new ArrayIndexOutOfBoundsException();\n        }\n        synchronized (zsRef) {\n            this.buf = b;\n            this.off = off;\n            this.len = len;\n        }\n    }"}
{"Number":"1223","API Relative Path":"java.util.zip.InflaterInputStream.java-InflaterInputStream(InputStream-Inflater-int)","Corresponding Source":"/**\n     * Creates a new input stream with the specified decompressor and\n     * buffer size.\n     * @param in the input stream\n     * @param inf the decompressor (\"inflater\")\n     * @param size the input buffer size\n     * @exception IllegalArgumentException if {@code size <= 0}\n     */\n    public InflaterInputStream(InputStream in, Inflater inf, int size) {\n        super(in);\n        if (in == null || inf == null) {\n            throw new NullPointerException();\n        } else if (size <= 0) {\n            throw new IllegalArgumentException(\"buffer size <= 0\");\n        }\n        this.inf = inf;\n        buf = new byte[size];\n    }"}
{"Number":"1224","API Relative Path":"java.util.zip.InflaterInputStream.java-read(byte[]-int-int)","Corresponding Source":"/**\n     * Reads uncompressed data into an array of bytes. If <code>len<\/code> is not\n     * zero, the method will block until some input can be decompressed; otherwise,\n     * no bytes are read and <code>0<\/code> is returned.\n     * @param b the buffer into which the data is read\n     * @param off the start offset in the destination array <code>b<\/code>\n     * @param len the maximum number of bytes read\n     * @return the actual number of bytes read, or -1 if the end of the\n     *         compressed input is reached or a preset dictionary is needed\n     * @exception  NullPointerException If <code>b<\/code> is <code>null<\/code>.\n     * @exception  IndexOutOfBoundsException If <code>off<\/code> is negative,\n     * <code>len<\/code> is negative, or <code>len<\/code> is greater than\n     * <code>b.length - off<\/code>\n     * @exception ZipException if a ZIP format error has occurred\n     * @exception IOException if an I/O error has occurred\n     */\n    public int read(byte[] b, int off, int len) throws IOException {\n        ensureOpen();\n        if (b == null) {\n            throw new NullPointerException();\n        } else if (off < 0 || len < 0 || len > b.length - off) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return 0;\n        }\n        try {\n            int n;\n            while ((n = inf.inflate(b, off, len)) == 0) {\n                if (inf.finished() || inf.needsDictionary()) {\n                    reachEOF = true;\n                    return -1;\n                }\n                if (inf.needsInput()) {\n                    fill();\n                }\n            }\n            return n;\n        } catch (DataFormatException e) {\n            String s = e.getMessage();\n            throw new ZipException(s != null ? s : \"Invalid ZLIB data format\");\n        }\n    }"}
{"Number":"1225","API Relative Path":"java.util.zip.InflaterOutputStream.java-InflaterOutputStream(OutputStream-Inflater-int)","Corresponding Source":"/**\n     * Creates a new output stream with the specified decompressor and\n     * buffer size.\n     *\n     * @param out output stream to write the uncompressed data to\n     * @param infl decompressor (\"inflater\") for this stream\n     * @param bufLen decompression buffer size\n     * @throws IllegalArgumentException if {@code bufLen <= 0}\n     * @throws NullPointerException if {@code out} or {@code infl} is null\n     */\n    public InflaterOutputStream(OutputStream out, Inflater infl, int bufLen) {\n        super(out);\n\n        // Sanity checks\n        if (out == null)\n            throw new NullPointerException(\"Null output\");\n        if (infl == null)\n            throw new NullPointerException(\"Null inflater\");\n        if (bufLen <= 0)\n            throw new IllegalArgumentException(\"Buffer size < 1\");\n\n        // Initialize\n        inf = infl;\n        buf = new byte[bufLen];\n    }"}
{"Number":"1226","API Relative Path":"java.util.zip.InflaterOutputStream.java-write(byte[]-int-int)","Corresponding Source":"/**\n     * Writes an array of bytes to the uncompressed output stream.\n     *\n     * @param b buffer containing compressed data to decompress and write to\n     * the output stream\n     * @param off starting offset of the compressed data within {@code b}\n     * @param len number of bytes to decompress from {@code b}\n     * @throws IndexOutOfBoundsException if {@code off < 0}, or if\n     * {@code len < 0}, or if {@code len > b.length - off}\n     * @throws IOException if an I/O error occurs or this stream is already\n     * closed\n     * @throws NullPointerException if {@code b} is null\n     * @throws ZipException if a compression (ZIP) format error occurs\n     */\n    public void write(byte[] b, int off, int len) throws IOException {\n        // Sanity checks\n        ensureOpen();\n        if (b == null) {\n            throw new NullPointerException(\"Null buffer for read\");\n        } else if (off < 0 || len < 0 || len > b.length - off) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return;\n        }\n\n        // Write uncompressed data to the output stream\n        try {\n            for (;;) {\n                int n;\n\n                // Fill the decompressor buffer with output data\n                if (inf.needsInput()) {\n                    int part;\n\n                    if (len < 1) {\n                        break;\n                    }\n\n                    part = (len < 512 ? len : 512);\n                    inf.setInput(b, off, part);\n                    off += part;\n                    len -= part;\n                }\n\n                // Decompress and write blocks of output data\n                do {\n                    n = inf.inflate(buf, 0, buf.length);\n                    if (n > 0) {\n                        out.write(buf, 0, n);\n                    }\n                } while (n > 0);\n\n                // Check the decompressor\n                if (inf.finished()) {\n                    break;\n                }\n                if (inf.needsDictionary()) {\n                    throw new ZipException(\"ZLIB dictionary missing\");\n                }\n            }\n        } catch (DataFormatException ex) {\n            // Improperly formatted compressed (ZIP) data\n            String msg = ex.getMessage();\n            if (msg == null) {\n                msg = \"Invalid ZLIB data format\";\n            }\n            throw new ZipException(msg);\n        }\n    }"}
{"Number":"1227","API Relative Path":"java.util.zip.ZipEntry.java-setCrc(long)","Corresponding Source":"/**\n     * Sets the CRC-32 checksum of the uncompressed entry data.\n     *\n     * @param crc the CRC-32 value\n     *\n     * @throws IllegalArgumentException if the specified CRC-32 value is\n     *         less than 0 or greater than 0xFFFFFFFF\n     * @see #getCrc()\n     */\n    public void setCrc(long crc) {\n        if (crc < 0 || crc > 0xFFFFFFFFL) {\n            throw new IllegalArgumentException(\"invalid entry crc-32\");\n        }\n        this.crc = crc;\n    }"}
{"Number":"1228","API Relative Path":"java.util.zip.ZipEntry.java-setExtra(byte[])","Corresponding Source":"/**\n     * Sets the optional extra field data for the entry.\n     *\n     * <p> Invoking this method may change this entry's last modification\n     * time, last access time and creation time, if the {@code extra} field\n     * data includes the extensible timestamp fields, such as {@code NTFS tag\n     * 0x0001} or {@code Info-ZIP Extended Timestamp}, as specified in\n     * <a href=\"http://www.info-zip.org/doc/appnote-19970311-iz.zip\">Info-ZIP\n     * Application Note 970311<\/a>.\n     *\n     * @param  extra\n     *         The extra field data bytes\n     *\n     * @throws IllegalArgumentException if the length of the specified\n     *         extra field data is greater than 0xFFFF bytes\n     *\n     * @see #getExtra()\n     */\n    public void setExtra(byte[] extra) {\n        setExtra0(extra, false);\n    }"}
{"Number":"1229","API Relative Path":"java.util.zip.ZipEntry.java-setExtra0(byte[]-boolean)","Corresponding Source":"/**\n     * Sets the optional extra field data for the entry.\n     *\n     * @param extra\n     *        the extra field data bytes\n     * @param doZIP64\n     *        if true, set size and csize from ZIP64 fields if present\n     */\n    void setExtra0(byte[] extra, boolean doZIP64) {\n        if (extra != null) {\n            if (extra.length > 0xFFFF) {\n                throw new IllegalArgumentException(\"invalid extra field length\");\n            }\n            // extra fields are in \"HeaderID(2)DataSize(2)Data... format\n            int off = 0;\n            int len = extra.length;\n            while (off + 4 < len) {\n                int tag = get16(extra, off);\n                int sz = get16(extra, off + 2);\n                off += 4;\n                if (off + sz > len)         // invalid data\n                    break;\n                switch (tag) {\n                case EXTID_ZIP64:\n                    if (doZIP64) {\n                        // LOC extra zip64 entry MUST include BOTH original\n                        // and compressed file size fields.\n                        // If invalid zip64 extra fields, simply skip. Even\n                        // it's rare, it's possible the entry size happens to\n                        // be the magic value and it \"accidently\" has some\n                        // bytes in extra match the id.\n                        if (sz >= 16) {\n                            size = get64(extra, off);\n                            csize = get64(extra, off + 8);\n                        }\n                    }\n                    break;\n                case EXTID_NTFS:\n                    int pos = off + 4;               // reserved 4 bytes\n                    if (get16(extra, pos) !=  0x0001 || get16(extra, pos + 2) != 24)\n                        break;\n                    mtime = winTimeToFileTime(get64(extra, pos + 4));\n                    atime = winTimeToFileTime(get64(extra, pos + 12));\n                    ctime = winTimeToFileTime(get64(extra, pos + 20));\n                    break;\n                case EXTID_EXTT:\n                    int flag = Byte.toUnsignedInt(extra[off]);\n                    int sz0 = 1;\n                    // The CEN-header extra field contains the modification\n                    // time only, or no timestamp at all. 'sz' is used to\n                    // flag its presence or absence. But if mtime is present\n                    // in LOC it must be present in CEN as well.\n                    if ((flag & 0x1) != 0 && (sz0 + 4) <= sz) {\n                        mtime = unixTimeToFileTime(get32(extra, off + sz0));\n                        sz0 += 4;\n                    }\n                    if ((flag & 0x2) != 0 && (sz0 + 4) <= sz) {\n                        atime = unixTimeToFileTime(get32(extra, off + sz0));\n                        sz0 += 4;\n                    }\n                    if ((flag & 0x4) != 0 && (sz0 + 4) <= sz) {\n                        ctime = unixTimeToFileTime(get32(extra, off + sz0));\n                        sz0 += 4;\n                    }\n                    break;\n                 default:\n                }\n                off += sz;\n            }\n        }\n        this.extra = extra;\n    }"}
{"Number":"1230","API Relative Path":"java.util.zip.ZipEntry.java-setMethod(int)","Corresponding Source":"/**\n     * Sets the compression method for the entry.\n     *\n     * @param method the compression method, either STORED or DEFLATED\n     *\n     * @throws  IllegalArgumentException if the specified compression\n     *          method is invalid\n     * @see #getMethod()\n     */\n    public void setMethod(int method) {\n        if (method != STORED && method != DEFLATED) {\n            throw new IllegalArgumentException(\"invalid compression method\");\n        }\n        this.method = method;\n    }"}
{"Number":"1231","API Relative Path":"java.util.zip.ZipEntry.java-ZipEntry(ZipEntry)","Corresponding Source":"/**\n     * Creates a new zip entry with fields taken from the specified\n     * zip entry.\n     *\n     * @param  e\n     *         A zip Entry object\n     *\n     * @throws NullPointerException if the entry object is null\n     */\n    public ZipEntry(ZipEntry e) {\n        Objects.requireNonNull(e, \"entry\");\n        name = e.name;\n        time = e.time;\n        mtime = e.mtime;\n        atime = e.atime;\n        ctime = e.ctime;\n        crc = e.crc;\n        size = e.size;\n        csize = e.csize;\n        method = e.method;\n        flag = e.flag;\n        extra = e.extra;\n        comment = e.comment;\n    }"}
{"Number":"1232","API Relative Path":"java.util.zip.ZipFile.java-getEntry(String)","Corresponding Source":"/**\n     * Returns the zip file entry for the specified name, or null\n     * if not found.\n     *\n     * @param name the name of the entry\n     * @return the zip file entry, or null if not found\n     * @throws IllegalStateException if the zip file has been closed\n     */\n    public ZipEntry getEntry(String name) {\n        if (name == null) {\n            throw new NullPointerException(\"name\");\n        }\n        long jzentry = 0;\n        synchronized (this) {\n            ensureOpen();\n            jzentry = getEntry(jzfile, zc.getBytes(name), true);\n            if (jzentry != 0) {\n                ZipEntry ze = getZipEntry(name, jzentry);\n                freeEntry(jzfile, jzentry);\n                return ze;\n            }\n        }\n        return null;\n    }"}
{"Number":"1233","API Relative Path":"java.util.zip.ZipFile.java-getInputStream(ZipEntry)","Corresponding Source":"/**\n     * Returns an input stream for reading the contents of the specified\n     * zip file entry.\n     *\n     * <p> Closing this ZIP file will, in turn, close all input\n     * streams that have been returned by invocations of this method.\n     *\n     * @param entry the zip file entry\n     * @return the input stream for reading the contents of the specified\n     * zip file entry.\n     * @throws ZipException if a ZIP format error has occurred\n     * @throws IOException if an I/O error has occurred\n     * @throws IllegalStateException if the zip file has been closed\n     */\n    public InputStream getInputStream(ZipEntry entry) throws IOException {\n        if (entry == null) {\n            throw new NullPointerException(\"entry\");\n        }\n        long jzentry = 0;\n        ZipFileInputStream in = null;\n        synchronized (this) {\n            ensureOpen();\n            if (!zc.isUTF8() && (entry.flag & EFS) != 0) {\n                jzentry = getEntry(jzfile, zc.getBytesUTF8(entry.name), false);\n            } else {\n                jzentry = getEntry(jzfile, zc.getBytes(entry.name), false);\n            }\n            if (jzentry == 0) {\n                return null;\n            }\n            in = new ZipFileInputStream(jzentry);\n\n            switch (getEntryMethod(jzentry)) {\n            case STORED:\n                synchronized (streams) {\n                    streams.put(in, null);\n                }\n                return in;\n            case DEFLATED:\n                // MORE: Compute good size for inflater stream:\n                long size = getEntrySize(jzentry) + 2; // Inflater likes a bit of slack\n                if (size > 65536) size = 8192;\n                if (size <= 0) size = 4096;\n                Inflater inf = getInflater();\n                InputStream is =\n                    new ZipFileInflaterInputStream(in, inf, (int)size);\n                synchronized (streams) {\n                    streams.put(is, inf);\n                }\n                return is;\n            default:\n                throw new ZipException(\"invalid compression method\");\n            }\n        }\n    }"}
{"Number":"1234","API Relative Path":"java.util.zip.ZipFile.java-ZipFile(File-int-Charset)","Corresponding Source":"/**\n     * Opens a new <code>ZipFile<\/code> to read from the specified\n     * <code>File<\/code> object in the specified mode.  The mode argument\n     * must be either <tt>OPEN_READ<\/tt> or <tt>OPEN_READ | OPEN_DELETE<\/tt>.\n     *\n     * <p>First, if there is a security manager, its <code>checkRead<\/code>\n     * method is called with the <code>name<\/code> argument as its argument to\n     * ensure the read is allowed.\n     *\n     * @param file the ZIP file to be opened for reading\n     * @param mode the mode in which the file is to be opened\n     * @param charset\n     *        the {@linkplain java.nio.charset.Charset charset} to\n     *        be used to decode the ZIP entry name and comment that are not\n     *        encoded by using UTF-8 encoding (indicated by entry's general\n     *        purpose flag).\n     *\n     * @throws ZipException if a ZIP format error has occurred\n     * @throws IOException if an I/O error has occurred\n     *\n     * @throws SecurityException\n     *         if a security manager exists and its <code>checkRead<\/code>\n     *         method doesn't allow read access to the file,or its\n     *         <code>checkDelete<\/code> method doesn't allow deleting the\n     *         file when the <tt>OPEN_DELETE<\/tt> flag is set\n     *\n     * @throws IllegalArgumentException if the <tt>mode<\/tt> argument is invalid\n     *\n     * @see SecurityManager#checkRead(java.lang.String)\n     *\n     * @since 1.7\n     */\n    public ZipFile(File file, int mode, Charset charset) throws IOException\n    {\n        if (((mode & OPEN_READ) == 0) ||\n            ((mode & ~(OPEN_READ | OPEN_DELETE)) != 0)) {\n            throw new IllegalArgumentException(\"Illegal mode: 0x\"+\n                                               Integer.toHexString(mode));\n        }\n        String name = file.getPath();\n        SecurityManager sm = System.getSecurityManager();\n        if (sm != null) {\n            sm.checkRead(name);\n            if ((mode & OPEN_DELETE) != 0) {\n                sm.checkDelete(name);\n            }\n        }\n        if (charset == null)\n            throw new NullPointerException(\"charset is null\");\n        this.zc = ZipCoder.get(charset);\n        long t0 = System.nanoTime();\n        jzfile = open(name, mode, file.lastModified(), usemmap);\n        sun.misc.PerfCounter.getZipFileOpenTime().addElapsedTimeFrom(t0);\n        sun.misc.PerfCounter.getZipFileCount().increment();\n        this.name = name;\n        this.total = getTotal(jzfile);\n        this.locsig = startsWithLOC(jzfile);\n    }"}
{"Number":"1235","API Relative Path":"java.util.zip.ZipFile.java-ZipFile(File-int-Charset)","Corresponding Source":"/**\n     * Opens a new <code>ZipFile<\/code> to read from the specified\n     * <code>File<\/code> object in the specified mode.  The mode argument\n     * must be either <tt>OPEN_READ<\/tt> or <tt>OPEN_READ | OPEN_DELETE<\/tt>.\n     *\n     * <p>First, if there is a security manager, its <code>checkRead<\/code>\n     * method is called with the <code>name<\/code> argument as its argument to\n     * ensure the read is allowed.\n     *\n     * @param file the ZIP file to be opened for reading\n     * @param mode the mode in which the file is to be opened\n     * @param charset\n     *        the {@linkplain java.nio.charset.Charset charset} to\n     *        be used to decode the ZIP entry name and comment that are not\n     *        encoded by using UTF-8 encoding (indicated by entry's general\n     *        purpose flag).\n     *\n     * @throws ZipException if a ZIP format error has occurred\n     * @throws IOException if an I/O error has occurred\n     *\n     * @throws SecurityException\n     *         if a security manager exists and its <code>checkRead<\/code>\n     *         method doesn't allow read access to the file,or its\n     *         <code>checkDelete<\/code> method doesn't allow deleting the\n     *         file when the <tt>OPEN_DELETE<\/tt> flag is set\n     *\n     * @throws IllegalArgumentException if the <tt>mode<\/tt> argument is invalid\n     *\n     * @see SecurityManager#checkRead(java.lang.String)\n     *\n     * @since 1.7\n     */\n    public ZipFile(File file, int mode, Charset charset) throws IOException\n    {\n        if (((mode & OPEN_READ) == 0) ||\n            ((mode & ~(OPEN_READ | OPEN_DELETE)) != 0)) {\n            throw new IllegalArgumentException(\"Illegal mode: 0x\"+\n                                               Integer.toHexString(mode));\n        }\n        String name = file.getPath();\n        SecurityManager sm = System.getSecurityManager();\n        if (sm != null) {\n            sm.checkRead(name);\n            if ((mode & OPEN_DELETE) != 0) {\n                sm.checkDelete(name);\n            }\n        }\n        if (charset == null)\n            throw new NullPointerException(\"charset is null\");\n        this.zc = ZipCoder.get(charset);\n        long t0 = System.nanoTime();\n        jzfile = open(name, mode, file.lastModified(), usemmap);\n        sun.misc.PerfCounter.getZipFileOpenTime().addElapsedTimeFrom(t0);\n        sun.misc.PerfCounter.getZipFileCount().increment();\n        this.name = name;\n        this.total = getTotal(jzfile);\n        this.locsig = startsWithLOC(jzfile);\n    }"}
{"Number":"1236","API Relative Path":"java.util.zip.ZipFile.java-ZipFile(String)","Corresponding Source":"/**\n     * Opens a zip file for reading.\n     *\n     * <p>First, if there is a security manager, its <code>checkRead<\/code>\n     * method is called with the <code>name<\/code> argument as its argument\n     * to ensure the read is allowed.\n     *\n     * <p>The UTF-8 {@link java.nio.charset.Charset charset} is used to\n     * decode the entry names and comments.\n     *\n     * @param name the name of the zip file\n     * @throws ZipException if a ZIP format error has occurred\n     * @throws IOException if an I/O error has occurred\n     * @throws SecurityException if a security manager exists and its\n     *         <code>checkRead<\/code> method doesn't allow read access to the file.\n     *\n     * @see SecurityManager#checkRead(java.lang.String)\n     */\n    public ZipFile(String name) throws IOException {\n        this(new File(name), OPEN_READ);\n    }"}
{"Number":"1237","API Relative Path":"java.util.zip.ZipFile.java-ZipFile(String-Charset)","Corresponding Source":"/**\n     * Opens a zip file for reading.\n     *\n     * <p>First, if there is a security manager, its <code>checkRead<\/code>\n     * method is called with the <code>name<\/code> argument as its argument\n     * to ensure the read is allowed.\n     *\n     * @param name the name of the zip file\n     * @param charset\n     *        the {@linkplain java.nio.charset.Charset charset} to\n     *        be used to decode the ZIP entry name and comment that are not\n     *        encoded by using UTF-8 encoding (indicated by entry's general\n     *        purpose flag).\n     *\n     * @throws ZipException if a ZIP format error has occurred\n     * @throws IOException if an I/O error has occurred\n     * @throws SecurityException\n     *         if a security manager exists and its <code>checkRead<\/code>\n     *         method doesn't allow read access to the file\n     *\n     * @see SecurityManager#checkRead(java.lang.String)\n     *\n     * @since 1.7\n     */\n    public ZipFile(String name, Charset charset) throws IOException\n    {\n        this(new File(name), OPEN_READ, charset);\n    }"}
{"Number":"1238","API Relative Path":"java.util.zip.ZipInputStream.java-createZipEntry(String)","Corresponding Source":"/**\n     * Creates a new <code>ZipEntry<\/code> object for the specified\n     * entry name.\n     *\n     * @param name the ZIP file entry name\n     * @return the ZipEntry just created\n     */\n    protected ZipEntry createZipEntry(String name) {\n        return new ZipEntry(name);\n    }"}
{"Number":"1239","API Relative Path":"java.util.zip.ZipInputStream.java-read(byte[]-int-int)","Corresponding Source":"/**\n     * Reads from the current ZIP entry into an array of bytes.\n     * If <code>len<\/code> is not zero, the method\n     * blocks until some input is available; otherwise, no\n     * bytes are read and <code>0<\/code> is returned.\n     * @param b the buffer into which the data is read\n     * @param off the start offset in the destination array <code>b<\/code>\n     * @param len the maximum number of bytes read\n     * @return the actual number of bytes read, or -1 if the end of the\n     *         entry is reached\n     * @exception  NullPointerException if <code>b<\/code> is <code>null<\/code>.\n     * @exception  IndexOutOfBoundsException if <code>off<\/code> is negative,\n     * <code>len<\/code> is negative, or <code>len<\/code> is greater than\n     * <code>b.length - off<\/code>\n     * @exception ZipException if a ZIP file error has occurred\n     * @exception IOException if an I/O error has occurred\n     */\n    public int read(byte[] b, int off, int len) throws IOException {\n        ensureOpen();\n        if (off < 0 || len < 0 || off > b.length - len) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return 0;\n        }\n\n        if (entry == null) {\n            return -1;\n        }\n        switch (entry.method) {\n        case DEFLATED:\n            len = super.read(b, off, len);\n            if (len == -1) {\n                readEnd(entry);\n                entryEOF = true;\n                entry = null;\n            } else {\n                crc.update(b, off, len);\n            }\n            return len;\n        case STORED:\n            if (remaining <= 0) {\n                entryEOF = true;\n                entry = null;\n                return -1;\n            }\n            if (len > remaining) {\n                len = (int)remaining;\n            }\n            len = in.read(b, off, len);\n            if (len == -1) {\n                throw new ZipException(\"unexpected EOF\");\n            }\n            crc.update(b, off, len);\n            remaining -= len;\n            if (remaining == 0 && entry.crc != crc.getValue()) {\n                throw new ZipException(\n                    \"invalid entry CRC (expected 0x\" + Long.toHexString(entry.crc) +\n                    \" but got 0x\" + Long.toHexString(crc.getValue()) + \")\");\n            }\n            return len;\n        default:\n            throw new ZipException(\"invalid compression method\");\n        }\n    }"}
{"Number":"1240","API Relative Path":"java.util.zip.ZipInputStream.java-read(byte[]-int-int)","Corresponding Source":"/**\n     * Reads from the current ZIP entry into an array of bytes.\n     * If <code>len<\/code> is not zero, the method\n     * blocks until some input is available; otherwise, no\n     * bytes are read and <code>0<\/code> is returned.\n     * @param b the buffer into which the data is read\n     * @param off the start offset in the destination array <code>b<\/code>\n     * @param len the maximum number of bytes read\n     * @return the actual number of bytes read, or -1 if the end of the\n     *         entry is reached\n     * @exception  NullPointerException if <code>b<\/code> is <code>null<\/code>.\n     * @exception  IndexOutOfBoundsException if <code>off<\/code> is negative,\n     * <code>len<\/code> is negative, or <code>len<\/code> is greater than\n     * <code>b.length - off<\/code>\n     * @exception ZipException if a ZIP file error has occurred\n     * @exception IOException if an I/O error has occurred\n     */\n    public int read(byte[] b, int off, int len) throws IOException {\n        ensureOpen();\n        if (off < 0 || len < 0 || off > b.length - len) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return 0;\n        }\n\n        if (entry == null) {\n            return -1;\n        }\n        switch (entry.method) {\n        case DEFLATED:\n            len = super.read(b, off, len);\n            if (len == -1) {\n                readEnd(entry);\n                entryEOF = true;\n                entry = null;\n            } else {\n                crc.update(b, off, len);\n            }\n            return len;\n        case STORED:\n            if (remaining <= 0) {\n                entryEOF = true;\n                entry = null;\n                return -1;\n            }\n            if (len > remaining) {\n                len = (int)remaining;\n            }\n            len = in.read(b, off, len);\n            if (len == -1) {\n                throw new ZipException(\"unexpected EOF\");\n            }\n            crc.update(b, off, len);\n            remaining -= len;\n            if (remaining == 0 && entry.crc != crc.getValue()) {\n                throw new ZipException(\n                    \"invalid entry CRC (expected 0x\" + Long.toHexString(entry.crc) +\n                    \" but got 0x\" + Long.toHexString(crc.getValue()) + \")\");\n            }\n            return len;\n        default:\n            throw new ZipException(\"invalid compression method\");\n        }\n    }"}
{"Number":"1241","API Relative Path":"java.util.zip.ZipInputStream.java-ZipInputStream(InputStream-Charset)","Corresponding Source":"/**\n     * Creates a new ZIP input stream.\n     *\n     * @param in the actual input stream\n     *\n     * @param charset\n     *        The {@linkplain java.nio.charset.Charset charset} to be\n     *        used to decode the ZIP entry name (ignored if the\n     *        <a href=\"package-summary.html#lang_encoding\"> language\n     *        encoding bit<\/a> of the ZIP entry's general purpose bit\n     *        flag is set).\n     *\n     * @since 1.7\n     */\n    public ZipInputStream(InputStream in, Charset charset) {\n        super(new PushbackInputStream(in, 512), new Inflater(true), 512);\n        usesDefaultInflater = true;\n        if(in == null) {\n            throw new NullPointerException(\"in is null\");\n        }\n        if (charset == null)\n            throw new NullPointerException(\"charset is null\");\n        this.zc = ZipCoder.get(charset);\n    }"}
{"Number":"1242","API Relative Path":"java.util.zip.ZipInputStream.java-ZipInputStream(InputStream-Charset)","Corresponding Source":"/**\n     * Creates a new ZIP input stream.\n     *\n     * @param in the actual input stream\n     *\n     * @param charset\n     *        The {@linkplain java.nio.charset.Charset charset} to be\n     *        used to decode the ZIP entry name (ignored if the\n     *        <a href=\"package-summary.html#lang_encoding\"> language\n     *        encoding bit<\/a> of the ZIP entry's general purpose bit\n     *        flag is set).\n     *\n     * @since 1.7\n     */\n    public ZipInputStream(InputStream in, Charset charset) {\n        super(new PushbackInputStream(in, 512), new Inflater(true), 512);\n        usesDefaultInflater = true;\n        if(in == null) {\n            throw new NullPointerException(\"in is null\");\n        }\n        if (charset == null)\n            throw new NullPointerException(\"charset is null\");\n        this.zc = ZipCoder.get(charset);\n    }"}
{"Number":"1243","API Relative Path":"java.util.zip.ZipOutputStream.java-setComment(String)","Corresponding Source":"/**\n     * Sets the ZIP file comment.\n     * @param comment the comment string\n     * @exception IllegalArgumentException if the length of the specified\n     *            ZIP file comment is greater than 0xFFFF bytes\n     */\n    public void setComment(String comment) {\n        if (comment != null) {\n            this.comment = zc.getBytes(comment);\n            if (this.comment.length > 0xffff)\n                throw new IllegalArgumentException(\"ZIP file comment too long.\");\n        }\n    }"}
{"Number":"1244","API Relative Path":"java.util.zip.ZipOutputStream.java-setComment(String)","Corresponding Source":"/**\n     * Sets the ZIP file comment.\n     * @param comment the comment string\n     * @exception IllegalArgumentException if the length of the specified\n     *            ZIP file comment is greater than 0xFFFF bytes\n     */\n    public void setComment(String comment) {\n        if (comment != null) {\n            this.comment = zc.getBytes(comment);\n            if (this.comment.length > 0xffff)\n                throw new IllegalArgumentException(\"ZIP file comment too long.\");\n        }\n    }"}
{"Number":"1245","API Relative Path":"java.util.zip.ZipOutputStream.java-setMethod(int)","Corresponding Source":"/**\n     * Sets the default compression method for subsequent entries. This\n     * default will be used whenever the compression method is not specified\n     * for an individual ZIP file entry, and is initially set to DEFLATED.\n     * @param method the default compression method\n     * @exception IllegalArgumentException if the specified compression method\n     *            is invalid\n     */\n    public void setMethod(int method) {\n        if (method != DEFLATED && method != STORED) {\n            throw new IllegalArgumentException(\"invalid compression method\");\n        }\n        this.method = method;\n    }"}
{"Number":"1246","API Relative Path":"java.util.zip.ZipOutputStream.java-write(byte[]-int-int)","Corresponding Source":"/**\n     * Writes an array of bytes to the current ZIP entry data. This method\n     * will block until all the bytes are written.\n     * @param b the data to be written\n     * @param off the start offset in the data\n     * @param len the number of bytes that are written\n     * @exception ZipException if a ZIP file error has occurred\n     * @exception IOException if an I/O error has occurred\n     */\n    public synchronized void write(byte[] b, int off, int len)\n        throws IOException\n    {\n        ensureOpen();\n        if (off < 0 || len < 0 || off > b.length - len) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return;\n        }\n\n        if (current == null) {\n            throw new ZipException(\"no current ZIP entry\");\n        }\n        ZipEntry entry = current.entry;\n        switch (entry.method) {\n        case DEFLATED:\n            super.write(b, off, len);\n            break;\n        case STORED:\n            written += len;\n            if (written - locoff > entry.size) {\n                throw new ZipException(\n                    \"attempt to write past end of STORED entry\");\n            }\n            out.write(b, off, len);\n            break;\n        default:\n            throw new ZipException(\"invalid compression method\");\n        }\n        crc.update(b, off, len);\n    }"}
{"Number":"1247","API Relative Path":"java.util.zip.ZipOutputStream.java-write(byte[]-int-int)","Corresponding Source":"/**\n     * Writes an array of bytes to the current ZIP entry data. This method\n     * will block until all the bytes are written.\n     * @param b the data to be written\n     * @param off the start offset in the data\n     * @param len the number of bytes that are written\n     * @exception ZipException if a ZIP file error has occurred\n     * @exception IOException if an I/O error has occurred\n     */\n    public synchronized void write(byte[] b, int off, int len)\n        throws IOException\n    {\n        ensureOpen();\n        if (off < 0 || len < 0 || off > b.length - len) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return;\n        }\n\n        if (current == null) {\n            throw new ZipException(\"no current ZIP entry\");\n        }\n        ZipEntry entry = current.entry;\n        switch (entry.method) {\n        case DEFLATED:\n            super.write(b, off, len);\n            break;\n        case STORED:\n            written += len;\n            if (written - locoff > entry.size) {\n                throw new ZipException(\n                    \"attempt to write past end of STORED entry\");\n            }\n            out.write(b, off, len);\n            break;\n        default:\n            throw new ZipException(\"invalid compression method\");\n        }\n        crc.update(b, off, len);\n    }"}
{"Number":"1248","API Relative Path":"java.util.zip.ZipOutputStream.java-write(byte[]-int-int)","Corresponding Source":"/**\n     * Writes an array of bytes to the current ZIP entry data. This method\n     * will block until all the bytes are written.\n     * @param b the data to be written\n     * @param off the start offset in the data\n     * @param len the number of bytes that are written\n     * @exception ZipException if a ZIP file error has occurred\n     * @exception IOException if an I/O error has occurred\n     */\n    public synchronized void write(byte[] b, int off, int len)\n        throws IOException\n    {\n        ensureOpen();\n        if (off < 0 || len < 0 || off > b.length - len) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return;\n        }\n\n        if (current == null) {\n            throw new ZipException(\"no current ZIP entry\");\n        }\n        ZipEntry entry = current.entry;\n        switch (entry.method) {\n        case DEFLATED:\n            super.write(b, off, len);\n            break;\n        case STORED:\n            written += len;\n            if (written - locoff > entry.size) {\n                throw new ZipException(\n                    \"attempt to write past end of STORED entry\");\n            }\n            out.write(b, off, len);\n            break;\n        default:\n            throw new ZipException(\"invalid compression method\");\n        }\n        crc.update(b, off, len);\n    }"}
{"Number":"1249","API Relative Path":"java.util.zip.ZipOutputStream.java-ZipOutputStream(OutputStream-Charset)","Corresponding Source":"/**\n     * Creates a new ZIP output stream.\n     *\n     * @param out the actual output stream\n     *\n     * @param charset the {@linkplain java.nio.charset.Charset charset}\n     *                to be used to encode the entry names and comments\n     *\n     * @since 1.7\n     */\n    public ZipOutputStream(OutputStream out, Charset charset) {\n        super(out, new Deflater(Deflater.DEFAULT_COMPRESSION, true));\n        if (charset == null)\n            throw new NullPointerException(\"charset is null\");\n        this.zc = ZipCoder.get(charset);\n        usesDefaultDeflater = true;\n    }"}
{"Number":"1250","API Relative Path":"javax.imageio.IIOException.java-IIOException(String-Throwable)","Corresponding Source":"/**\n     * Constructs an <code>IIOException<\/code> with a given message\n     * <code>String<\/code> and a <code>Throwable<\/code> that was its\n     * underlying cause.\n     *\n     * @param message the error message.\n     * @param cause the <code>Throwable<\/code> (<code>Error<\/code> or\n     * <code>Exception<\/code>) that caused this exception to occur.\n     *\n     * @see #getCause\n     * @see #getMessage\n     */\n    public IIOException(String message, Throwable cause) {\n        super(message);\n        initCause(cause);\n    }"}
{"Number":"1251","API Relative Path":"javax.imageio.IIOException.java-IIOException(String-Throwable)","Corresponding Source":"/**\n     * Constructs an <code>IIOException<\/code> with a given message\n     * <code>String<\/code> and a <code>Throwable<\/code> that was its\n     * underlying cause.\n     *\n     * @param message the error message.\n     * @param cause the <code>Throwable<\/code> (<code>Error<\/code> or\n     * <code>Exception<\/code>) that caused this exception to occur.\n     *\n     * @see #getCause\n     * @see #getMessage\n     */\n    public IIOException(String message, Throwable cause) {\n        super(message);\n        initCause(cause);\n    }"}
{"Number":"1252","API Relative Path":"javax.imageio.IIOParam.java-setSourceBands(int[])","Corresponding Source":"/**\n     * Sets the indices of the source bands to be used.  Duplicate\n     * indices are not allowed.\n     *\n     * <p> A <code>null<\/code> value indicates that all source bands\n     * will be used.\n     *\n     * <p> At the time of reading, an\n     * <code>IllegalArgumentException<\/code> will be thrown by the\n     * reader or writer if a value larger than the largest available\n     * source band index has been specified or if the number of source\n     * bands and destination bands to be used differ.  The\n     * <code>ImageReader.checkReadParamBandSettings<\/code> method may\n     * be used to automate this test.\n     *\n     * <p> Semantically, a copy is made of the array; changes to the\n     * array contents subsequent to this call have no effect on\n     * this <code>IIOParam<\/code>.\n     *\n     * @param sourceBands an array of integer band indices to be\n     * used.\n     *\n     * @exception IllegalArgumentException if <code>sourceBands<\/code>\n     * contains a negative or duplicate value.\n     *\n     * @see #getSourceBands\n     * @see ImageReadParam#setDestinationBands\n     * @see ImageReader#checkReadParamBandSettings\n     */\n    public void setSourceBands(int[] sourceBands) {\n        if (sourceBands == null) {\n            this.sourceBands = null;\n        } else {\n            int numBands = sourceBands.length;\n            for (int i = 0; i < numBands; i++) {\n                int band = sourceBands[i];\n                if (band < 0) {\n                    throw new IllegalArgumentException(\"Band value < 0!\");\n                }\n                for (int j = i + 1; j < numBands; j++) {\n                    if (band == sourceBands[j]) {\n                        throw new IllegalArgumentException(\"Duplicate band value!\");\n                    }\n                }\n\n            }\n            this.sourceBands = (int[])(sourceBands.clone());\n        }\n    }"}
{"Number":"1253","API Relative Path":"javax.imageio.IIOParam.java-setSourceBands(int[])","Corresponding Source":"/**\n     * Sets the indices of the source bands to be used.  Duplicate\n     * indices are not allowed.\n     *\n     * <p> A <code>null<\/code> value indicates that all source bands\n     * will be used.\n     *\n     * <p> At the time of reading, an\n     * <code>IllegalArgumentException<\/code> will be thrown by the\n     * reader or writer if a value larger than the largest available\n     * source band index has been specified or if the number of source\n     * bands and destination bands to be used differ.  The\n     * <code>ImageReader.checkReadParamBandSettings<\/code> method may\n     * be used to automate this test.\n     *\n     * <p> Semantically, a copy is made of the array; changes to the\n     * array contents subsequent to this call have no effect on\n     * this <code>IIOParam<\/code>.\n     *\n     * @param sourceBands an array of integer band indices to be\n     * used.\n     *\n     * @exception IllegalArgumentException if <code>sourceBands<\/code>\n     * contains a negative or duplicate value.\n     *\n     * @see #getSourceBands\n     * @see ImageReadParam#setDestinationBands\n     * @see ImageReader#checkReadParamBandSettings\n     */\n    public void setSourceBands(int[] sourceBands) {\n        if (sourceBands == null) {\n            this.sourceBands = null;\n        } else {\n            int numBands = sourceBands.length;\n            for (int i = 0; i < numBands; i++) {\n                int band = sourceBands[i];\n                if (band < 0) {\n                    throw new IllegalArgumentException(\"Band value < 0!\");\n                }\n                for (int j = i + 1; j < numBands; j++) {\n                    if (band == sourceBands[j]) {\n                        throw new IllegalArgumentException(\"Duplicate band value!\");\n                    }\n                }\n\n            }\n            this.sourceBands = (int[])(sourceBands.clone());\n        }\n    }"}
{"Number":"1254","API Relative Path":"javax.imageio.IIOParam.java-setSourceRegion(Rectangle)","Corresponding Source":"/**\n     * Sets the source region of interest.  The region of interest is\n     * described as a rectangle, with the upper-left corner of the\n     * source image as pixel (0, 0) and increasing values down and to\n     * the right.  The actual number of pixels used will depend on\n     * the subsampling factors set by <code>setSourceSubsampling<\/code>.\n     * If subsampling has been set such that this number is zero,\n     * an <code>IllegalStateException<\/code> will be thrown.\n     *\n     * <p> The source region of interest specified by this method will\n     * be clipped as needed to fit within the source bounds, as well\n     * as the destination offsets, width, and height at the time of\n     * actual I/O.\n     *\n     * <p> A value of <code>null<\/code> for <code>sourceRegion<\/code>\n     * will remove any region specification, causing the entire image\n     * to be used.\n     *\n     * @param sourceRegion a <code>Rectangle<\/code> specifying the\n     * source region of interest, or <code>null<\/code>.\n     *\n     * @exception IllegalArgumentException if\n     * <code>sourceRegion<\/code> is non-<code>null<\/code> and either\n     * <code>sourceRegion.x<\/code> or <code>sourceRegion.y<\/code> is\n     * negative.\n     * @exception IllegalArgumentException if\n     * <code>sourceRegion<\/code> is non-<code>null<\/code> and either\n     * <code>sourceRegion.width<\/code> or\n     * <code>sourceRegion.height<\/code> is negative or 0.\n     * @exception IllegalStateException if subsampling is such that\n     * this region will have a subsampled width or height of zero.\n     *\n     * @see #getSourceRegion\n     * @see #setSourceSubsampling\n     * @see ImageReadParam#setDestinationOffset\n     * @see ImageReadParam#getDestinationOffset\n     */\n    public void setSourceRegion(Rectangle sourceRegion) {\n        if (sourceRegion == null) {\n            this.sourceRegion = null;\n            return;\n        }\n\n        if (sourceRegion.x < 0) {\n            throw new IllegalArgumentException(\"sourceRegion.x < 0!\");\n        }\n        if (sourceRegion.y < 0){\n            throw new IllegalArgumentException(\"sourceRegion.y < 0!\");\n        }\n        if (sourceRegion.width <= 0) {\n            throw new IllegalArgumentException(\"sourceRegion.width <= 0!\");\n        }\n        if (sourceRegion.height <= 0) {\n            throw new IllegalArgumentException(\"sourceRegion.height <= 0!\");\n        }\n\n        // Throw an IllegalStateException if region falls between subsamples\n        if (sourceRegion.width <= subsamplingXOffset) {\n            throw new IllegalStateException\n                (\"sourceRegion.width <= subsamplingXOffset!\");\n        }\n        if (sourceRegion.height <= subsamplingYOffset) {\n            throw new IllegalStateException\n                (\"sourceRegion.height <= subsamplingYOffset!\");\n        }\n\n        this.sourceRegion = (Rectangle)sourceRegion.clone();\n    }"}
{"Number":"1255","API Relative Path":"javax.imageio.IIOParam.java-setSourceRegion(Rectangle)","Corresponding Source":"/**\n     * Sets the source region of interest.  The region of interest is\n     * described as a rectangle, with the upper-left corner of the\n     * source image as pixel (0, 0) and increasing values down and to\n     * the right.  The actual number of pixels used will depend on\n     * the subsampling factors set by <code>setSourceSubsampling<\/code>.\n     * If subsampling has been set such that this number is zero,\n     * an <code>IllegalStateException<\/code> will be thrown.\n     *\n     * <p> The source region of interest specified by this method will\n     * be clipped as needed to fit within the source bounds, as well\n     * as the destination offsets, width, and height at the time of\n     * actual I/O.\n     *\n     * <p> A value of <code>null<\/code> for <code>sourceRegion<\/code>\n     * will remove any region specification, causing the entire image\n     * to be used.\n     *\n     * @param sourceRegion a <code>Rectangle<\/code> specifying the\n     * source region of interest, or <code>null<\/code>.\n     *\n     * @exception IllegalArgumentException if\n     * <code>sourceRegion<\/code> is non-<code>null<\/code> and either\n     * <code>sourceRegion.x<\/code> or <code>sourceRegion.y<\/code> is\n     * negative.\n     * @exception IllegalArgumentException if\n     * <code>sourceRegion<\/code> is non-<code>null<\/code> and either\n     * <code>sourceRegion.width<\/code> or\n     * <code>sourceRegion.height<\/code> is negative or 0.\n     * @exception IllegalStateException if subsampling is such that\n     * this region will have a subsampled width or height of zero.\n     *\n     * @see #getSourceRegion\n     * @see #setSourceSubsampling\n     * @see ImageReadParam#setDestinationOffset\n     * @see ImageReadParam#getDestinationOffset\n     */\n    public void setSourceRegion(Rectangle sourceRegion) {\n        if (sourceRegion == null) {\n            this.sourceRegion = null;\n            return;\n        }\n\n        if (sourceRegion.x < 0) {\n            throw new IllegalArgumentException(\"sourceRegion.x < 0!\");\n        }\n        if (sourceRegion.y < 0){\n            throw new IllegalArgumentException(\"sourceRegion.y < 0!\");\n        }\n        if (sourceRegion.width <= 0) {\n            throw new IllegalArgumentException(\"sourceRegion.width <= 0!\");\n        }\n        if (sourceRegion.height <= 0) {\n            throw new IllegalArgumentException(\"sourceRegion.height <= 0!\");\n        }\n\n        // Throw an IllegalStateException if region falls between subsamples\n        if (sourceRegion.width <= subsamplingXOffset) {\n            throw new IllegalStateException\n                (\"sourceRegion.width <= subsamplingXOffset!\");\n        }\n        if (sourceRegion.height <= subsamplingYOffset) {\n            throw new IllegalStateException\n                (\"sourceRegion.height <= subsamplingYOffset!\");\n        }\n\n        this.sourceRegion = (Rectangle)sourceRegion.clone();\n    }"}
{"Number":"1256","API Relative Path":"javax.imageio.IIOParam.java-setSourceRegion(Rectangle)","Corresponding Source":"/**\n     * Sets the source region of interest.  The region of interest is\n     * described as a rectangle, with the upper-left corner of the\n     * source image as pixel (0, 0) and increasing values down and to\n     * the right.  The actual number of pixels used will depend on\n     * the subsampling factors set by <code>setSourceSubsampling<\/code>.\n     * If subsampling has been set such that this number is zero,\n     * an <code>IllegalStateException<\/code> will be thrown.\n     *\n     * <p> The source region of interest specified by this method will\n     * be clipped as needed to fit within the source bounds, as well\n     * as the destination offsets, width, and height at the time of\n     * actual I/O.\n     *\n     * <p> A value of <code>null<\/code> for <code>sourceRegion<\/code>\n     * will remove any region specification, causing the entire image\n     * to be used.\n     *\n     * @param sourceRegion a <code>Rectangle<\/code> specifying the\n     * source region of interest, or <code>null<\/code>.\n     *\n     * @exception IllegalArgumentException if\n     * <code>sourceRegion<\/code> is non-<code>null<\/code> and either\n     * <code>sourceRegion.x<\/code> or <code>sourceRegion.y<\/code> is\n     * negative.\n     * @exception IllegalArgumentException if\n     * <code>sourceRegion<\/code> is non-<code>null<\/code> and either\n     * <code>sourceRegion.width<\/code> or\n     * <code>sourceRegion.height<\/code> is negative or 0.\n     * @exception IllegalStateException if subsampling is such that\n     * this region will have a subsampled width or height of zero.\n     *\n     * @see #getSourceRegion\n     * @see #setSourceSubsampling\n     * @see ImageReadParam#setDestinationOffset\n     * @see ImageReadParam#getDestinationOffset\n     */\n    public void setSourceRegion(Rectangle sourceRegion) {\n        if (sourceRegion == null) {\n            this.sourceRegion = null;\n            return;\n        }\n\n        if (sourceRegion.x < 0) {\n            throw new IllegalArgumentException(\"sourceRegion.x < 0!\");\n        }\n        if (sourceRegion.y < 0){\n            throw new IllegalArgumentException(\"sourceRegion.y < 0!\");\n        }\n        if (sourceRegion.width <= 0) {\n            throw new IllegalArgumentException(\"sourceRegion.width <= 0!\");\n        }\n        if (sourceRegion.height <= 0) {\n            throw new IllegalArgumentException(\"sourceRegion.height <= 0!\");\n        }\n\n        // Throw an IllegalStateException if region falls between subsamples\n        if (sourceRegion.width <= subsamplingXOffset) {\n            throw new IllegalStateException\n                (\"sourceRegion.width <= subsamplingXOffset!\");\n        }\n        if (sourceRegion.height <= subsamplingYOffset) {\n            throw new IllegalStateException\n                (\"sourceRegion.height <= subsamplingYOffset!\");\n        }\n\n        this.sourceRegion = (Rectangle)sourceRegion.clone();\n    }"}
{"Number":"1257","API Relative Path":"javax.imageio.IIOParam.java-setSourceRegion(Rectangle)","Corresponding Source":"/**\n     * Sets the source region of interest.  The region of interest is\n     * described as a rectangle, with the upper-left corner of the\n     * source image as pixel (0, 0) and increasing values down and to\n     * the right.  The actual number of pixels used will depend on\n     * the subsampling factors set by <code>setSourceSubsampling<\/code>.\n     * If subsampling has been set such that this number is zero,\n     * an <code>IllegalStateException<\/code> will be thrown.\n     *\n     * <p> The source region of interest specified by this method will\n     * be clipped as needed to fit within the source bounds, as well\n     * as the destination offsets, width, and height at the time of\n     * actual I/O.\n     *\n     * <p> A value of <code>null<\/code> for <code>sourceRegion<\/code>\n     * will remove any region specification, causing the entire image\n     * to be used.\n     *\n     * @param sourceRegion a <code>Rectangle<\/code> specifying the\n     * source region of interest, or <code>null<\/code>.\n     *\n     * @exception IllegalArgumentException if\n     * <code>sourceRegion<\/code> is non-<code>null<\/code> and either\n     * <code>sourceRegion.x<\/code> or <code>sourceRegion.y<\/code> is\n     * negative.\n     * @exception IllegalArgumentException if\n     * <code>sourceRegion<\/code> is non-<code>null<\/code> and either\n     * <code>sourceRegion.width<\/code> or\n     * <code>sourceRegion.height<\/code> is negative or 0.\n     * @exception IllegalStateException if subsampling is such that\n     * this region will have a subsampled width or height of zero.\n     *\n     * @see #getSourceRegion\n     * @see #setSourceSubsampling\n     * @see ImageReadParam#setDestinationOffset\n     * @see ImageReadParam#getDestinationOffset\n     */\n    public void setSourceRegion(Rectangle sourceRegion) {\n        if (sourceRegion == null) {\n            this.sourceRegion = null;\n            return;\n        }\n\n        if (sourceRegion.x < 0) {\n            throw new IllegalArgumentException(\"sourceRegion.x < 0!\");\n        }\n        if (sourceRegion.y < 0){\n            throw new IllegalArgumentException(\"sourceRegion.y < 0!\");\n        }\n        if (sourceRegion.width <= 0) {\n            throw new IllegalArgumentException(\"sourceRegion.width <= 0!\");\n        }\n        if (sourceRegion.height <= 0) {\n            throw new IllegalArgumentException(\"sourceRegion.height <= 0!\");\n        }\n\n        // Throw an IllegalStateException if region falls between subsamples\n        if (sourceRegion.width <= subsamplingXOffset) {\n            throw new IllegalStateException\n                (\"sourceRegion.width <= subsamplingXOffset!\");\n        }\n        if (sourceRegion.height <= subsamplingYOffset) {\n            throw new IllegalStateException\n                (\"sourceRegion.height <= subsamplingYOffset!\");\n        }\n\n        this.sourceRegion = (Rectangle)sourceRegion.clone();\n    }"}
{"Number":"1258","API Relative Path":"javax.imageio.IIOParam.java-setSourceRegion(Rectangle)","Corresponding Source":"/**\n     * Sets the source region of interest.  The region of interest is\n     * described as a rectangle, with the upper-left corner of the\n     * source image as pixel (0, 0) and increasing values down and to\n     * the right.  The actual number of pixels used will depend on\n     * the subsampling factors set by <code>setSourceSubsampling<\/code>.\n     * If subsampling has been set such that this number is zero,\n     * an <code>IllegalStateException<\/code> will be thrown.\n     *\n     * <p> The source region of interest specified by this method will\n     * be clipped as needed to fit within the source bounds, as well\n     * as the destination offsets, width, and height at the time of\n     * actual I/O.\n     *\n     * <p> A value of <code>null<\/code> for <code>sourceRegion<\/code>\n     * will remove any region specification, causing the entire image\n     * to be used.\n     *\n     * @param sourceRegion a <code>Rectangle<\/code> specifying the\n     * source region of interest, or <code>null<\/code>.\n     *\n     * @exception IllegalArgumentException if\n     * <code>sourceRegion<\/code> is non-<code>null<\/code> and either\n     * <code>sourceRegion.x<\/code> or <code>sourceRegion.y<\/code> is\n     * negative.\n     * @exception IllegalArgumentException if\n     * <code>sourceRegion<\/code> is non-<code>null<\/code> and either\n     * <code>sourceRegion.width<\/code> or\n     * <code>sourceRegion.height<\/code> is negative or 0.\n     * @exception IllegalStateException if subsampling is such that\n     * this region will have a subsampled width or height of zero.\n     *\n     * @see #getSourceRegion\n     * @see #setSourceSubsampling\n     * @see ImageReadParam#setDestinationOffset\n     * @see ImageReadParam#getDestinationOffset\n     */\n    public void setSourceRegion(Rectangle sourceRegion) {\n        if (sourceRegion == null) {\n            this.sourceRegion = null;\n            return;\n        }\n\n        if (sourceRegion.x < 0) {\n            throw new IllegalArgumentException(\"sourceRegion.x < 0!\");\n        }\n        if (sourceRegion.y < 0){\n            throw new IllegalArgumentException(\"sourceRegion.y < 0!\");\n        }\n        if (sourceRegion.width <= 0) {\n            throw new IllegalArgumentException(\"sourceRegion.width <= 0!\");\n        }\n        if (sourceRegion.height <= 0) {\n            throw new IllegalArgumentException(\"sourceRegion.height <= 0!\");\n        }\n\n        // Throw an IllegalStateException if region falls between subsamples\n        if (sourceRegion.width <= subsamplingXOffset) {\n            throw new IllegalStateException\n                (\"sourceRegion.width <= subsamplingXOffset!\");\n        }\n        if (sourceRegion.height <= subsamplingYOffset) {\n            throw new IllegalStateException\n                (\"sourceRegion.height <= subsamplingYOffset!\");\n        }\n\n        this.sourceRegion = (Rectangle)sourceRegion.clone();\n    }"}
{"Number":"1259","API Relative Path":"javax.imageio.IIOParam.java-setSourceRegion(Rectangle)","Corresponding Source":"/**\n     * Sets the source region of interest.  The region of interest is\n     * described as a rectangle, with the upper-left corner of the\n     * source image as pixel (0, 0) and increasing values down and to\n     * the right.  The actual number of pixels used will depend on\n     * the subsampling factors set by <code>setSourceSubsampling<\/code>.\n     * If subsampling has been set such that this number is zero,\n     * an <code>IllegalStateException<\/code> will be thrown.\n     *\n     * <p> The source region of interest specified by this method will\n     * be clipped as needed to fit within the source bounds, as well\n     * as the destination offsets, width, and height at the time of\n     * actual I/O.\n     *\n     * <p> A value of <code>null<\/code> for <code>sourceRegion<\/code>\n     * will remove any region specification, causing the entire image\n     * to be used.\n     *\n     * @param sourceRegion a <code>Rectangle<\/code> specifying the\n     * source region of interest, or <code>null<\/code>.\n     *\n     * @exception IllegalArgumentException if\n     * <code>sourceRegion<\/code> is non-<code>null<\/code> and either\n     * <code>sourceRegion.x<\/code> or <code>sourceRegion.y<\/code> is\n     * negative.\n     * @exception IllegalArgumentException if\n     * <code>sourceRegion<\/code> is non-<code>null<\/code> and either\n     * <code>sourceRegion.width<\/code> or\n     * <code>sourceRegion.height<\/code> is negative or 0.\n     * @exception IllegalStateException if subsampling is such that\n     * this region will have a subsampled width or height of zero.\n     *\n     * @see #getSourceRegion\n     * @see #setSourceSubsampling\n     * @see ImageReadParam#setDestinationOffset\n     * @see ImageReadParam#getDestinationOffset\n     */\n    public void setSourceRegion(Rectangle sourceRegion) {\n        if (sourceRegion == null) {\n            this.sourceRegion = null;\n            return;\n        }\n\n        if (sourceRegion.x < 0) {\n            throw new IllegalArgumentException(\"sourceRegion.x < 0!\");\n        }\n        if (sourceRegion.y < 0){\n            throw new IllegalArgumentException(\"sourceRegion.y < 0!\");\n        }\n        if (sourceRegion.width <= 0) {\n            throw new IllegalArgumentException(\"sourceRegion.width <= 0!\");\n        }\n        if (sourceRegion.height <= 0) {\n            throw new IllegalArgumentException(\"sourceRegion.height <= 0!\");\n        }\n\n        // Throw an IllegalStateException if region falls between subsamples\n        if (sourceRegion.width <= subsamplingXOffset) {\n            throw new IllegalStateException\n                (\"sourceRegion.width <= subsamplingXOffset!\");\n        }\n        if (sourceRegion.height <= subsamplingYOffset) {\n            throw new IllegalStateException\n                (\"sourceRegion.height <= subsamplingYOffset!\");\n        }\n\n        this.sourceRegion = (Rectangle)sourceRegion.clone();\n    }"}
{"Number":"1260","API Relative Path":"javax.imageio.IIOParam.java-setSourceSubsampling(int-int-int-int)","Corresponding Source":"/**\n     * Specifies a decimation subsampling to apply on I/O.  The\n     * <code>sourceXSubsampling<\/code> and\n     * <code>sourceYSubsampling<\/code> parameters specify the\n     * subsampling period (<i>i.e.<\/i>, the number of rows and columns\n     * to advance after every source pixel).  Specifically, a period of\n     * 1 will use every row or column; a period of 2 will use every\n     * other row or column.  The <code>subsamplingXOffset<\/code> and\n     * <code>subsamplingYOffset<\/code> parameters specify an offset\n     * from the region (or image) origin for the first subsampled pixel.\n     * Adjusting the origin of the subsample grid is useful for avoiding\n     * seams when subsampling a very large source image into destination\n     * regions that will be assembled into a complete subsampled image.\n     * Most users will want to simply leave these parameters at 0.\n     *\n     * <p> The number of pixels and scanlines to be used are calculated\n     * as follows.\n     * <p>\n     * The number of subsampled pixels in a scanline is given by\n     * <p>\n     * <code>truncate[(width - subsamplingXOffset + sourceXSubsampling - 1)\n     * / sourceXSubsampling]<\/code>.\n     * <p>\n     * If the region is such that this width is zero, an\n     * <code>IllegalStateException<\/code> is thrown.\n     * <p>\n     * The number of scanlines to be used can be computed similarly.\n     *\n     * <p>The ability to set the subsampling grid to start somewhere\n     * other than the source region origin is useful if the\n     * region is being used to create subsampled tiles of a large image,\n     * where the tile width and height are not multiples of the\n     * subsampling periods.  If the subsampling grid does not remain\n     * consistent from tile to tile, there will be artifacts at the tile\n     * boundaries.  By adjusting the subsampling grid offset for each\n     * tile to compensate, these artifacts can be avoided.  The tradeoff\n     * is that in order to avoid these artifacts, the tiles are not all\n     * the same size.  The grid offset to use in this case is given by:\n     * <br>\n     * grid offset = [period - (region offset modulo period)] modulo period)\n     *\n     * <p> If either <code>sourceXSubsampling<\/code> or\n     * <code>sourceYSubsampling<\/code> is 0 or negative, an\n     * <code>IllegalArgumentException<\/code> will be thrown.\n     *\n     * <p> If either <code>subsamplingXOffset<\/code> or\n     * <code>subsamplingYOffset<\/code> is negative or greater than or\n     * equal to the corresponding period, an\n     * <code>IllegalArgumentException<\/code> will be thrown.\n     *\n     * <p> There is no <code>unsetSourceSubsampling<\/code> method;\n     * simply call <code>setSourceSubsampling(1, 1, 0, 0)<\/code> to\n     * restore default values.\n     *\n     * @param sourceXSubsampling the number of columns to advance\n     * between pixels.\n     * @param sourceYSubsampling the number of rows to advance between\n     * pixels.\n     * @param subsamplingXOffset the horizontal offset of the first subsample\n     * within the region, or within the image if no region is set.\n     * @param subsamplingYOffset the horizontal offset of the first subsample\n     * within the region, or within the image if no region is set.\n     * @exception IllegalArgumentException if either period is\n     * negative or 0, or if either grid offset is negative or greater than\n     * the corresponding period.\n     * @exception IllegalStateException if the source region is such that\n     * the subsampled output would contain no pixels.\n     */\n    public void setSourceSubsampling(int sourceXSubsampling,\n                                     int sourceYSubsampling,\n                                     int subsamplingXOffset,\n                                     int subsamplingYOffset) {\n        if (sourceXSubsampling <= 0) {\n            throw new IllegalArgumentException(\"sourceXSubsampling <= 0!\");\n        }\n        if (sourceYSubsampling <= 0) {\n            throw new IllegalArgumentException(\"sourceYSubsampling <= 0!\");\n        }\n        if (subsamplingXOffset < 0 ||\n            subsamplingXOffset >= sourceXSubsampling) {\n            throw new IllegalArgumentException\n                (\"subsamplingXOffset out of range!\");\n        }\n        if (subsamplingYOffset < 0 ||\n            subsamplingYOffset >= sourceYSubsampling) {\n            throw new IllegalArgumentException\n                (\"subsamplingYOffset out of range!\");\n        }\n\n        // Throw an IllegalStateException if region falls between subsamples\n        if (sourceRegion != null) {\n            if (subsamplingXOffset >= sourceRegion.width ||\n                subsamplingYOffset >= sourceRegion.height) {\n                throw new IllegalStateException(\"region contains no pixels!\");\n            }\n        }\n\n        this.sourceXSubsampling = sourceXSubsampling;\n        this.sourceYSubsampling = sourceYSubsampling;\n        this.subsamplingXOffset = subsamplingXOffset;\n        this.subsamplingYOffset = subsamplingYOffset;\n    }"}
{"Number":"1261","API Relative Path":"javax.imageio.IIOParam.java-setSourceSubsampling(int-int-int-int)","Corresponding Source":"/**\n     * Specifies a decimation subsampling to apply on I/O.  The\n     * <code>sourceXSubsampling<\/code> and\n     * <code>sourceYSubsampling<\/code> parameters specify the\n     * subsampling period (<i>i.e.<\/i>, the number of rows and columns\n     * to advance after every source pixel).  Specifically, a period of\n     * 1 will use every row or column; a period of 2 will use every\n     * other row or column.  The <code>subsamplingXOffset<\/code> and\n     * <code>subsamplingYOffset<\/code> parameters specify an offset\n     * from the region (or image) origin for the first subsampled pixel.\n     * Adjusting the origin of the subsample grid is useful for avoiding\n     * seams when subsampling a very large source image into destination\n     * regions that will be assembled into a complete subsampled image.\n     * Most users will want to simply leave these parameters at 0.\n     *\n     * <p> The number of pixels and scanlines to be used are calculated\n     * as follows.\n     * <p>\n     * The number of subsampled pixels in a scanline is given by\n     * <p>\n     * <code>truncate[(width - subsamplingXOffset + sourceXSubsampling - 1)\n     * / sourceXSubsampling]<\/code>.\n     * <p>\n     * If the region is such that this width is zero, an\n     * <code>IllegalStateException<\/code> is thrown.\n     * <p>\n     * The number of scanlines to be used can be computed similarly.\n     *\n     * <p>The ability to set the subsampling grid to start somewhere\n     * other than the source region origin is useful if the\n     * region is being used to create subsampled tiles of a large image,\n     * where the tile width and height are not multiples of the\n     * subsampling periods.  If the subsampling grid does not remain\n     * consistent from tile to tile, there will be artifacts at the tile\n     * boundaries.  By adjusting the subsampling grid offset for each\n     * tile to compensate, these artifacts can be avoided.  The tradeoff\n     * is that in order to avoid these artifacts, the tiles are not all\n     * the same size.  The grid offset to use in this case is given by:\n     * <br>\n     * grid offset = [period - (region offset modulo period)] modulo period)\n     *\n     * <p> If either <code>sourceXSubsampling<\/code> or\n     * <code>sourceYSubsampling<\/code> is 0 or negative, an\n     * <code>IllegalArgumentException<\/code> will be thrown.\n     *\n     * <p> If either <code>subsamplingXOffset<\/code> or\n     * <code>subsamplingYOffset<\/code> is negative or greater than or\n     * equal to the corresponding period, an\n     * <code>IllegalArgumentException<\/code> will be thrown.\n     *\n     * <p> There is no <code>unsetSourceSubsampling<\/code> method;\n     * simply call <code>setSourceSubsampling(1, 1, 0, 0)<\/code> to\n     * restore default values.\n     *\n     * @param sourceXSubsampling the number of columns to advance\n     * between pixels.\n     * @param sourceYSubsampling the number of rows to advance between\n     * pixels.\n     * @param subsamplingXOffset the horizontal offset of the first subsample\n     * within the region, or within the image if no region is set.\n     * @param subsamplingYOffset the horizontal offset of the first subsample\n     * within the region, or within the image if no region is set.\n     * @exception IllegalArgumentException if either period is\n     * negative or 0, or if either grid offset is negative or greater than\n     * the corresponding period.\n     * @exception IllegalStateException if the source region is such that\n     * the subsampled output would contain no pixels.\n     */\n    public void setSourceSubsampling(int sourceXSubsampling,\n                                     int sourceYSubsampling,\n                                     int subsamplingXOffset,\n                                     int subsamplingYOffset) {\n        if (sourceXSubsampling <= 0) {\n            throw new IllegalArgumentException(\"sourceXSubsampling <= 0!\");\n        }\n        if (sourceYSubsampling <= 0) {\n            throw new IllegalArgumentException(\"sourceYSubsampling <= 0!\");\n        }\n        if (subsamplingXOffset < 0 ||\n            subsamplingXOffset >= sourceXSubsampling) {\n            throw new IllegalArgumentException\n                (\"subsamplingXOffset out of range!\");\n        }\n        if (subsamplingYOffset < 0 ||\n            subsamplingYOffset >= sourceYSubsampling) {\n            throw new IllegalArgumentException\n                (\"subsamplingYOffset out of range!\");\n        }\n\n        // Throw an IllegalStateException if region falls between subsamples\n        if (sourceRegion != null) {\n            if (subsamplingXOffset >= sourceRegion.width ||\n                subsamplingYOffset >= sourceRegion.height) {\n                throw new IllegalStateException(\"region contains no pixels!\");\n            }\n        }\n\n        this.sourceXSubsampling = sourceXSubsampling;\n        this.sourceYSubsampling = sourceYSubsampling;\n        this.subsamplingXOffset = subsamplingXOffset;\n        this.subsamplingYOffset = subsamplingYOffset;\n    }"}
{"Number":"1262","API Relative Path":"javax.imageio.IIOParam.java-setSourceSubsampling(int-int-int-int)","Corresponding Source":"/**\n     * Specifies a decimation subsampling to apply on I/O.  The\n     * <code>sourceXSubsampling<\/code> and\n     * <code>sourceYSubsampling<\/code> parameters specify the\n     * subsampling period (<i>i.e.<\/i>, the number of rows and columns\n     * to advance after every source pixel).  Specifically, a period of\n     * 1 will use every row or column; a period of 2 will use every\n     * other row or column.  The <code>subsamplingXOffset<\/code> and\n     * <code>subsamplingYOffset<\/code> parameters specify an offset\n     * from the region (or image) origin for the first subsampled pixel.\n     * Adjusting the origin of the subsample grid is useful for avoiding\n     * seams when subsampling a very large source image into destination\n     * regions that will be assembled into a complete subsampled image.\n     * Most users will want to simply leave these parameters at 0.\n     *\n     * <p> The number of pixels and scanlines to be used are calculated\n     * as follows.\n     * <p>\n     * The number of subsampled pixels in a scanline is given by\n     * <p>\n     * <code>truncate[(width - subsamplingXOffset + sourceXSubsampling - 1)\n     * / sourceXSubsampling]<\/code>.\n     * <p>\n     * If the region is such that this width is zero, an\n     * <code>IllegalStateException<\/code> is thrown.\n     * <p>\n     * The number of scanlines to be used can be computed similarly.\n     *\n     * <p>The ability to set the subsampling grid to start somewhere\n     * other than the source region origin is useful if the\n     * region is being used to create subsampled tiles of a large image,\n     * where the tile width and height are not multiples of the\n     * subsampling periods.  If the subsampling grid does not remain\n     * consistent from tile to tile, there will be artifacts at the tile\n     * boundaries.  By adjusting the subsampling grid offset for each\n     * tile to compensate, these artifacts can be avoided.  The tradeoff\n     * is that in order to avoid these artifacts, the tiles are not all\n     * the same size.  The grid offset to use in this case is given by:\n     * <br>\n     * grid offset = [period - (region offset modulo period)] modulo period)\n     *\n     * <p> If either <code>sourceXSubsampling<\/code> or\n     * <code>sourceYSubsampling<\/code> is 0 or negative, an\n     * <code>IllegalArgumentException<\/code> will be thrown.\n     *\n     * <p> If either <code>subsamplingXOffset<\/code> or\n     * <code>subsamplingYOffset<\/code> is negative or greater than or\n     * equal to the corresponding period, an\n     * <code>IllegalArgumentException<\/code> will be thrown.\n     *\n     * <p> There is no <code>unsetSourceSubsampling<\/code> method;\n     * simply call <code>setSourceSubsampling(1, 1, 0, 0)<\/code> to\n     * restore default values.\n     *\n     * @param sourceXSubsampling the number of columns to advance\n     * between pixels.\n     * @param sourceYSubsampling the number of rows to advance between\n     * pixels.\n     * @param subsamplingXOffset the horizontal offset of the first subsample\n     * within the region, or within the image if no region is set.\n     * @param subsamplingYOffset the horizontal offset of the first subsample\n     * within the region, or within the image if no region is set.\n     * @exception IllegalArgumentException if either period is\n     * negative or 0, or if either grid offset is negative or greater than\n     * the corresponding period.\n     * @exception IllegalStateException if the source region is such that\n     * the subsampled output would contain no pixels.\n     */\n    public void setSourceSubsampling(int sourceXSubsampling,\n                                     int sourceYSubsampling,\n                                     int subsamplingXOffset,\n                                     int subsamplingYOffset) {\n        if (sourceXSubsampling <= 0) {\n            throw new IllegalArgumentException(\"sourceXSubsampling <= 0!\");\n        }\n        if (sourceYSubsampling <= 0) {\n            throw new IllegalArgumentException(\"sourceYSubsampling <= 0!\");\n        }\n        if (subsamplingXOffset < 0 ||\n            subsamplingXOffset >= sourceXSubsampling) {\n            throw new IllegalArgumentException\n                (\"subsamplingXOffset out of range!\");\n        }\n        if (subsamplingYOffset < 0 ||\n            subsamplingYOffset >= sourceYSubsampling) {\n            throw new IllegalArgumentException\n                (\"subsamplingYOffset out of range!\");\n        }\n\n        // Throw an IllegalStateException if region falls between subsamples\n        if (sourceRegion != null) {\n            if (subsamplingXOffset >= sourceRegion.width ||\n                subsamplingYOffset >= sourceRegion.height) {\n                throw new IllegalStateException(\"region contains no pixels!\");\n            }\n        }\n\n        this.sourceXSubsampling = sourceXSubsampling;\n        this.sourceYSubsampling = sourceYSubsampling;\n        this.subsamplingXOffset = subsamplingXOffset;\n        this.subsamplingYOffset = subsamplingYOffset;\n    }"}
{"Number":"1263","API Relative Path":"javax.imageio.IIOParam.java-setSourceSubsampling(int-int-int-int)","Corresponding Source":"/**\n     * Specifies a decimation subsampling to apply on I/O.  The\n     * <code>sourceXSubsampling<\/code> and\n     * <code>sourceYSubsampling<\/code> parameters specify the\n     * subsampling period (<i>i.e.<\/i>, the number of rows and columns\n     * to advance after every source pixel).  Specifically, a period of\n     * 1 will use every row or column; a period of 2 will use every\n     * other row or column.  The <code>subsamplingXOffset<\/code> and\n     * <code>subsamplingYOffset<\/code> parameters specify an offset\n     * from the region (or image) origin for the first subsampled pixel.\n     * Adjusting the origin of the subsample grid is useful for avoiding\n     * seams when subsampling a very large source image into destination\n     * regions that will be assembled into a complete subsampled image.\n     * Most users will want to simply leave these parameters at 0.\n     *\n     * <p> The number of pixels and scanlines to be used are calculated\n     * as follows.\n     * <p>\n     * The number of subsampled pixels in a scanline is given by\n     * <p>\n     * <code>truncate[(width - subsamplingXOffset + sourceXSubsampling - 1)\n     * / sourceXSubsampling]<\/code>.\n     * <p>\n     * If the region is such that this width is zero, an\n     * <code>IllegalStateException<\/code> is thrown.\n     * <p>\n     * The number of scanlines to be used can be computed similarly.\n     *\n     * <p>The ability to set the subsampling grid to start somewhere\n     * other than the source region origin is useful if the\n     * region is being used to create subsampled tiles of a large image,\n     * where the tile width and height are not multiples of the\n     * subsampling periods.  If the subsampling grid does not remain\n     * consistent from tile to tile, there will be artifacts at the tile\n     * boundaries.  By adjusting the subsampling grid offset for each\n     * tile to compensate, these artifacts can be avoided.  The tradeoff\n     * is that in order to avoid these artifacts, the tiles are not all\n     * the same size.  The grid offset to use in this case is given by:\n     * <br>\n     * grid offset = [period - (region offset modulo period)] modulo period)\n     *\n     * <p> If either <code>sourceXSubsampling<\/code> or\n     * <code>sourceYSubsampling<\/code> is 0 or negative, an\n     * <code>IllegalArgumentException<\/code> will be thrown.\n     *\n     * <p> If either <code>subsamplingXOffset<\/code> or\n     * <code>subsamplingYOffset<\/code> is negative or greater than or\n     * equal to the corresponding period, an\n     * <code>IllegalArgumentException<\/code> will be thrown.\n     *\n     * <p> There is no <code>unsetSourceSubsampling<\/code> method;\n     * simply call <code>setSourceSubsampling(1, 1, 0, 0)<\/code> to\n     * restore default values.\n     *\n     * @param sourceXSubsampling the number of columns to advance\n     * between pixels.\n     * @param sourceYSubsampling the number of rows to advance between\n     * pixels.\n     * @param subsamplingXOffset the horizontal offset of the first subsample\n     * within the region, or within the image if no region is set.\n     * @param subsamplingYOffset the horizontal offset of the first subsample\n     * within the region, or within the image if no region is set.\n     * @exception IllegalArgumentException if either period is\n     * negative or 0, or if either grid offset is negative or greater than\n     * the corresponding period.\n     * @exception IllegalStateException if the source region is such that\n     * the subsampled output would contain no pixels.\n     */\n    public void setSourceSubsampling(int sourceXSubsampling,\n                                     int sourceYSubsampling,\n                                     int subsamplingXOffset,\n                                     int subsamplingYOffset) {\n        if (sourceXSubsampling <= 0) {\n            throw new IllegalArgumentException(\"sourceXSubsampling <= 0!\");\n        }\n        if (sourceYSubsampling <= 0) {\n            throw new IllegalArgumentException(\"sourceYSubsampling <= 0!\");\n        }\n        if (subsamplingXOffset < 0 ||\n            subsamplingXOffset >= sourceXSubsampling) {\n            throw new IllegalArgumentException\n                (\"subsamplingXOffset out of range!\");\n        }\n        if (subsamplingYOffset < 0 ||\n            subsamplingYOffset >= sourceYSubsampling) {\n            throw new IllegalArgumentException\n                (\"subsamplingYOffset out of range!\");\n        }\n\n        // Throw an IllegalStateException if region falls between subsamples\n        if (sourceRegion != null) {\n            if (subsamplingXOffset >= sourceRegion.width ||\n                subsamplingYOffset >= sourceRegion.height) {\n                throw new IllegalStateException(\"region contains no pixels!\");\n            }\n        }\n\n        this.sourceXSubsampling = sourceXSubsampling;\n        this.sourceYSubsampling = sourceYSubsampling;\n        this.subsamplingXOffset = subsamplingXOffset;\n        this.subsamplingYOffset = subsamplingYOffset;\n    }"}
{"Number":"1264","API Relative Path":"javax.imageio.IIOParam.java-setSourceSubsampling(int-int-int-int)","Corresponding Source":"/**\n     * Specifies a decimation subsampling to apply on I/O.  The\n     * <code>sourceXSubsampling<\/code> and\n     * <code>sourceYSubsampling<\/code> parameters specify the\n     * subsampling period (<i>i.e.<\/i>, the number of rows and columns\n     * to advance after every source pixel).  Specifically, a period of\n     * 1 will use every row or column; a period of 2 will use every\n     * other row or column.  The <code>subsamplingXOffset<\/code> and\n     * <code>subsamplingYOffset<\/code> parameters specify an offset\n     * from the region (or image) origin for the first subsampled pixel.\n     * Adjusting the origin of the subsample grid is useful for avoiding\n     * seams when subsampling a very large source image into destination\n     * regions that will be assembled into a complete subsampled image.\n     * Most users will want to simply leave these parameters at 0.\n     *\n     * <p> The number of pixels and scanlines to be used are calculated\n     * as follows.\n     * <p>\n     * The number of subsampled pixels in a scanline is given by\n     * <p>\n     * <code>truncate[(width - subsamplingXOffset + sourceXSubsampling - 1)\n     * / sourceXSubsampling]<\/code>.\n     * <p>\n     * If the region is such that this width is zero, an\n     * <code>IllegalStateException<\/code> is thrown.\n     * <p>\n     * The number of scanlines to be used can be computed similarly.\n     *\n     * <p>The ability to set the subsampling grid to start somewhere\n     * other than the source region origin is useful if the\n     * region is being used to create subsampled tiles of a large image,\n     * where the tile width and height are not multiples of the\n     * subsampling periods.  If the subsampling grid does not remain\n     * consistent from tile to tile, there will be artifacts at the tile\n     * boundaries.  By adjusting the subsampling grid offset for each\n     * tile to compensate, these artifacts can be avoided.  The tradeoff\n     * is that in order to avoid these artifacts, the tiles are not all\n     * the same size.  The grid offset to use in this case is given by:\n     * <br>\n     * grid offset = [period - (region offset modulo period)] modulo period)\n     *\n     * <p> If either <code>sourceXSubsampling<\/code> or\n     * <code>sourceYSubsampling<\/code> is 0 or negative, an\n     * <code>IllegalArgumentException<\/code> will be thrown.\n     *\n     * <p> If either <code>subsamplingXOffset<\/code> or\n     * <code>subsamplingYOffset<\/code> is negative or greater than or\n     * equal to the corresponding period, an\n     * <code>IllegalArgumentException<\/code> will be thrown.\n     *\n     * <p> There is no <code>unsetSourceSubsampling<\/code> method;\n     * simply call <code>setSourceSubsampling(1, 1, 0, 0)<\/code> to\n     * restore default values.\n     *\n     * @param sourceXSubsampling the number of columns to advance\n     * between pixels.\n     * @param sourceYSubsampling the number of rows to advance between\n     * pixels.\n     * @param subsamplingXOffset the horizontal offset of the first subsample\n     * within the region, or within the image if no region is set.\n     * @param subsamplingYOffset the horizontal offset of the first subsample\n     * within the region, or within the image if no region is set.\n     * @exception IllegalArgumentException if either period is\n     * negative or 0, or if either grid offset is negative or greater than\n     * the corresponding period.\n     * @exception IllegalStateException if the source region is such that\n     * the subsampled output would contain no pixels.\n     */\n    public void setSourceSubsampling(int sourceXSubsampling,\n                                     int sourceYSubsampling,\n                                     int subsamplingXOffset,\n                                     int subsamplingYOffset) {\n        if (sourceXSubsampling <= 0) {\n            throw new IllegalArgumentException(\"sourceXSubsampling <= 0!\");\n        }\n        if (sourceYSubsampling <= 0) {\n            throw new IllegalArgumentException(\"sourceYSubsampling <= 0!\");\n        }\n        if (subsamplingXOffset < 0 ||\n            subsamplingXOffset >= sourceXSubsampling) {\n            throw new IllegalArgumentException\n                (\"subsamplingXOffset out of range!\");\n        }\n        if (subsamplingYOffset < 0 ||\n            subsamplingYOffset >= sourceYSubsampling) {\n            throw new IllegalArgumentException\n                (\"subsamplingYOffset out of range!\");\n        }\n\n        // Throw an IllegalStateException if region falls between subsamples\n        if (sourceRegion != null) {\n            if (subsamplingXOffset >= sourceRegion.width ||\n                subsamplingYOffset >= sourceRegion.height) {\n                throw new IllegalStateException(\"region contains no pixels!\");\n            }\n        }\n\n        this.sourceXSubsampling = sourceXSubsampling;\n        this.sourceYSubsampling = sourceYSubsampling;\n        this.subsamplingXOffset = subsamplingXOffset;\n        this.subsamplingYOffset = subsamplingYOffset;\n    }"}
{"Number":"1265","API Relative Path":"javax.imageio.ImageIO.java-getImageTranscoders(ImageReader-ImageWriter)","Corresponding Source":"/**\n     * Returns an <code>Iterator<\/code> containing all currently\n     * registered <code>ImageTranscoder<\/code>s that claim to be\n     * able to transcode between the metadata of the given\n     * <code>ImageReader<\/code> and <code>ImageWriter<\/code>.\n     *\n     * @param reader an <code>ImageReader<\/code>.\n     * @param writer an <code>ImageWriter<\/code>.\n     *\n     * @return an <code>Iterator<\/code> containing\n     * <code>ImageTranscoder<\/code>s.\n     *\n     * @exception IllegalArgumentException if <code>reader<\/code> or\n     * <code>writer<\/code> is <code>null<\/code>.\n     */\n    public static Iterator<ImageTranscoder>\n        getImageTranscoders(ImageReader reader, ImageWriter writer)\n    {\n        if (reader == null) {\n            throw new IllegalArgumentException(\"reader == null!\");\n        }\n        if (writer == null) {\n            throw new IllegalArgumentException(\"writer == null!\");\n        }\n        ImageReaderSpi readerSpi = reader.getOriginatingProvider();\n        ImageWriterSpi writerSpi = writer.getOriginatingProvider();\n        ServiceRegistry.Filter filter =\n            new TranscoderFilter(readerSpi, writerSpi);\n\n        Iterator iter;\n        // Ensure category is present\n        try {\n            iter = theRegistry.getServiceProviders(ImageTranscoderSpi.class,\n                                            filter, true);\n        } catch (IllegalArgumentException e) {\n            return Collections.emptyIterator();\n        }\n        return new ImageTranscoderIterator(iter);\n    }"}
{"Number":"1266","API Relative Path":"javax.imageio.ImageIO.java-read(ImageInputStream)","Corresponding Source":"/**\n     * Returns a <code>BufferedImage<\/code> as the result of decoding\n     * a supplied <code>ImageInputStream<\/code> with an\n     * <code>ImageReader<\/code> chosen automatically from among those\n     * currently registered.  If no registered\n     * <code>ImageReader<\/code> claims to be able to read the stream,\n     * <code>null<\/code> is returned.\n     *\n     * <p> Unlike most other methods in this class, this method <em>does<\/em>\n     * close the provided <code>ImageInputStream<\/code> after the read\n     * operation has completed, unless <code>null<\/code> is returned,\n     * in which case this method <em>does not<\/em> close the stream.\n     *\n     * @param stream an <code>ImageInputStream<\/code> to read from.\n     *\n     * @return a <code>BufferedImage<\/code> containing the decoded\n     * contents of the input, or <code>null<\/code>.\n     *\n     * @exception IllegalArgumentException if <code>stream<\/code> is\n     * <code>null<\/code>.\n     * @exception IOException if an error occurs during reading.\n     */\n    public static BufferedImage read(ImageInputStream stream)\n        throws IOException {\n        if (stream == null) {\n            throw new IllegalArgumentException(\"stream == null!\");\n        }\n\n        Iterator iter = getImageReaders(stream);\n        if (!iter.hasNext()) {\n            return null;\n        }\n\n        ImageReader reader = (ImageReader)iter.next();\n        ImageReadParam param = reader.getDefaultReadParam();\n        reader.setInput(stream, true, true);\n        BufferedImage bi;\n        try {\n            bi = reader.read(0, param);\n        } finally {\n            reader.dispose();\n            stream.close();\n        }\n        return bi;\n    }"}
{"Number":"1267","API Relative Path":"javax.imageio.ImageIO.java-setCacheDirectory(File)","Corresponding Source":"/**\n     * Sets the directory where cache files are to be created.  A\n     * value of <code>null<\/code> indicates that the system-dependent\n     * default temporary-file directory is to be used.  If\n     * <code>getUseCache<\/code> returns false, this value is ignored.\n     *\n     * @param cacheDirectory a <code>File<\/code> specifying a directory.\n     *\n     * @see File#createTempFile(String, String, File)\n     *\n     * @exception SecurityException if the security manager denies\n     * access to the directory.\n     * @exception IllegalArgumentException if <code>cacheDir<\/code> is\n     * non-<code>null<\/code> but is not a directory.\n     *\n     * @see #getCacheDirectory\n     */\n    public static void setCacheDirectory(File cacheDirectory) {\n        if ((cacheDirectory != null) && !(cacheDirectory.isDirectory())) {\n            throw new IllegalArgumentException(\"Not a directory!\");\n        }\n        getCacheInfo().setCacheDirectory(cacheDirectory);\n        getCacheInfo().setHasPermission(null);\n    }"}
{"Number":"1268","API Relative Path":"javax.imageio.ImageIO.java-write(RenderedImage-String-ImageOutputStream)","Corresponding Source":"/**\n     * Writes an image using the an arbitrary <code>ImageWriter<\/code>\n     * that supports the given format to an\n     * <code>ImageOutputStream<\/code>.  The image is written to the\n     * <code>ImageOutputStream<\/code> starting at the current stream\n     * pointer, overwriting existing stream data from that point\n     * forward, if present.\n     *\n     * <p> This method <em>does not<\/em> close the provided\n     * <code>ImageOutputStream<\/code> after the write operation has completed;\n     * it is the responsibility of the caller to close the stream, if desired.\n     *\n     * @param im a <code>RenderedImage<\/code> to be written.\n     * @param formatName a <code>String<\/code> containing the informal\n     * name of the format.\n     * @param output an <code>ImageOutputStream<\/code> to be written to.\n     *\n     * @return <code>false<\/code> if no appropriate writer is found.\n     *\n     * @exception IllegalArgumentException if any parameter is\n     * <code>null<\/code>.\n     * @exception IOException if an error occurs during writing.\n     */\n    public static boolean write(RenderedImage im,\n                                String formatName,\n                                ImageOutputStream output) throws IOException {\n        if (im == null) {\n            throw new IllegalArgumentException(\"im == null!\");\n        }\n        if (formatName == null) {\n            throw new IllegalArgumentException(\"formatName == null!\");\n        }\n        if (output == null) {\n            throw new IllegalArgumentException(\"output == null!\");\n        }\n\n        return doWrite(im, getWriter(im, formatName), output);\n    }"}
{"Number":"1269","API Relative Path":"javax.imageio.ImageReader.java-addIIOReadProgressListener(IIOReadProgressListener)","Corresponding Source":"/**\n     * Adds an <code>IIOReadProgressListener<\/code> to the list of\n     * registered progress listeners.  If <code>listener<\/code> is\n     * <code>null<\/code>, no exception will be thrown and no action\n     * will be taken.\n     *\n     * @param listener an IIOReadProgressListener to be registered.\n     *\n     * @see #removeIIOReadProgressListener\n     */\n    public void addIIOReadProgressListener(IIOReadProgressListener listener) {\n        if (listener == null) {\n            return;\n        }\n        progressListeners = addToList(progressListeners, listener);\n    }"}
{"Number":"1270","API Relative Path":"javax.imageio.ImageReader.java-addIIOReadUpdateListener(IIOReadUpdateListener)","Corresponding Source":"/**\n     * Adds an <code>IIOReadUpdateListener<\/code> to the list of\n     * registered update listeners.  If <code>listener<\/code> is\n     * <code>null<\/code>, no exception will be thrown and no action\n     * will be taken.  The listener will receive notification of pixel\n     * updates as images and thumbnails are decoded, including the\n     * starts and ends of progressive passes.\n     *\n     * <p> If no update listeners are present, the reader may choose\n     * to perform fewer updates to the pixels of the destination\n     * images and/or thumbnails, which may result in more efficient\n     * decoding.\n     *\n     * <p> For example, in progressive JPEG decoding each pass\n     * contains updates to a set of coefficients, which would have to\n     * be transformed into pixel values and converted to an RGB color\n     * space for each pass if listeners are present.  If no listeners\n     * are present, the coefficients may simply be accumulated and the\n     * final results transformed and color converted one time only.\n     *\n     * <p> The final results of decoding will be the same whether or\n     * not intermediate updates are performed.  Thus if only the final\n     * image is desired it may be preferable not to register any\n     * <code>IIOReadUpdateListener<\/code>s.  In general, progressive\n     * updating is most effective when fetching images over a network\n     * connection that is very slow compared to local CPU processing;\n     * over a fast connection, progressive updates may actually slow\n     * down the presentation of the image.\n     *\n     * @param listener an IIOReadUpdateListener to be registered.\n     *\n     * @see #removeIIOReadUpdateListener\n     */\n    public void\n        addIIOReadUpdateListener(IIOReadUpdateListener listener) {\n        if (listener == null) {\n            return;\n        }\n        updateListeners = addToList(updateListeners, listener);\n    }"}
{"Number":"1271","API Relative Path":"javax.imageio.ImageReader.java-addIIOReadWarningListener(IIOReadWarningListener)","Corresponding Source":"/**\n     * Adds an <code>IIOReadWarningListener<\/code> to the list of\n     * registered warning listeners.  If <code>listener<\/code> is\n     * <code>null<\/code>, no exception will be thrown and no action\n     * will be taken.  Messages sent to the given listener will be\n     * localized, if possible, to match the current\n     * <code>Locale<\/code>.  If no <code>Locale<\/code> has been set,\n     * warning messages may be localized as the reader sees fit.\n     *\n     * @param listener an <code>IIOReadWarningListener<\/code> to be registered.\n     *\n     * @see #removeIIOReadWarningListener\n     */\n    public void addIIOReadWarningListener(IIOReadWarningListener listener) {\n        if (listener == null) {\n            return;\n        }\n        warningListeners = addToList(warningListeners, listener);\n        warningLocales = addToList(warningLocales, getLocale());\n    }"}
{"Number":"1272","API Relative Path":"javax.imageio.ImageReader.java-checkReadParamBandSettings(ImageReadParam-int-int)","Corresponding Source":"/**\n     * A utility method that may be used by readers to test the\n     * validity of the source and destination band settings of an\n     * <code>ImageReadParam<\/code>.  This method may be called as soon\n     * as the reader knows both the number of bands of the source\n     * image as it exists in the input stream, and the number of bands\n     * of the destination image that being written.\n     *\n     * <p> The method retrieves the source and destination band\n     * setting arrays from param using the <code>getSourceBands<\/code>\n     * and <code>getDestinationBands<\/code>methods (or considers them\n     * to be <code>null<\/code> if <code>param<\/code> is\n     * <code>null<\/code>).  If the source band setting array is\n     * <code>null<\/code>, it is considered to be equal to the array\n     * <code>{ 0, 1, ..., numSrcBands - 1 }<\/code>, and similarly for\n     * the destination band setting array.\n     *\n     * <p> The method then tests that both arrays are equal in length,\n     * and that neither array contains a value larger than the largest\n     * available band index.\n     *\n     * <p> Any failure results in an\n     * <code>IllegalArgumentException<\/code> being thrown; success\n     * results in the method returning silently.\n     *\n     * @param param the <code>ImageReadParam<\/code> being used to read\n     * the image.\n     * @param numSrcBands the number of bands of the image as it exists\n     * int the input source.\n     * @param numDstBands the number of bands in the destination image\n     * being written.\n     *\n     * @exception IllegalArgumentException if <code>param<\/code>\n     * contains an invalid specification of a source and/or\n     * destination band subset.\n     */\n    protected static void checkReadParamBandSettings(ImageReadParam param,\n                                                     int numSrcBands,\n                                                     int numDstBands) {\n        // A null param is equivalent to srcBands == dstBands == null.\n        int[] srcBands = null;\n        int[] dstBands = null;\n        if (param != null) {\n            srcBands = param.getSourceBands();\n            dstBands = param.getDestinationBands();\n        }\n\n        int paramSrcBandLength =\n            (srcBands == null) ? numSrcBands : srcBands.length;\n        int paramDstBandLength =\n            (dstBands == null) ? numDstBands : dstBands.length;\n\n        if (paramSrcBandLength != paramDstBandLength) {\n            throw new IllegalArgumentException(\"ImageReadParam num source & dest bands differ!\");\n        }\n\n        if (srcBands != null) {\n            for (int i = 0; i < srcBands.length; i++) {\n                if (srcBands[i] >= numSrcBands) {\n                    throw new IllegalArgumentException(\"ImageReadParam source bands contains a value >= the number of source bands!\");\n                }\n            }\n        }\n\n        if (dstBands != null) {\n            for (int i = 0; i < dstBands.length; i++) {\n                if (dstBands[i] >= numDstBands) {\n                    throw new IllegalArgumentException(\"ImageReadParam dest bands contains a value >= the number of dest bands!\");\n                }\n            }\n        }\n    }"}
{"Number":"1273","API Relative Path":"javax.imageio.ImageReader.java-checkReadParamBandSettings(ImageReadParam-int-int)","Corresponding Source":"/**\n     * A utility method that may be used by readers to test the\n     * validity of the source and destination band settings of an\n     * <code>ImageReadParam<\/code>.  This method may be called as soon\n     * as the reader knows both the number of bands of the source\n     * image as it exists in the input stream, and the number of bands\n     * of the destination image that being written.\n     *\n     * <p> The method retrieves the source and destination band\n     * setting arrays from param using the <code>getSourceBands<\/code>\n     * and <code>getDestinationBands<\/code>methods (or considers them\n     * to be <code>null<\/code> if <code>param<\/code> is\n     * <code>null<\/code>).  If the source band setting array is\n     * <code>null<\/code>, it is considered to be equal to the array\n     * <code>{ 0, 1, ..., numSrcBands - 1 }<\/code>, and similarly for\n     * the destination band setting array.\n     *\n     * <p> The method then tests that both arrays are equal in length,\n     * and that neither array contains a value larger than the largest\n     * available band index.\n     *\n     * <p> Any failure results in an\n     * <code>IllegalArgumentException<\/code> being thrown; success\n     * results in the method returning silently.\n     *\n     * @param param the <code>ImageReadParam<\/code> being used to read\n     * the image.\n     * @param numSrcBands the number of bands of the image as it exists\n     * int the input source.\n     * @param numDstBands the number of bands in the destination image\n     * being written.\n     *\n     * @exception IllegalArgumentException if <code>param<\/code>\n     * contains an invalid specification of a source and/or\n     * destination band subset.\n     */\n    protected static void checkReadParamBandSettings(ImageReadParam param,\n                                                     int numSrcBands,\n                                                     int numDstBands) {\n        // A null param is equivalent to srcBands == dstBands == null.\n        int[] srcBands = null;\n        int[] dstBands = null;\n        if (param != null) {\n            srcBands = param.getSourceBands();\n            dstBands = param.getDestinationBands();\n        }\n\n        int paramSrcBandLength =\n            (srcBands == null) ? numSrcBands : srcBands.length;\n        int paramDstBandLength =\n            (dstBands == null) ? numDstBands : dstBands.length;\n\n        if (paramSrcBandLength != paramDstBandLength) {\n            throw new IllegalArgumentException(\"ImageReadParam num source & dest bands differ!\");\n        }\n\n        if (srcBands != null) {\n            for (int i = 0; i < srcBands.length; i++) {\n                if (srcBands[i] >= numSrcBands) {\n                    throw new IllegalArgumentException(\"ImageReadParam source bands contains a value >= the number of source bands!\");\n                }\n            }\n        }\n\n        if (dstBands != null) {\n            for (int i = 0; i < dstBands.length; i++) {\n                if (dstBands[i] >= numDstBands) {\n                    throw new IllegalArgumentException(\"ImageReadParam dest bands contains a value >= the number of dest bands!\");\n                }\n            }\n        }\n    }"}
{"Number":"1274","API Relative Path":"javax.imageio.ImageReader.java-computeRegions(ImageReadParam-int-int-BufferedImage-Rectangle-Rectangle)","Corresponding Source":"/**\n     * Computes the source region of interest and the destination\n     * region of interest, taking the width and height of the source\n     * image, an optional destination image, and an optional\n     * <code>ImageReadParam<\/code> into account.  The source region\n     * begins with the entire source image.  Then that is clipped to\n     * the source region specified in the <code>ImageReadParam<\/code>,\n     * if one is specified.\n     *\n     * <p> If either of the destination offsets are negative, the\n     * source region is clipped so that its top left will coincide\n     * with the top left of the destination image, taking subsampling\n     * into account.  Then the result is clipped to the destination\n     * image on the right and bottom, if one is specified, taking\n     * subsampling and destination offsets into account.\n     *\n     * <p> Similarly, the destination region begins with the source\n     * image, is translated to the destination offset given in the\n     * <code>ImageReadParam<\/code> if there is one, and finally is\n     * clipped to the destination image, if there is one.\n     *\n     * <p> If either the source or destination regions end up having a\n     * width or height of 0, an <code>IllegalArgumentException<\/code>\n     * is thrown.\n     *\n     * <p> The {@link #getSourceRegion getSourceRegion>}\n     * method may be used if only source clipping is desired.\n     *\n     * @param param an <code>ImageReadParam<\/code>, or <code>null<\/code>.\n     * @param srcWidth the width of the source image.\n     * @param srcHeight the height of the source image.\n     * @param image a <code>BufferedImage<\/code> that will be the\n     * destination image, or <code>null<\/code>.\n     * @param srcRegion a <code>Rectangle<\/code> that will be filled with\n     * the source region of interest.\n     * @param destRegion a <code>Rectangle<\/code> that will be filled with\n     * the destination region of interest.\n     * @exception IllegalArgumentException if <code>srcRegion<\/code>\n     * is <code>null<\/code>.\n     * @exception IllegalArgumentException if <code>dstRegion<\/code>\n     * is <code>null<\/code>.\n     * @exception IllegalArgumentException if the resulting source or\n     * destination region is empty.\n     */\n    protected static void computeRegions(ImageReadParam param,\n                                         int srcWidth,\n                                         int srcHeight,\n                                         BufferedImage image,\n                                         Rectangle srcRegion,\n                                         Rectangle destRegion) {\n        if (srcRegion == null) {\n            throw new IllegalArgumentException(\"srcRegion == null!\");\n        }\n        if (destRegion == null) {\n            throw new IllegalArgumentException(\"destRegion == null!\");\n        }\n\n        // Start with the entire source image\n        srcRegion.setBounds(0, 0, srcWidth, srcHeight);\n\n        // Destination also starts with source image, as that is the\n        // maximum extent if there is no subsampling\n        destRegion.setBounds(0, 0, srcWidth, srcHeight);\n\n        // Clip that to the param region, if there is one\n        int periodX = 1;\n        int periodY = 1;\n        int gridX = 0;\n        int gridY = 0;\n        if (param != null) {\n            Rectangle paramSrcRegion = param.getSourceRegion();\n            if (paramSrcRegion != null) {\n                srcRegion.setBounds(srcRegion.intersection(paramSrcRegion));\n            }\n            periodX = param.getSourceXSubsampling();\n            periodY = param.getSourceYSubsampling();\n            gridX = param.getSubsamplingXOffset();\n            gridY = param.getSubsamplingYOffset();\n            srcRegion.translate(gridX, gridY);\n            srcRegion.width -= gridX;\n            srcRegion.height -= gridY;\n            destRegion.setLocation(param.getDestinationOffset());\n        }\n\n        // Now clip any negative destination offsets, i.e. clip\n        // to the top and left of the destination image\n        if (destRegion.x < 0) {\n            int delta = -destRegion.x*periodX;\n            srcRegion.x += delta;\n            srcRegion.width -= delta;\n            destRegion.x = 0;\n        }\n        if (destRegion.y < 0) {\n            int delta = -destRegion.y*periodY;\n            srcRegion.y += delta;\n            srcRegion.height -= delta;\n            destRegion.y = 0;\n        }\n\n        // Now clip the destination Region to the subsampled width and height\n        int subsampledWidth = (srcRegion.width + periodX - 1)/periodX;\n        int subsampledHeight = (srcRegion.height + periodY - 1)/periodY;\n        destRegion.width = subsampledWidth;\n        destRegion.height = subsampledHeight;\n\n        // Now clip that to right and bottom of the destination image,\n        // if there is one, taking subsampling into account\n        if (image != null) {\n            Rectangle destImageRect = new Rectangle(0, 0,\n                                                    image.getWidth(),\n                                                    image.getHeight());\n            destRegion.setBounds(destRegion.intersection(destImageRect));\n            if (destRegion.isEmpty()) {\n                throw new IllegalArgumentException\n                    (\"Empty destination region!\");\n            }\n\n            int deltaX = destRegion.x + subsampledWidth - image.getWidth();\n            if (deltaX > 0) {\n                srcRegion.width -= deltaX*periodX;\n            }\n            int deltaY =  destRegion.y + subsampledHeight - image.getHeight();\n            if (deltaY > 0) {\n                srcRegion.height -= deltaY*periodY;\n            }\n        }\n        if (srcRegion.isEmpty() || destRegion.isEmpty()) {\n            throw new IllegalArgumentException(\"Empty region!\");\n        }\n    }"}
{"Number":"1275","API Relative Path":"javax.imageio.ImageReader.java-getDestination(ImageReadParam-Iterator-int-int)","Corresponding Source":"/**\n     * Returns the <code>BufferedImage<\/code> to which decoded pixel\n     * data should be written.  The image is determined by inspecting\n     * the supplied <code>ImageReadParam<\/code> if it is\n     * non-<code>null<\/code>; if its <code>getDestination<\/code>\n     * method returns a non-<code>null<\/code> value, that image is\n     * simply returned.  Otherwise,\n     * <code>param.getDestinationType<\/code> method is called to\n     * determine if a particular image type has been specified.  If\n     * so, the returned <code>ImageTypeSpecifier<\/code> is used after\n     * checking that it is equal to one of those included in\n     * <code>imageTypes<\/code>.\n     *\n     * <p> If <code>param<\/code> is <code>null<\/code> or the above\n     * steps have not yielded an image or an\n     * <code>ImageTypeSpecifier<\/code>, the first value obtained from\n     * the <code>imageTypes<\/code> parameter is used.  Typically, the\n     * caller will set <code>imageTypes<\/code> to the value of\n     * <code>getImageTypes(imageIndex)<\/code>.\n     *\n     * <p> Next, the dimensions of the image are determined by a call\n     * to <code>computeRegions<\/code>.  The actual width and height of\n     * the image being decoded are passed in as the <code>width<\/code>\n     * and <code>height<\/code> parameters.\n     *\n     * @param param an <code>ImageReadParam<\/code> to be used to get\n     * the destination image or image type, or <code>null<\/code>.\n     * @param imageTypes an <code>Iterator<\/code> of\n     * <code>ImageTypeSpecifier<\/code>s indicating the legal image\n     * types, with the default first.\n     * @param width the true width of the image or tile begin decoded.\n     * @param height the true width of the image or tile being decoded.\n     *\n     * @return the <code>BufferedImage<\/code> to which decoded pixel\n     * data should be written.\n     *\n     * @exception IIOException if the <code>ImageTypeSpecifier<\/code>\n     * specified by <code>param<\/code> does not match any of the legal\n     * ones from <code>imageTypes<\/code>.\n     * @exception IllegalArgumentException if <code>imageTypes<\/code>\n     * is <code>null<\/code> or empty, or if an object not of type\n     * <code>ImageTypeSpecifier<\/code> is retrieved from it.\n     * @exception IllegalArgumentException if the resulting image would\n     * have a width or height less than 1.\n     * @exception IllegalArgumentException if the product of\n     * <code>width<\/code> and <code>height<\/code> is greater than\n     * <code>Integer.MAX_VALUE<\/code>.\n     */\n    protected static BufferedImage\n        getDestination(ImageReadParam param,\n                       Iterator<ImageTypeSpecifier> imageTypes,\n                       int width, int height)\n        throws IIOException {\n        if (imageTypes == null || !imageTypes.hasNext()) {\n            throw new IllegalArgumentException(\"imageTypes null or empty!\");\n        }\n        if ((long)width*height > Integer.MAX_VALUE) {\n            throw new IllegalArgumentException\n                (\"width*height > Integer.MAX_VALUE!\");\n        }\n\n        BufferedImage dest = null;\n        ImageTypeSpecifier imageType = null;\n\n        // If param is non-null, use it\n        if (param != null) {\n            // Try to get the image itself\n            dest = param.getDestination();\n            if (dest != null) {\n                return dest;\n            }\n\n            // No image, get the image type\n            imageType = param.getDestinationType();\n        }\n\n        // No info from param, use fallback image type\n        if (imageType == null) {\n            Object o = imageTypes.next();\n            if (!(o instanceof ImageTypeSpecifier)) {\n                throw new IllegalArgumentException\n                    (\"Non-ImageTypeSpecifier retrieved from imageTypes!\");\n            }\n            imageType = (ImageTypeSpecifier)o;\n        } else {\n            boolean foundIt = false;\n            while (imageTypes.hasNext()) {\n                ImageTypeSpecifier type =\n                    (ImageTypeSpecifier)imageTypes.next();\n                if (type.equals(imageType)) {\n                    foundIt = true;\n                    break;\n                }\n            }\n\n            if (!foundIt) {\n                throw new IIOException\n                    (\"Destination type from ImageReadParam does not match!\");\n            }\n        }\n\n        Rectangle srcRegion = new Rectangle(0,0,0,0);\n        Rectangle destRegion = new Rectangle(0,0,0,0);\n        computeRegions(param,\n                       width,\n                       height,\n                       null,\n                       srcRegion,\n                       destRegion);\n\n        int destWidth = destRegion.x + destRegion.width;\n        int destHeight = destRegion.y + destRegion.height;\n        // Create a new image based on the type specifier\n        return imageType.createBufferedImage(destWidth, destHeight);\n    }"}
{"Number":"1276","API Relative Path":"javax.imageio.ImageReader.java-readAll(Iterator)","Corresponding Source":"/**\n     * Returns an <code>Iterator<\/code> containing all the images,\n     * thumbnails, and metadata, starting at the index given by\n     * <code>getMinIndex<\/code>, from the input source in the form of\n     * <code>IIOImage<\/code> objects.  An <code>Iterator<\/code>\n     * containing <code>ImageReadParam<\/code> objects is supplied; one\n     * element is consumed for each image read from the input source\n     * until no more images are available.  If the read param\n     * <code>Iterator<\/code> runs out of elements, but there are still\n     * more images available from the input source, default read\n     * params are used for the remaining images.\n     *\n     * <p> If <code>params<\/code> is <code>null<\/code>, a default read\n     * param will be used for all images.\n     *\n     * <p> The actual <code>BufferedImage<\/code> referenced by the\n     * returned <code>IIOImage<\/code> will be chosen using the\n     * algorithm defined by the <code>getDestination<\/code> method.\n     *\n     * <p> Any registered <code>IIOReadProgressListener<\/code> objects\n     * will be notified by calling their <code>sequenceStarted<\/code>\n     * method once.  Then, for each image decoded, there will be a\n     * call to <code>imageStarted<\/code>, followed by calls to\n     * <code>imageProgress<\/code> as the read progresses, and finally\n     * to <code>imageComplete<\/code>.  The\n     * <code>sequenceComplete<\/code> method will be called after the\n     * last image has been decoded.\n     * <code>IIOReadUpdateListener<\/code> objects may be updated at\n     * other times during the read as pixels are decoded.  Finally,\n     * <code>IIOReadWarningListener<\/code> objects will receive\n     * notification of any non-fatal warnings that occur during\n     * decoding.\n     *\n     * <p> The set of source bands to be read and destination bands to\n     * be written is determined by calling <code>getSourceBands<\/code>\n     * and <code>getDestinationBands<\/code> on the supplied\n     * <code>ImageReadParam<\/code>.  If the lengths of the arrays\n     * returned by these methods differ, the set of source bands\n     * contains an index larger that the largest available source\n     * index, or the set of destination bands contains an index larger\n     * than the largest legal destination index, an\n     * <code>IllegalArgumentException<\/code> is thrown.\n     *\n     * <p> Thumbnails will be returned in their entirety regardless of the\n     * region settings.\n     *\n     * <p> If any of the supplied <code>ImageReadParam<\/code>s contain\n     * optional setting values not supported by this reader (<i>e.g.<\/i>\n     * source render size or any format-specific settings), they will\n     * be ignored.\n     *\n     * @param params an <code>Iterator<\/code> containing\n     * <code>ImageReadParam<\/code> objects.\n     *\n     * @return an <code>Iterator<\/code> representing the\n     * contents of the input source as <code>IIOImage<\/code>s.\n     *\n     * @exception IllegalStateException if the input source has not been\n     * set.\n     * @exception IllegalArgumentException if any\n     * non-<code>null<\/code> element of <code>params<\/code> is not an\n     * <code>ImageReadParam<\/code>.\n     * @exception IllegalArgumentException if the set of source and\n     * destination bands specified by\n     * <code>param.getSourceBands<\/code> and\n     * <code>param.getDestinationBands<\/code> differ in length or\n     * include indices that are out of bounds.\n     * @exception IllegalArgumentException if a resulting image would\n     * have a width or height less than 1.\n     * @exception IOException if an error occurs during reading.\n     *\n     * @see ImageReadParam\n     * @see IIOImage\n     */\n    public Iterator<IIOImage>\n        readAll(Iterator<? extends ImageReadParam> params)\n        throws IOException\n    {\n        List output = new ArrayList();\n\n        int imageIndex = getMinIndex();\n\n        // Inform IIOReadProgressListeners we're starting a sequence\n        processSequenceStarted(imageIndex);\n\n        while (true) {\n            // Inform IIOReadProgressListeners and IIOReadUpdateListeners\n            // that we're starting a new image\n\n            ImageReadParam param = null;\n            if (params != null && params.hasNext()) {\n                Object o = params.next();\n                if (o != null) {\n                    if (o instanceof ImageReadParam) {\n                        param = (ImageReadParam)o;\n                    } else {\n                        throw new IllegalArgumentException\n                            (\"Non-ImageReadParam supplied as part of params!\");\n                    }\n                }\n            }\n\n            BufferedImage bi = null;\n            try {\n                bi = read(imageIndex, param);\n            } catch (IndexOutOfBoundsException e) {\n                break;\n            }\n\n            ArrayList thumbnails = null;\n            int numThumbnails = getNumThumbnails(imageIndex);\n            if (numThumbnails > 0) {\n                thumbnails = new ArrayList();\n                for (int j = 0; j < numThumbnails; j++) {\n                    thumbnails.add(readThumbnail(imageIndex, j));\n                }\n            }\n\n            IIOMetadata metadata = getImageMetadata(imageIndex);\n            IIOImage im = new IIOImage(bi, thumbnails, metadata);\n            output.add(im);\n\n            ++imageIndex;\n        }\n\n        // Inform IIOReadProgressListeners we're ending a sequence\n        processSequenceComplete();\n\n        return output.iterator();\n    }"}
{"Number":"1277","API Relative Path":"javax.imageio.ImageReader.java-readTile(int-int-int)","Corresponding Source":"/**\n     * Reads the tile indicated by the <code>tileX<\/code> and\n     * <code>tileY<\/code> arguments, returning it as a\n     * <code>BufferedImage<\/code>.  If the arguments are out of range,\n     * an <code>IllegalArgumentException<\/code> is thrown.  If the\n     * image is not tiled, the values 0, 0 will return the entire\n     * image; any other values will cause an\n     * <code>IllegalArgumentException<\/code> to be thrown.\n     *\n     * <p> This method is merely a convenience equivalent to calling\n     * <code>read(int, ImageReadParam)<\/code> with a read param\n     * specifying a source region having offsets of\n     * <code>tileX*getTileWidth(imageIndex)<\/code>,\n     * <code>tileY*getTileHeight(imageIndex)<\/code> and width and\n     * height of <code>getTileWidth(imageIndex)<\/code>,\n     * <code>getTileHeight(imageIndex)<\/code>; and subsampling\n     * factors of 1 and offsets of 0.  To subsample a tile, call\n     * <code>read<\/code> with a read param specifying this region\n     * and different subsampling parameters.\n     *\n     * <p> The default implementation returns the entire image if\n     * <code>tileX<\/code> and <code>tileY<\/code> are 0, or throws\n     * an <code>IllegalArgumentException<\/code> otherwise.\n     *\n     * @param imageIndex the index of the image to be retrieved.\n     * @param tileX the column index (starting with 0) of the tile\n     * to be retrieved.\n     * @param tileY the row index (starting with 0) of the tile\n     * to be retrieved.\n     *\n     * @return the tile as a <code>BufferedImage<\/code>.\n     *\n     * @exception IllegalStateException if the input source has not been\n     * set.\n     * @exception IndexOutOfBoundsException if <code>imageIndex<\/code>\n     * is out of bounds.\n     * @exception IllegalArgumentException if the tile indices are\n     * out of bounds.\n     * @exception IOException if an error occurs during reading.\n     */\n    public BufferedImage readTile(int imageIndex,\n                                  int tileX, int tileY) throws IOException {\n        if ((tileX != 0) || (tileY != 0)) {\n            throw new IllegalArgumentException(\"Invalid tile indices\");\n        }\n        return read(imageIndex);\n    }"}
{"Number":"1278","API Relative Path":"javax.imageio.ImageReader.java-readTileRaster(int-int-int)","Corresponding Source":"/**\n     * Returns a new <code>Raster<\/code> object containing the raw\n     * pixel data from the tile, without any color conversion applied.\n     * The application must determine how to interpret the pixel data by other\n     * means.\n     *\n     * <p> If {@link #canReadRaster canReadRaster()} returns\n     * <code>false<\/code>, this method throws an\n     * <code>UnsupportedOperationException<\/code>.\n     *\n     * <p> The default implementation checks if reading\n     * <code>Raster<\/code>s is supported, and if so calls {@link\n     * #readRaster readRaster(imageIndex, null)} if\n     * <code>tileX<\/code> and <code>tileY<\/code> are 0, or throws an\n     * <code>IllegalArgumentException<\/code> otherwise.\n     *\n     * @param imageIndex the index of the image to be retrieved.\n     * @param tileX the column index (starting with 0) of the tile\n     * to be retrieved.\n     * @param tileY the row index (starting with 0) of the tile\n     * to be retrieved.\n     *\n     * @return the tile as a <code>Raster<\/code>.\n     *\n     * @exception UnsupportedOperationException if this plug-in does not\n     * support reading raw <code>Raster<\/code>s.\n     * @exception IllegalArgumentException if the tile indices are\n     * out of bounds.\n     * @exception IllegalStateException if the input source has not been\n     * set.\n     * @exception IndexOutOfBoundsException if <code>imageIndex<\/code>\n     * is out of bounds.\n     * @exception IOException if an error occurs during reading.\n     *\n     * @see #readTile\n     * @see #readRaster\n     * @see java.awt.image.Raster\n     */\n    public Raster readTileRaster(int imageIndex,\n                                 int tileX, int tileY) throws IOException {\n        if (!canReadRaster()) {\n            throw new UnsupportedOperationException\n                (\"readTileRaster not supported!\");\n        }\n        if ((tileX != 0) || (tileY != 0)) {\n            throw new IllegalArgumentException(\"Invalid tile indices\");\n        }\n        return readRaster(imageIndex, null);\n    }"}
{"Number":"1279","API Relative Path":"javax.imageio.ImageReader.java-removeIIOReadProgressListener(IIOReadProgressListener)","Corresponding Source":"/**\n     * Removes an <code>IIOReadProgressListener<\/code> from the list\n     * of registered progress listeners.  If the listener was not\n     * previously registered, or if <code>listener<\/code> is\n     * <code>null<\/code>, no exception will be thrown and no action\n     * will be taken.\n     *\n     * @param listener an IIOReadProgressListener to be unregistered.\n     *\n     * @see #addIIOReadProgressListener\n     */\n    public void\n        removeIIOReadProgressListener (IIOReadProgressListener listener) {\n        if (listener == null || progressListeners == null) {\n            return;\n        }\n        progressListeners = removeFromList(progressListeners, listener);\n    }"}
{"Number":"1280","API Relative Path":"javax.imageio.ImageReader.java-removeIIOReadUpdateListener(IIOReadUpdateListener)","Corresponding Source":"/**\n     * Removes an <code>IIOReadUpdateListener<\/code> from the list of\n     * registered update listeners.  If the listener was not\n     * previously registered, or if <code>listener<\/code> is\n     * <code>null<\/code>, no exception will be thrown and no action\n     * will be taken.\n     *\n     * @param listener an IIOReadUpdateListener to be unregistered.\n     *\n     * @see #addIIOReadUpdateListener\n     */\n    public void removeIIOReadUpdateListener(IIOReadUpdateListener listener) {\n        if (listener == null || updateListeners == null) {\n            return;\n        }\n        updateListeners = removeFromList(updateListeners, listener);\n    }"}
{"Number":"1281","API Relative Path":"javax.imageio.ImageReader.java-removeIIOReadWarningListener(IIOReadWarningListener)","Corresponding Source":"/**\n     * Removes an <code>IIOReadWarningListener<\/code> from the list of\n     * registered error listeners.  If the listener was not previously\n     * registered, or if <code>listener<\/code> is <code>null<\/code>,\n     * no exception will be thrown and no action will be taken.\n     *\n     * @param listener an IIOReadWarningListener to be unregistered.\n     *\n     * @see #addIIOReadWarningListener\n     */\n    public void removeIIOReadWarningListener(IIOReadWarningListener listener) {\n        if (listener == null || warningListeners == null) {\n            return;\n        }\n        int index = warningListeners.indexOf(listener);\n        if (index != -1) {\n            warningListeners.remove(index);\n            warningLocales.remove(index);\n            if (warningListeners.size() == 0) {\n                warningListeners = null;\n                warningLocales = null;\n            }\n        }\n    }"}
{"Number":"1282","API Relative Path":"javax.imageio.ImageReader.java-setLocale(Locale)","Corresponding Source":"/**\n     * Sets the current <code>Locale<\/code> of this\n     * <code>ImageReader<\/code> to the given value.  A value of\n     * <code>null<\/code> removes any previous setting, and indicates\n     * that the reader should localize as it sees fit.\n     *\n     * @param locale the desired <code>Locale<\/code>, or\n     * <code>null<\/code>.\n     *\n     * @exception IllegalArgumentException if <code>locale<\/code> is\n     * non-<code>null<\/code> but is not one of the values returned by\n     * <code>getAvailableLocales<\/code>.\n     *\n     * @see #getLocale\n     */\n    public void setLocale(Locale locale) {\n        if (locale != null) {\n            Locale[] locales = getAvailableLocales();\n            boolean found = false;\n            if (locales != null) {\n                for (int i = 0; i < locales.length; i++) {\n                    if (locale.equals(locales[i])) {\n                        found = true;\n                        break;\n                    }\n                }\n            }\n            if (!found) {\n                throw new IllegalArgumentException(\"Invalid locale!\");\n            }\n        }\n        this.locale = locale;\n    }"}
{"Number":"1283","API Relative Path":"javax.imageio.ImageReadParam.java-setDestinationBands(int[])","Corresponding Source":"/**\n     * Sets the indices of the destination bands where data\n     * will be placed.  Duplicate indices are not allowed.\n     *\n     * <p> A <code>null<\/code> value indicates that all destination\n     * bands will be used.\n     *\n     * <p> Choosing a destination band subset will not affect the\n     * number of bands in the output image of a read if no destination\n     * image is specified; the created destination image will still\n     * have the same number of bands as if this method had never been\n     * called.  If a different number of bands in the destination\n     * image is desired, an image must be supplied using the\n     * <code>ImageReadParam.setDestination<\/code> method.\n     *\n     * <p> At the time of reading or writing, an\n     * <code>IllegalArgumentException<\/code> will be thrown by the\n     * reader or writer if a value larger than the largest destination\n     * band index has been specified, or if the number of source bands\n     * and destination bands to be used differ.  The\n     * <code>ImageReader.checkReadParamBandSettings<\/code> method may\n     * be used to automate this test.\n     *\n     * @param destinationBands an array of integer band indices to be\n     * used.\n     *\n     * @exception IllegalArgumentException if <code>destinationBands<\/code>\n     * contains a negative or duplicate value.\n     *\n     * @see #getDestinationBands\n     * @see #getSourceBands\n     * @see ImageReader#checkReadParamBandSettings\n     */\n    public void setDestinationBands(int[] destinationBands) {\n        if (destinationBands == null) {\n            this.destinationBands = null;\n        } else {\n            int numBands = destinationBands.length;\n            for (int i = 0; i < numBands; i++) {\n                int band = destinationBands[i];\n                if (band < 0) {\n                    throw new IllegalArgumentException(\"Band value < 0!\");\n                }\n                for (int j = i + 1; j < numBands; j++) {\n                    if (band == destinationBands[j]) {\n                        throw new IllegalArgumentException(\"Duplicate band value!\");\n                    }\n                }\n            }\n            this.destinationBands = (int[])destinationBands.clone();\n        }\n    }"}
{"Number":"1284","API Relative Path":"javax.imageio.ImageReadParam.java-setDestinationBands(int[])","Corresponding Source":"/**\n     * Sets the indices of the destination bands where data\n     * will be placed.  Duplicate indices are not allowed.\n     *\n     * <p> A <code>null<\/code> value indicates that all destination\n     * bands will be used.\n     *\n     * <p> Choosing a destination band subset will not affect the\n     * number of bands in the output image of a read if no destination\n     * image is specified; the created destination image will still\n     * have the same number of bands as if this method had never been\n     * called.  If a different number of bands in the destination\n     * image is desired, an image must be supplied using the\n     * <code>ImageReadParam.setDestination<\/code> method.\n     *\n     * <p> At the time of reading or writing, an\n     * <code>IllegalArgumentException<\/code> will be thrown by the\n     * reader or writer if a value larger than the largest destination\n     * band index has been specified, or if the number of source bands\n     * and destination bands to be used differ.  The\n     * <code>ImageReader.checkReadParamBandSettings<\/code> method may\n     * be used to automate this test.\n     *\n     * @param destinationBands an array of integer band indices to be\n     * used.\n     *\n     * @exception IllegalArgumentException if <code>destinationBands<\/code>\n     * contains a negative or duplicate value.\n     *\n     * @see #getDestinationBands\n     * @see #getSourceBands\n     * @see ImageReader#checkReadParamBandSettings\n     */\n    public void setDestinationBands(int[] destinationBands) {\n        if (destinationBands == null) {\n            this.destinationBands = null;\n        } else {\n            int numBands = destinationBands.length;\n            for (int i = 0; i < numBands; i++) {\n                int band = destinationBands[i];\n                if (band < 0) {\n                    throw new IllegalArgumentException(\"Band value < 0!\");\n                }\n                for (int j = i + 1; j < numBands; j++) {\n                    if (band == destinationBands[j]) {\n                        throw new IllegalArgumentException(\"Duplicate band value!\");\n                    }\n                }\n            }\n            this.destinationBands = (int[])destinationBands.clone();\n        }\n    }"}
{"Number":"1285","API Relative Path":"javax.imageio.ImageReadParam.java-setSourceProgressivePasses(int-int)","Corresponding Source":"/**\n     * Sets the range of progressive passes that will be decoded.\n     * Passes outside of this range will be ignored.\n     *\n     * <p> A progressive pass is a re-encoding of the entire image,\n     * generally at progressively higher effective resolutions, but\n     * requiring greater transmission bandwidth.  The most common use\n     * of progressive encoding is found in the JPEG format, where\n     * successive passes include more detailed representations of the\n     * high-frequency image content.\n     *\n     * <p> The actual number of passes to be decoded is determined\n     * during decoding, based on the number of actual passes available\n     * in the stream.  Thus if <code>minPass + numPasses - 1<\/code> is\n     * larger than the index of the last available passes, decoding\n     * will end with that pass.\n     *\n     * <p> A value of <code>numPasses<\/code> of\n     * <code>Integer.MAX_VALUE<\/code> indicates that all passes from\n     * <code>minPass<\/code> forward should be read.  Otherwise, the\n     * index of the last pass (<i>i.e.<\/i>, <code>minPass + numPasses\n     * - 1<\/code>) must not exceed <code>Integer.MAX_VALUE<\/code>.\n     *\n     * <p> There is no <code>unsetSourceProgressivePasses<\/code>\n     * method; the same effect may be obtained by calling\n     * <code>setSourceProgressivePasses(0, Integer.MAX_VALUE)<\/code>.\n     *\n     * @param minPass the index of the first pass to be decoded.\n     * @param numPasses the maximum number of passes to be decoded.\n     *\n     * @exception IllegalArgumentException if <code>minPass<\/code> is\n     * negative, <code>numPasses<\/code> is negative or 0, or\n     * <code>numPasses<\/code> is smaller than\n     * <code>Integer.MAX_VALUE<\/code> but <code>minPass +\n     * numPasses - 1<\/code> is greater than\n     * <code>INTEGER.MAX_VALUE<\/code>.\n     *\n     * @see #getSourceMinProgressivePass\n     * @see #getSourceMaxProgressivePass\n     */\n    public void setSourceProgressivePasses(int minPass, int numPasses) {\n        if (minPass < 0) {\n            throw new IllegalArgumentException(\"minPass < 0!\");\n        }\n        if (numPasses <= 0) {\n            throw new IllegalArgumentException(\"numPasses <= 0!\");\n        }\n        if ((numPasses != Integer.MAX_VALUE) &&\n            (((minPass + numPasses - 1) & 0x80000000) != 0)) {\n            throw new IllegalArgumentException\n                (\"minPass + numPasses - 1 > INTEGER.MAX_VALUE!\");\n        }\n\n        this.minProgressivePass = minPass;\n        this.numProgressivePasses = numPasses;\n    }"}
{"Number":"1286","API Relative Path":"javax.imageio.ImageReadParam.java-setSourceProgressivePasses(int-int)","Corresponding Source":"/**\n     * Sets the range of progressive passes that will be decoded.\n     * Passes outside of this range will be ignored.\n     *\n     * <p> A progressive pass is a re-encoding of the entire image,\n     * generally at progressively higher effective resolutions, but\n     * requiring greater transmission bandwidth.  The most common use\n     * of progressive encoding is found in the JPEG format, where\n     * successive passes include more detailed representations of the\n     * high-frequency image content.\n     *\n     * <p> The actual number of passes to be decoded is determined\n     * during decoding, based on the number of actual passes available\n     * in the stream.  Thus if <code>minPass + numPasses - 1<\/code> is\n     * larger than the index of the last available passes, decoding\n     * will end with that pass.\n     *\n     * <p> A value of <code>numPasses<\/code> of\n     * <code>Integer.MAX_VALUE<\/code> indicates that all passes from\n     * <code>minPass<\/code> forward should be read.  Otherwise, the\n     * index of the last pass (<i>i.e.<\/i>, <code>minPass + numPasses\n     * - 1<\/code>) must not exceed <code>Integer.MAX_VALUE<\/code>.\n     *\n     * <p> There is no <code>unsetSourceProgressivePasses<\/code>\n     * method; the same effect may be obtained by calling\n     * <code>setSourceProgressivePasses(0, Integer.MAX_VALUE)<\/code>.\n     *\n     * @param minPass the index of the first pass to be decoded.\n     * @param numPasses the maximum number of passes to be decoded.\n     *\n     * @exception IllegalArgumentException if <code>minPass<\/code> is\n     * negative, <code>numPasses<\/code> is negative or 0, or\n     * <code>numPasses<\/code> is smaller than\n     * <code>Integer.MAX_VALUE<\/code> but <code>minPass +\n     * numPasses - 1<\/code> is greater than\n     * <code>INTEGER.MAX_VALUE<\/code>.\n     *\n     * @see #getSourceMinProgressivePass\n     * @see #getSourceMaxProgressivePass\n     */\n    public void setSourceProgressivePasses(int minPass, int numPasses) {\n        if (minPass < 0) {\n            throw new IllegalArgumentException(\"minPass < 0!\");\n        }\n        if (numPasses <= 0) {\n            throw new IllegalArgumentException(\"numPasses <= 0!\");\n        }\n        if ((numPasses != Integer.MAX_VALUE) &&\n            (((minPass + numPasses - 1) & 0x80000000) != 0)) {\n            throw new IllegalArgumentException\n                (\"minPass + numPasses - 1 > INTEGER.MAX_VALUE!\");\n        }\n\n        this.minProgressivePass = minPass;\n        this.numProgressivePasses = numPasses;\n    }"}
{"Number":"1287","API Relative Path":"javax.imageio.ImageReadParam.java-setSourceRenderSize(Dimension)","Corresponding Source":"/**\n     * If the image is able to be rendered at an arbitrary size, sets\n     * the source width and height to the supplied values.  Note that\n     * the values returned from the <code>getWidth<\/code> and\n     * <code>getHeight<\/code> methods on <code>ImageReader<\/code> are\n     * not affected by this method; they will continue to return the\n     * default size for the image.  Similarly, if the image is also\n     * tiled the tile width and height are given in terms of the default\n     * size.\n     *\n     * <p> Typically, the width and height should be chosen such that\n     * the ratio of width to height closely approximates the aspect\n     * ratio of the image, as returned from\n     * <code>ImageReader.getAspectRatio<\/code>.\n     *\n     * <p> If this plug-in does not allow the rendering size to be\n     * set, an <code>UnsupportedOperationException<\/code> will be\n     * thrown.\n     *\n     * <p> To remove the render size setting, pass in a value of\n     * <code>null<\/code> for <code>size<\/code>.\n     *\n     * @param size a <code>Dimension<\/code> indicating the desired\n     * width and height.\n     *\n     * @exception IllegalArgumentException if either the width or the\n     * height is negative or 0.\n     * @exception UnsupportedOperationException if image resizing\n     * is not supported by this plug-in.\n     *\n     * @see #getSourceRenderSize\n     * @see ImageReader#getWidth\n     * @see ImageReader#getHeight\n     * @see ImageReader#getAspectRatio\n     */\n    public void setSourceRenderSize(Dimension size)\n        throws UnsupportedOperationException {\n        if (!canSetSourceRenderSize()) {\n            throw new UnsupportedOperationException\n                (\"Can't set source render size!\");\n        }\n\n        if (size == null) {\n            this.sourceRenderSize = null;\n        } else {\n            if (size.width <= 0 || size.height <= 0) {\n                throw new IllegalArgumentException(\"width or height <= 0!\");\n            }\n            this.sourceRenderSize = (Dimension)size.clone();\n        }\n    }"}
{"Number":"1288","API Relative Path":"javax.imageio.ImageTypeSpecifier.java-createFromBufferedImageType(int)","Corresponding Source":"/**\n     * Returns an <code>ImageTypeSpecifier<\/code> that encodes\n     * one of the standard <code>BufferedImage<\/code> types\n     * (other than <code>TYPE_CUSTOM<\/code>).\n     *\n     * @param bufferedImageType an int representing one of the standard\n     * <code>BufferedImage<\/code> types.\n     *\n     * @return an <code>ImageTypeSpecifier<\/code> with the desired\n     * characteristics.\n     *\n     * @exception IllegalArgumentException if\n     * <code>bufferedImageType<\/code> is not one of the standard\n     * types, or is equal to <code>TYPE_CUSTOM<\/code>.\n     *\n     * @see java.awt.image.BufferedImage\n     * @see java.awt.image.BufferedImage#TYPE_INT_RGB\n     * @see java.awt.image.BufferedImage#TYPE_INT_ARGB\n     * @see java.awt.image.BufferedImage#TYPE_INT_ARGB_PRE\n     * @see java.awt.image.BufferedImage#TYPE_INT_BGR\n     * @see java.awt.image.BufferedImage#TYPE_3BYTE_BGR\n     * @see java.awt.image.BufferedImage#TYPE_4BYTE_ABGR\n     * @see java.awt.image.BufferedImage#TYPE_4BYTE_ABGR_PRE\n     * @see java.awt.image.BufferedImage#TYPE_USHORT_565_RGB\n     * @see java.awt.image.BufferedImage#TYPE_USHORT_555_RGB\n     * @see java.awt.image.BufferedImage#TYPE_BYTE_GRAY\n     * @see java.awt.image.BufferedImage#TYPE_USHORT_GRAY\n     * @see java.awt.image.BufferedImage#TYPE_BYTE_BINARY\n     * @see java.awt.image.BufferedImage#TYPE_BYTE_INDEXED\n     */\n    public static\n        ImageTypeSpecifier createFromBufferedImageType(int bufferedImageType) {\n        if (bufferedImageType >= BufferedImage.TYPE_INT_RGB &&\n            bufferedImageType <= BufferedImage.TYPE_BYTE_INDEXED) {\n            return getSpecifier(bufferedImageType);\n        } else if (bufferedImageType == BufferedImage.TYPE_CUSTOM) {\n            throw new IllegalArgumentException(\"Cannot create from TYPE_CUSTOM!\");\n        } else {\n            throw new IllegalArgumentException(\"Invalid BufferedImage type!\");\n        }\n    }"}
{"Number":"1289","API Relative Path":"javax.imageio.ImageTypeSpecifier.java-createFromBufferedImageType(int)","Corresponding Source":"/**\n     * Returns an <code>ImageTypeSpecifier<\/code> that encodes\n     * one of the standard <code>BufferedImage<\/code> types\n     * (other than <code>TYPE_CUSTOM<\/code>).\n     *\n     * @param bufferedImageType an int representing one of the standard\n     * <code>BufferedImage<\/code> types.\n     *\n     * @return an <code>ImageTypeSpecifier<\/code> with the desired\n     * characteristics.\n     *\n     * @exception IllegalArgumentException if\n     * <code>bufferedImageType<\/code> is not one of the standard\n     * types, or is equal to <code>TYPE_CUSTOM<\/code>.\n     *\n     * @see java.awt.image.BufferedImage\n     * @see java.awt.image.BufferedImage#TYPE_INT_RGB\n     * @see java.awt.image.BufferedImage#TYPE_INT_ARGB\n     * @see java.awt.image.BufferedImage#TYPE_INT_ARGB_PRE\n     * @see java.awt.image.BufferedImage#TYPE_INT_BGR\n     * @see java.awt.image.BufferedImage#TYPE_3BYTE_BGR\n     * @see java.awt.image.BufferedImage#TYPE_4BYTE_ABGR\n     * @see java.awt.image.BufferedImage#TYPE_4BYTE_ABGR_PRE\n     * @see java.awt.image.BufferedImage#TYPE_USHORT_565_RGB\n     * @see java.awt.image.BufferedImage#TYPE_USHORT_555_RGB\n     * @see java.awt.image.BufferedImage#TYPE_BYTE_GRAY\n     * @see java.awt.image.BufferedImage#TYPE_USHORT_GRAY\n     * @see java.awt.image.BufferedImage#TYPE_BYTE_BINARY\n     * @see java.awt.image.BufferedImage#TYPE_BYTE_INDEXED\n     */\n    public static\n        ImageTypeSpecifier createFromBufferedImageType(int bufferedImageType) {\n        if (bufferedImageType >= BufferedImage.TYPE_INT_RGB &&\n            bufferedImageType <= BufferedImage.TYPE_BYTE_INDEXED) {\n            return getSpecifier(bufferedImageType);\n        } else if (bufferedImageType == BufferedImage.TYPE_CUSTOM) {\n            throw new IllegalArgumentException(\"Cannot create from TYPE_CUSTOM!\");\n        } else {\n            throw new IllegalArgumentException(\"Invalid BufferedImage type!\");\n        }\n    }"}
{"Number":"1290","API Relative Path":"javax.imageio.ImageTypeSpecifier.java-getSampleModel(int-int)","Corresponding Source":"/**\n     * Returns a <code>SampleModel<\/code> based on the settings\n     * encapsulated within this object.  The width and height of the\n     * <code>SampleModel<\/code> will be set to the supplied values.\n     *\n     * @param width the desired width of the returned <code>SampleModel<\/code>.\n     * @param height the desired height of the returned\n     * <code>SampleModel<\/code>.\n     *\n     * @return a <code>SampleModel<\/code> with the given dimensions.\n     *\n     * @exception IllegalArgumentException if either <code>width<\/code> or\n     * <code>height<\/code> are negative or zero.\n     * @exception IllegalArgumentException if the product of\n     * <code>width<\/code> and <code>height<\/code> is greater than\n     * <code>Integer.MAX_VALUE<\/code>\n     */\n    public SampleModel getSampleModel(int width, int height) {\n        if ((long)width*height > Integer.MAX_VALUE) {\n            throw new IllegalArgumentException\n                (\"width*height > Integer.MAX_VALUE!\");\n        }\n        return sampleModel.createCompatibleSampleModel(width, height);\n    }"}
{"Number":"1291","API Relative Path":"javax.imageio.ImageTypeSpecifier.java-ImageTypeSpecifier(RenderedImage)","Corresponding Source":"/**\n     * Constructs an <code>ImageTypeSpecifier<\/code> from a\n     * <code>RenderedImage<\/code>.  If a <code>BufferedImage<\/code> is\n     * being used, one of the factory methods\n     * <code>createFromRenderedImage<\/code> or\n     * <code>createFromBufferedImageType<\/code> should be used instead in\n     * order to get a more accurate result.\n     *\n     * @param image a <code>RenderedImage<\/code>.\n     *\n     * @exception IllegalArgumentException if the argument is\n     * <code>null<\/code>.\n     */\n    public ImageTypeSpecifier(RenderedImage image) {\n        if (image == null) {\n            throw new IllegalArgumentException(\"image == null!\");\n        }\n        colorModel = image.getColorModel();\n        sampleModel = image.getSampleModel();\n    }"}
{"Number":"1292","API Relative Path":"javax.imageio.ImageWriteParam.java-getBitRate(float)","Corresponding Source":"/**\n     * Returns a <code>float<\/code> indicating an estimate of the\n     * number of bits of output data for each bit of input image data\n     * at the given quality level.  The value will typically lie\n     * between <code>0<\/code> and <code>1<\/code>, with smaller values\n     * indicating more compression.  A special value of\n     * <code>-1.0F<\/code> is used to indicate that no estimate is\n     * available.\n     *\n     * <p> If there are multiple compression types but none has been set,\n     * an <code>IllegalStateException<\/code> is thrown.\n     *\n     * <p> The default implementation checks that compression is\n     * supported and the compression mode is\n     * <code>MODE_EXPLICIT<\/code>.  If so, if\n     * <code>getCompressionTypes()<\/code> is <code>null<\/code> or\n     * <code>getCompressionType()<\/code> is non-<code>null<\/code>, and\n     * <code>quality<\/code> is within bounds, it returns\n     * <code>-1.0<\/code>.\n     *\n     * @param quality the quality setting whose bit rate is to be\n     * queried.\n     *\n     * @return an estimate of the compressed bit rate, or\n     * <code>-1.0F<\/code> if no estimate is available.\n     *\n     * @exception UnsupportedOperationException if the writer does not\n     * support compression.\n     * @exception IllegalStateException if the compression mode is not\n     * <code>MODE_EXPLICIT<\/code>.\n     * @exception IllegalStateException if the set of legal\n     * compression types is non-<code>null<\/code> and the current\n     * compression type is <code>null<\/code>.\n     * @exception IllegalArgumentException if <code>quality<\/code> is\n     * not between <code>0<\/code>and <code>1<\/code>, inclusive.\n     */\n    public float getBitRate(float quality) {\n        if (!canWriteCompressed()) {\n            throw new UnsupportedOperationException(\n                \"Compression not supported.\");\n        }\n        if (getCompressionMode() != MODE_EXPLICIT) {\n            throw new IllegalStateException\n                (\"Compression mode not MODE_EXPLICIT!\");\n        }\n        if ((getCompressionTypes() != null) &&\n            (getCompressionType() == null)) {\n            throw new IllegalStateException(\"No compression type set!\");\n        }\n        if (quality < 0.0F || quality > 1.0F) {\n            throw new IllegalArgumentException(\"Quality out-of-bounds!\");\n        }\n        return -1.0F;\n    }"}
{"Number":"1293","API Relative Path":"javax.imageio.ImageWriteParam.java-setCompressionMode(int)","Corresponding Source":"/**\n     * Specifies whether compression is to be performed, and if so how\n     * compression parameters are to be determined.  The <code>mode<\/code>\n     * argument must be one of the four modes, interpreted as follows:\n     *\n     * <ul>\n     *   <li><code>MODE_DISABLED<\/code> - If the mode is set to\n     *   <code>MODE_DISABLED<\/code>, methods that query or modify the\n     *   compression type or parameters will throw an\n     *   <code>IllegalStateException<\/code> (if compression is\n     *   normally supported by the plug-in). Some writers, such as JPEG,\n     *   do not normally offer uncompressed output. In this case, attempting\n     *   to set the mode to <code>MODE_DISABLED<\/code> will throw an\n     *   <code>UnsupportedOperationException<\/code> and the mode will not be\n     *   changed.\n     *\n     *   <li><code>MODE_EXPLICIT<\/code> - Compress using the\n     *   compression type and quality settings specified in this\n     *   <code>ImageWriteParam<\/code>.  Any previously set compression\n     *   parameters are discarded.\n     *\n     *   <li><code>MODE_COPY_FROM_METADATA<\/code> - Use whatever\n     *   compression parameters are specified in metadata objects\n     *   passed in to the writer.\n     *\n     *   <li><code>MODE_DEFAULT<\/code> - Use default compression\n     *   parameters.\n     * <\/ul>\n     *\n     * <p> The default is <code>MODE_COPY_FROM_METADATA<\/code>.\n     *\n     * @param mode The mode for setting compression in the output\n     * stream.\n     *\n     * @exception UnsupportedOperationException if the writer does not\n     * support compression, or does not support the requested mode.\n     * @exception IllegalArgumentException if <code>mode<\/code> is not\n     * one of the modes listed above.\n     *\n     * @see #getCompressionMode\n     */\n    public void setCompressionMode(int mode) {\n        if (!canWriteCompressed()) {\n            throw new UnsupportedOperationException(\n                \"Compression not supported.\");\n        }\n        if (mode < MODE_DISABLED || mode > MAX_MODE) {\n            throw new IllegalArgumentException(\"Illegal value for mode!\");\n        }\n        this.compressionMode = mode;\n        if (mode == MODE_EXPLICIT) {\n            unsetCompression();\n        }\n    }"}
{"Number":"1294","API Relative Path":"javax.imageio.ImageWriteParam.java-setCompressionQuality(float)","Corresponding Source":"/**\n     * Sets the compression quality to a value between <code>0<\/code>\n     * and <code>1<\/code>.  Only a single compression quality setting\n     * is supported by default; writers can provide extended versions\n     * of <code>ImageWriteParam<\/code> that offer more control.  For\n     * lossy compression schemes, the compression quality should\n     * control the tradeoff between file size and image quality (for\n     * example, by choosing quantization tables when writing JPEG\n     * images).  For lossless schemes, the compression quality may be\n     * used to control the tradeoff between file size and time taken\n     * to perform the compression (for example, by optimizing row\n     * filters and setting the ZLIB compression level when writing\n     * PNG images).\n     *\n     * <p> A compression quality setting of 0.0 is most generically\n     * interpreted as \"high compression is important,\" while a setting of\n     * 1.0 is most generically interpreted as \"high image quality is\n     * important.\"\n     *\n     * <p> If there are multiple compression types but none has been\n     * set, an <code>IllegalStateException<\/code> is thrown.\n     *\n     * <p> The default implementation checks that compression is\n     * supported, and that the compression mode is\n     * <code>MODE_EXPLICIT<\/code>.  If so, if\n     * <code>getCompressionTypes()<\/code> returns <code>null<\/code> or\n     * <code>compressionType<\/code> is non-<code>null<\/code> it sets\n     * the <code>compressionQuality<\/code> instance variable.\n     *\n     * @param quality a <code>float<\/code> between <code>0<\/code>and\n     * <code>1<\/code> indicating the desired quality level.\n     *\n     * @exception UnsupportedOperationException if the writer does not\n     * support compression.\n     * @exception IllegalStateException if the compression mode is not\n     * <code>MODE_EXPLICIT<\/code>.\n     * @exception IllegalStateException if the set of legal\n     * compression types is non-<code>null<\/code> and the current\n     * compression type is <code>null<\/code>.\n     * @exception IllegalArgumentException if <code>quality<\/code> is\n     * not between <code>0<\/code>and <code>1<\/code>, inclusive.\n     *\n     * @see #getCompressionQuality\n     */\n    public void setCompressionQuality(float quality) {\n        if (!canWriteCompressed()) {\n            throw new UnsupportedOperationException(\n                \"Compression not supported\");\n        }\n        if (getCompressionMode() != MODE_EXPLICIT) {\n            throw new IllegalStateException\n                (\"Compression mode not MODE_EXPLICIT!\");\n        }\n        if (getCompressionTypes() != null && getCompressionType() == null) {\n            throw new IllegalStateException(\"No compression type set!\");\n        }\n        if (quality < 0.0F || quality > 1.0F) {\n            throw new IllegalArgumentException(\"Quality out-of-bounds!\");\n        }\n        this.compressionQuality = quality;\n    }"}
{"Number":"1295","API Relative Path":"javax.imageio.ImageWriteParam.java-setCompressionType(String)","Corresponding Source":"/**\n     * Sets the compression type to one of the values indicated by\n     * <code>getCompressionTypes<\/code>.  If a value of\n     * <code>null<\/code> is passed in, any previous setting is\n     * removed.\n     *\n     * <p> The default implementation checks whether compression is\n     * supported and the compression mode is\n     * <code>MODE_EXPLICIT<\/code>.  If so, it calls\n     * <code>getCompressionTypes<\/code> and checks if\n     * <code>compressionType<\/code> is one of the legal values.  If it\n     * is, the <code>compressionType<\/code> instance variable is set.\n     * If <code>compressionType<\/code> is <code>null<\/code>, the\n     * instance variable is set without performing any checking.\n     *\n     * @param compressionType one of the <code>String<\/code>s returned\n     * by <code>getCompressionTypes<\/code>, or <code>null<\/code> to\n     * remove any previous setting.\n     *\n     * @exception UnsupportedOperationException if the writer does not\n     * support compression.\n     * @exception IllegalStateException if the compression mode is not\n     * <code>MODE_EXPLICIT<\/code>.\n     * @exception UnsupportedOperationException if there are no\n     * settable compression types.\n     * @exception IllegalArgumentException if\n     * <code>compressionType<\/code> is non-<code>null<\/code> but is not\n     * one of the values returned by <code>getCompressionTypes<\/code>.\n     *\n     * @see #getCompressionTypes\n     * @see #getCompressionType\n     * @see #unsetCompression\n     */\n    public void setCompressionType(String compressionType) {\n        if (!canWriteCompressed()) {\n            throw new UnsupportedOperationException(\n                \"Compression not supported\");\n        }\n        if (getCompressionMode() != MODE_EXPLICIT) {\n            throw new IllegalStateException\n                (\"Compression mode not MODE_EXPLICIT!\");\n        }\n        String[] legalTypes = getCompressionTypes();\n        if (legalTypes == null) {\n            throw new UnsupportedOperationException(\n                \"No settable compression types\");\n        }\n        if (compressionType != null) {\n            boolean found = false;\n            if (legalTypes != null) {\n                for (int i = 0; i < legalTypes.length; i++) {\n                    if (compressionType.equals(legalTypes[i])) {\n                        found = true;\n                        break;\n                    }\n                }\n            }\n            if (!found) {\n                throw new IllegalArgumentException(\"Unknown compression type!\");\n            }\n        }\n        this.compressionType = compressionType;\n    }"}
{"Number":"1296","API Relative Path":"javax.imageio.ImageWriteParam.java-setProgressiveMode(int)","Corresponding Source":"/**\n     * Specifies that the writer is to write the image out in a\n     * progressive mode such that the stream will contain a series of\n     * scans of increasing quality.  If progressive encoding is not\n     * supported, an <code>UnsupportedOperationException<\/code> will\n     * be thrown.\n     *\n     * <p>  The mode argument determines how\n     * the progression parameters are chosen, and must be either\n     * <code>MODE_DISABLED<\/code>,\n     * <code>MODE_COPY_FROM_METADATA<\/code>, or\n     * <code>MODE_DEFAULT<\/code>.  Otherwise an\n     * <code>IllegalArgumentException<\/code> is thrown.\n     *\n     * <p> The modes are interpreted as follows:\n     *\n     * <ul>\n     *   <li><code>MODE_DISABLED<\/code> - No progression.  Use this to\n     *   turn off progression.\n     *\n     *   <li><code>MODE_COPY_FROM_METADATA<\/code> - The output image\n     *   will use whatever progression parameters are found in the\n     *   metadata objects passed into the writer.\n     *\n     *   <li><code>MODE_DEFAULT<\/code> - The image will be written\n     *   progressively, with parameters chosen by the writer.\n     * <\/ul>\n     *\n     * <p> The default is <code>MODE_COPY_FROM_METADATA<\/code>.\n     *\n     * @param mode The mode for setting progression in the output\n     * stream.\n     *\n     * @exception UnsupportedOperationException if the writer does not\n     * support progressive encoding.\n     * @exception IllegalArgumentException if <code>mode<\/code> is not\n     * one of the modes listed above.\n     *\n     * @see #getProgressiveMode\n     */\n    public void setProgressiveMode(int mode) {\n        if (!canWriteProgressive()) {\n            throw new UnsupportedOperationException(\n                \"Progressive output not supported\");\n        }\n        if (mode < MODE_DISABLED || mode > MAX_MODE) {\n            throw new IllegalArgumentException(\"Illegal value for mode!\");\n        }\n        if (mode == MODE_EXPLICIT) {\n            throw new IllegalArgumentException(\n                \"MODE_EXPLICIT not supported for progressive output\");\n        }\n        this.progressiveMode = mode;\n    }"}
{"Number":"1297","API Relative Path":"javax.imageio.ImageWriteParam.java-setProgressiveMode(int)","Corresponding Source":"/**\n     * Specifies that the writer is to write the image out in a\n     * progressive mode such that the stream will contain a series of\n     * scans of increasing quality.  If progressive encoding is not\n     * supported, an <code>UnsupportedOperationException<\/code> will\n     * be thrown.\n     *\n     * <p>  The mode argument determines how\n     * the progression parameters are chosen, and must be either\n     * <code>MODE_DISABLED<\/code>,\n     * <code>MODE_COPY_FROM_METADATA<\/code>, or\n     * <code>MODE_DEFAULT<\/code>.  Otherwise an\n     * <code>IllegalArgumentException<\/code> is thrown.\n     *\n     * <p> The modes are interpreted as follows:\n     *\n     * <ul>\n     *   <li><code>MODE_DISABLED<\/code> - No progression.  Use this to\n     *   turn off progression.\n     *\n     *   <li><code>MODE_COPY_FROM_METADATA<\/code> - The output image\n     *   will use whatever progression parameters are found in the\n     *   metadata objects passed into the writer.\n     *\n     *   <li><code>MODE_DEFAULT<\/code> - The image will be written\n     *   progressively, with parameters chosen by the writer.\n     * <\/ul>\n     *\n     * <p> The default is <code>MODE_COPY_FROM_METADATA<\/code>.\n     *\n     * @param mode The mode for setting progression in the output\n     * stream.\n     *\n     * @exception UnsupportedOperationException if the writer does not\n     * support progressive encoding.\n     * @exception IllegalArgumentException if <code>mode<\/code> is not\n     * one of the modes listed above.\n     *\n     * @see #getProgressiveMode\n     */\n    public void setProgressiveMode(int mode) {\n        if (!canWriteProgressive()) {\n            throw new UnsupportedOperationException(\n                \"Progressive output not supported\");\n        }\n        if (mode < MODE_DISABLED || mode > MAX_MODE) {\n            throw new IllegalArgumentException(\"Illegal value for mode!\");\n        }\n        if (mode == MODE_EXPLICIT) {\n            throw new IllegalArgumentException(\n                \"MODE_EXPLICIT not supported for progressive output\");\n        }\n        this.progressiveMode = mode;\n    }"}
{"Number":"1298","API Relative Path":"javax.imageio.ImageWriteParam.java-setTiling(int-int-int-int)","Corresponding Source":"/**\n     * Specifies that the image should be tiled in the output stream.\n     * The <code>tileWidth<\/code> and <code>tileHeight<\/code>\n     * parameters specify the width and height of the tiles in the\n     * file.  If the tile width or height is greater than the width or\n     * height of the image, the image is not tiled in that dimension.\n     *\n     * <p> If <code>canOffsetTiles<\/code> returns <code>false<\/code>,\n     * then the <code>tileGridXOffset<\/code> and\n     * <code>tileGridYOffset<\/code> parameters must be zero.\n     *\n     * @param tileWidth the width of each tile.\n     * @param tileHeight the height of each tile.\n     * @param tileGridXOffset the horizontal offset of the tile grid.\n     * @param tileGridYOffset the vertical offset of the tile grid.\n     *\n     * @exception UnsupportedOperationException if the plug-in does not\n     * support tiling.\n     * @exception IllegalStateException if the tiling mode is not\n     * <code>MODE_EXPLICIT<\/code>.\n     * @exception UnsupportedOperationException if the plug-in does not\n     * support grid offsets, and the grid offsets are not both zero.\n     * @exception IllegalArgumentException if the tile size is not\n     * within one of the allowable ranges returned by\n     * <code>getPreferredTileSizes<\/code>.\n     * @exception IllegalArgumentException if <code>tileWidth<\/code>\n     * or <code>tileHeight<\/code> is less than or equal to 0.\n     *\n     * @see #canWriteTiles\n     * @see #canOffsetTiles\n     * @see #getTileWidth()\n     * @see #getTileHeight()\n     * @see #getTileGridXOffset()\n     * @see #getTileGridYOffset()\n     */\n    public void setTiling(int tileWidth,\n                          int tileHeight,\n                          int tileGridXOffset,\n                          int tileGridYOffset) {\n        if (!canWriteTiles()) {\n            throw new UnsupportedOperationException(\"Tiling not supported!\");\n        }\n        if (getTilingMode() != MODE_EXPLICIT) {\n            throw new IllegalStateException(\"Tiling mode not MODE_EXPLICIT!\");\n        }\n        if (tileWidth <= 0 || tileHeight <= 0) {\n            throw new IllegalArgumentException\n                (\"tile dimensions are non-positive!\");\n        }\n        boolean tilesOffset = (tileGridXOffset != 0) || (tileGridYOffset != 0);\n        if (!canOffsetTiles() && tilesOffset) {\n            throw new UnsupportedOperationException(\"Can't offset tiles!\");\n        }\n        if (preferredTileSizes != null) {\n            boolean ok = true;\n            for (int i = 0; i < preferredTileSizes.length; i += 2) {\n                Dimension min = preferredTileSizes[i];\n                Dimension max = preferredTileSizes[i+1];\n                if ((tileWidth < min.width) ||\n                    (tileWidth > max.width) ||\n                    (tileHeight < min.height) ||\n                    (tileHeight > max.height)) {\n                    ok = false;\n                    break;\n                }\n            }\n            if (!ok) {\n                throw new IllegalArgumentException(\"Illegal tile size!\");\n            }\n        }\n\n        this.tilingSet = true;\n        this.tileWidth = tileWidth;\n        this.tileHeight = tileHeight;\n        this.tileGridXOffset = tileGridXOffset;\n        this.tileGridYOffset = tileGridYOffset;\n    }"}
{"Number":"1299","API Relative Path":"javax.imageio.ImageWriteParam.java-setTilingMode(int)","Corresponding Source":"/**\n     * Determines whether the image will be tiled in the output\n     * stream and, if it will, how the tiling parameters will be\n     * determined.  The modes are interpreted as follows:\n     *\n     * <ul>\n     *\n     * <li><code>MODE_DISABLED<\/code> - The image will not be tiled.\n     * <code>setTiling<\/code> will throw an\n     * <code>IllegalStateException<\/code>.\n     *\n     * <li><code>MODE_DEFAULT<\/code> - The image will be tiled using\n     * default parameters.  <code>setTiling<\/code> will throw an\n     * <code>IllegalStateException<\/code>.\n     *\n     * <li><code>MODE_EXPLICIT<\/code> - The image will be tiled\n     * according to parameters given in the {@link #setTiling setTiling}\n     * method.  Any previously set tiling parameters are discarded.\n     *\n     * <li><code>MODE_COPY_FROM_METADATA<\/code> - The image will\n     * conform to the metadata object passed in to a write.\n     * <code>setTiling<\/code> will throw an\n     * <code>IllegalStateException<\/code>.\n     *\n     * <\/ul>\n     *\n     * @param mode The mode to use for tiling.\n     *\n     * @exception UnsupportedOperationException if\n     * <code>canWriteTiles<\/code> returns <code>false<\/code>.\n     * @exception IllegalArgumentException if <code>mode<\/code> is not\n     * one of the modes listed above.\n     *\n     * @see #setTiling\n     * @see #getTilingMode\n     */\n    public void setTilingMode(int mode) {\n        if (canWriteTiles() == false) {\n            throw new UnsupportedOperationException(\"Tiling not supported!\");\n        }\n        if (mode < MODE_DISABLED || mode > MAX_MODE) {\n            throw new IllegalArgumentException(\"Illegal value for mode!\");\n        }\n        this.tilingMode = mode;\n        if (mode == MODE_EXPLICIT) {\n            unsetTiling();\n        }\n    }"}
{"Number":"1300","API Relative Path":"javax.imageio.ImageWriter.java-addIIOWriteProgressListener(IIOWriteProgressListener)","Corresponding Source":"/**\n     * Adds an <code>IIOWriteProgressListener<\/code> to the list of\n     * registered progress listeners.  If <code>listener<\/code> is\n     * <code>null<\/code>, no exception will be thrown and no action\n     * will be taken.\n     *\n     * @param listener an <code>IIOWriteProgressListener<\/code> to be\n     * registered.\n     *\n     * @see #removeIIOWriteProgressListener\n     */\n    public void\n        addIIOWriteProgressListener(IIOWriteProgressListener listener) {\n        if (listener == null) {\n            return;\n        }\n        progressListeners = ImageReader.addToList(progressListeners, listener);\n    }"}
{"Number":"1301","API Relative Path":"javax.imageio.ImageWriter.java-addIIOWriteWarningListener(IIOWriteWarningListener)","Corresponding Source":"// Listeners\n\n    /**\n     * Adds an <code>IIOWriteWarningListener<\/code> to the list of\n     * registered warning listeners.  If <code>listener<\/code> is\n     * <code>null<\/code>, no exception will be thrown and no action\n     * will be taken.  Messages sent to the given listener will be\n     * localized, if possible, to match the current\n     * <code>Locale<\/code>.  If no <code>Locale<\/code> has been set,\n     * warning messages may be localized as the writer sees fit.\n     *\n     * @param listener an <code>IIOWriteWarningListener<\/code> to be\n     * registered.\n     *\n     * @see #removeIIOWriteWarningListener\n     */\n    public void addIIOWriteWarningListener(IIOWriteWarningListener listener) {\n        if (listener == null) {\n            return;\n        }\n        warningListeners = ImageReader.addToList(warningListeners, listener);\n        warningLocales = ImageReader.addToList(warningLocales, getLocale());\n    }"}
{"Number":"1302","API Relative Path":"javax.imageio.ImageWriter.java-removeIIOWriteProgressListener(IIOWriteProgressListener)","Corresponding Source":"/**\n     * Removes an <code>IIOWriteProgressListener<\/code> from the list\n     * of registered progress listeners.  If the listener was not\n     * previously registered, or if <code>listener<\/code> is\n     * <code>null<\/code>, no exception will be thrown and no action\n     * will be taken.\n     *\n     * @param listener an <code>IIOWriteProgressListener<\/code> to be\n     * deregistered.\n     *\n     * @see #addIIOWriteProgressListener\n     */\n    public void\n        removeIIOWriteProgressListener(IIOWriteProgressListener listener) {\n        if (listener == null || progressListeners == null) {\n            return;\n        }\n        progressListeners =\n            ImageReader.removeFromList(progressListeners, listener);\n    }"}
{"Number":"1303","API Relative Path":"javax.imageio.ImageWriter.java-removeIIOWriteWarningListener(IIOWriteWarningListener)","Corresponding Source":"/**\n     * Removes an <code>IIOWriteWarningListener<\/code> from the list\n     * of registered warning listeners.  If the listener was not\n     * previously registered, or if <code>listener<\/code> is\n     * <code>null<\/code>, no exception will be thrown and no action\n     * will be taken.\n     *\n     * @param listener an <code>IIOWriteWarningListener<\/code> to be\n     * deregistered.\n     *\n     * @see #addIIOWriteWarningListener\n     */\n    public\n        void removeIIOWriteWarningListener(IIOWriteWarningListener listener) {\n        if (listener == null || warningListeners == null) {\n            return;\n        }\n        int index = warningListeners.indexOf(listener);\n        if (index != -1) {\n            warningListeners.remove(index);\n            warningLocales.remove(index);\n            if (warningListeners.size() == 0) {\n                warningListeners = null;\n                warningLocales = null;\n            }\n        }\n    }"}
{"Number":"1304","API Relative Path":"javax.imageio.ImageWriter.java-setLocale(Locale)","Corresponding Source":"/**\n     * Sets the current <code>Locale<\/code> of this\n     * <code>ImageWriter<\/code> to the given value.  A value of\n     * <code>null<\/code> removes any previous setting, and indicates\n     * that the writer should localize as it sees fit.\n     *\n     * <p> The default implementation checks <code>locale<\/code>\n     * against the values returned by\n     * <code>getAvailableLocales<\/code>, and sets the\n     * <code>locale<\/code> instance variable if it is found.  If\n     * <code>locale<\/code> is <code>null<\/code>, the instance variable\n     * is set to <code>null<\/code> without any checking.\n     *\n     * @param locale the desired <code>Locale<\/code>, or\n     * <code>null<\/code>.\n     *\n     * @exception IllegalArgumentException if <code>locale<\/code> is\n     * non-<code>null<\/code> but is not one of the values returned by\n     * <code>getAvailableLocales<\/code>.\n     *\n     * @see #getLocale\n     */\n    public void setLocale(Locale locale) {\n        if (locale != null) {\n            Locale[] locales = getAvailableLocales();\n            boolean found = false;\n            if (locales != null) {\n                for (int i = 0; i < locales.length; i++) {\n                    if (locale.equals(locales[i])) {\n                        found = true;\n                        break;\n                    }\n                }\n            }\n            if (!found) {\n                throw new IllegalArgumentException(\"Invalid locale!\");\n            }\n        }\n        this.locale = locale;\n    }"}
{"Number":"1305","API Relative Path":"javax.imageio.metadata.IIOMetadata.java-IIOMetadata(boolean-String-String-String[]-String[])","Corresponding Source":"/**\n     * Constructs an <code>IIOMetadata<\/code> object with the given\n     * format names and format class names, as well as a boolean\n     * indicating whether the standard format is supported.\n     *\n     * <p> This constructor does not attempt to check the class names\n     * for validity.  Invalid class names may cause exceptions in\n     * subsequent calls to <code>getMetadataFormat<\/code>.\n     *\n     * @param standardMetadataFormatSupported <code>true<\/code> if\n     * this object can return or accept a DOM tree using the standard\n     * metadata format.\n     * @param nativeMetadataFormatName the name of the native metadata\n     * format, as a <code>String<\/code>, or <code>null<\/code> if there\n     * is no native format.\n     * @param nativeMetadataFormatClassName the name of the class of\n     * the native metadata format, or <code>null<\/code> if there is\n     * no native format.\n     * @param extraMetadataFormatNames an array of <code>String<\/code>s\n     * indicating additional formats supported by this object, or\n     * <code>null<\/code> if there are none.\n     * @param extraMetadataFormatClassNames an array of <code>String<\/code>s\n     * indicating the class names of any additional formats supported by\n     * this object, or <code>null<\/code> if there are none.\n     *\n     * @exception IllegalArgumentException if\n     * <code>extraMetadataFormatNames<\/code> has length 0.\n     * @exception IllegalArgumentException if\n     * <code>extraMetadataFormatNames<\/code> and\n     * <code>extraMetadataFormatClassNames<\/code> are neither both\n     * <code>null<\/code>, nor of the same length.\n     */\n    protected IIOMetadata(boolean standardMetadataFormatSupported,\n                          String nativeMetadataFormatName,\n                          String nativeMetadataFormatClassName,\n                          String[] extraMetadataFormatNames,\n                          String[] extraMetadataFormatClassNames) {\n        this.standardFormatSupported = standardMetadataFormatSupported;\n        this.nativeMetadataFormatName = nativeMetadataFormatName;\n        this.nativeMetadataFormatClassName = nativeMetadataFormatClassName;\n        if (extraMetadataFormatNames != null) {\n            if (extraMetadataFormatNames.length == 0) {\n                throw new IllegalArgumentException\n                    (\"extraMetadataFormatNames.length == 0!\");\n            }\n            if (extraMetadataFormatClassNames == null) {\n                throw new IllegalArgumentException\n                    (\"extraMetadataFormatNames != null && extraMetadataFormatClassNames == null!\");\n            }\n            if (extraMetadataFormatClassNames.length !=\n                extraMetadataFormatNames.length) {\n                throw new IllegalArgumentException\n                    (\"extraMetadataFormatClassNames.length != extraMetadataFormatNames.length!\");\n            }\n            this.extraMetadataFormatNames =\n                (String[]) extraMetadataFormatNames.clone();\n            this.extraMetadataFormatClassNames =\n                (String[]) extraMetadataFormatClassNames.clone();\n        } else {\n            if (extraMetadataFormatClassNames != null) {\n                throw new IllegalArgumentException\n                    (\"extraMetadataFormatNames == null && extraMetadataFormatClassNames != null!\");\n            }\n        }\n    }"}
{"Number":"1306","API Relative Path":"javax.imageio.metadata.IIOMetadata.java-IIOMetadata(boolean-String-String-String[]-String[])","Corresponding Source":"/**\n     * Constructs an <code>IIOMetadata<\/code> object with the given\n     * format names and format class names, as well as a boolean\n     * indicating whether the standard format is supported.\n     *\n     * <p> This constructor does not attempt to check the class names\n     * for validity.  Invalid class names may cause exceptions in\n     * subsequent calls to <code>getMetadataFormat<\/code>.\n     *\n     * @param standardMetadataFormatSupported <code>true<\/code> if\n     * this object can return or accept a DOM tree using the standard\n     * metadata format.\n     * @param nativeMetadataFormatName the name of the native metadata\n     * format, as a <code>String<\/code>, or <code>null<\/code> if there\n     * is no native format.\n     * @param nativeMetadataFormatClassName the name of the class of\n     * the native metadata format, or <code>null<\/code> if there is\n     * no native format.\n     * @param extraMetadataFormatNames an array of <code>String<\/code>s\n     * indicating additional formats supported by this object, or\n     * <code>null<\/code> if there are none.\n     * @param extraMetadataFormatClassNames an array of <code>String<\/code>s\n     * indicating the class names of any additional formats supported by\n     * this object, or <code>null<\/code> if there are none.\n     *\n     * @exception IllegalArgumentException if\n     * <code>extraMetadataFormatNames<\/code> has length 0.\n     * @exception IllegalArgumentException if\n     * <code>extraMetadataFormatNames<\/code> and\n     * <code>extraMetadataFormatClassNames<\/code> are neither both\n     * <code>null<\/code>, nor of the same length.\n     */\n    protected IIOMetadata(boolean standardMetadataFormatSupported,\n                          String nativeMetadataFormatName,\n                          String nativeMetadataFormatClassName,\n                          String[] extraMetadataFormatNames,\n                          String[] extraMetadataFormatClassNames) {\n        this.standardFormatSupported = standardMetadataFormatSupported;\n        this.nativeMetadataFormatName = nativeMetadataFormatName;\n        this.nativeMetadataFormatClassName = nativeMetadataFormatClassName;\n        if (extraMetadataFormatNames != null) {\n            if (extraMetadataFormatNames.length == 0) {\n                throw new IllegalArgumentException\n                    (\"extraMetadataFormatNames.length == 0!\");\n            }\n            if (extraMetadataFormatClassNames == null) {\n                throw new IllegalArgumentException\n                    (\"extraMetadataFormatNames != null && extraMetadataFormatClassNames == null!\");\n            }\n            if (extraMetadataFormatClassNames.length !=\n                extraMetadataFormatNames.length) {\n                throw new IllegalArgumentException\n                    (\"extraMetadataFormatClassNames.length != extraMetadataFormatNames.length!\");\n            }\n            this.extraMetadataFormatNames =\n                (String[]) extraMetadataFormatNames.clone();\n            this.extraMetadataFormatClassNames =\n                (String[]) extraMetadataFormatClassNames.clone();\n        } else {\n            if (extraMetadataFormatClassNames != null) {\n                throw new IllegalArgumentException\n                    (\"extraMetadataFormatNames == null && extraMetadataFormatClassNames != null!\");\n            }\n        }\n    }"}
{"Number":"1307","API Relative Path":"javax.imageio.metadata.IIOMetadata.java-IIOMetadata(boolean-String-String-String[]-String[])","Corresponding Source":"/**\n     * Constructs an <code>IIOMetadata<\/code> object with the given\n     * format names and format class names, as well as a boolean\n     * indicating whether the standard format is supported.\n     *\n     * <p> This constructor does not attempt to check the class names\n     * for validity.  Invalid class names may cause exceptions in\n     * subsequent calls to <code>getMetadataFormat<\/code>.\n     *\n     * @param standardMetadataFormatSupported <code>true<\/code> if\n     * this object can return or accept a DOM tree using the standard\n     * metadata format.\n     * @param nativeMetadataFormatName the name of the native metadata\n     * format, as a <code>String<\/code>, or <code>null<\/code> if there\n     * is no native format.\n     * @param nativeMetadataFormatClassName the name of the class of\n     * the native metadata format, or <code>null<\/code> if there is\n     * no native format.\n     * @param extraMetadataFormatNames an array of <code>String<\/code>s\n     * indicating additional formats supported by this object, or\n     * <code>null<\/code> if there are none.\n     * @param extraMetadataFormatClassNames an array of <code>String<\/code>s\n     * indicating the class names of any additional formats supported by\n     * this object, or <code>null<\/code> if there are none.\n     *\n     * @exception IllegalArgumentException if\n     * <code>extraMetadataFormatNames<\/code> has length 0.\n     * @exception IllegalArgumentException if\n     * <code>extraMetadataFormatNames<\/code> and\n     * <code>extraMetadataFormatClassNames<\/code> are neither both\n     * <code>null<\/code>, nor of the same length.\n     */\n    protected IIOMetadata(boolean standardMetadataFormatSupported,\n                          String nativeMetadataFormatName,\n                          String nativeMetadataFormatClassName,\n                          String[] extraMetadataFormatNames,\n                          String[] extraMetadataFormatClassNames) {\n        this.standardFormatSupported = standardMetadataFormatSupported;\n        this.nativeMetadataFormatName = nativeMetadataFormatName;\n        this.nativeMetadataFormatClassName = nativeMetadataFormatClassName;\n        if (extraMetadataFormatNames != null) {\n            if (extraMetadataFormatNames.length == 0) {\n                throw new IllegalArgumentException\n                    (\"extraMetadataFormatNames.length == 0!\");\n            }\n            if (extraMetadataFormatClassNames == null) {\n                throw new IllegalArgumentException\n                    (\"extraMetadataFormatNames != null && extraMetadataFormatClassNames == null!\");\n            }\n            if (extraMetadataFormatClassNames.length !=\n                extraMetadataFormatNames.length) {\n                throw new IllegalArgumentException\n                    (\"extraMetadataFormatClassNames.length != extraMetadataFormatNames.length!\");\n            }\n            this.extraMetadataFormatNames =\n                (String[]) extraMetadataFormatNames.clone();\n            this.extraMetadataFormatClassNames =\n                (String[]) extraMetadataFormatClassNames.clone();\n        } else {\n            if (extraMetadataFormatClassNames != null) {\n                throw new IllegalArgumentException\n                    (\"extraMetadataFormatNames == null && extraMetadataFormatClassNames != null!\");\n            }\n        }\n    }"}
{"Number":"1308","API Relative Path":"javax.imageio.metadata.IIOMetadataFormatImpl.java-addAttribute(String-String-int-boolean-int-int)","Corresponding Source":"/**\n     * Adds a new attribute to a previously defined element that will\n     * be defined by a list of values.\n     *\n     * @param elementName the name of the element.\n     * @param attrName the name of the attribute being added.\n     * @param dataType the data type (string format) of the attribute,\n     * one of the <code>DATATYPE_*<\/code> constants.\n     * @param required <code>true<\/code> if the attribute must be present.\n     * @param listMinLength the smallest legal number of list items.\n     * @param listMaxLength the largest legal number of list items.\n     *\n     * @exception IllegalArgumentException if <code>elementName<\/code>\n     * is <code>null<\/code>, or is not a legal element name for this\n     * format.\n     * @exception IllegalArgumentException if <code>attrName<\/code> is\n     * <code>null<\/code>.\n     * @exception IllegalArgumentException if <code>dataType<\/code> is\n     * not one of the predefined constants.\n     * @exception IllegalArgumentException if\n     * <code>listMinLength<\/code> is negative or larger than\n     * <code>listMaxLength<\/code>.\n     */\n    protected void addAttribute(String elementName,\n                                String attrName,\n                                int dataType,\n                                boolean required,\n                                int listMinLength,\n                                int listMaxLength) {\n        Element element = getElement(elementName);\n        if (attrName == null) {\n            throw new IllegalArgumentException(\"attrName == null!\");\n        }\n        if (dataType < DATATYPE_STRING || dataType > DATATYPE_DOUBLE) {\n            throw new IllegalArgumentException(\"Invalid value for dataType!\");\n        }\n        if (listMinLength < 0 || listMinLength > listMaxLength) {\n            throw new IllegalArgumentException(\"Invalid list bounds!\");\n        }\n\n        Attribute attr = new Attribute();\n        attr.attrName = attrName;\n        attr.valueType = VALUE_LIST;\n        attr.dataType = dataType;\n        attr.required = required;\n        attr.listMinLength = listMinLength;\n        attr.listMaxLength = listMaxLength;\n\n        element.attrList.add(attrName);\n        element.attrMap.put(attrName, attr);\n    }"}
{"Number":"1309","API Relative Path":"javax.imageio.metadata.IIOMetadataFormatImpl.java-addAttribute(String-String-int-boolean-int-int)","Corresponding Source":"/**\n     * Adds a new attribute to a previously defined element that will\n     * be defined by a list of values.\n     *\n     * @param elementName the name of the element.\n     * @param attrName the name of the attribute being added.\n     * @param dataType the data type (string format) of the attribute,\n     * one of the <code>DATATYPE_*<\/code> constants.\n     * @param required <code>true<\/code> if the attribute must be present.\n     * @param listMinLength the smallest legal number of list items.\n     * @param listMaxLength the largest legal number of list items.\n     *\n     * @exception IllegalArgumentException if <code>elementName<\/code>\n     * is <code>null<\/code>, or is not a legal element name for this\n     * format.\n     * @exception IllegalArgumentException if <code>attrName<\/code> is\n     * <code>null<\/code>.\n     * @exception IllegalArgumentException if <code>dataType<\/code> is\n     * not one of the predefined constants.\n     * @exception IllegalArgumentException if\n     * <code>listMinLength<\/code> is negative or larger than\n     * <code>listMaxLength<\/code>.\n     */\n    protected void addAttribute(String elementName,\n                                String attrName,\n                                int dataType,\n                                boolean required,\n                                int listMinLength,\n                                int listMaxLength) {\n        Element element = getElement(elementName);\n        if (attrName == null) {\n            throw new IllegalArgumentException(\"attrName == null!\");\n        }\n        if (dataType < DATATYPE_STRING || dataType > DATATYPE_DOUBLE) {\n            throw new IllegalArgumentException(\"Invalid value for dataType!\");\n        }\n        if (listMinLength < 0 || listMinLength > listMaxLength) {\n            throw new IllegalArgumentException(\"Invalid list bounds!\");\n        }\n\n        Attribute attr = new Attribute();\n        attr.attrName = attrName;\n        attr.valueType = VALUE_LIST;\n        attr.dataType = dataType;\n        attr.required = required;\n        attr.listMinLength = listMinLength;\n        attr.listMaxLength = listMaxLength;\n\n        element.attrList.add(attrName);\n        element.attrMap.put(attrName, attr);\n    }"}
{"Number":"1310","API Relative Path":"javax.imageio.metadata.IIOMetadataFormatImpl.java-addAttribute(String-String-int-boolean-String)","Corresponding Source":"/**\n     * Adds a new attribute to a previously defined element that may\n     * be set to an arbitrary value.\n     *\n     * @param elementName the name of the element.\n     * @param attrName the name of the attribute being added.\n     * @param dataType the data type (string format) of the attribute,\n     * one of the <code>DATATYPE_*<\/code> constants.\n     * @param required <code>true<\/code> if the attribute must be present.\n     * @param defaultValue the default value for the attribute, or\n     * <code>null<\/code>.\n     *\n     * @exception IllegalArgumentException if <code>elementName<\/code>\n     * is <code>null<\/code>, or is not a legal element name for this\n     * format.\n     * @exception IllegalArgumentException if <code>attrName<\/code> is\n     * <code>null<\/code>.\n     * @exception IllegalArgumentException if <code>dataType<\/code> is\n     * not one of the predefined constants.\n     */\n    protected void addAttribute(String elementName,\n                                String attrName,\n                                int dataType,\n                                boolean required,\n                                String defaultValue) {\n        Element element = getElement(elementName);\n        if (attrName == null) {\n            throw new IllegalArgumentException(\"attrName == null!\");\n        }\n        if (dataType < DATATYPE_STRING || dataType > DATATYPE_DOUBLE) {\n            throw new IllegalArgumentException(\"Invalid value for dataType!\");\n        }\n\n        Attribute attr = new Attribute();\n        attr.attrName = attrName;\n        attr.valueType = VALUE_ARBITRARY;\n        attr.dataType = dataType;\n        attr.required = required;\n        attr.defaultValue = defaultValue;\n\n        element.attrList.add(attrName);\n        element.attrMap.put(attrName, attr);\n    }"}
{"Number":"1311","API Relative Path":"javax.imageio.metadata.IIOMetadataFormatImpl.java-addAttribute(String-String-int-boolean-String-List)","Corresponding Source":"/**\n     * Adds a new attribute to a previously defined element that will\n     * be defined by a set of enumerated values.\n     *\n     * @param elementName the name of the element.\n     * @param attrName the name of the attribute being added.\n     * @param dataType the data type (string format) of the attribute,\n     * one of the <code>DATATYPE_*<\/code> constants.\n     * @param required <code>true<\/code> if the attribute must be present.\n     * @param defaultValue the default value for the attribute, or\n     * <code>null<\/code>.\n     * @param enumeratedValues a <code>List<\/code> of\n     * <code>String<\/code>s containing the legal values for the\n     * attribute.\n     *\n     * @exception IllegalArgumentException if <code>elementName<\/code>\n     * is <code>null<\/code>, or is not a legal element name for this\n     * format.\n     * @exception IllegalArgumentException if <code>attrName<\/code> is\n     * <code>null<\/code>.\n     * @exception IllegalArgumentException if <code>dataType<\/code> is\n     * not one of the predefined constants.\n     * @exception IllegalArgumentException if\n     * <code>enumeratedValues<\/code> is <code>null<\/code>.\n     * @exception IllegalArgumentException if\n     * <code>enumeratedValues<\/code> does not contain at least one\n     * entry.\n     * @exception IllegalArgumentException if\n     * <code>enumeratedValues<\/code> contains an element that is not a\n     * <code>String<\/code> or is <code>null<\/code>.\n     */\n    protected void addAttribute(String elementName,\n                                String attrName,\n                                int dataType,\n                                boolean required,\n                                String defaultValue,\n                                List<String> enumeratedValues) {\n        Element element = getElement(elementName);\n        if (attrName == null) {\n            throw new IllegalArgumentException(\"attrName == null!\");\n        }\n        if (dataType < DATATYPE_STRING || dataType > DATATYPE_DOUBLE) {\n            throw new IllegalArgumentException(\"Invalid value for dataType!\");\n        }\n        if (enumeratedValues == null) {\n            throw new IllegalArgumentException(\"enumeratedValues == null!\");\n        }\n        if (enumeratedValues.size() == 0) {\n            throw new IllegalArgumentException(\"enumeratedValues is empty!\");\n        }\n        Iterator iter = enumeratedValues.iterator();\n        while (iter.hasNext()) {\n            Object o = iter.next();\n            if (o == null) {\n                throw new IllegalArgumentException\n                    (\"enumeratedValues contains a null!\");\n            }\n            if (!(o instanceof String)) {\n                throw new IllegalArgumentException\n                    (\"enumeratedValues contains a non-String value!\");\n            }\n        }\n\n        Attribute attr = new Attribute();\n        attr.attrName = attrName;\n        attr.valueType = VALUE_ENUMERATION;\n        attr.dataType = dataType;\n        attr.required = required;\n        attr.defaultValue = defaultValue;\n        attr.enumeratedValues = enumeratedValues;\n\n        element.attrList.add(attrName);\n        element.attrMap.put(attrName, attr);\n    }"}
{"Number":"1312","API Relative Path":"javax.imageio.metadata.IIOMetadataFormatImpl.java-addAttribute(String-String-int-boolean-String-String-String-boolean-boolean)","Corresponding Source":"/**\n     * Adds a new attribute to a previously defined element that will\n     * be defined by a range of values.\n     *\n     * @param elementName the name of the element.\n     * @param attrName the name of the attribute being added.\n     * @param dataType the data type (string format) of the attribute,\n     * one of the <code>DATATYPE_*<\/code> constants.\n     * @param required <code>true<\/code> if the attribute must be present.\n     * @param defaultValue the default value for the attribute, or\n     * <code>null<\/code>.\n     * @param minValue the smallest (inclusive or exclusive depending\n     * on the value of <code>minInclusive<\/code>) legal value for the\n     * attribute, as a <code>String<\/code>.\n     * @param maxValue the largest (inclusive or exclusive depending\n     * on the value of <code>minInclusive<\/code>) legal value for the\n     * attribute, as a <code>String<\/code>.\n     * @param minInclusive <code>true<\/code> if <code>minValue<\/code>\n     * is inclusive.\n     * @param maxInclusive <code>true<\/code> if <code>maxValue<\/code>\n     * is inclusive.\n     *\n     * @exception IllegalArgumentException if <code>elementName<\/code>\n     * is <code>null<\/code>, or is not a legal element name for this\n     * format.\n     * @exception IllegalArgumentException if <code>attrName<\/code> is\n     * <code>null<\/code>.\n     * @exception IllegalArgumentException if <code>dataType<\/code> is\n     * not one of the predefined constants.\n     */\n    protected void addAttribute(String elementName,\n                                String attrName,\n                                int dataType,\n                                boolean required,\n                                String defaultValue,\n                                String minValue,\n                                String maxValue,\n                                boolean minInclusive,\n                                boolean maxInclusive) {\n        Element element = getElement(elementName);\n        if (attrName == null) {\n            throw new IllegalArgumentException(\"attrName == null!\");\n        }\n        if (dataType < DATATYPE_STRING || dataType > DATATYPE_DOUBLE) {\n            throw new IllegalArgumentException(\"Invalid value for dataType!\");\n        }\n\n        Attribute attr = new Attribute();\n        attr.attrName = attrName;\n        attr.valueType = VALUE_RANGE;\n        if (minInclusive) {\n            attr.valueType |= VALUE_RANGE_MIN_INCLUSIVE_MASK;\n        }\n        if (maxInclusive) {\n            attr.valueType |= VALUE_RANGE_MAX_INCLUSIVE_MASK;\n        }\n        attr.dataType = dataType;\n        attr.required = required;\n        attr.defaultValue = defaultValue;\n        attr.minValue = minValue;\n        attr.maxValue = maxValue;\n\n        element.attrList.add(attrName);\n        element.attrMap.put(attrName, attr);\n    }"}
{"Number":"1313","API Relative Path":"javax.imageio.metadata.IIOMetadataFormatImpl.java-addElement(String-String-int)","Corresponding Source":"// Setup\n\n    /**\n     * Adds a new element type to this metadata document format with a\n     * child policy other than <code>CHILD_POLICY_REPEAT<\/code>.\n     *\n     * @param elementName the name of the new element.\n     * @param parentName the name of the element that will be the\n     * parent of the new element.\n     * @param childPolicy one of the <code>CHILD_POLICY_*<\/code>\n     * constants, other than <code>CHILD_POLICY_REPEAT<\/code>,\n     * indicating the child policy of the new element.\n     *\n     * @exception IllegalArgumentException if <code>parentName<\/code>\n     * is <code>null<\/code>, or is not a legal element name for this\n     * format.\n     * @exception IllegalArgumentException if <code>childPolicy<\/code>\n     * is not one of the predefined constants.\n     */\n    protected void addElement(String elementName,\n                              String parentName,\n                              int childPolicy) {\n        Element parent = getElement(parentName);\n        if (childPolicy < CHILD_POLICY_EMPTY ||\n            childPolicy > CHILD_POLICY_MAX ||\n            childPolicy == CHILD_POLICY_REPEAT) {\n            throw new IllegalArgumentException\n                (\"Invalid value for childPolicy!\");\n        }\n\n        Element element = new Element();\n        element.elementName = elementName;\n        element.childPolicy = childPolicy;\n\n        parent.childList.add(elementName);\n        element.parentList.add(parentName);\n\n        elementMap.put(elementName, element);\n    }"}
{"Number":"1314","API Relative Path":"javax.imageio.metadata.IIOMetadataFormatImpl.java-addElement(String-String-int-int)","Corresponding Source":"/**\n     * Adds a new element type to this metadata document format with a\n     * child policy of <code>CHILD_POLICY_REPEAT<\/code>.\n     *\n     * @param elementName the name of the new element.\n     * @param parentName the name of the element that will be the\n     * parent of the new element.\n     * @param minChildren the minimum number of children of the node.\n     * @param maxChildren the maximum number of children of the node.\n     *\n     * @exception IllegalArgumentException if <code>parentName<\/code>\n     * is <code>null<\/code>, or is not a legal element name for this\n     * format.\n     * @exception IllegalArgumentException if <code>minChildren<\/code>\n     * is negative or larger than <code>maxChildren<\/code>.\n     */\n    protected void addElement(String elementName,\n                              String parentName,\n                              int minChildren,\n                              int maxChildren) {\n        Element parent = getElement(parentName);\n        if (minChildren < 0) {\n            throw new IllegalArgumentException(\"minChildren < 0!\");\n        }\n        if (minChildren > maxChildren) {\n            throw new IllegalArgumentException(\"minChildren > maxChildren!\");\n        }\n\n        Element element = new Element();\n        element.elementName = elementName;\n        element.childPolicy = CHILD_POLICY_REPEAT;\n        element.minChildren = minChildren;\n        element.maxChildren = maxChildren;\n\n        parent.childList.add(elementName);\n        element.parentList.add(parentName);\n\n        elementMap.put(elementName, element);\n    }"}
{"Number":"1315","API Relative Path":"javax.imageio.metadata.IIOMetadataFormatImpl.java-addElement(String-String-int-int)","Corresponding Source":"/**\n     * Adds a new element type to this metadata document format with a\n     * child policy of <code>CHILD_POLICY_REPEAT<\/code>.\n     *\n     * @param elementName the name of the new element.\n     * @param parentName the name of the element that will be the\n     * parent of the new element.\n     * @param minChildren the minimum number of children of the node.\n     * @param maxChildren the maximum number of children of the node.\n     *\n     * @exception IllegalArgumentException if <code>parentName<\/code>\n     * is <code>null<\/code>, or is not a legal element name for this\n     * format.\n     * @exception IllegalArgumentException if <code>minChildren<\/code>\n     * is negative or larger than <code>maxChildren<\/code>.\n     */\n    protected void addElement(String elementName,\n                              String parentName,\n                              int minChildren,\n                              int maxChildren) {\n        Element parent = getElement(parentName);\n        if (minChildren < 0) {\n            throw new IllegalArgumentException(\"minChildren < 0!\");\n        }\n        if (minChildren > maxChildren) {\n            throw new IllegalArgumentException(\"minChildren > maxChildren!\");\n        }\n\n        Element element = new Element();\n        element.elementName = elementName;\n        element.childPolicy = CHILD_POLICY_REPEAT;\n        element.minChildren = minChildren;\n        element.maxChildren = maxChildren;\n\n        parent.childList.add(elementName);\n        element.parentList.add(parentName);\n\n        elementMap.put(elementName, element);\n    }"}
{"Number":"1316","API Relative Path":"javax.imageio.metadata.IIOMetadataFormatImpl.java-IIOMetadataFormatImpl(String-int)","Corresponding Source":"/**\n     * Constructs a blank <code>IIOMetadataFormatImpl<\/code> instance,\n     * with a given root element name and child policy (other than\n     * <code>CHILD_POLICY_REPEAT<\/code>).  Additional elements, and\n     * their attributes and <code>Object<\/code> reference information\n     * may be added using the various <code>add<\/code> methods.\n     *\n     * @param rootName the name of the root element.\n     * @param childPolicy one of the <code>CHILD_POLICY_*<\/code> constants,\n     * other than <code>CHILD_POLICY_REPEAT<\/code>.\n     *\n     * @exception IllegalArgumentException if <code>rootName<\/code> is\n     * <code>null<\/code>.\n     * @exception IllegalArgumentException if <code>childPolicy<\/code> is\n     * not one of the predefined constants.\n     */\n    public IIOMetadataFormatImpl(String rootName,\n                                 int childPolicy) {\n        if (rootName == null) {\n            throw new IllegalArgumentException(\"rootName == null!\");\n        }\n        if (childPolicy < CHILD_POLICY_EMPTY ||\n            childPolicy > CHILD_POLICY_MAX ||\n            childPolicy == CHILD_POLICY_REPEAT) {\n            throw new IllegalArgumentException(\"Invalid value for childPolicy!\");\n        }\n\n        this.rootName = rootName;\n\n        Element root = new Element();\n        root.elementName = rootName;\n        root.childPolicy = childPolicy;\n\n        elementMap.put(rootName, root);\n    }"}
{"Number":"1317","API Relative Path":"javax.imageio.metadata.IIOMetadataFormatImpl.java-IIOMetadataFormatImpl(String-int-int)","Corresponding Source":"/**\n     * Constructs a blank <code>IIOMetadataFormatImpl<\/code> instance,\n     * with a given root element name and a child policy of\n     * <code>CHILD_POLICY_REPEAT<\/code>.  Additional elements, and\n     * their attributes and <code>Object<\/code> reference information\n     * may be added using the various <code>add<\/code> methods.\n     *\n     * @param rootName the name of the root element.\n     * @param minChildren the minimum number of children of the node.\n     * @param maxChildren the maximum number of children of the node.\n     *\n     * @exception IllegalArgumentException if <code>rootName<\/code> is\n     * <code>null<\/code>.\n     * @exception IllegalArgumentException if <code>minChildren<\/code>\n     * is negative or larger than <code>maxChildren<\/code>.\n     */\n    public IIOMetadataFormatImpl(String rootName,\n                                 int minChildren,\n                                 int maxChildren) {\n        if (rootName == null) {\n            throw new IllegalArgumentException(\"rootName == null!\");\n        }\n        if (minChildren < 0) {\n            throw new IllegalArgumentException(\"minChildren < 0!\");\n        }\n        if (minChildren > maxChildren) {\n            throw new IllegalArgumentException(\"minChildren > maxChildren!\");\n        }\n\n        Element root = new Element();\n        root.elementName = rootName;\n        root.childPolicy = CHILD_POLICY_REPEAT;\n        root.minChildren = minChildren;\n        root.maxChildren = maxChildren;\n\n        this.rootName = rootName;\n        elementMap.put(rootName, root);\n    }"}
{"Number":"1318","API Relative Path":"javax.imageio.metadata.IIOMetadataFormatImpl.java-IIOMetadataFormatImpl(String-int-int)","Corresponding Source":"/**\n     * Constructs a blank <code>IIOMetadataFormatImpl<\/code> instance,\n     * with a given root element name and a child policy of\n     * <code>CHILD_POLICY_REPEAT<\/code>.  Additional elements, and\n     * their attributes and <code>Object<\/code> reference information\n     * may be added using the various <code>add<\/code> methods.\n     *\n     * @param rootName the name of the root element.\n     * @param minChildren the minimum number of children of the node.\n     * @param maxChildren the maximum number of children of the node.\n     *\n     * @exception IllegalArgumentException if <code>rootName<\/code> is\n     * <code>null<\/code>.\n     * @exception IllegalArgumentException if <code>minChildren<\/code>\n     * is negative or larger than <code>maxChildren<\/code>.\n     */\n    public IIOMetadataFormatImpl(String rootName,\n                                 int minChildren,\n                                 int maxChildren) {\n        if (rootName == null) {\n            throw new IllegalArgumentException(\"rootName == null!\");\n        }\n        if (minChildren < 0) {\n            throw new IllegalArgumentException(\"minChildren < 0!\");\n        }\n        if (minChildren > maxChildren) {\n            throw new IllegalArgumentException(\"minChildren > maxChildren!\");\n        }\n\n        Element root = new Element();\n        root.elementName = rootName;\n        root.childPolicy = CHILD_POLICY_REPEAT;\n        root.minChildren = minChildren;\n        root.maxChildren = maxChildren;\n\n        this.rootName = rootName;\n        elementMap.put(rootName, root);\n    }"}
{"Number":"1319","API Relative Path":"javax.imageio.metadata.IIOMetadataFormatImpl.java-removeElement(String)","Corresponding Source":"/**\n     * Removes an element from the format.  If no element with the\n     * given name was present, nothing happens and no exception is\n     * thrown.\n     *\n     * @param elementName the name of the element to be removed.\n     */\n    protected void removeElement(String elementName) {\n        Element element = getElement(elementName, false);\n        if (element != null) {\n            Iterator iter = element.parentList.iterator();\n            while (iter.hasNext()) {\n                String parentName = (String)iter.next();\n                Element parent = getElement(parentName, false);\n                if (parent != null) {\n                    parent.childList.remove(elementName);\n                }\n            }\n            elementMap.remove(elementName);\n        }\n    }"}
{"Number":"1320","API Relative Path":"javax.imageio.plugins.jpeg.JPEGImageReadParam.java-setDecodeTables(JPEGQTable[]-JPEGHuffmanTable[]-JPEGHuffmanTable[])","Corresponding Source":"/**\n     * Sets the quantization and Huffman tables to use in decoding\n     * abbreviated streams.  There may be a maximum of 4 tables of\n     * each type.  These tables are ignored once tables are\n     * encountered in the stream.  All arguments must be\n     * non-<code>null<\/code>.  The two arrays of Huffman tables must\n     * have the same number of elements.  The table specifiers in the\n     * frame and scan headers in the stream are assumed to be\n     * equivalent to indices into these arrays.  The argument arrays\n     * are copied by this method.\n     *\n     * @param qTables an array of quantization table objects.\n     * @param DCHuffmanTables an array of Huffman table objects.\n     * @param ACHuffmanTables an array of Huffman table objects.\n     *\n     * @exception IllegalArgumentException if any of the arguments\n     * is <code>null<\/code>, has more than 4 elements, or if the\n     * numbers of DC and AC tables differ.\n     *\n     * @see #unsetDecodeTables\n     */\n    public void setDecodeTables(JPEGQTable[] qTables,\n                                JPEGHuffmanTable[] DCHuffmanTables,\n                                JPEGHuffmanTable[] ACHuffmanTables) {\n        if ((qTables == null) ||\n            (DCHuffmanTables == null) ||\n            (ACHuffmanTables == null) ||\n            (qTables.length > 4) ||\n            (DCHuffmanTables.length > 4) ||\n            (ACHuffmanTables.length > 4) ||\n            (DCHuffmanTables.length != ACHuffmanTables.length)) {\n                throw new IllegalArgumentException\n                    (\"Invalid JPEG table arrays\");\n        }\n        this.qTables = (JPEGQTable[])qTables.clone();\n        this.DCHuffmanTables = (JPEGHuffmanTable[])DCHuffmanTables.clone();\n        this.ACHuffmanTables = (JPEGHuffmanTable[])ACHuffmanTables.clone();\n    }"}
{"Number":"1321","API Relative Path":"javax.imageio.plugins.jpeg.JPEGImageWriteParam.java-setEncodeTables(JPEGQTable[]-JPEGHuffmanTable[]-JPEGHuffmanTable[])","Corresponding Source":"/**\n     * Sets the quantization and Huffman tables to use in encoding\n     * abbreviated streams.  There may be a maximum of 4 tables of\n     * each type.  These tables are ignored if tables are specified in\n     * the metadata.  All arguments must be non-<code>null<\/code>.\n     * The two arrays of Huffman tables must have the same number of\n     * elements.  The table specifiers in the frame and scan headers\n     * in the metadata are assumed to be equivalent to indices into\n     * these arrays.  The argument arrays are copied by this method.\n     *\n     * @param qTables An array of quantization table objects.\n     * @param DCHuffmanTables An array of Huffman table objects.\n     * @param ACHuffmanTables An array of Huffman table objects.\n     *\n     * @exception IllegalArgumentException if any of the arguments\n     * is <code>null<\/code> or has more than 4 elements, or if the\n     * numbers of DC and AC tables differ.\n     *\n     * @see #unsetEncodeTables\n     */\n    public void setEncodeTables(JPEGQTable[] qTables,\n                                JPEGHuffmanTable[] DCHuffmanTables,\n                                JPEGHuffmanTable[] ACHuffmanTables) {\n        if ((qTables == null) ||\n            (DCHuffmanTables == null) ||\n            (ACHuffmanTables == null) ||\n            (qTables.length > 4) ||\n            (DCHuffmanTables.length > 4) ||\n            (ACHuffmanTables.length > 4) ||\n            (DCHuffmanTables.length != ACHuffmanTables.length)) {\n                throw new IllegalArgumentException(\"Invalid JPEG table arrays\");\n        }\n        this.qTables = (JPEGQTable[])qTables.clone();\n        this.DCHuffmanTables = (JPEGHuffmanTable[])DCHuffmanTables.clone();\n        this.ACHuffmanTables = (JPEGHuffmanTable[])ACHuffmanTables.clone();\n    }"}
{"Number":"1322","API Relative Path":"javax.imageio.plugins.jpeg.JPEGQTable.java-JPEGQTable(int[])","Corresponding Source":"/**\n     * Constructs a quantization table from the argument, which must\n     * contain 64 elements in natural order (not zig-zag order).\n     * A copy is made of the the input array.\n     * @param table the quantization table, as an <code>int<\/code> array.\n     * @throws IllegalArgumentException if <code>table<\/code> is\n     * <code>null<\/code> or <code>table.length<\/code> is not equal to 64.\n     */\n    public JPEGQTable(int[] table) {\n        if (table == null) {\n            throw new IllegalArgumentException(\"table must not be null.\");\n        }\n        if (table.length != 64) {\n            throw new IllegalArgumentException(\"table.length != 64\");\n        }\n        qTable = Arrays.copyOf(table, table.length);\n    }"}
{"Number":"1323","API Relative Path":"javax.imageio.spi.ImageReaderSpi.java-ImageReaderSpi(String-String-String[]-String[]-String[]-String-Class[]-String[]-boolean-String-String-String[]-String[]-boolean-String-String-String[]-String[])","Corresponding Source":"/**\n     * Constructs an <code>ImageReaderSpi<\/code> with a given\n     * set of values.\n     *\n     * @param vendorName the vendor name, as a non-<code>null<\/code>\n     * <code>String<\/code>.\n     * @param version a version identifier, as a non-<code>null<\/code>\n     * <code>String<\/code>.\n     * @param names a non-<code>null<\/code> array of\n     * <code>String<\/code>s indicating the format names.  At least one\n     * entry must be present.\n     * @param suffixes an array of <code>String<\/code>s indicating the\n     * common file suffixes.  If no suffixes are defined,\n     * <code>null<\/code> should be supplied.  An array of length 0\n     * will be normalized to <code>null<\/code>.\n     * @param MIMETypes an array of <code>String<\/code>s indicating\n     * the format's MIME types.  If no MIME types are defined,\n     * <code>null<\/code> should be supplied.  An array of length 0\n     * will be normalized to <code>null<\/code>.\n     * @param readerClassName the fully-qualified name of the\n     * associated <code>ImageReader<\/code> class, as a\n     * non-<code>null<\/code> <code>String<\/code>.\n     * @param inputTypes a non-<code>null<\/code> array of\n     * <code>Class<\/code> objects of length at least 1 indicating the\n     * legal input types.\n     * @param writerSpiNames an array <code>String<\/code>s naming the\n     * classes of all associated <code>ImageWriter<\/code>s, or\n     * <code>null<\/code>.  An array of length 0 is normalized to\n     * <code>null<\/code>.\n     * @param supportsStandardStreamMetadataFormat a\n     * <code>boolean<\/code> that indicates whether a stream metadata\n     * object can use trees described by the standard metadata format.\n     * @param nativeStreamMetadataFormatName a\n     * <code>String<\/code>, or <code>null<\/code>, to be returned from\n     * <code>getNativeStreamMetadataFormatName<\/code>.\n     * @param nativeStreamMetadataFormatClassName a\n     * <code>String<\/code>, or <code>null<\/code>, to be used to instantiate\n     * a metadata format object to be returned from\n     * <code>getNativeStreamMetadataFormat<\/code>.\n     * @param extraStreamMetadataFormatNames an array of\n     * <code>String<\/code>s, or <code>null<\/code>, to be returned from\n     * <code>getExtraStreamMetadataFormatNames<\/code>.  An array of length\n     * 0 is normalized to <code>null<\/code>.\n     * @param extraStreamMetadataFormatClassNames an array of\n     * <code>String<\/code>s, or <code>null<\/code>, to be used to instantiate\n     * a metadata format object to be returned from\n     * <code>getStreamMetadataFormat<\/code>.  An array of length\n     * 0 is normalized to <code>null<\/code>.\n     * @param supportsStandardImageMetadataFormat a\n     * <code>boolean<\/code> that indicates whether an image metadata\n     * object can use trees described by the standard metadata format.\n     * @param nativeImageMetadataFormatName a\n     * <code>String<\/code>, or <code>null<\/code>, to be returned from\n     * <code>getNativeImageMetadataFormatName<\/code>.\n     * @param nativeImageMetadataFormatClassName a\n     * <code>String<\/code>, or <code>null<\/code>, to be used to instantiate\n     * a metadata format object to be returned from\n     * <code>getNativeImageMetadataFormat<\/code>.\n     * @param extraImageMetadataFormatNames an array of\n     * <code>String<\/code>s to be returned from\n     * <code>getExtraImageMetadataFormatNames<\/code>.  An array of length 0\n     * is normalized to <code>null<\/code>.\n     * @param extraImageMetadataFormatClassNames an array of\n     * <code>String<\/code>s, or <code>null<\/code>, to be used to instantiate\n     * a metadata format object to be returned from\n     * <code>getImageMetadataFormat<\/code>.  An array of length\n     * 0 is normalized to <code>null<\/code>.\n     *\n     * @exception IllegalArgumentException if <code>vendorName<\/code>\n     * is <code>null<\/code>.\n     * @exception IllegalArgumentException if <code>version<\/code>\n     * is <code>null<\/code>.\n     * @exception IllegalArgumentException if <code>names<\/code>\n     * is <code>null<\/code> or has length 0.\n     * @exception IllegalArgumentException if <code>readerClassName<\/code>\n     * is <code>null<\/code>.\n     * @exception IllegalArgumentException if <code>inputTypes<\/code>\n     * is <code>null<\/code> or has length 0.\n     */\n    public ImageReaderSpi(String vendorName,\n                          String version,\n                          String[] names,\n                          String[] suffixes,\n                          String[] MIMETypes,\n                          String readerClassName,\n                          Class[] inputTypes,\n                          String[] writerSpiNames,\n                          boolean supportsStandardStreamMetadataFormat,\n                          String nativeStreamMetadataFormatName,\n                          String nativeStreamMetadataFormatClassName,\n                          String[] extraStreamMetadataFormatNames,\n                          String[] extraStreamMetadataFormatClassNames,\n                          boolean supportsStandardImageMetadataFormat,\n                          String nativeImageMetadataFormatName,\n                          String nativeImageMetadataFormatClassName,\n                          String[] extraImageMetadataFormatNames,\n                          String[] extraImageMetadataFormatClassNames) {\n        super(vendorName, version,\n              names, suffixes, MIMETypes, readerClassName,\n              supportsStandardStreamMetadataFormat,\n              nativeStreamMetadataFormatName,\n              nativeStreamMetadataFormatClassName,\n              extraStreamMetadataFormatNames,\n              extraStreamMetadataFormatClassNames,\n              supportsStandardImageMetadataFormat,\n              nativeImageMetadataFormatName,\n              nativeImageMetadataFormatClassName,\n              extraImageMetadataFormatNames,\n              extraImageMetadataFormatClassNames);\n\n        if (inputTypes == null) {\n            throw new IllegalArgumentException\n                (\"inputTypes == null!\");\n        }\n        if (inputTypes.length == 0) {\n            throw new IllegalArgumentException\n                (\"inputTypes.length == 0!\");\n        }\n\n        this.inputTypes = (inputTypes == STANDARD_INPUT_TYPE) ?\n            new Class<?>[] { ImageInputStream.class } :\n            inputTypes.clone();\n\n        // If length == 0, leave it null\n        if (writerSpiNames != null && writerSpiNames.length > 0) {\n            this.writerSpiNames = (String[])writerSpiNames.clone();\n        }\n    }"}
{"Number":"1324","API Relative Path":"javax.imageio.spi.ImageReaderWriterSpi.java-ImageReaderWriterSpi(String-String-String[]-String[]-String[]-String-boolean-String-String-String[]-String[]-boolean-String-String-String[]-String[])","Corresponding Source":"/**\n     * Constructs an <code>ImageReaderWriterSpi<\/code> with a given\n     * set of values.\n     *\n     * @param vendorName the vendor name, as a non-<code>null<\/code>\n     * <code>String<\/code>.\n     * @param version a version identifier, as a non-<code>null<\/code>\n     * <code>String<\/code>.\n     * @param names a non-<code>null<\/code> array of\n     * <code>String<\/code>s indicating the format names.  At least one\n     * entry must be present.\n     * @param suffixes an array of <code>String<\/code>s indicating the\n     * common file suffixes.  If no suffixes are defined,\n     * <code>null<\/code> should be supplied.  An array of length 0\n     * will be normalized to <code>null<\/code>.\n     * @param MIMETypes an array of <code>String<\/code>s indicating\n     * the format's MIME types.  If no MIME types are defined,\n     * <code>null<\/code> should be supplied.  An array of length 0\n     * will be normalized to <code>null<\/code>.\n     * @param pluginClassName the fully-qualified name of the\n     * associated <code>ImageReader<\/code> or <code>ImageWriter<\/code>\n     * class, as a non-<code>null<\/code> <code>String<\/code>.\n     * @param supportsStandardStreamMetadataFormat a\n     * <code>boolean<\/code> that indicates whether a stream metadata\n     * object can use trees described by the standard metadata format.\n     * @param nativeStreamMetadataFormatName a\n     * <code>String<\/code>, or <code>null<\/code>, to be returned from\n     * <code>getNativeStreamMetadataFormatName<\/code>.\n     * @param nativeStreamMetadataFormatClassName a\n     * <code>String<\/code>, or <code>null<\/code>, to be used to instantiate\n     * a metadata format object to be returned from\n     * <code>getNativeStreamMetadataFormat<\/code>.\n     * @param extraStreamMetadataFormatNames an array of\n     * <code>String<\/code>s, or <code>null<\/code>, to be returned from\n     * <code>getExtraStreamMetadataFormatNames<\/code>.  An array of length\n     * 0 is normalized to <code>null<\/code>.\n     * @param extraStreamMetadataFormatClassNames an array of\n     * <code>String<\/code>s, or <code>null<\/code>, to be used to instantiate\n     * a metadata format object to be returned from\n     * <code>getStreamMetadataFormat<\/code>.  An array of length\n     * 0 is normalized to <code>null<\/code>.\n     * @param supportsStandardImageMetadataFormat a\n     * <code>boolean<\/code> that indicates whether an image metadata\n     * object can use trees described by the standard metadata format.\n     * @param nativeImageMetadataFormatName a\n     * <code>String<\/code>, or <code>null<\/code>, to be returned from\n     * <code>getNativeImageMetadataFormatName<\/code>.\n     * @param nativeImageMetadataFormatClassName a\n     * <code>String<\/code>, or <code>null<\/code>, to be used to instantiate\n     * a metadata format object to be returned from\n     * <code>getNativeImageMetadataFormat<\/code>.\n     * @param extraImageMetadataFormatNames an array of\n     * <code>String<\/code>s to be returned from\n     * <code>getExtraImageMetadataFormatNames<\/code>.  An array of length 0\n     * is normalized to <code>null<\/code>.\n     * @param extraImageMetadataFormatClassNames an array of\n     * <code>String<\/code>s, or <code>null<\/code>, to be used to instantiate\n     * a metadata format object to be returned from\n     * <code>getImageMetadataFormat<\/code>.  An array of length\n     * 0 is normalized to <code>null<\/code>.\n     *\n     * @exception IllegalArgumentException if <code>vendorName<\/code>\n     * is <code>null<\/code>.\n     * @exception IllegalArgumentException if <code>version<\/code>\n     * is <code>null<\/code>.\n     * @exception IllegalArgumentException if <code>names<\/code>\n     * is <code>null<\/code> or has length 0.\n     * @exception IllegalArgumentException if <code>pluginClassName<\/code>\n     * is <code>null<\/code>.\n     */\n    public ImageReaderWriterSpi(String vendorName,\n                                String version,\n                                String[] names,\n                                String[] suffixes,\n                                String[] MIMETypes,\n                                String pluginClassName,\n                                boolean supportsStandardStreamMetadataFormat,\n                                String nativeStreamMetadataFormatName,\n                                String nativeStreamMetadataFormatClassName,\n                                String[] extraStreamMetadataFormatNames,\n                                String[] extraStreamMetadataFormatClassNames,\n                                boolean supportsStandardImageMetadataFormat,\n                                String nativeImageMetadataFormatName,\n                                String nativeImageMetadataFormatClassName,\n                                String[] extraImageMetadataFormatNames,\n                                String[] extraImageMetadataFormatClassNames) {\n        super(vendorName, version);\n        if (names == null) {\n            throw new IllegalArgumentException(\"names == null!\");\n        }\n        if (names.length == 0) {\n            throw new IllegalArgumentException(\"names.length == 0!\");\n        }\n        if (pluginClassName == null) {\n            throw new IllegalArgumentException(\"pluginClassName == null!\");\n        }\n\n        this.names = (String[])names.clone();\n        // If length == 0, leave it null\n        if (suffixes != null && suffixes.length > 0) {\n            this.suffixes = (String[])suffixes.clone();\n        }\n        // If length == 0, leave it null\n        if (MIMETypes != null && MIMETypes.length > 0) {\n            this.MIMETypes = (String[])MIMETypes.clone();\n        }\n        this.pluginClassName = pluginClassName;\n\n        this.supportsStandardStreamMetadataFormat =\n            supportsStandardStreamMetadataFormat;\n        this.nativeStreamMetadataFormatName = nativeStreamMetadataFormatName;\n        this.nativeStreamMetadataFormatClassName =\n            nativeStreamMetadataFormatClassName;\n        // If length == 0, leave it null\n        if (extraStreamMetadataFormatNames != null &&\n            extraStreamMetadataFormatNames.length > 0) {\n            this.extraStreamMetadataFormatNames =\n                (String[])extraStreamMetadataFormatNames.clone();\n        }\n        // If length == 0, leave it null\n        if (extraStreamMetadataFormatClassNames != null &&\n            extraStreamMetadataFormatClassNames.length > 0) {\n            this.extraStreamMetadataFormatClassNames =\n                (String[])extraStreamMetadataFormatClassNames.clone();\n        }\n        this.supportsStandardImageMetadataFormat =\n            supportsStandardImageMetadataFormat;\n        this.nativeImageMetadataFormatName = nativeImageMetadataFormatName;\n        this.nativeImageMetadataFormatClassName =\n            nativeImageMetadataFormatClassName;\n        // If length == 0, leave it null\n        if (extraImageMetadataFormatNames != null &&\n            extraImageMetadataFormatNames.length > 0) {\n            this.extraImageMetadataFormatNames =\n                (String[])extraImageMetadataFormatNames.clone();\n        }\n        // If length == 0, leave it null\n        if (extraImageMetadataFormatClassNames != null &&\n            extraImageMetadataFormatClassNames.length > 0) {\n            this.extraImageMetadataFormatClassNames =\n                (String[])extraImageMetadataFormatClassNames.clone();\n        }\n    }"}
{"Number":"1325","API Relative Path":"javax.imageio.spi.ImageWriterSpi.java-ImageWriterSpi(String-String-String[]-String[]-String[]-String-Class[]-String[]-boolean-String-String-String[]-String[]-boolean-String-String-String[]-String[])","Corresponding Source":"/**\n     * Constructs an <code>ImageWriterSpi<\/code> with a given\n     * set of values.\n     *\n     * @param vendorName the vendor name, as a non-<code>null<\/code>\n     * <code>String<\/code>.\n     * @param version a version identifier, as a non-<code>null<\/code>\n     * <code>String<\/code>.\n     * @param names a non-<code>null<\/code> array of\n     * <code>String<\/code>s indicating the format names.  At least one\n     * entry must be present.\n     * @param suffixes an array of <code>String<\/code>s indicating the\n     * common file suffixes.  If no suffixes are defined,\n     * <code>null<\/code> should be supplied.  An array of length 0\n     * will be normalized to <code>null<\/code>.\n     * @param MIMETypes an array of <code>String<\/code>s indicating\n     * the format's MIME types.  If no suffixes are defined,\n     * <code>null<\/code> should be supplied.  An array of length 0\n     * will be normalized to <code>null<\/code>.\n     * @param writerClassName the fully-qualified name of the\n     * associated <code>ImageWriterSpi<\/code> class, as a\n     * non-<code>null<\/code> <code>String<\/code>.\n     * @param outputTypes an array of <code>Class<\/code> objects of\n     * length at least 1 indicating the legal output types.\n     * @param readerSpiNames an array <code>String<\/code>s of length\n     * at least 1 naming the classes of all associated\n     * <code>ImageReader<\/code>s, or <code>null<\/code>.  An array of\n     * length 0 is normalized to <code>null<\/code>.\n     * @param supportsStandardStreamMetadataFormat a\n     * <code>boolean<\/code> that indicates whether a stream metadata\n     * object can use trees described by the standard metadata format.\n     * @param nativeStreamMetadataFormatName a\n     * <code>String<\/code>, or <code>null<\/code>, to be returned from\n     * <code>getNativeStreamMetadataFormatName<\/code>.\n     * @param nativeStreamMetadataFormatClassName a\n     * <code>String<\/code>, or <code>null<\/code>, to be used to instantiate\n     * a metadata format object to be returned from\n     * <code>getNativeStreamMetadataFormat<\/code>.\n     * @param extraStreamMetadataFormatNames an array of\n     * <code>String<\/code>s, or <code>null<\/code>, to be returned from\n     * <code>getExtraStreamMetadataFormatNames<\/code>.  An array of length\n     * 0 is normalized to <code>null<\/code>.\n     * @param extraStreamMetadataFormatClassNames an array of\n     * <code>String<\/code>s, or <code>null<\/code>, to be used to instantiate\n     * a metadata format object to be returned from\n     * <code>getStreamMetadataFormat<\/code>.  An array of length\n     * 0 is normalized to <code>null<\/code>.\n     * @param supportsStandardImageMetadataFormat a\n     * <code>boolean<\/code> that indicates whether an image metadata\n     * object can use trees described by the standard metadata format.\n     * @param nativeImageMetadataFormatName a\n     * <code>String<\/code>, or <code>null<\/code>, to be returned from\n     * <code>getNativeImageMetadataFormatName<\/code>.\n     * @param nativeImageMetadataFormatClassName a\n     * <code>String<\/code>, or <code>null<\/code>, to be used to instantiate\n     * a metadata format object to be returned from\n     * <code>getNativeImageMetadataFormat<\/code>.\n     * @param extraImageMetadataFormatNames an array of\n     * <code>String<\/code>s to be returned from\n     * <code>getExtraImageMetadataFormatNames<\/code>.  An array of length 0\n     * is normalized to <code>null<\/code>.\n     * @param extraImageMetadataFormatClassNames an array of\n     * <code>String<\/code>s, or <code>null<\/code>, to be used to instantiate\n     * a metadata format object to be returned from\n     * <code>getImageMetadataFormat<\/code>.  An array of length\n     * 0 is normalized to <code>null<\/code>.\n     *\n     * @exception IllegalArgumentException if <code>vendorName<\/code>\n     * is <code>null<\/code>.\n     * @exception IllegalArgumentException if <code>version<\/code>\n     * is <code>null<\/code>.\n     * @exception IllegalArgumentException if <code>names<\/code>\n     * is <code>null<\/code> or has length 0.\n     * @exception IllegalArgumentException if <code>writerClassName<\/code>\n     * is <code>null<\/code>.\n     * @exception IllegalArgumentException if <code>outputTypes<\/code>\n     * is <code>null<\/code> or has length 0.\n     */\n    public ImageWriterSpi(String vendorName,\n                          String version,\n                          String[] names,\n                          String[] suffixes,\n                          String[] MIMETypes,\n                          String writerClassName,\n                          Class[] outputTypes,\n                          String[] readerSpiNames,\n                          boolean supportsStandardStreamMetadataFormat,\n                          String nativeStreamMetadataFormatName,\n                          String nativeStreamMetadataFormatClassName,\n                          String[] extraStreamMetadataFormatNames,\n                          String[] extraStreamMetadataFormatClassNames,\n                          boolean supportsStandardImageMetadataFormat,\n                          String nativeImageMetadataFormatName,\n                          String nativeImageMetadataFormatClassName,\n                          String[] extraImageMetadataFormatNames,\n                          String[] extraImageMetadataFormatClassNames) {\n        super(vendorName, version,\n              names, suffixes, MIMETypes, writerClassName,\n              supportsStandardStreamMetadataFormat,\n              nativeStreamMetadataFormatName,\n              nativeStreamMetadataFormatClassName,\n              extraStreamMetadataFormatNames,\n              extraStreamMetadataFormatClassNames,\n              supportsStandardImageMetadataFormat,\n              nativeImageMetadataFormatName,\n              nativeImageMetadataFormatClassName,\n              extraImageMetadataFormatNames,\n              extraImageMetadataFormatClassNames);\n\n        if (outputTypes == null) {\n            throw new IllegalArgumentException\n                (\"outputTypes == null!\");\n        }\n        if (outputTypes.length == 0) {\n            throw new IllegalArgumentException\n                (\"outputTypes.length == 0!\");\n        }\n\n        this.outputTypes = (outputTypes == STANDARD_OUTPUT_TYPE) ?\n            new Class<?>[] { ImageOutputStream.class } :\n            outputTypes.clone();\n\n        // If length == 0, leave it null\n        if (readerSpiNames != null && readerSpiNames.length > 0) {\n            this.readerSpiNames = (String[])readerSpiNames.clone();\n        }\n    }"}
{"Number":"1326","API Relative Path":"javax.imageio.spi.ServiceRegistry.java-setOrdering(Class-T-T)","Corresponding Source":"/**\n     * Sets a pairwise ordering between two service provider objects\n     * within a given category.  If one or both objects are not\n     * currently registered within the given category, or if no\n     * ordering is currently set between them, nothing happens\n     * and <code>false<\/code> is returned.\n     *\n     * <p> The ordering will be used by the\n     * <code>getServiceProviders<\/code> methods when their\n     * <code>useOrdering<\/code> argument is <code>true<\/code>.\n     *\n     * @param category a <code>Class<\/code> object indicating the\n     * category under which the preference is to be disestablished.\n     * @param firstProvider the formerly preferred provider.\n     * @param secondProvider the provider to which\n     * <code>firstProvider<\/code> was formerly preferred.\n     * @param <T> the type of the category.\n     *\n     * @return <code>true<\/code> if a previously set ordering was\n     * disestablished.\n     *\n     * @exception IllegalArgumentException if either provider is\n     * <code>null<\/code> or they are the same object.\n     * @exception IllegalArgumentException if there is no category\n     * corresponding to <code>category<\/code>.\n     */\n    public <T> boolean unsetOrdering(Class<T> category,\n                                     T firstProvider,\n                                     T secondProvider) {\n        if (firstProvider == null || secondProvider == null) {\n            throw new IllegalArgumentException(\"provider is null!\");\n        }\n        if (firstProvider == secondProvider) {\n            throw new IllegalArgumentException(\"providers are the same!\");\n        }\n        SubRegistry reg = (SubRegistry)categoryMap.get(category);\n        if (reg == null) {\n            throw new IllegalArgumentException(\"category unknown!\");\n        }\n        if (reg.contains(firstProvider) &&\n            reg.contains(secondProvider)) {\n            return reg.unsetOrdering(firstProvider, secondProvider);\n        }\n        return false;\n    }"}
{"Number":"1327","API Relative Path":"javax.imageio.spi.ServiceRegistry.java-setOrdering(Class-T-T)","Corresponding Source":"/**\n     * Sets a pairwise ordering between two service provider objects\n     * within a given category.  If one or both objects are not\n     * currently registered within the given category, or if no\n     * ordering is currently set between them, nothing happens\n     * and <code>false<\/code> is returned.\n     *\n     * <p> The ordering will be used by the\n     * <code>getServiceProviders<\/code> methods when their\n     * <code>useOrdering<\/code> argument is <code>true<\/code>.\n     *\n     * @param category a <code>Class<\/code> object indicating the\n     * category under which the preference is to be disestablished.\n     * @param firstProvider the formerly preferred provider.\n     * @param secondProvider the provider to which\n     * <code>firstProvider<\/code> was formerly preferred.\n     * @param <T> the type of the category.\n     *\n     * @return <code>true<\/code> if a previously set ordering was\n     * disestablished.\n     *\n     * @exception IllegalArgumentException if either provider is\n     * <code>null<\/code> or they are the same object.\n     * @exception IllegalArgumentException if there is no category\n     * corresponding to <code>category<\/code>.\n     */\n    public <T> boolean unsetOrdering(Class<T> category,\n                                     T firstProvider,\n                                     T secondProvider) {\n        if (firstProvider == null || secondProvider == null) {\n            throw new IllegalArgumentException(\"provider is null!\");\n        }\n        if (firstProvider == secondProvider) {\n            throw new IllegalArgumentException(\"providers are the same!\");\n        }\n        SubRegistry reg = (SubRegistry)categoryMap.get(category);\n        if (reg == null) {\n            throw new IllegalArgumentException(\"category unknown!\");\n        }\n        if (reg.contains(firstProvider) &&\n            reg.contains(secondProvider)) {\n            return reg.unsetOrdering(firstProvider, secondProvider);\n        }\n        return false;\n    }"}
{"Number":"1328","API Relative Path":"javax.imageio.spi.ServiceRegistry.java-unsetOrdering(Class-T-T)","Corresponding Source":"/**\n     * Sets a pairwise ordering between two service provider objects\n     * within a given category.  If one or both objects are not\n     * currently registered within the given category, or if no\n     * ordering is currently set between them, nothing happens\n     * and <code>false<\/code> is returned.\n     *\n     * <p> The ordering will be used by the\n     * <code>getServiceProviders<\/code> methods when their\n     * <code>useOrdering<\/code> argument is <code>true<\/code>.\n     *\n     * @param category a <code>Class<\/code> object indicating the\n     * category under which the preference is to be disestablished.\n     * @param firstProvider the formerly preferred provider.\n     * @param secondProvider the provider to which\n     * <code>firstProvider<\/code> was formerly preferred.\n     * @param <T> the type of the category.\n     *\n     * @return <code>true<\/code> if a previously set ordering was\n     * disestablished.\n     *\n     * @exception IllegalArgumentException if either provider is\n     * <code>null<\/code> or they are the same object.\n     * @exception IllegalArgumentException if there is no category\n     * corresponding to <code>category<\/code>.\n     */\n    public <T> boolean unsetOrdering(Class<T> category,\n                                     T firstProvider,\n                                     T secondProvider) {\n        if (firstProvider == null || secondProvider == null) {\n            throw new IllegalArgumentException(\"provider is null!\");\n        }\n        if (firstProvider == secondProvider) {\n            throw new IllegalArgumentException(\"providers are the same!\");\n        }\n        SubRegistry reg = (SubRegistry)categoryMap.get(category);\n        if (reg == null) {\n            throw new IllegalArgumentException(\"category unknown!\");\n        }\n        if (reg.contains(firstProvider) &&\n            reg.contains(secondProvider)) {\n            return reg.unsetOrdering(firstProvider, secondProvider);\n        }\n        return false;\n    }"}
{"Number":"1329","API Relative Path":"javax.imageio.spi.ServiceRegistry.java-unsetOrdering(Class-T-T)","Corresponding Source":"/**\n     * Sets a pairwise ordering between two service provider objects\n     * within a given category.  If one or both objects are not\n     * currently registered within the given category, or if no\n     * ordering is currently set between them, nothing happens\n     * and <code>false<\/code> is returned.\n     *\n     * <p> The ordering will be used by the\n     * <code>getServiceProviders<\/code> methods when their\n     * <code>useOrdering<\/code> argument is <code>true<\/code>.\n     *\n     * @param category a <code>Class<\/code> object indicating the\n     * category under which the preference is to be disestablished.\n     * @param firstProvider the formerly preferred provider.\n     * @param secondProvider the provider to which\n     * <code>firstProvider<\/code> was formerly preferred.\n     * @param <T> the type of the category.\n     *\n     * @return <code>true<\/code> if a previously set ordering was\n     * disestablished.\n     *\n     * @exception IllegalArgumentException if either provider is\n     * <code>null<\/code> or they are the same object.\n     * @exception IllegalArgumentException if there is no category\n     * corresponding to <code>category<\/code>.\n     */\n    public <T> boolean unsetOrdering(Class<T> category,\n                                     T firstProvider,\n                                     T secondProvider) {\n        if (firstProvider == null || secondProvider == null) {\n            throw new IllegalArgumentException(\"provider is null!\");\n        }\n        if (firstProvider == secondProvider) {\n            throw new IllegalArgumentException(\"providers are the same!\");\n        }\n        SubRegistry reg = (SubRegistry)categoryMap.get(category);\n        if (reg == null) {\n            throw new IllegalArgumentException(\"category unknown!\");\n        }\n        if (reg.contains(firstProvider) &&\n            reg.contains(secondProvider)) {\n            return reg.unsetOrdering(firstProvider, secondProvider);\n        }\n        return false;\n    }"}
{"Number":"1330","API Relative Path":"javax.imageio.stream.FileCacheImageInputStream.java-FileCacheImageInputStream(InputStream-File)","Corresponding Source":"/**\n     * Constructs a <code>FileCacheImageInputStream<\/code> that will read\n     * from a given <code>InputStream<\/code>.\n     *\n     * <p> A temporary file is used as a cache.  If\n     * <code>cacheDir<\/code>is non-<code>null<\/code> and is a\n     * directory, the file will be created there.  If it is\n     * <code>null<\/code>, the system-dependent default temporary-file\n     * directory will be used (see the documentation for\n     * <code>File.createTempFile<\/code> for details).\n     *\n     * @param stream an <code>InputStream<\/code> to read from.\n     * @param cacheDir a <code>File<\/code> indicating where the\n     * cache file should be created, or <code>null<\/code> to use the\n     * system directory.\n     *\n     * @exception IllegalArgumentException if <code>stream<\/code> is\n     * <code>null<\/code>.\n     * @exception IllegalArgumentException if <code>cacheDir<\/code> is\n     * non-<code>null<\/code> but is not a directory.\n     * @exception IOException if a cache file cannot be created.\n     */\n    public FileCacheImageInputStream(InputStream stream, File cacheDir)\n        throws IOException {\n        if (stream == null) {\n            throw new IllegalArgumentException(\"stream == null!\");\n        }\n        if ((cacheDir != null) && !(cacheDir.isDirectory())) {\n            throw new IllegalArgumentException(\"Not a directory!\");\n        }\n        this.stream = stream;\n        if (cacheDir == null)\n            this.cacheFile = Files.createTempFile(\"imageio\", \".tmp\").toFile();\n        else\n            this.cacheFile = Files.createTempFile(cacheDir.toPath(), \"imageio\", \".tmp\")\n                                  .toFile();\n        this.cache = new RandomAccessFile(cacheFile, \"rw\");\n\n        this.closeAction = StreamCloser.createCloseAction(this);\n        StreamCloser.addToQueue(closeAction);\n\n        disposerRecord = new StreamDisposerRecord(cacheFile, cache);\n        if (getClass() == FileCacheImageInputStream.class) {\n            disposerReferent = new Object();\n            Disposer.addRecord(disposerReferent, disposerRecord);\n        } else {\n            disposerReferent = new StreamFinalizer(this);\n        }\n    }"}
{"Number":"1331","API Relative Path":"javax.imageio.stream.FileCacheImageOutputStream.java-FileCacheImageOutputStream(OutputStream-File)","Corresponding Source":"/**\n     * Constructs a <code>FileCacheImageOutputStream<\/code> that will write\n     * to a given <code>outputStream<\/code>.\n     *\n     * <p> A temporary file is used as a cache.  If\n     * <code>cacheDir<\/code>is non-<code>null<\/code> and is a\n     * directory, the file will be created there.  If it is\n     * <code>null<\/code>, the system-dependent default temporary-file\n     * directory will be used (see the documentation for\n     * <code>File.createTempFile<\/code> for details).\n     *\n     * @param stream an <code>OutputStream<\/code> to write to.\n     * @param cacheDir a <code>File<\/code> indicating where the\n     * cache file should be created, or <code>null<\/code> to use the\n     * system directory.\n     *\n     * @exception IllegalArgumentException if <code>stream<\/code>\n     * is <code>null<\/code>.\n     * @exception IllegalArgumentException if <code>cacheDir<\/code> is\n     * non-<code>null<\/code> but is not a directory.\n     * @exception IOException if a cache file cannot be created.\n     */\n    public FileCacheImageOutputStream(OutputStream stream, File cacheDir)\n        throws IOException {\n        if (stream == null) {\n            throw new IllegalArgumentException(\"stream == null!\");\n        }\n        if ((cacheDir != null) && !(cacheDir.isDirectory())) {\n            throw new IllegalArgumentException(\"Not a directory!\");\n        }\n        this.stream = stream;\n        if (cacheDir == null)\n            this.cacheFile = Files.createTempFile(\"imageio\", \".tmp\").toFile();\n        else\n            this.cacheFile = Files.createTempFile(cacheDir.toPath(), \"imageio\", \".tmp\")\n                                  .toFile();\n        this.cache = new RandomAccessFile(cacheFile, \"rw\");\n\n        this.closeAction = StreamCloser.createCloseAction(this);\n        StreamCloser.addToQueue(closeAction);\n    }"}
{"Number":"1332","API Relative Path":"javax.imageio.stream.FileCacheImageOutputStream.java-seek(long)","Corresponding Source":"/**\n     * Sets the current stream position and resets the bit offset to\n     * 0.  It is legal to seek past the end of the file; an\n     * <code>EOFException<\/code> will be thrown only if a read is\n     * performed.  The file length will not be increased until a write\n     * is performed.\n     *\n     * @exception IndexOutOfBoundsException if <code>pos<\/code> is smaller\n     * than the flushed position.\n     * @exception IOException if any other I/O error occurs.\n     */\n    public void seek(long pos) throws IOException {\n        checkClosed();\n\n        if (pos < flushedPos) {\n            throw new IndexOutOfBoundsException();\n        }\n\n        cache.seek(pos);\n        this.streamPos = cache.getFilePointer();\n        maxStreamPos = Math.max(maxStreamPos, streamPos);\n        this.bitOffset = 0;\n    }"}
{"Number":"1333","API Relative Path":"javax.imageio.stream.FileImageOutputStream.java-seek(long)","Corresponding Source":"/**\n     * Sets the current stream position and resets the bit offset to\n     * 0.  It is legal to seeking past the end of the file; an\n     * <code>EOFException<\/code> will be thrown only if a read is\n     * performed.  The file length will not be increased until a write\n     * is performed.\n     *\n     * @exception IndexOutOfBoundsException if <code>pos<\/code> is smaller\n     * than the flushed position.\n     * @exception IOException if any other I/O error occurs.\n     */\n    public void seek(long pos) throws IOException {\n        checkClosed();\n        if (pos < flushedPos) {\n            throw new IndexOutOfBoundsException(\"pos < flushedPos!\");\n        }\n        bitOffset = 0;\n        raf.seek(pos);\n        streamPos = raf.getFilePointer();\n    }"}
{"Number":"1334","API Relative Path":"javax.imageio.stream.MemoryCache.java-read(byte[]-int-int-long)","Corresponding Source":"/**\n     * Copy <code>len<\/code> bytes from the cache, starting\n     * at cache position <code>pos<\/code>, into the array\n     * <code>b<\/code> at offset <code>off<\/code>.\n     *\n     * @exception NullPointerException if b is <code>null<\/code>\n     * @exception IndexOutOfBoundsException if <code>off<\/code>,\n     * <code>len<\/code> or <code>pos<\/code> are negative or if\n     * <code>off + len > b.length<\/code> or if any portion of the\n     * requested data is not in the cache (including if\n     * <code>pos<\/code> is in a block that has already been disposed).\n     */\n    public void read(byte[] b, int off, int len, long pos)\n        throws IOException {\n        if (b == null) {\n            throw new NullPointerException(\"b == null!\");\n        }\n        // Fix 4430357 - if off + len < 0, overflow occurred\n        if ((off < 0) || (len < 0) || (pos < 0) ||\n            (off + len > b.length) || (off + len < 0)) {\n            throw new IndexOutOfBoundsException();\n        }\n        if (pos + len > length) {\n            throw new IndexOutOfBoundsException();\n        }\n\n        long index = pos/BUFFER_LENGTH;\n        int offset = (int)pos % BUFFER_LENGTH;\n        while (len > 0) {\n            int nbytes = Math.min(len, BUFFER_LENGTH - offset);\n            byte[] buf = getCacheBlock(index++);\n            System.arraycopy(buf, offset, b, off, nbytes);\n\n            len -= nbytes;\n            off += nbytes;\n            offset = 0; // Always after the first time\n        }\n    }"}
{"Number":"1335","API Relative Path":"javax.imageio.stream.MemoryCache.java-read(byte[]-int-int-long)","Corresponding Source":"/**\n     * Copy <code>len<\/code> bytes from the cache, starting\n     * at cache position <code>pos<\/code>, into the array\n     * <code>b<\/code> at offset <code>off<\/code>.\n     *\n     * @exception NullPointerException if b is <code>null<\/code>\n     * @exception IndexOutOfBoundsException if <code>off<\/code>,\n     * <code>len<\/code> or <code>pos<\/code> are negative or if\n     * <code>off + len > b.length<\/code> or if any portion of the\n     * requested data is not in the cache (including if\n     * <code>pos<\/code> is in a block that has already been disposed).\n     */\n    public void read(byte[] b, int off, int len, long pos)\n        throws IOException {\n        if (b == null) {\n            throw new NullPointerException(\"b == null!\");\n        }\n        // Fix 4430357 - if off + len < 0, overflow occurred\n        if ((off < 0) || (len < 0) || (pos < 0) ||\n            (off + len > b.length) || (off + len < 0)) {\n            throw new IndexOutOfBoundsException();\n        }\n        if (pos + len > length) {\n            throw new IndexOutOfBoundsException();\n        }\n\n        long index = pos/BUFFER_LENGTH;\n        int offset = (int)pos % BUFFER_LENGTH;\n        while (len > 0) {\n            int nbytes = Math.min(len, BUFFER_LENGTH - offset);\n            byte[] buf = getCacheBlock(index++);\n            System.arraycopy(buf, offset, b, off, nbytes);\n\n            len -= nbytes;\n            off += nbytes;\n            offset = 0; // Always after the first time\n        }\n    }"}
{"Number":"1336","API Relative Path":"javax.imageio.stream.MemoryCache.java-write(byte[]-int-int-long)","Corresponding Source":"/**\n     * Overwrites and/or appends the cache from a byte array.\n     * The length of the cache will be extended as needed to hold\n     * the incoming data.\n     *\n     * @param b an array of bytes containing data to be written.\n     * @param off the starting offset withing the data array.\n     * @param len the number of bytes to be written.\n     * @param pos the cache position at which to begin writing.\n     *\n     * @exception NullPointerException if <code>b<\/code> is <code>null<\/code>.\n     * @exception IndexOutOfBoundsException if <code>off<\/code>,\n     * <code>len<\/code>, or <code>pos<\/code> are negative,\n     * or if <code>off+len > b.length<\/code>.\n     */\n    public void write(byte[] b, int off, int len, long pos)\n        throws IOException {\n        if (b == null) {\n            throw new NullPointerException(\"b == null!\");\n        }\n        // Fix 4430357 - if off + len < 0, overflow occurred\n        if ((off < 0) || (len < 0) || (pos < 0) ||\n            (off + len > b.length) || (off + len < 0)) {\n            throw new IndexOutOfBoundsException();\n        }\n\n        // Ensure there is space for the incoming data\n        long lastPos = pos + len - 1;\n        if (lastPos >= length) {\n            pad(lastPos);\n            length = lastPos + 1;\n        }\n\n        // Copy the data into the cache, block by block\n        int offset = (int)(pos % BUFFER_LENGTH);\n        while (len > 0) {\n            byte[] buf = getCacheBlock(pos/BUFFER_LENGTH);\n            int nbytes = Math.min(len, BUFFER_LENGTH - offset);\n            System.arraycopy(b, off, buf, offset, nbytes);\n\n            pos += nbytes;\n            off += nbytes;\n            len -= nbytes;\n            offset = 0; // Always after the first time\n        }\n    }"}
{"Number":"1337","API Relative Path":"javax.imageio.stream.MemoryCache.java-write(int-long)","Corresponding Source":"/**\n     * Overwrites or appends a single byte to the cache.\n     * The length of the cache will be extended as needed to hold\n     * the incoming data.\n     *\n     * @param b an <code>int<\/code> whose 8 least significant bits\n     * will be written.\n     * @param pos the cache position at which to begin writing.\n     *\n     * @exception IndexOutOfBoundsException if <code>pos<\/code> is negative.\n     */\n    public void write(int b, long pos) throws IOException {\n        if (pos < 0) {\n            throw new ArrayIndexOutOfBoundsException(\"pos < 0\");\n        }\n\n        // Ensure there is space for the incoming data\n        if (pos >= length) {\n            pad(pos);\n            length = pos + 1;\n        }\n\n        // Insert the data.\n        byte[] buf = getCacheBlock(pos/BUFFER_LENGTH);\n        int offset = (int)(pos % BUFFER_LENGTH);\n        buf[offset] = (byte)b;\n    }"}
{"Number":"1338","API Relative Path":"javax.imageio.stream.MemoryCache.java-writeToStream(OutputStream-long-long)","Corresponding Source":"/**\n     * Writes out a portion of the cache to an <code>OutputStream<\/code>.\n     * This method preserves no state about the output stream, and does\n     * not dispose of any blocks containing bytes written.  To dispose\n     * blocks, use {@link #disposeBefore <code>disposeBefore()<\/code>}.\n     *\n     * @exception IndexOutOfBoundsException if any portion of\n     * the requested data is not in the cache (including if <code>pos<\/code>\n     * is in a block already disposed), or if either <code>pos<\/code> or\n     * <code>len<\/code> is < 0.\n     */\n    public void writeToStream(OutputStream stream, long pos, long len)\n        throws IOException {\n        if (pos + len > length) {\n            throw new IndexOutOfBoundsException(\"Argument out of cache\");\n        }\n        if ((pos < 0) || (len < 0)) {\n            throw new IndexOutOfBoundsException(\"Negative pos or len\");\n        }\n        if (len == 0) {\n            return;\n        }\n\n        long bufIndex = pos/BUFFER_LENGTH;\n        if (bufIndex < cacheStart) {\n            throw new IndexOutOfBoundsException(\"pos already disposed\");\n        }\n        int offset = (int)(pos % BUFFER_LENGTH);\n\n        byte[] buf = getCacheBlock(bufIndex++);\n        while (len > 0) {\n            if (buf == null) {\n                buf = getCacheBlock(bufIndex++);\n                offset = 0;\n            }\n            int nbytes = (int)Math.min(len, (long)(BUFFER_LENGTH - offset));\n            stream.write(buf, offset, nbytes);\n            buf = null;\n            len -= nbytes;\n        }\n    }"}
{"Number":"1339","API Relative Path":"javax.management.AttributeList.java-add(int-Object)","Corresponding Source":"/**\n     * {@inheritDoc}\n     * @throws IllegalArgumentException if this {@code AttributeList} is\n     * <a href=\"#type-safe\">type-safe<\/a> and {@code element} is not an\n     * {@code Attribute}.\n     */\n    @Override\n    public void add(int index, Object element) {\n        adding(element);\n        super.add(index, element);\n    }"}
{"Number":"1340","API Relative Path":"javax.management.AttributeList.java-add(Object)","Corresponding Source":"/*\n     * Override all of the methods from ArrayList<Object> that might add\n     * a non-Attribute to the List, and disallow that if asList has ever\n     * been called on this instance.\n     */\n\n    /**\n     * {@inheritDoc}\n     * @throws IllegalArgumentException if this {@code AttributeList} is\n     * <a href=\"#type-safe\">type-safe<\/a> and {@code element} is not an\n     * {@code Attribute}.\n     */\n    @Override\n    public boolean add(Object element) {\n        adding(element);\n        return super.add(element);\n    }"}
{"Number":"1341","API Relative Path":"javax.management.AttributeList.java-set(int-Object)","Corresponding Source":"/**\n     * {@inheritDoc}\n     * @throws IllegalArgumentException if this {@code AttributeList} is\n     * <a href=\"#type-safe\">type-safe<\/a> and {@code element} is not an\n     * {@code Attribute}.\n     */\n    @Override\n    public Object set(int index, Object element) {\n        adding(element);\n        return super.set(index, element);\n    }"}
{"Number":"1342","API Relative Path":"javax.management.ImmutableDescriptor.java-ImmutableDescriptor(String[]-Object[])","Corresponding Source":"/**\n     * Construct a descriptor containing the given fields and values.\n     *\n     * @throws IllegalArgumentException if either array is null, or\n     * if the arrays have different sizes, or\n     * if a field name is null or empty, or if the same field name\n     * appears more than once.\n     */\n    public ImmutableDescriptor(String[] fieldNames, Object[] fieldValues) {\n        this(makeMap(fieldNames, fieldValues));\n    }"}
{"Number":"1343","API Relative Path":"javax.management.ImmutableDescriptor.java-ImmutableDescriptor(String[]-Object[])","Corresponding Source":"/**\n     * Construct a descriptor containing the given fields and values.\n     *\n     * @throws IllegalArgumentException if either array is null, or\n     * if the arrays have different sizes, or\n     * if a field name is null or empty, or if the same field name\n     * appears more than once.\n     */\n    public ImmutableDescriptor(String[] fieldNames, Object[] fieldValues) {\n        this(makeMap(fieldNames, fieldValues));\n    }"}
{"Number":"1344","API Relative Path":"javax.management.ImmutableDescriptor.java-removeField(String)","Corresponding Source":"/**\n     * Removes a field from the descriptor.\n     *\n     * @param fieldName String name of the field to be removed.\n     * If the field name is illegal or the field is not found,\n     * no exception is thrown.\n     *\n     * @exception RuntimeOperationsException if a field of the given name\n     * exists and the descriptor is immutable.  The wrapped exception will\n     * be an {@link UnsupportedOperationException}.\n     */\n    public final void removeField(String fieldName) {\n        if (fieldName != null && fieldIndex(fieldName) >= 0)\n            unsupported();\n    }"}
{"Number":"1345","API Relative Path":"javax.management.ImmutableDescriptor.java-setField(String-Object)","Corresponding Source":"/**\n     * This operation is unsupported since this class is immutable.  If\n     * this call would change a mutable descriptor with the same contents,\n     * then a {@link RuntimeOperationsException} wrapping an\n     * {@link UnsupportedOperationException} is thrown.  Otherwise,\n     * the behavior is the same as it would be for a mutable descriptor:\n     * either an exception is thrown because of illegal parameters, or\n     * there is no effect.\n     */\n    public final void setField(String fieldName, Object fieldValue)\n        throws RuntimeOperationsException {\n        checkIllegalFieldName(fieldName);\n        int i = fieldIndex(fieldName);\n        if (i < 0)\n            unsupported();\n        Object value = values[i];\n        if ((value == null) ?\n                (fieldValue != null) :\n                !value.equals(fieldValue))\n            unsupported();\n    }"}
{"Number":"1346","API Relative Path":"javax.management.InstanceOfQueryExp.java-InstanceOfQueryExp(StringValueExp)","Corresponding Source":"/**\n     * Creates a new InstanceOfExp with a specific class name.\n     * @param classNameValue The {@link StringValueExp} returning the name of\n     *        the class of which selected MBeans should be instances.\n     */\n    // We are using StringValueExp here to be consistent with other queries,\n    // although we should actually either use a simple string (the classname)\n    // or a ValueExp - which would allow more complex queries - like for\n    // instance evaluating the class name from an AttributeValueExp.\n    // As it stands - using StringValueExp instead of a simple constant string\n    // doesn't serve any useful purpose besides offering a consistent\n    // look & feel.\n    public InstanceOfQueryExp(StringValueExp classNameValue) {\n        if (classNameValue == null) {\n            throw new IllegalArgumentException(\"Null class name.\");\n        }\n\n        this.classNameValue = classNameValue;\n    }"}
{"Number":"1347","API Relative Path":"javax.management.JMX.java-newMBeanProxy(MBeanServerConnection-ObjectName-Class-boolean)","Corresponding Source":"/**\n     * <p>Make a proxy for a Standard MBean in a local or remote MBean\n     * Server that may also support the methods of {@link\n     * NotificationEmitter}.<\/p>\n     *\n     * <p>This method behaves the same as {@link\n     * #newMBeanProxy(MBeanServerConnection, ObjectName, Class)}, but\n     * additionally, if {@code notificationEmitter} is {@code\n     * true}, then the MBean is assumed to be a {@link\n     * NotificationBroadcaster} or {@link NotificationEmitter} and the\n     * returned proxy will implement {@link NotificationEmitter} as\n     * well as {@code interfaceClass}.  A call to {@link\n     * NotificationBroadcaster#addNotificationListener} on the proxy\n     * will result in a call to {@link\n     * MBeanServerConnection#addNotificationListener(ObjectName,\n     * NotificationListener, NotificationFilter, Object)}, and\n     * likewise for the other methods of {@link\n     * NotificationBroadcaster} and {@link NotificationEmitter}.<\/p>\n     *\n     * @param connection the MBean server to forward to.\n     * @param objectName the name of the MBean within\n     * {@code connection} to forward to.\n     * @param interfaceClass the management interface that the MBean\n     * exports, which will also be implemented by the returned proxy.\n     * @param notificationEmitter make the returned proxy\n     * implement {@link NotificationEmitter} by forwarding its methods\n     * via {@code connection}.\n     *\n     * @param <T> allows the compiler to know that if the {@code\n     * interfaceClass} parameter is {@code MyMBean.class}, for\n     * example, then the return type is {@code MyMBean}.\n     *\n     * @return the new proxy instance.\n     *\n     * @throws IllegalArgumentException if {@code interfaceClass} is not\n     * a <a href=\"package-summary.html#mgIface\">compliant MBean\n     * interface<\/a>\n     */\n    public static <T> T newMBeanProxy(MBeanServerConnection connection,\n                                      ObjectName objectName,\n                                      Class<T> interfaceClass,\n                                      boolean notificationEmitter) {\n        return createProxy(connection, objectName, interfaceClass, notificationEmitter, false);\n    }"}
{"Number":"1348","API Relative Path":"javax.management.JMX.java-newMBeanProxy(MBeanServerConnection-ObjectName-Class-boolean)","Corresponding Source":"/**\n     * <p>Make a proxy for a Standard MBean in a local or remote MBean\n     * Server that may also support the methods of {@link\n     * NotificationEmitter}.<\/p>\n     *\n     * <p>This method behaves the same as {@link\n     * #newMBeanProxy(MBeanServerConnection, ObjectName, Class)}, but\n     * additionally, if {@code notificationEmitter} is {@code\n     * true}, then the MBean is assumed to be a {@link\n     * NotificationBroadcaster} or {@link NotificationEmitter} and the\n     * returned proxy will implement {@link NotificationEmitter} as\n     * well as {@code interfaceClass}.  A call to {@link\n     * NotificationBroadcaster#addNotificationListener} on the proxy\n     * will result in a call to {@link\n     * MBeanServerConnection#addNotificationListener(ObjectName,\n     * NotificationListener, NotificationFilter, Object)}, and\n     * likewise for the other methods of {@link\n     * NotificationBroadcaster} and {@link NotificationEmitter}.<\/p>\n     *\n     * @param connection the MBean server to forward to.\n     * @param objectName the name of the MBean within\n     * {@code connection} to forward to.\n     * @param interfaceClass the management interface that the MBean\n     * exports, which will also be implemented by the returned proxy.\n     * @param notificationEmitter make the returned proxy\n     * implement {@link NotificationEmitter} by forwarding its methods\n     * via {@code connection}.\n     *\n     * @param <T> allows the compiler to know that if the {@code\n     * interfaceClass} parameter is {@code MyMBean.class}, for\n     * example, then the return type is {@code MyMBean}.\n     *\n     * @return the new proxy instance.\n     *\n     * @throws IllegalArgumentException if {@code interfaceClass} is not\n     * a <a href=\"package-summary.html#mgIface\">compliant MBean\n     * interface<\/a>\n     */\n    public static <T> T newMBeanProxy(MBeanServerConnection connection,\n                                      ObjectName objectName,\n                                      Class<T> interfaceClass,\n                                      boolean notificationEmitter) {\n        return createProxy(connection, objectName, interfaceClass, notificationEmitter, false);\n    }"}
{"Number":"1349","API Relative Path":"javax.management.JMX.java-newMXBeanProxy(MBeanServerConnection-ObjectName-Class-boolean)","Corresponding Source":"/**\n     * <p>Make a proxy for an MXBean in a local or remote MBean\n     * Server that may also support the methods of {@link\n     * NotificationEmitter}.<\/p>\n     *\n     * <p>This method behaves the same as {@link\n     * #newMXBeanProxy(MBeanServerConnection, ObjectName, Class)}, but\n     * additionally, if {@code notificationEmitter} is {@code\n     * true}, then the MXBean is assumed to be a {@link\n     * NotificationBroadcaster} or {@link NotificationEmitter} and the\n     * returned proxy will implement {@link NotificationEmitter} as\n     * well as {@code interfaceClass}.  A call to {@link\n     * NotificationBroadcaster#addNotificationListener} on the proxy\n     * will result in a call to {@link\n     * MBeanServerConnection#addNotificationListener(ObjectName,\n     * NotificationListener, NotificationFilter, Object)}, and\n     * likewise for the other methods of {@link\n     * NotificationBroadcaster} and {@link NotificationEmitter}.<\/p>\n     *\n     * @param connection the MBean server to forward to.\n     * @param objectName the name of the MBean within\n     * {@code connection} to forward to.\n     * @param interfaceClass the MXBean interface,\n     * which will also be implemented by the returned proxy.\n     * @param notificationEmitter make the returned proxy\n     * implement {@link NotificationEmitter} by forwarding its methods\n     * via {@code connection}.\n     *\n     * @param <T> allows the compiler to know that if the {@code\n     * interfaceClass} parameter is {@code MyMXBean.class}, for\n     * example, then the return type is {@code MyMXBean}.\n     *\n     * @return the new proxy instance.\n     *\n     * @throws IllegalArgumentException if {@code interfaceClass} is not\n     * a {@link javax.management.MXBean compliant MXBean interface}\n     */\n    public static <T> T newMXBeanProxy(MBeanServerConnection connection,\n                                       ObjectName objectName,\n                                       Class<T> interfaceClass,\n                                       boolean notificationEmitter) {\n        return createProxy(connection, objectName, interfaceClass, notificationEmitter, true);\n    }"}
{"Number":"1350","API Relative Path":"javax.management.JMX.java-newMXBeanProxy(MBeanServerConnection-ObjectName-Class-boolean)","Corresponding Source":"/**\n     * <p>Make a proxy for an MXBean in a local or remote MBean\n     * Server that may also support the methods of {@link\n     * NotificationEmitter}.<\/p>\n     *\n     * <p>This method behaves the same as {@link\n     * #newMXBeanProxy(MBeanServerConnection, ObjectName, Class)}, but\n     * additionally, if {@code notificationEmitter} is {@code\n     * true}, then the MXBean is assumed to be a {@link\n     * NotificationBroadcaster} or {@link NotificationEmitter} and the\n     * returned proxy will implement {@link NotificationEmitter} as\n     * well as {@code interfaceClass}.  A call to {@link\n     * NotificationBroadcaster#addNotificationListener} on the proxy\n     * will result in a call to {@link\n     * MBeanServerConnection#addNotificationListener(ObjectName,\n     * NotificationListener, NotificationFilter, Object)}, and\n     * likewise for the other methods of {@link\n     * NotificationBroadcaster} and {@link NotificationEmitter}.<\/p>\n     *\n     * @param connection the MBean server to forward to.\n     * @param objectName the name of the MBean within\n     * {@code connection} to forward to.\n     * @param interfaceClass the MXBean interface,\n     * which will also be implemented by the returned proxy.\n     * @param notificationEmitter make the returned proxy\n     * implement {@link NotificationEmitter} by forwarding its methods\n     * via {@code connection}.\n     *\n     * @param <T> allows the compiler to know that if the {@code\n     * interfaceClass} parameter is {@code MyMXBean.class}, for\n     * example, then the return type is {@code MyMXBean}.\n     *\n     * @return the new proxy instance.\n     *\n     * @throws IllegalArgumentException if {@code interfaceClass} is not\n     * a {@link javax.management.MXBean compliant MXBean interface}\n     */\n    public static <T> T newMXBeanProxy(MBeanServerConnection connection,\n                                       ObjectName objectName,\n                                       Class<T> interfaceClass,\n                                       boolean notificationEmitter) {\n        return createProxy(connection, objectName, interfaceClass, notificationEmitter, true);\n    }"}
{"Number":"1351","API Relative Path":"javax.management.loading.MLet.java-getMBeansFromURL(String)","Corresponding Source":"/**\n      * Loads a text file containing MLET tags that define the MBeans to\n      * be added to the MBean server. The location of the text file is specified by\n      * a URL. The MBeans specified in the MLET file will be instantiated and\n      * registered in the MBean server.\n      *\n      * @param url The URL of the text file to be loaded as String object.\n      *\n      * @return A set containing one entry per MLET tag in the m-let\n      * text file loaded.  Each entry specifies either the\n      * ObjectInstance for the created MBean, or a throwable object\n      * (that is, an error or an exception) if the MBean could not be\n      * created.\n      *\n      * @exception ServiceNotFoundException One of the following\n      * errors has occurred: The m-let text file does not contain an\n      * MLET tag, the m-let text file is not found, a mandatory\n      * attribute of the MLET tag is not specified, the url is\n      * malformed.\n      * @exception IllegalStateException MLet MBean is not registered\n      * with an MBeanServer.\n      *\n      */\n     public Set<Object> getMBeansFromURL(String url)\n             throws ServiceNotFoundException  {\n\n         String mth = \"getMBeansFromURL\";\n\n         if (server == null) {\n             throw new IllegalStateException(\"This MLet MBean is not \" +\n                                             \"registered with an MBeanServer.\");\n         }\n         // Parse arguments\n         if (url == null) {\n             MLET_LOGGER.logp(Level.FINER, MLet.class.getName(),\n                     mth, \"URL is null\");\n             throw new ServiceNotFoundException(\"The specified URL is null\");\n         } else {\n             url = url.replace(File.separatorChar,'/');\n         }\n         if (MLET_LOGGER.isLoggable(Level.FINER)) {\n             MLET_LOGGER.logp(Level.FINER, MLet.class.getName(),\n                     mth, \"<URL = \" + url + \">\");\n         }\n\n         // Parse URL\n         try {\n             MLetParser parser = new MLetParser();\n             mletList = parser.parseURL(url);\n         } catch (Exception e) {\n             final String msg =\n                 \"Problems while parsing URL [\" + url +\n                 \"], got exception [\" + e.toString() + \"]\";\n             MLET_LOGGER.logp(Level.FINER, MLet.class.getName(), mth, msg);\n             throw EnvHelp.initCause(new ServiceNotFoundException(msg), e);\n         }\n\n         // Check that the list of MLets is not empty\n         if (mletList.size() == 0) {\n             final String msg =\n                 \"File \" + url + \" not found or MLET tag not defined in file\";\n             MLET_LOGGER.logp(Level.FINER, MLet.class.getName(), mth, msg);\n             throw new ServiceNotFoundException(msg);\n         }\n\n         // Walk through the list of MLets\n         Set<Object> mbeans = new HashSet<Object>();\n         for (MLetContent elmt : mletList) {\n             // Initialize local variables\n             String code = elmt.getCode();\n             if (code != null) {\n                 if (code.endsWith(\".class\")) {\n                     code = code.substring(0, code.length() - 6);\n                 }\n             }\n             String name = elmt.getName();\n             URL codebase = elmt.getCodeBase();\n             String version = elmt.getVersion();\n             String serName = elmt.getSerializedObject();\n             String jarFiles = elmt.getJarFiles();\n             URL documentBase = elmt.getDocumentBase();\n\n             // Display debug information\n             if (MLET_LOGGER.isLoggable(Level.FINER)) {\n                 final StringBuilder strb = new StringBuilder()\n                 .append(\"\\n\\tMLET TAG     = \").append(elmt.getAttributes())\n                 .append(\"\\n\\tCODEBASE     = \").append(codebase)\n                 .append(\"\\n\\tARCHIVE      = \").append(jarFiles)\n                 .append(\"\\n\\tCODE         = \").append(code)\n                 .append(\"\\n\\tOBJECT       = \").append(serName)\n                 .append(\"\\n\\tNAME         = \").append(name)\n                 .append(\"\\n\\tVERSION      = \").append(version)\n                 .append(\"\\n\\tDOCUMENT URL = \").append(documentBase);\n                 MLET_LOGGER.logp(Level.FINER, MLet.class.getName(),\n                         mth, strb.toString());\n             }\n\n             // Load classes from JAR files\n             StringTokenizer st = new StringTokenizer(jarFiles, \",\", false);\n             while (st.hasMoreTokens()) {\n                 String tok = st.nextToken().trim();\n                 if (MLET_LOGGER.isLoggable(Level.FINER)) {\n                     MLET_LOGGER.logp(Level.FINER, MLet.class.getName(), mth,\n                             \"Load archive for codebase <\" + codebase +\n                             \">, file <\" + tok + \">\");\n                 }\n                 // Check which is the codebase to be used for loading the jar file.\n                 // If we are using the base MLet implementation then it will be\n                 // always the remote server but if the service has been extended in\n                 // order to support caching and versioning then this method will\n                 // return the appropriate one.\n                 //\n                 try {\n                     codebase = check(version, codebase, tok, elmt);\n                 } catch (Exception ex) {\n                     MLET_LOGGER.logp(Level.FINEST, MLet.class.getName(),\n                             mth, \"Got unexpected exception\", ex);\n                     mbeans.add(ex);\n                     continue;\n                 }\n\n                 // Appends the specified JAR file URL to the list of\n                 // URLs to search for classes and resources.\n                 try {\n                     if (!Arrays.asList(getURLs())\n                         .contains(new URL(codebase.toString() + tok))) {\n                         addURL(codebase + tok);\n                     }\n                 } catch (MalformedURLException me) {\n                     // OK : Ignore jar file if its name provokes the\n                     // URL to be an invalid one.\n                 }\n\n             }\n             // Instantiate the class specified in the\n             // CODE or OBJECT section of the MLet tag\n             //\n             Object o;\n             ObjectInstance objInst;\n\n             if (code != null && serName != null) {\n                 final String msg =\n                     \"CODE and OBJECT parameters cannot be specified at the \" +\n                     \"same time in tag MLET\";\n                 MLET_LOGGER.logp(Level.FINER, MLet.class.getName(), mth, msg);\n                 mbeans.add(new Error(msg));\n                 continue;\n             }\n             if (code == null && serName == null) {\n                 final String msg =\n                     \"Either CODE or OBJECT parameter must be specified in \" +\n                     \"tag MLET\";\n                 MLET_LOGGER.logp(Level.FINER, MLet.class.getName(), mth, msg);\n                 mbeans.add(new Error(msg));\n                 continue;\n             }\n             try {\n                 if (code != null) {\n\n                     List<String> signat = elmt.getParameterTypes();\n                     List<String> stringPars = elmt.getParameterValues();\n                     List<Object> objectPars = new ArrayList<Object>();\n\n                     for (int i = 0; i < signat.size(); i++) {\n                         objectPars.add(constructParameter(stringPars.get(i),\n                                                           signat.get(i)));\n                     }\n                     if (signat.isEmpty()) {\n                         if (name == null) {\n                             objInst = server.createMBean(code, null,\n                                                          mletObjectName);\n                         } else {\n                             objInst = server.createMBean(code,\n                                                          new ObjectName(name),\n                                                          mletObjectName);\n                         }\n                     } else {\n                         Object[] parms = objectPars.toArray();\n                         String[] signature = new String[signat.size()];\n                         signat.toArray(signature);\n                         if (MLET_LOGGER.isLoggable(Level.FINEST)) {\n                             final StringBuilder strb = new StringBuilder();\n                             for (int i = 0; i < signature.length; i++) {\n                                 strb.append(\"\\n\\tSignature     = \")\n                                 .append(signature[i])\n                                 .append(\"\\t\\nParams        = \")\n                                 .append(parms[i]);\n                             }\n                             MLET_LOGGER.logp(Level.FINEST,\n                                     MLet.class.getName(),\n                                     mth, strb.toString());\n                         }\n                         if (name == null) {\n                             objInst =\n                                 server.createMBean(code, null, mletObjectName,\n                                                    parms, signature);\n                         } else {\n                             objInst =\n                                 server.createMBean(code, new ObjectName(name),\n                                                    mletObjectName, parms,\n                                                    signature);\n                         }\n                     }\n                 } else {\n                     o = loadSerializedObject(codebase,serName);\n                     if (name == null) {\n                         server.registerMBean(o, null);\n                     } else {\n                         server.registerMBean(o,  new ObjectName(name));\n                     }\n                     objInst = new ObjectInstance(name, o.getClass().getName());\n                 }\n             } catch (ReflectionException  ex) {\n                 MLET_LOGGER.logp(Level.FINER, MLet.class.getName(), mth,\n                         \"ReflectionException\", ex);\n                 mbeans.add(ex);\n                 continue;\n             } catch (InstanceAlreadyExistsException  ex) {\n                 MLET_LOGGER.logp(Level.FINER, MLet.class.getName(), mth,\n                         \"InstanceAlreadyExistsException\", ex);\n                 mbeans.add(ex);\n                 continue;\n             } catch (MBeanRegistrationException ex) {\n                 MLET_LOGGER.logp(Level.FINER, MLet.class.getName(), mth,\n                         \"MBeanRegistrationException\", ex);\n                 mbeans.add(ex);\n                 continue;\n             } catch (MBeanException  ex) {\n                 MLET_LOGGER.logp(Level.FINER, MLet.class.getName(), mth,\n                         \"MBeanException\", ex);\n                 mbeans.add(ex);\n                 continue;\n             } catch (NotCompliantMBeanException  ex) {\n                 MLET_LOGGER.logp(Level.FINER, MLet.class.getName(), mth,\n                         \"NotCompliantMBeanException\", ex);\n                 mbeans.add(ex);\n                 continue;\n             } catch (InstanceNotFoundException   ex) {\n                 MLET_LOGGER.logp(Level.FINER, MLet.class.getName(), mth,\n                         \"InstanceNotFoundException\", ex);\n                 mbeans.add(ex);\n                 continue;\n             } catch (IOException ex) {\n                 MLET_LOGGER.logp(Level.FINER, MLet.class.getName(), mth,\n                         \"IOException\", ex);\n                 mbeans.add(ex);\n                 continue;\n             } catch (SecurityException ex) {\n                 MLET_LOGGER.logp(Level.FINER, MLet.class.getName(), mth,\n                         \"SecurityException\", ex);\n                 mbeans.add(ex);\n                 continue;\n             } catch (Exception ex) {\n                 MLET_LOGGER.logp(Level.FINER, MLet.class.getName(), mth,\n                         \"Exception\", ex);\n                 mbeans.add(ex);\n                 continue;\n             } catch (Error ex) {\n                 MLET_LOGGER.logp(Level.FINER, MLet.class.getName(), mth,\n                         \"Error\", ex);\n                 mbeans.add(ex);\n                 continue;\n             }\n             mbeans.add(objInst);\n         }\n         return mbeans;\n     }"}
{"Number":"1352","API Relative Path":"javax.management.loading.MLetObjectInputStream.java-MLetObjectInputStream(InputStream-MLet)","Corresponding Source":"/**\n     * Loader must be non-null;\n     */\n    public MLetObjectInputStream(InputStream in, MLet loader)\n        throws IOException, StreamCorruptedException {\n\n        super(in);\n        if (loader == null) {\n            throw new IllegalArgumentException(\"Illegal null argument to MLetObjectInputStream\");\n        }\n        this.loader = loader;\n    }"}
{"Number":"1353","API Relative Path":"javax.management.MBeanAttributeInfo.java-MBeanAttributeInfo(String-String-Method-Method)","Corresponding Source":"/**\n     * <p>This constructor takes the name of a simple attribute, and Method\n     * objects for reading and writing the attribute.  The {@link Descriptor}\n     * of the constructed object will include fields contributed by any\n     * annotations on the {@code Method} objects that contain the\n     * {@link DescriptorKey} meta-annotation.\n     *\n     * @param name The programmatic name of the attribute.\n     * @param description A human readable description of the attribute.\n     * @param getter The method used for reading the attribute value.\n     *          May be null if the property is write-only.\n     * @param setter The method used for writing the attribute value.\n     *          May be null if the attribute is read-only.\n     * @exception IntrospectionException There is a consistency\n     * problem in the definition of this attribute.\n     */\n    public MBeanAttributeInfo(String name,\n                              String description,\n                              Method getter,\n                              Method setter) throws IntrospectionException {\n        this(name,\n             attributeType(getter, setter),\n             description,\n             (getter != null),\n             (setter != null),\n             isIs(getter),\n             ImmutableDescriptor.union(Introspector.descriptorForElement(getter),\n                                   Introspector.descriptorForElement(setter)));\n    }"}
{"Number":"1354","API Relative Path":"javax.management.MBeanAttributeInfo.java-MBeanAttributeInfo(String-String-Method-Method)","Corresponding Source":"/**\n     * <p>This constructor takes the name of a simple attribute, and Method\n     * objects for reading and writing the attribute.  The {@link Descriptor}\n     * of the constructed object will include fields contributed by any\n     * annotations on the {@code Method} objects that contain the\n     * {@link DescriptorKey} meta-annotation.\n     *\n     * @param name The programmatic name of the attribute.\n     * @param description A human readable description of the attribute.\n     * @param getter The method used for reading the attribute value.\n     *          May be null if the property is write-only.\n     * @param setter The method used for writing the attribute value.\n     *          May be null if the attribute is read-only.\n     * @exception IntrospectionException There is a consistency\n     * problem in the definition of this attribute.\n     */\n    public MBeanAttributeInfo(String name,\n                              String description,\n                              Method getter,\n                              Method setter) throws IntrospectionException {\n        this(name,\n             attributeType(getter, setter),\n             description,\n             (getter != null),\n             (setter != null),\n             isIs(getter),\n             ImmutableDescriptor.union(Introspector.descriptorForElement(getter),\n                                   Introspector.descriptorForElement(setter)));\n    }"}
{"Number":"1355","API Relative Path":"javax.management.MBeanAttributeInfo.java-MBeanAttributeInfo(String-String-Method-Method)","Corresponding Source":"/**\n     * <p>This constructor takes the name of a simple attribute, and Method\n     * objects for reading and writing the attribute.  The {@link Descriptor}\n     * of the constructed object will include fields contributed by any\n     * annotations on the {@code Method} objects that contain the\n     * {@link DescriptorKey} meta-annotation.\n     *\n     * @param name The programmatic name of the attribute.\n     * @param description A human readable description of the attribute.\n     * @param getter The method used for reading the attribute value.\n     *          May be null if the property is write-only.\n     * @param setter The method used for writing the attribute value.\n     *          May be null if the attribute is read-only.\n     * @exception IntrospectionException There is a consistency\n     * problem in the definition of this attribute.\n     */\n    public MBeanAttributeInfo(String name,\n                              String description,\n                              Method getter,\n                              Method setter) throws IntrospectionException {\n        this(name,\n             attributeType(getter, setter),\n             description,\n             (getter != null),\n             (setter != null),\n             isIs(getter),\n             ImmutableDescriptor.union(Introspector.descriptorForElement(getter),\n                                   Introspector.descriptorForElement(setter)));\n    }"}
{"Number":"1356","API Relative Path":"javax.management.MBeanServerInvocationHandler.java-MBeanServerInvocationHandler(MBeanServerConnection-ObjectName-boolean)","Corresponding Source":"/**\n     * <p>Invocation handler that can forward methods through an MBean\n     * server to a Standard MBean or MXBean.  This constructor may be called\n     * instead of relying on {@link\n     * JMX#newMXBeanProxy(MBeanServerConnection, ObjectName, Class)\n     * JMX.newMXBeanProxy}, for instance if you need to supply a\n     * different {@link ClassLoader} to {@link Proxy#newProxyInstance\n     * Proxy.newProxyInstance}.<\/p>\n     *\n     * @param connection the MBean server connection through which all\n     * methods of a proxy using this handler will be forwarded.\n     *\n     * @param objectName the name of the MBean within the MBean server\n     * to which methods will be forwarded.\n     *\n     * @param isMXBean if true, the proxy is for an {@link MXBean}, and\n     * appropriate mappings will be applied to method parameters and return\n     * values.\n     *\n     * @since 1.6\n     */\n    public MBeanServerInvocationHandler(MBeanServerConnection connection,\n                                        ObjectName objectName,\n                                        boolean isMXBean) {\n        if (connection == null) {\n            throw new IllegalArgumentException(\"Null connection\");\n        }\n        if (objectName == null) {\n            throw new IllegalArgumentException(\"Null object name\");\n        }\n        this.connection = connection;\n        this.objectName = objectName;\n        this.isMXBean = isMXBean;\n    }"}
{"Number":"1357","API Relative Path":"javax.management.MBeanServerInvocationHandler.java-MBeanServerInvocationHandler(MBeanServerConnection-ObjectName-boolean)","Corresponding Source":"/**\n     * <p>Invocation handler that can forward methods through an MBean\n     * server to a Standard MBean or MXBean.  This constructor may be called\n     * instead of relying on {@link\n     * JMX#newMXBeanProxy(MBeanServerConnection, ObjectName, Class)\n     * JMX.newMXBeanProxy}, for instance if you need to supply a\n     * different {@link ClassLoader} to {@link Proxy#newProxyInstance\n     * Proxy.newProxyInstance}.<\/p>\n     *\n     * @param connection the MBean server connection through which all\n     * methods of a proxy using this handler will be forwarded.\n     *\n     * @param objectName the name of the MBean within the MBean server\n     * to which methods will be forwarded.\n     *\n     * @param isMXBean if true, the proxy is for an {@link MXBean}, and\n     * appropriate mappings will be applied to method parameters and return\n     * values.\n     *\n     * @since 1.6\n     */\n    public MBeanServerInvocationHandler(MBeanServerConnection connection,\n                                        ObjectName objectName,\n                                        boolean isMXBean) {\n        if (connection == null) {\n            throw new IllegalArgumentException(\"Null connection\");\n        }\n        if (objectName == null) {\n            throw new IllegalArgumentException(\"Null object name\");\n        }\n        this.connection = connection;\n        this.objectName = objectName;\n        this.isMXBean = isMXBean;\n    }"}
{"Number":"1358","API Relative Path":"javax.management.MBeanServerInvocationHandler.java-newProxyInstance(MBeanServerConnection-ObjectName-Class-boolean)","Corresponding Source":"/**\n     * <p>Return a proxy that implements the given interface by\n     * forwarding its methods through the given MBean server to the\n     * named MBean.  As of 1.6, the methods {@link\n     * JMX#newMBeanProxy(MBeanServerConnection, ObjectName, Class)} and\n     * {@link JMX#newMBeanProxy(MBeanServerConnection, ObjectName, Class,\n     * boolean)} are preferred to this method.<\/p>\n     *\n     * <p>This method is equivalent to {@link Proxy#newProxyInstance\n     * Proxy.newProxyInstance}<code>(interfaceClass.getClassLoader(),\n     * interfaces, handler)<\/code>.  Here <code>handler<\/code> is the\n     * result of {@link #MBeanServerInvocationHandler new\n     * MBeanServerInvocationHandler(connection, objectName)}, and\n     * <code>interfaces<\/code> is an array that has one element if\n     * <code>notificationBroadcaster<\/code> is false and two if it is\n     * true.  The first element of <code>interfaces<\/code> is\n     * <code>interfaceClass<\/code> and the second, if present, is\n     * <code>NotificationEmitter.class<\/code>.\n     *\n     * @param connection the MBean server to forward to.\n     * @param objectName the name of the MBean within\n     * <code>connection<\/code> to forward to.\n     * @param interfaceClass the management interface that the MBean\n     * exports, which will also be implemented by the returned proxy.\n     * @param notificationBroadcaster make the returned proxy\n     * implement {@link NotificationEmitter} by forwarding its methods\n     * via <code>connection<\/code>. A call to {@link\n     * NotificationBroadcaster#addNotificationListener} on the proxy will\n     * result in a call to {@link\n     * MBeanServerConnection#addNotificationListener(ObjectName,\n     * NotificationListener, NotificationFilter, Object)}, and likewise\n     * for the other methods of {@link NotificationBroadcaster} and {@link\n     * NotificationEmitter}.\n     *\n     * @param <T> allows the compiler to know that if the {@code\n     * interfaceClass} parameter is {@code MyMBean.class}, for example,\n     * then the return type is {@code MyMBean}.\n     *\n     * @return the new proxy instance.\n     *\n     * @see JMX#newMBeanProxy(MBeanServerConnection, ObjectName, Class, boolean)\n     */\n    public static <T> T newProxyInstance(MBeanServerConnection connection,\n                                         ObjectName objectName,\n                                         Class<T> interfaceClass,\n                                         boolean notificationBroadcaster) {\n        return JMX.newMBeanProxy(connection, objectName, interfaceClass, notificationBroadcaster);\n    }"}
{"Number":"1359","API Relative Path":"javax.management.MBeanServerInvocationHandler.java-newProxyInstance(MBeanServerConnection-ObjectName-Class-boolean)","Corresponding Source":"/**\n     * <p>Return a proxy that implements the given interface by\n     * forwarding its methods through the given MBean server to the\n     * named MBean.  As of 1.6, the methods {@link\n     * JMX#newMBeanProxy(MBeanServerConnection, ObjectName, Class)} and\n     * {@link JMX#newMBeanProxy(MBeanServerConnection, ObjectName, Class,\n     * boolean)} are preferred to this method.<\/p>\n     *\n     * <p>This method is equivalent to {@link Proxy#newProxyInstance\n     * Proxy.newProxyInstance}<code>(interfaceClass.getClassLoader(),\n     * interfaces, handler)<\/code>.  Here <code>handler<\/code> is the\n     * result of {@link #MBeanServerInvocationHandler new\n     * MBeanServerInvocationHandler(connection, objectName)}, and\n     * <code>interfaces<\/code> is an array that has one element if\n     * <code>notificationBroadcaster<\/code> is false and two if it is\n     * true.  The first element of <code>interfaces<\/code> is\n     * <code>interfaceClass<\/code> and the second, if present, is\n     * <code>NotificationEmitter.class<\/code>.\n     *\n     * @param connection the MBean server to forward to.\n     * @param objectName the name of the MBean within\n     * <code>connection<\/code> to forward to.\n     * @param interfaceClass the management interface that the MBean\n     * exports, which will also be implemented by the returned proxy.\n     * @param notificationBroadcaster make the returned proxy\n     * implement {@link NotificationEmitter} by forwarding its methods\n     * via <code>connection<\/code>. A call to {@link\n     * NotificationBroadcaster#addNotificationListener} on the proxy will\n     * result in a call to {@link\n     * MBeanServerConnection#addNotificationListener(ObjectName,\n     * NotificationListener, NotificationFilter, Object)}, and likewise\n     * for the other methods of {@link NotificationBroadcaster} and {@link\n     * NotificationEmitter}.\n     *\n     * @param <T> allows the compiler to know that if the {@code\n     * interfaceClass} parameter is {@code MyMBean.class}, for example,\n     * then the return type is {@code MyMBean}.\n     *\n     * @return the new proxy instance.\n     *\n     * @see JMX#newMBeanProxy(MBeanServerConnection, ObjectName, Class, boolean)\n     */\n    public static <T> T newProxyInstance(MBeanServerConnection connection,\n                                         ObjectName objectName,\n                                         Class<T> interfaceClass,\n                                         boolean notificationBroadcaster) {\n        return JMX.newMBeanProxy(connection, objectName, interfaceClass, notificationBroadcaster);\n    }"}
{"Number":"1360","API Relative Path":"javax.management.modelmbean.DescriptorSupport.java-DescriptorSupport(String[]-Object[])","Corresponding Source":"/**\n     * Constructor taking field names and field values.  Neither array\n     * can be null.\n     *\n     * @param fieldNames String array of field names.  No elements of\n     * this array can be null.\n     * @param fieldValues Object array of the corresponding field\n     * values.  Elements of the array can be null. The\n     * <code>fieldValue<\/code> must be valid for the\n     * <code>fieldName<\/code> (as defined in method {@link #isValid\n     * isValid})\n     *\n     * <p>Note: array sizes of parameters should match. If both arrays\n     * are empty, then an empty descriptor is created.<\/p>\n     *\n     * @exception RuntimeOperationsException for illegal value for\n     * field Names or field Values.  The array lengths must be equal.\n     * If the descriptor construction fails for any reason, this\n     * exception will be thrown.\n     *\n     */\n    public DescriptorSupport(String[] fieldNames, Object[] fieldValues)\n            throws RuntimeOperationsException {\n        if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {\n            MODELMBEAN_LOGGER.logp(Level.FINEST,\n                    DescriptorSupport.class.getName(),\n                    \"Descriptor(fieldNames,fieldObjects)\", \"Constructor\");\n        }\n\n        if ((fieldNames == null) || (fieldValues == null) ||\n            (fieldNames.length != fieldValues.length)) {\n            if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {\n                MODELMBEAN_LOGGER.logp(Level.FINEST,\n                        DescriptorSupport.class.getName(),\n                        \"Descriptor(fieldNames,fieldObjects)\",\n                        \"Illegal arguments\");\n            }\n\n            final String msg =\n                \"Null or invalid fieldNames or fieldValues\";\n            final RuntimeException iae = new IllegalArgumentException(msg);\n            throw new RuntimeOperationsException(iae, msg);\n        }\n\n        /* populate internal structure with fields */\n        init(null);\n        for (int i=0; i < fieldNames.length; i++) {\n            // setField will throw an exception if a fieldName is be null.\n            // the fieldName and fieldValue will be validated in setField.\n            setField(fieldNames[i], fieldValues[i]);\n        }\n        if (MODELMBEAN_LOGGER.isLoggable(Level.FINEST)) {\n            MODELMBEAN_LOGGER.logp(Level.FINEST,\n                    DescriptorSupport.class.getName(),\n                    \"Descriptor(fieldNames,fieldObjects)\", \"Exit\");\n        }\n    }"}
{"Number":"1361","API Relative Path":"javax.management.modelmbean.ModelMBeanInfoSupport.java-getConstructor(String)","Corresponding Source":"/**\n     * Returns the ModelMBeanConstructorInfo requested by name.\n     * If no ModelMBeanConstructorInfo exists for this name null is returned.\n     *\n     * @param inName the name of the constructor.\n     *\n     * @return the constructor info for the named constructor, or null\n     * if there is none.\n     *\n     * @exception MBeanException Wraps a distributed communication Exception.\n     * @exception RuntimeOperationsException Wraps an IllegalArgumentException\n     *            for a null constructor name.\n     */\n\n    public ModelMBeanConstructorInfo getConstructor(String inName)\n    throws MBeanException, RuntimeOperationsException {\n        ModelMBeanConstructorInfo retInfo = null;\n        if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {\n            MODELMBEAN_LOGGER.logp(Level.FINER,\n                    ModelMBeanInfoSupport.class.getName(),\n                    \"getConstructor(String)\", \"Entry\");\n        }\n        if (inName == null) {\n            throw new RuntimeOperationsException(\n                    new IllegalArgumentException(\"Constructor name is null\"),\n                    \"Exception occurred trying to get the \" +\n                    \"ModelMBeanConstructorInfo of the MBean\");\n        }\n        MBeanConstructorInfo[] consList = modelMBeanConstructors; //this.getConstructors();\n        int numCons = 0;\n        if (consList != null) numCons = consList.length;\n\n        for (int i=0; (i < numCons) && (retInfo == null); i++) {\n            if (inName.equals(consList[i].getName())) {\n                retInfo = ((ModelMBeanConstructorInfo) consList[i].clone());\n            }\n        }\n        if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {\n            MODELMBEAN_LOGGER.logp(Level.FINER,\n                    ModelMBeanInfoSupport.class.getName(),\n                    \"getConstructor(String)\", \"Exit\");\n        }\n\n        return retInfo;\n    }"}
{"Number":"1362","API Relative Path":"javax.management.modelmbean.RequiredModelMBean.java-addNotificationListener(NotificationListener-NotificationFilter-Object)","Corresponding Source":"/**\n     * Registers an object which implements the NotificationListener\n     * interface as a listener.  This\n     * object's 'handleNotification()' method will be invoked when any\n     * notification is issued through or by the ModelMBean.  This does\n     * not include attributeChangeNotifications.  They must be registered\n     * for independently.\n     *\n     * @param listener The listener object which will handles\n     *        notifications emitted by the registered MBean.\n     * @param filter The filter object. If null, no filtering will be\n     *        performed before handling notifications.\n     * @param handback The context to be sent to the listener with\n     *        the notification when a notification is emitted.\n     *\n     * @exception IllegalArgumentException The listener cannot be null.\n     *\n     * @see #removeNotificationListener\n     */\n    public void addNotificationListener(NotificationListener listener,\n                                        NotificationFilter filter,\n                                        Object handback)\n        throws java.lang.IllegalArgumentException {\n        final String mth = \"addNotificationListener(\" +\n                \"NotificationListener, NotificationFilter, Object)\";\n        if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {\n                MODELMBEAN_LOGGER.logp(Level.FINER,\n                        RequiredModelMBean.class.getName(), mth, \"Entry\");\n        }\n\n        if (listener == null)\n            throw new IllegalArgumentException(\n                  \"notification listener must not be null\");\n\n        if (generalBroadcaster == null)\n            generalBroadcaster = new NotificationBroadcasterSupport();\n\n        generalBroadcaster.addNotificationListener(listener, filter,\n                                                   handback);\n        if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {\n                MODELMBEAN_LOGGER.logp(Level.FINER,\n                        RequiredModelMBean.class.getName(), mth,\n                    \"NotificationListener added\");\n                MODELMBEAN_LOGGER.logp(Level.FINER,\n                        RequiredModelMBean.class.getName(), mth, \"Exit\");\n        }\n    }"}
{"Number":"1363","API Relative Path":"javax.management.modelmbean.RequiredModelMBean.java-getAttribute(String)","Corresponding Source":"/**\n     * Returns the value of a specific attribute defined for this\n     * ModelMBean.\n     * The last value returned by an attribute may be cached in the\n     * attribute's descriptor.\n     * The valid value will be in the 'value' field if there is one.\n     * If the 'currencyTimeLimit' field in the descriptor is:\n     * <UL>\n     * <LI>  <b>&lt;0<\/b> Then the value is not cached and is never valid.\n     *       The getter method is invoked for the attribute.\n     *       The 'value' and 'lastUpdatedTimeStamp' fields are cleared.<\/LI>\n     * <LI>  <b>=0<\/b> Then the value is always cached and always valid.\n     *       The 'value' field is returned. If there is no'value' field\n     *       then the getter method is invoked for the attribute.\n     *       The 'lastUpdatedTimeStamp' field and `value' fields are set\n     *       to the attribute's value and the current time stamp.<\/LI>\n     * <LI>  <b>&gt;0<\/b> Represents the number of seconds that the 'value'\n     *       field is valid.\n     *       The 'value' field is no longer valid when\n     *       'lastUpdatedTimeStamp' + 'currencyTimeLimit' &gt; Now.\n     *   <UL>\n     *        <LI>When 'value' is valid, 'value' is returned.<\/LI>\n     *        <LI>When 'value' is no longer valid then the getter\n     *            method is invoked for the attribute.\n     *            The 'lastUpdatedTimeStamp' field and `value' fields\n     *            are updated.<\/LI>\n     *   <\/UL><\/LI>\n     * <\/UL>\n     *\n     * <p><b>Note:<\/b> because of inconsistencies in previous versions of\n     * this specification, it is recommended not to use negative or zero\n     * values for <code>currencyTimeLimit<\/code>.  To indicate that a\n     * cached value is never valid, omit the\n     * <code>currencyTimeLimit<\/code> field.  To indicate that it is\n     * always valid, use a very large number for this field.<\/p>\n     *\n     * <p>If the 'getMethod' field contains the name of a valid\n     * operation descriptor, then the method described by the\n     * operation descriptor is executed.  The response from the\n     * method is returned as the value of the attribute.  If the\n     * operation fails or the returned value is not compatible with\n     * the declared type of the attribute, an exception will be thrown.<\/p>\n     *\n     * <p>If no 'getMethod' field is defined then the default value of the\n     * attribute is returned. If the returned value is not compatible with\n     * the declared type of the attribute, an exception will be thrown.<\/p>\n     *\n     * <p>The declared type of the attribute is the String returned by\n     * {@link ModelMBeanAttributeInfo#getType()}.  A value is compatible\n     * with this type if one of the following is true:\n     * <ul>\n     * <li>the value is null;<\/li>\n     * <li>the declared name is a primitive type name (such as \"int\")\n     *     and the value is an instance of the corresponding wrapper\n     *     type (such as java.lang.Integer);<\/li>\n     * <li>the name of the value's class is identical to the declared name;<\/li>\n     * <li>the declared name can be loaded by the value's class loader and\n     *     produces a class to which the value can be assigned.<\/li>\n     * <\/ul>\n     *\n     * <p>In this implementation, in every case where the getMethod needs to\n     * be called, because the method is invoked through the standard \"invoke\"\n     * method and thus needs operationInfo, an operation must be specified\n     * for that getMethod so that the invocation works correctly.<\/p>\n     *\n     * @param attrName A String specifying the name of the\n     * attribute to be retrieved. It must match the name of a\n     * ModelMBeanAttributeInfo.\n     *\n     * @return The value of the retrieved attribute from the\n     * descriptor 'value' field or from the invocation of the\n     * operation in the 'getMethod' field of the descriptor.\n     *\n     * @exception AttributeNotFoundException The specified attribute is\n     *    not accessible in the MBean.\n     *    The following cases may result in an AttributeNotFoundException:\n     *    <UL>\n     *      <LI> No ModelMBeanInfo was found for the Model MBean.<\/LI>\n     *      <LI> No ModelMBeanAttributeInfo was found for the specified\n     *           attribute name.<\/LI>\n     *      <LI> The ModelMBeanAttributeInfo isReadable method returns\n     *           'false'.<\/LI>\n     *    <\/UL>\n     * @exception MBeanException  Wraps one of the following Exceptions:\n     *    <UL>\n     *      <LI> {@link InvalidAttributeValueException}: A wrong value type\n     *           was received from the attribute's getter method or\n     *           no 'getMethod' field defined in the descriptor for\n     *           the attribute and no default value exists.<\/LI>\n     *      <LI> {@link ServiceNotFoundException}: No\n     *           ModelMBeanOperationInfo defined for the attribute's\n     *           getter method or no descriptor associated with the\n     *           ModelMBeanOperationInfo or the managed resource is\n     *           null.<\/LI>\n     *      <LI> {@link InvalidTargetObjectTypeException} The 'targetType'\n     *           field value is not 'objectReference'.<\/LI>\n     *      <LI> An Exception thrown by the managed object's getter.<\/LI>\n     *    <\/UL>\n     * @exception ReflectionException  Wraps an {@link java.lang.Exception}\n     *    thrown while trying to invoke the getter.\n     * @exception RuntimeOperationsException Wraps an\n     *    {@link IllegalArgumentException}: The attribute name in\n     *    parameter is null.\n     *\n     * @see #setAttribute(javax.management.Attribute)\n     **/\n    public Object getAttribute(String attrName)\n        throws AttributeNotFoundException, MBeanException,\n               ReflectionException {\n        if (attrName == null)\n            throw new RuntimeOperationsException(new\n                IllegalArgumentException(\"attributeName must not be null\"),\n                \"Exception occurred trying to get attribute of a \" +\n                \"RequiredModelMBean\");\n        final String mth = \"getAttribute(String)\";\n        final boolean tracing = MODELMBEAN_LOGGER.isLoggable(Level.FINER);\n        if (tracing) {\n            MODELMBEAN_LOGGER.logp(Level.FINER,\n                    RequiredModelMBean.class.getName(),\n                mth, \"Entry with \" + attrName);\n        }\n\n        /* Check attributeDescriptor for getMethod */\n        Object response;\n\n        try {\n            if (modelMBeanInfo == null)\n                throw new AttributeNotFoundException(\n                      \"getAttribute failed: ModelMBeanInfo not found for \"+\n                      attrName);\n\n            ModelMBeanAttributeInfo attrInfo = modelMBeanInfo.getAttribute(attrName);\n            Descriptor mmbDesc = modelMBeanInfo.getMBeanDescriptor();\n\n            if (attrInfo == null)\n                throw new AttributeNotFoundException(\"getAttribute failed:\"+\n                      \" ModelMBeanAttributeInfo not found for \" + attrName);\n\n            Descriptor attrDescr = attrInfo.getDescriptor();\n            if (attrDescr != null) {\n                if (!attrInfo.isReadable())\n                    throw new AttributeNotFoundException(\n                          \"getAttribute failed: \" + attrName +\n                          \" is not readable \");\n\n                response = resolveForCacheValue(attrDescr);\n\n                /* return current cached value */\n                if (tracing) {\n                    MODELMBEAN_LOGGER.logp(Level.FINER,\n                            RequiredModelMBean.class.getName(), mth,\n                        \"*** cached value is \" + response);\n                }\n\n                if (response == null) {\n                    /* no cached value, run getMethod */\n                    if (tracing) {\n                        MODELMBEAN_LOGGER.logp(Level.FINER,\n                                RequiredModelMBean.class.getName(), mth,\n                            \"**** cached value is null - getting getMethod\");\n                    }\n                    String attrGetMethod =\n                        (String)(attrDescr.getFieldValue(\"getMethod\"));\n\n                    if (attrGetMethod != null) {\n                        /* run method from operations descriptor */\n                        if (tracing) {\n                            MODELMBEAN_LOGGER.logp(Level.FINER,\n                                    RequiredModelMBean.class.getName(),\n                                mth, \"invoking a getMethod for \" +  attrName);\n                        }\n\n                        Object getResponse =\n                            invoke(attrGetMethod, new Object[] {},\n                                   new String[] {});\n\n                        if (getResponse != null) {\n                            // error/validity check return value here\n                            if (tracing) {\n                                MODELMBEAN_LOGGER.logp(Level.FINER,\n                                        RequiredModelMBean.class.getName(),\n                                        mth, \"got a non-null response \" +\n                                        \"from getMethod\\n\");\n                            }\n\n                            response = getResponse;\n\n                            // change cached value in attribute descriptor\n                            Object objctl =\n                                attrDescr.getFieldValue(\"currencyTimeLimit\");\n\n                            String ctl;\n                            if (objctl != null) ctl = objctl.toString();\n                            else ctl = null;\n\n                            if ((ctl == null) && (mmbDesc != null)) {\n                                objctl = mmbDesc.\n                                    getFieldValue(\"currencyTimeLimit\");\n                                if (objctl != null) ctl = objctl.toString();\n                                else ctl = null;\n                            }\n\n                            if ((ctl != null) && !(ctl.equals(\"-1\"))) {\n                                if (tracing) {\n                                    MODELMBEAN_LOGGER.logp(Level.FINER,\n                                            RequiredModelMBean.class.getName(),\n                                            mth,\n                                            \"setting cached value and \" +\n                                            \"lastUpdatedTime in descriptor\");\n                                }\n                                attrDescr.setField(\"value\", response);\n                                final String stamp = String.valueOf(\n                                    (new Date()).getTime());\n                                attrDescr.setField(\"lastUpdatedTimeStamp\",\n                                                   stamp);\n                                attrInfo.setDescriptor(attrDescr);\n                                modelMBeanInfo.setDescriptor(attrDescr,\n                                                             \"attribute\");\n                                if (tracing) {\n                                    MODELMBEAN_LOGGER.logp(Level.FINER,\n                                            RequiredModelMBean.class.getName(),\n                                        mth,\"new descriptor is \" +attrDescr);\n                                    MODELMBEAN_LOGGER.logp(Level.FINER,\n                                            RequiredModelMBean.class.getName(),\n                                        mth,\"AttributeInfo descriptor is \" +\n                                            attrInfo.getDescriptor());\n                                    final String attStr = modelMBeanInfo.\n                                        getDescriptor(attrName,\"attribute\").\n                                            toString();\n                                    MODELMBEAN_LOGGER.logp(Level.FINER,\n                                            RequiredModelMBean.class.getName(),\n                                            mth,\n                                            \"modelMBeanInfo: AttributeInfo \" +\n                                            \"descriptor is \" + attStr);\n                                }\n                            }\n                        } else {\n                            // response was invalid or really returned null\n                            if (tracing) {\n                                MODELMBEAN_LOGGER.logp(Level.FINER,\n                                        RequiredModelMBean.class.getName(), mth,\n                                    \"got a null response from getMethod\\n\");\n                            }\n                            response = null;\n                        }\n                    } else {\n                        // not getMethod so return descriptor (default) value\n                        String qualifier=\"\";\n                        response = attrDescr.getFieldValue(\"value\");\n                        if (response == null) {\n                            qualifier=\"default \";\n                            response = attrDescr.getFieldValue(\"default\");\n                        }\n                        if (tracing) {\n                            MODELMBEAN_LOGGER.logp(Level.FINER,\n                                    RequiredModelMBean.class.getName(), mth,\n                                \"could not find getMethod for \" +attrName +\n                                \", returning descriptor \" +qualifier + \"value\");\n                        }\n                        // !! cast response to right class\n                    }\n                }\n\n                // make sure response class matches type field\n                final String respType = attrInfo.getType();\n                if (response != null) {\n                    String responseClass = response.getClass().getName();\n                    if (!respType.equals(responseClass)) {\n                        boolean wrongType = false;\n                        boolean primitiveType = false;\n                        boolean correspondingTypes = false;\n                        for (int i = 0; i < primitiveTypes.length; i++) {\n                            if (respType.equals(primitiveTypes[i])) {\n                                primitiveType = true;\n                                if (responseClass.equals(primitiveWrappers[i]))\n                                    correspondingTypes = true;\n                                break;\n                            }\n                        }\n                        if (primitiveType) {\n                            // inequality may come from primitive/wrapper class\n                            if (!correspondingTypes)\n                                wrongType = true;\n                        } else {\n                            // inequality may come from type subclassing\n                            boolean subtype;\n                            try {\n                                final Class respClass = response.getClass();\n                                final Exception[] caughException = new Exception[1];\n\n                                AccessControlContext stack = AccessController.getContext();\n\n                                Class c = javaSecurityAccess.doIntersectionPrivilege(new PrivilegedAction<Class<?>>() {\n\n                                    @Override\n                                    public Class<?> run() {\n                                        try {\n                                            ReflectUtil.checkPackageAccess(respType);\n                                            ClassLoader cl =\n                                                respClass.getClassLoader();\n                                            return Class.forName(respType, true, cl);\n                                        } catch (Exception e) {\n                                            caughException[0] = e;\n                                        }\n                                        return null;\n                                    }\n                                }, stack, acc);\n\n                                if (caughException[0] != null) {\n                                    throw caughException[0];\n                                }\n\n                                subtype = c.isInstance(response);\n                            } catch (Exception e) {\n                                subtype = false;\n\n                                if (tracing) {\n                                    MODELMBEAN_LOGGER.logp(Level.FINER,\n                                            RequiredModelMBean.class.getName(),\n                                        mth, \"Exception: \",e);\n                                }\n                            }\n                            if (!subtype)\n                                wrongType = true;\n                        }\n                        if (wrongType) {\n                            if (tracing) {\n                                MODELMBEAN_LOGGER.logp(Level.FINER,\n                                        RequiredModelMBean.class.getName(), mth,\n                                    \"Wrong response type '\" + respType + \"'\");\n                            }\n                            // throw exception, didn't get\n                            // back right attribute type\n                            throw new MBeanException(\n                              new InvalidAttributeValueException(\n                                \"Wrong value type received for get attribute\"),\n                              \"An exception occurred while trying to get an \" +\n                              \"attribute value through a RequiredModelMBean\");\n                        }\n                    }\n                }\n            } else {\n                if (tracing) {\n                    MODELMBEAN_LOGGER.logp(Level.FINER,\n                            RequiredModelMBean.class.getName(), mth,\n                            \"getMethod failed \" + attrName +\n                            \" not in attributeDescriptor\\n\");\n                }\n                throw new MBeanException(new\n                    InvalidAttributeValueException(\n                    \"Unable to resolve attribute value, \" +\n                    \"no getMethod defined in descriptor for attribute\"),\n                    \"An exception occurred while trying to get an \"+\n                    \"attribute value through a RequiredModelMBean\");\n            }\n\n        } catch (MBeanException mbe) {\n            throw mbe;\n        } catch (AttributeNotFoundException t) {\n            throw t;\n        } catch (Exception e) {\n            if (tracing) {\n                MODELMBEAN_LOGGER.logp(Level.FINER,\n                        RequiredModelMBean.class.getName(), mth,\n                        \"getMethod failed with \" + e.getMessage() +\n                        \" exception type \" + (e.getClass()).toString());\n            }\n            throw new MBeanException(e,\"An exception occurred while trying \"+\n                      \"to get an attribute value: \" + e.getMessage());\n        }\n\n        if (tracing) {\n            MODELMBEAN_LOGGER.logp(Level.FINER,\n                    RequiredModelMBean.class.getName(), mth, \"Exit\");\n        }\n\n        return response;\n    }"}
{"Number":"1364","API Relative Path":"javax.management.modelmbean.RequiredModelMBean.java-getAttributes(String[])","Corresponding Source":"/**\n     * Returns the values of several attributes in the ModelMBean.\n     * Executes a getAttribute for each attribute name in the\n     * attrNames array passed in.\n     *\n     * @param attrNames A String array of names of the attributes\n     * to be retrieved.\n     *\n     * @return The array of the retrieved attributes.\n     *\n     * @exception RuntimeOperationsException Wraps an\n     * {@link IllegalArgumentException}: The object name in parameter is\n     * null or attributes in parameter is null.\n     *\n     * @see #setAttributes(javax.management.AttributeList)\n     */\n    public AttributeList getAttributes(String[] attrNames)      {\n        if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {\n            MODELMBEAN_LOGGER.logp(Level.FINER,\n                    RequiredModelMBean.class.getName(),\n            \"getAttributes(String[])\",\"Entry\");\n        }\n\n        if (attrNames == null)\n            throw new RuntimeOperationsException(new\n                IllegalArgumentException(\"attributeNames must not be null\"),\n                \"Exception occurred trying to get attributes of a \"+\n                \"RequiredModelMBean\");\n\n        AttributeList responseList = new AttributeList();\n        for (int i = 0; i < attrNames.length; i++) {\n            try {\n                responseList.add(new Attribute(attrNames[i],\n                                     getAttribute(attrNames[i])));\n            } catch (Exception e) {\n                // eat exceptions because interface doesn't have an\n                // exception on it\n                if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {\n                    MODELMBEAN_LOGGER.logp(Level.FINER,\n                            RequiredModelMBean.class.getName(),\n                        \"getAttributes(String[])\",\n                            \"Failed to get \\\"\" + attrNames[i] + \"\\\": \", e);\n                }\n            }\n        }\n\n        if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {\n            MODELMBEAN_LOGGER.logp(Level.FINER,\n                RequiredModelMBean.class.getName(),\n                    \"getAttributes(String[])\",\"Exit\");\n        }\n\n        return responseList;\n    }"}
{"Number":"1365","API Relative Path":"javax.management.modelmbean.RequiredModelMBean.java-invoke(String-Object[]-String[])","Corresponding Source":"/**\n     * Invokes a method on or through a RequiredModelMBean and returns\n     * the result of the method execution.\n     * <P>\n     * If the given method to be invoked, together with the provided\n     * signature, matches one of RequiredModelMbean\n     * accessible methods, this one will be call. Otherwise the call to\n     * the given method will be tried on the managed resource.\n     * <P>\n     * The last value returned by an operation may be cached in\n     * the operation's descriptor which\n     * is in the ModelMBeanOperationInfo's descriptor.\n     * The valid value will be in the 'value' field if there is one.\n     * If the 'currencyTimeLimit' field in the descriptor is:\n     * <UL>\n     * <LI><b>&lt;0<\/b> Then the value is not cached and is never valid.\n     *      The operation method is invoked.\n     *      The 'value' and 'lastUpdatedTimeStamp' fields are cleared.<\/LI>\n     * <LI><b>=0<\/b> Then the value is always cached and always valid.\n     *      The 'value' field is returned. If there is no 'value' field\n     *      then the operation method is invoked for the attribute.\n     *      The 'lastUpdatedTimeStamp' field and `value' fields are set to\n     *      the operation's return value and the current time stamp.<\/LI>\n     * <LI><b>&gt;0<\/b> Represents the number of seconds that the 'value'\n     *      field is valid.\n     *      The 'value' field is no longer valid when\n     *      'lastUpdatedTimeStamp' + 'currencyTimeLimit' &gt; Now.\n     *      <UL>\n     *         <LI>When 'value' is valid, 'value' is returned.<\/LI>\n     *         <LI>When 'value' is no longer valid then the operation\n     *             method is invoked. The 'lastUpdatedTimeStamp' field\n     *             and `value' fields are updated.<\/lI>\n     *      <\/UL>\n     * <\/LI>\n     * <\/UL>\n     *\n     * <p><b>Note:<\/b> because of inconsistencies in previous versions of\n     * this specification, it is recommended not to use negative or zero\n     * values for <code>currencyTimeLimit<\/code>.  To indicate that a\n     * cached value is never valid, omit the\n     * <code>currencyTimeLimit<\/code> field.  To indicate that it is\n     * always valid, use a very large number for this field.<\/p>\n     *\n     * @param opName The name of the method to be invoked. The\n     *     name can be the fully qualified method name including the\n     *     classname, or just the method name if the classname is\n     *     defined in the 'class' field of the operation descriptor.\n     * @param opArgs An array containing the parameters to be set\n     *     when the operation is invoked\n     * @param sig An array containing the signature of the\n     *     operation. The class objects will be loaded using the same\n     *     class loader as the one used for loading the MBean on which\n     *     the operation was invoked.\n     *\n     * @return  The object returned by the method, which represents the\n     *     result of invoking the method on the specified managed resource.\n     *\n     * @exception MBeanException  Wraps one of the following Exceptions:\n     * <UL>\n     * <LI> An Exception thrown by the managed object's invoked method.<\/LI>\n     * <LI> {@link ServiceNotFoundException}: No ModelMBeanOperationInfo or\n     *      no descriptor defined for the specified operation or the managed\n     *      resource is null.<\/LI>\n     * <LI> {@link InvalidTargetObjectTypeException}: The 'targetType'\n     *      field value is not 'objectReference'.<\/LI>\n     * <\/UL>\n     * @exception ReflectionException  Wraps an {@link java.lang.Exception}\n     *      thrown while trying to invoke the method.\n     * @exception RuntimeOperationsException Wraps an\n     *      {@link IllegalArgumentException} Method name is null.\n     *\n     **/\n    /*\n      The requirement to be able to invoke methods on the\n      RequiredModelMBean class itself makes this method considerably\n      more complicated than it might otherwise be.  Note that, unlike\n      earlier versions, we do not allow you to invoke such methods if\n      they are not explicitly mentioned in the ModelMBeanInfo.  Doing\n      so was potentially a security problem, and certainly very\n      surprising.\n\n      We do not look for the method in the RequiredModelMBean class\n      itself if:\n      (a) there is a \"targetObject\" field in the Descriptor for the\n      operation; or\n      (b) there is a \"class\" field in the Descriptor for the operation\n      and the named class is not RequiredModelMBean or one of its\n      superinterfaces; or\n      (c) the name of the operation is not the name of a method in\n      RequiredModelMBean (this is just an optimization).\n\n      In cases (a) and (b), if you have gone to the trouble of adding\n      those fields specifically for this operation then presumably you\n      do not want RequiredModelMBean's methods to be called.\n\n      We have to pay attention to class loading issues.  If the\n      \"class\" field is present, the named class has to be resolved\n      relative to RequiredModelMBean's class loader to test the\n      condition (b) above, and relative to the managed resource's\n      class loader to ensure that the managed resource is in fact of\n      the named class (or a subclass).  The class names in the sig\n      array likewise have to be resolved, first against\n      RequiredModelMBean's class loader, then against the managed\n      resource's class loader.  There is no point in using any other\n      loader because when we call Method.invoke we must call it on\n      a Method that is implemented by the target object.\n     */\n    public Object invoke(String opName, Object[] opArgs, String[] sig)\n            throws MBeanException, ReflectionException {\n\n        final boolean tracing = MODELMBEAN_LOGGER.isLoggable(Level.FINER);\n        final String mth = \"invoke(String, Object[], String[])\";\n\n        if (tracing) {\n            MODELMBEAN_LOGGER.logp(Level.FINER,\n                    RequiredModelMBean.class.getName(), mth, \"Entry\");\n        }\n\n        if (opName == null) {\n            final RuntimeException x =\n                new IllegalArgumentException(\"Method name must not be null\");\n            throw new RuntimeOperationsException(x,\n                      \"An exception occurred while trying to \" +\n                      \"invoke a method on a RequiredModelMBean\");\n        }\n\n        String opClassName = null;\n        String opMethodName;\n\n        // Parse for class name and method\n        int opSplitter = opName.lastIndexOf(\".\");\n        if (opSplitter > 0) {\n            opClassName = opName.substring(0,opSplitter);\n            opMethodName = opName.substring(opSplitter+1);\n        } else\n            opMethodName = opName;\n\n        /* Ignore anything after a left paren.  We keep this for\n           compatibility but it isn't specified.  */\n        opSplitter = opMethodName.indexOf(\"(\");\n        if (opSplitter > 0)\n            opMethodName = opMethodName.substring(0,opSplitter);\n\n        if (tracing) {\n            MODELMBEAN_LOGGER.logp(Level.FINER,\n                    RequiredModelMBean.class.getName(),\n                    mth, \"Finding operation \" + opName + \" as \" + opMethodName);\n        }\n\n        ModelMBeanOperationInfo opInfo =\n            modelMBeanInfo.getOperation(opMethodName);\n        if (opInfo == null) {\n            final String msg =\n                \"Operation \" + opName + \" not in ModelMBeanInfo\";\n            throw new MBeanException(new ServiceNotFoundException(msg), msg);\n        }\n\n        final Descriptor opDescr = opInfo.getDescriptor();\n        if (opDescr == null) {\n            final String msg = \"Operation descriptor null\";\n            throw new MBeanException(new ServiceNotFoundException(msg), msg);\n        }\n\n        final Object cached = resolveForCacheValue(opDescr);\n        if (cached != null) {\n            if (tracing) {\n                MODELMBEAN_LOGGER.logp(Level.FINER,\n                        RequiredModelMBean.class.getName(),\n                        mth,\n                        \"Returning cached value\");\n            }\n            return cached;\n        }\n\n        if (opClassName == null)\n            opClassName = (String) opDescr.getFieldValue(\"class\");\n        // may still be null now\n\n        opMethodName = (String) opDescr.getFieldValue(\"name\");\n        if (opMethodName == null) {\n            final String msg =\n                \"Method descriptor must include `name' field\";\n            throw new MBeanException(new ServiceNotFoundException(msg), msg);\n        }\n\n        final String targetTypeField = (String)\n            opDescr.getFieldValue(\"targetType\");\n        if (targetTypeField != null\n            && !targetTypeField.equalsIgnoreCase(\"objectReference\")) {\n            final String msg =\n                \"Target type must be objectReference: \" + targetTypeField;\n            throw new MBeanException(new InvalidTargetObjectTypeException(msg),\n                                     msg);\n        }\n\n        final Object targetObjectField = opDescr.getFieldValue(\"targetObject\");\n        if (tracing && targetObjectField != null)\n                MODELMBEAN_LOGGER.logp(Level.FINER,\n                    RequiredModelMBean.class.getName(),\n                        mth, \"Found target object in descriptor\");\n\n        /* Now look for the method, either in RequiredModelMBean itself\n           or in the target object.  Set \"method\" and \"targetObject\"\n           appropriately.  */\n        Method method;\n        Object targetObject;\n\n        method = findRMMBMethod(opMethodName, targetObjectField,\n                                opClassName, sig);\n\n        if (method != null)\n            targetObject = this;\n        else {\n            if (tracing) {\n                MODELMBEAN_LOGGER.logp(Level.FINER,\n                    RequiredModelMBean.class.getName(),\n                        mth, \"looking for method in managedResource class\");\n            }\n            if (targetObjectField != null)\n                targetObject = targetObjectField;\n            else {\n                targetObject = managedResource;\n                if (targetObject == null) {\n                    final String msg =\n                        \"managedResource for invoke \" + opName +\n                        \" is null\";\n                    Exception snfe = new ServiceNotFoundException(msg);\n                    throw new MBeanException(snfe);\n                }\n            }\n\n            final Class<?> targetClass;\n\n            if (opClassName != null) {\n                try {\n                    AccessControlContext stack = AccessController.getContext();\n                    final Object obj = targetObject;\n                    final String className = opClassName;\n                    final ClassNotFoundException[] caughtException = new ClassNotFoundException[1];\n\n                    targetClass = javaSecurityAccess.doIntersectionPrivilege(new PrivilegedAction<Class<?>>() {\n\n                        @Override\n                        public Class<?> run() {\n                            try {\n                                ReflectUtil.checkPackageAccess(className);\n                                final ClassLoader targetClassLoader =\n                                    obj.getClass().getClassLoader();\n                                return Class.forName(className, false,\n                                                            targetClassLoader);\n                            } catch (ClassNotFoundException e) {\n                                caughtException[0] = e;\n                            }\n                            return null;\n                        }\n                    }, stack, acc);\n\n                    if (caughtException[0] != null) {\n                        throw caughtException[0];\n                    }\n                } catch (ClassNotFoundException e) {\n                    final String msg =\n                        \"class for invoke \" + opName + \" not found\";\n                    throw new ReflectionException(e, msg);\n                }\n            } else\n                targetClass = targetObject.getClass();\n\n            method = resolveMethod(targetClass, opMethodName, sig);\n        }\n\n        if (tracing) {\n            MODELMBEAN_LOGGER.logp(Level.FINER,\n                RequiredModelMBean.class.getName(),\n                    mth, \"found \" + opMethodName + \", now invoking\");\n        }\n\n        final Object result =\n            invokeMethod(opName, method, targetObject, opArgs);\n\n        if (tracing) {\n            MODELMBEAN_LOGGER.logp(Level.FINER,\n                RequiredModelMBean.class.getName(),\n                    mth, \"successfully invoked method\");\n        }\n\n        if (result != null)\n            cacheResult(opInfo, opDescr, result);\n\n        return result;\n    }"}
{"Number":"1366","API Relative Path":"javax.management.modelmbean.RequiredModelMBean.java-RequiredModelMBean(ModelMBeanInfo)","Corresponding Source":"/**\n     * Constructs a RequiredModelMBean object using ModelMBeanInfo passed in.\n     * As long as the RequiredModelMBean is not registered\n     * with the MBeanServer yet, the RequiredModelMBean's MBeanInfo and\n     * Descriptors can be customized using the {@link #setModelMBeanInfo}\n     * method.\n     * After the RequiredModelMBean's MBeanInfo and Descriptors are\n     * customized, the RequiredModelMBean can be registered with the\n     * MBeanServer.\n     *\n     * @param mbi The ModelMBeanInfo object to be used by the\n     *            RequiredModelMBean. The given ModelMBeanInfo is cloned\n     *            and modified as specified by {@link #setModelMBeanInfo}\n     *\n     * @exception MBeanException Wraps a distributed communication Exception.\n     * @exception RuntimeOperationsException Wraps an\n     *    {link java.lang.IllegalArgumentException}:\n     *          The MBeanInfo passed in parameter is null.\n     *\n     **/\n    public RequiredModelMBean(ModelMBeanInfo mbi)\n        throws MBeanException, RuntimeOperationsException {\n\n        if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {\n            MODELMBEAN_LOGGER.logp(Level.FINER,\n                    RequiredModelMBean.class.getName(),\n                    \"RequiredModelMBean(MBeanInfo)\", \"Entry\");\n        }\n        setModelMBeanInfo(mbi);\n\n        if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {\n            MODELMBEAN_LOGGER.logp(Level.FINER,\n                    RequiredModelMBean.class.getName(),\n                    \"RequiredModelMBean(MBeanInfo)\", \"Exit\");\n        }\n    }"}
{"Number":"1367","API Relative Path":"javax.management.modelmbean.RequiredModelMBean.java-setManagedResource(Object-String)","Corresponding Source":"/**\n     * Sets the instance handle of the object against which to\n     * execute all methods in this ModelMBean management interface\n     * (MBeanInfo and Descriptors).\n     *\n     * @param mr Object that is the managed resource\n     * @param mr_type The type of reference for the managed resource.\n     *     <br>Can be: \"ObjectReference\", \"Handle\", \"IOR\", \"EJBHandle\",\n     *         or \"RMIReference\".\n     *     <br>In this implementation only \"ObjectReference\" is supported.\n     *\n     * @exception MBeanException The initializer of the object has\n     *            thrown an exception.\n     * @exception InstanceNotFoundException The managed resource\n     *            object could not be found\n     * @exception InvalidTargetObjectTypeException The managed\n     *            resource type should be \"ObjectReference\".\n     * @exception RuntimeOperationsException Wraps a {@link\n     *            RuntimeException} when setting the resource.\n     **/\n    public void setManagedResource(Object mr, String mr_type)\n        throws MBeanException, RuntimeOperationsException,\n               InstanceNotFoundException, InvalidTargetObjectTypeException {\n        if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {\n            MODELMBEAN_LOGGER.logp(Level.FINER,\n                    RequiredModelMBean.class.getName(),\n                \"setManagedResource(Object,String)\",\"Entry\");\n        }\n\n        // check that the mr_type is supported by this JMXAgent\n        // only \"objectReference\" is supported\n        if ((mr_type == null) ||\n            (! mr_type.equalsIgnoreCase(\"objectReference\"))) {\n            if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {\n                MODELMBEAN_LOGGER.logp(Level.FINER,\n                        RequiredModelMBean.class.getName(),\n                    \"setManagedResource(Object,String)\",\n                    \"Managed Resource Type is not supported: \" + mr_type);\n            }\n            throw new InvalidTargetObjectTypeException(mr_type);\n        }\n\n        if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {\n            MODELMBEAN_LOGGER.logp(Level.FINER,\n                    RequiredModelMBean.class.getName(),\n                \"setManagedResource(Object,String)\",\n                \"Managed Resource is valid\");\n        }\n        managedResource = mr;\n\n        if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {\n            MODELMBEAN_LOGGER.logp(Level.FINER,\n                    RequiredModelMBean.class.getName(),\n                \"setManagedResource(Object, String)\", \"Exit\");\n        }\n    }"}
{"Number":"1368","API Relative Path":"javax.management.modelmbean.RequiredModelMBean.java-setModelMBeanInfo(ModelMBeanInfo)","Corresponding Source":"/*************************************/\n    /* initializers                      */\n    /*************************************/\n\n    /**\n     * Initializes a ModelMBean object using ModelMBeanInfo passed in.\n     * This method makes it possible to set a customized ModelMBeanInfo on\n     * the ModelMBean as long as it is not registered with the MBeanServer.\n     * <br>\n     * Once the ModelMBean's ModelMBeanInfo (with Descriptors) are\n     * customized and set on the ModelMBean, the  ModelMBean be\n     * registered with the MBeanServer.\n     * <P>\n     * If the ModelMBean is currently registered, this method throws\n     * a {@link javax.management.RuntimeOperationsException} wrapping an\n     * {@link IllegalStateException}\n     * <P>\n     * If the given <var>inModelMBeanInfo<\/var> does not contain any\n     * {@link ModelMBeanNotificationInfo} for the <code>GENERIC<\/code>\n     * or <code>ATTRIBUTE_CHANGE<\/code> notifications, then the\n     * RequiredModelMBean will supply its own default\n     * {@link ModelMBeanNotificationInfo ModelMBeanNotificationInfo}s for\n     * those missing notifications.\n     *\n     * @param mbi The ModelMBeanInfo object to be used\n     *        by the ModelMBean.\n     *\n     * @exception MBeanException Wraps a distributed communication\n     *        Exception.\n     * @exception RuntimeOperationsException\n     * <ul><li>Wraps an {@link IllegalArgumentException} if\n     *         the MBeanInfo passed in parameter is null.<\/li>\n     *     <li>Wraps an {@link IllegalStateException} if the ModelMBean\n     *         is currently registered in the MBeanServer.<\/li>\n     * <\/ul>\n     *\n     **/\n    public void setModelMBeanInfo(ModelMBeanInfo mbi)\n        throws MBeanException, RuntimeOperationsException {\n\n        if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {\n            MODELMBEAN_LOGGER.logp(Level.FINER,\n                    RequiredModelMBean.class.getName(),\n                \"setModelMBeanInfo(ModelMBeanInfo)\",\"Entry\");\n        }\n\n        if (mbi == null) {\n            if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {\n                MODELMBEAN_LOGGER.logp(Level.FINER,\n                        RequiredModelMBean.class.getName(),\n                    \"setModelMBeanInfo(ModelMBeanInfo)\",\n                    \"ModelMBeanInfo is null: Raising exception.\");\n            }\n            final RuntimeException x = new\n                IllegalArgumentException(\"ModelMBeanInfo must not be null\");\n            final String exceptionText =\n                \"Exception occurred trying to initialize the \" +\n                \"ModelMBeanInfo of the RequiredModelMBean\";\n            throw new RuntimeOperationsException(x,exceptionText);\n        }\n\n        if (registered) {\n            if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {\n                MODELMBEAN_LOGGER.logp(Level.FINER,\n                        RequiredModelMBean.class.getName(),\n                    \"setModelMBeanInfo(ModelMBeanInfo)\",\n                    \"RequiredMBean is registered: Raising exception.\");\n            }\n            final String exceptionText =\n                \"Exception occurred trying to set the \" +\n                \"ModelMBeanInfo of the RequiredModelMBean\";\n            final RuntimeException x = new IllegalStateException(\n             \"cannot call setModelMBeanInfo while ModelMBean is registered\");\n            throw new RuntimeOperationsException(x,exceptionText);\n        }\n\n        if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {\n            MODELMBEAN_LOGGER.logp(Level.FINER,\n                    RequiredModelMBean.class.getName(),\n                \"setModelMBeanInfo(ModelMBeanInfo)\",\n                \"Setting ModelMBeanInfo to \" + printModelMBeanInfo(mbi));\n            int noOfNotifications = 0;\n            if (mbi.getNotifications() != null) {\n                noOfNotifications = mbi.getNotifications().length;\n            }\n            MODELMBEAN_LOGGER.logp(Level.FINER,\n                    RequiredModelMBean.class.getName(),\n                \"setModelMBeanInfo(ModelMBeanInfo)\",\n                \"ModelMBeanInfo notifications has \" +\n                noOfNotifications + \" elements\");\n        }\n\n        modelMBeanInfo = (ModelMBeanInfo)mbi.clone();\n\n        if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {\n            MODELMBEAN_LOGGER.logp(Level.FINER,\n                    RequiredModelMBean.class.getName(),\n                \"setModelMBeanInfo(ModelMBeanInfo)\",\"set mbeanInfo to: \"+\n                 printModelMBeanInfo(modelMBeanInfo));\n            MODELMBEAN_LOGGER.logp(Level.FINER,\n                    RequiredModelMBean.class.getName(),\n                \"setModelMBeanInfo(ModelMBeanInfo)\",\"Exit\");\n        }\n    }"}
{"Number":"1369","API Relative Path":"javax.management.monitor.CounterMonitor.java-setInitThreshold(Number)","Corresponding Source":"/**\n     * Sets the initial threshold value common to all observed objects.\n     *\n     * <BR>The current threshold of every object in the set of\n     * observed MBeans is updated consequently.\n     *\n     * @param value The initial threshold value.\n     *\n     * @exception IllegalArgumentException The specified\n     * threshold is null or the threshold value is less than zero.\n     *\n     * @see #getInitThreshold\n     *\n     */\n    public synchronized void setInitThreshold(Number value)\n        throws IllegalArgumentException {\n\n        if (value == null) {\n            throw new IllegalArgumentException(\"Null threshold\");\n        }\n        if (value.longValue() < 0L) {\n            throw new IllegalArgumentException(\"Negative threshold\");\n        }\n\n        if (initThreshold.equals(value))\n            return;\n        initThreshold = value;\n\n        // Reset values.\n        //\n        int index = 0;\n        for (ObservedObject o : observedObjects) {\n            resetAlreadyNotified(o, index++, THRESHOLD_ERROR_NOTIFIED);\n            final CounterMonitorObservedObject cmo =\n                (CounterMonitorObservedObject) o;\n            cmo.setThreshold(value);\n            cmo.setModulusExceeded(false);\n            cmo.setEventAlreadyNotified(false);\n        }\n    }"}
{"Number":"1370","API Relative Path":"javax.management.monitor.CounterMonitor.java-setModulus(Number)","Corresponding Source":"/**\n     * Sets the modulus value common to all observed MBeans.\n     *\n     * @param value The modulus value.\n     *\n     * @exception IllegalArgumentException The specified\n     * modulus is null or the modulus value is less than zero.\n     *\n     * @see #getModulus\n     */\n    public synchronized void setModulus(Number value)\n        throws IllegalArgumentException {\n\n        if (value == null) {\n            throw new IllegalArgumentException(\"Null modulus\");\n        }\n        if (value.longValue() < 0L) {\n            throw new IllegalArgumentException(\"Negative modulus\");\n        }\n\n        if (modulus.equals(value))\n            return;\n        modulus = value;\n\n        // Reset values.\n        //\n        int index = 0;\n        for (ObservedObject o : observedObjects) {\n            resetAlreadyNotified(o, index++, THRESHOLD_ERROR_NOTIFIED);\n            final CounterMonitorObservedObject cmo =\n                (CounterMonitorObservedObject) o;\n            cmo.setModulusExceeded(false);\n        }\n    }"}
{"Number":"1371","API Relative Path":"javax.management.monitor.CounterMonitor.java-setThreshold(Number)","Corresponding Source":"/**\n     * Sets the initial threshold value.\n     *\n     * @param value The initial threshold value.\n     *\n     * @exception IllegalArgumentException The specified threshold is\n     * null or the threshold value is less than zero.\n     *\n     * @see #getThreshold()\n     *\n     * @deprecated As of JMX 1.2, replaced by {@link #setInitThreshold}\n     */\n    @Deprecated\n    public synchronized void setThreshold(Number value)\n        throws IllegalArgumentException {\n        setInitThreshold(value);\n    }"}
{"Number":"1372","API Relative Path":"javax.management.monitor.GaugeMonitor.java-setThresholds(Number-Number)","Corresponding Source":"/**\n     * Sets the high and the low threshold values common to all\n     * observed MBeans.\n     *\n     * @param highValue The high threshold value.\n     * @param lowValue The low threshold value.\n     *\n     * @exception IllegalArgumentException The specified high/low\n     * threshold is null or the low threshold is greater than the high\n     * threshold or the high threshold and the low threshold are not\n     * of the same type.\n     *\n     * @see #getHighThreshold\n     * @see #getLowThreshold\n     */\n    public synchronized void setThresholds(Number highValue, Number lowValue)\n        throws IllegalArgumentException {\n\n        if ((highValue == null) || (lowValue == null)) {\n            throw new IllegalArgumentException(\"Null threshold value\");\n        }\n\n        if (highValue.getClass() != lowValue.getClass()) {\n            throw new IllegalArgumentException(\"Different type \" +\n                                               \"threshold values\");\n        }\n\n        if (isFirstStrictlyGreaterThanLast(lowValue, highValue,\n                                           highValue.getClass().getName())) {\n            throw new IllegalArgumentException(\"High threshold less than \" +\n                                               \"low threshold\");\n        }\n\n        if (highThreshold.equals(highValue) && lowThreshold.equals(lowValue))\n            return;\n        highThreshold = highValue;\n        lowThreshold = lowValue;\n\n        // Reset values.\n        //\n        int index = 0;\n        for (ObservedObject o : observedObjects) {\n            resetAlreadyNotified(o, index++, THRESHOLD_ERROR_NOTIFIED);\n            final GaugeMonitorObservedObject gmo =\n                (GaugeMonitorObservedObject) o;\n            gmo.setStatus(RISING_OR_FALLING);\n        }\n    }"}
{"Number":"1373","API Relative Path":"javax.management.monitor.Monitor.java-removeObservedObject(ObjectName)","Corresponding Source":"/**\n     * Removes the specified object from the set of observed MBeans.\n     *\n     * @param object The object to remove.\n     *\n     */\n    public synchronized void removeObservedObject(ObjectName object) {\n        // Check for null object.\n        //\n        if (object == null)\n            return;\n\n        final ObservedObject o = getObservedObject(object);\n        if (o != null) {\n            // Remove the specified object from the list.\n            //\n            observedObjects.remove(o);\n            // Update legacy protected stuff.\n            //\n            createAlreadyNotified();\n        }\n    }"}
{"Number":"1374","API Relative Path":"javax.management.monitor.Monitor.java-setGranularityPeriod(long)","Corresponding Source":"/**\n     * Sets the granularity period (in milliseconds).\n     * <BR>The default value of the granularity period is 10 seconds.\n     *\n     * @param period The granularity period value.\n     * @exception IllegalArgumentException The granularity\n     * period is less than or equal to zero.\n     *\n     * @see #getGranularityPeriod\n     */\n    public synchronized void setGranularityPeriod(long period)\n        throws IllegalArgumentException {\n\n        if (period <= 0) {\n            throw new IllegalArgumentException(\"Nonpositive granularity \" +\n                                               \"period\");\n        }\n\n        if (granularityPeriod == period)\n            return;\n        granularityPeriod = period;\n\n        // Reschedule the scheduler task if the monitor is active.\n        //\n        if (isActive()) {\n            cleanupFutures();\n            schedulerFuture = scheduler.schedule(schedulerTask,\n                                                 period,\n                                                 TimeUnit.MILLISECONDS);\n        }\n    }"}
{"Number":"1375","API Relative Path":"javax.management.monitor.StringMonitor.java-setStringToCompare(String)","Corresponding Source":"/**\n     * Sets the string to compare with the observed attribute common\n     * to all observed MBeans.\n     *\n     * @param value The string value.\n     *\n     * @exception IllegalArgumentException The specified\n     * string to compare is null.\n     *\n     * @see #getStringToCompare\n     */\n    public synchronized void setStringToCompare(String value)\n        throws IllegalArgumentException {\n\n        if (value == null) {\n            throw new IllegalArgumentException(\"Null string to compare\");\n        }\n\n        if (stringToCompare.equals(value))\n            return;\n        stringToCompare = value;\n\n        // Reset values.\n        //\n        for (ObservedObject o : observedObjects) {\n            final StringMonitorObservedObject smo =\n                (StringMonitorObservedObject) o;\n            smo.setStatus(MATCHING_OR_DIFFERING);\n        }\n    }"}
{"Number":"1376","API Relative Path":"javax.management.NotificationBroadcasterSupport.java-sendNotification(Notification)","Corresponding Source":"/**\n     * Sends a notification.\n     *\n     * If an {@code Executor} was specified in the constructor, it will be given one\n     * task per selected listener to deliver the notification to that listener.\n     *\n     * @param notification The notification to send.\n     */\n    public void sendNotification(Notification notification) {\n\n        if (notification == null) {\n            return;\n        }\n\n        boolean enabled;\n\n        for (ListenerInfo li : listenerList) {\n            try {\n                enabled = li.filter == null ||\n                    li.filter.isNotificationEnabled(notification);\n            } catch (Exception e) {\n                if (logger.debugOn()) {\n                    logger.debug(\"sendNotification\", e);\n                }\n\n                continue;\n            }\n\n            if (enabled) {\n                executor.execute(new SendNotifJob(notification, li));\n            }\n        }\n    }"}
{"Number":"1377","API Relative Path":"javax.management.ObjectInstance.java-ObjectInstance(String-String)","Corresponding Source":"/**\n     * Allows an object instance to be created given a string representation of\n     * an object name and the full class name, including the package name.\n     *\n     * @param objectName  A string representation of the object name.\n     * @param className The full class name, including the package\n     * name, of the object instance.  If the MBean is a Dynamic MBean\n     * the class name corresponds to its {@link\n     * DynamicMBean#getMBeanInfo()\n     * getMBeanInfo()}<code>.getClassName()<\/code>.\n     *\n     * @exception MalformedObjectNameException The string passed as a\n     * parameter does not have the right format.\n     *\n     */\n    public ObjectInstance(String objectName, String className)\n            throws MalformedObjectNameException {\n        this(new ObjectName(objectName), className);\n    }"}
{"Number":"1378","API Relative Path":"javax.management.ObjectName.java-getInstance(String-Hashtable)","Corresponding Source":"/**\n     * <p>Return an instance of ObjectName that can be used anywhere\n     * an object obtained with {@link #ObjectName(String, Hashtable)\n     * new ObjectName(domain, table)} can be used.  The returned\n     * object may be of a subclass of ObjectName.  Calling this method\n     * twice with the same parameters may return the same object or\n     * two equal but not identical objects.<\/p>\n     *\n     * @param domain  The domain part of the object name.\n     * @param table A hash table containing one or more key\n     * properties.  The key of each entry in the table is the key of a\n     * key property in the object name.  The associated value in the\n     * table is the associated value in the object name.\n     *\n     * @return an ObjectName corresponding to the given domain and\n     * key mappings.\n     *\n     * @exception MalformedObjectNameException The <code>domain<\/code>\n     * contains an illegal character, or one of the keys or values in\n     * <code>table<\/code> contains an illegal character, or one of the\n     * values in <code>table<\/code> does not follow the rules for\n     * quoting.\n     * @exception NullPointerException One of the parameters is null.\n     *\n     */\n    public static ObjectName getInstance(String domain,\n                                         Hashtable<String,String> table)\n        throws MalformedObjectNameException {\n        return new ObjectName(domain, table);\n    }"}
{"Number":"1379","API Relative Path":"javax.management.ObjectName.java-getInstance(String-Hashtable)","Corresponding Source":"/**\n     * <p>Return an instance of ObjectName that can be used anywhere\n     * an object obtained with {@link #ObjectName(String, Hashtable)\n     * new ObjectName(domain, table)} can be used.  The returned\n     * object may be of a subclass of ObjectName.  Calling this method\n     * twice with the same parameters may return the same object or\n     * two equal but not identical objects.<\/p>\n     *\n     * @param domain  The domain part of the object name.\n     * @param table A hash table containing one or more key\n     * properties.  The key of each entry in the table is the key of a\n     * key property in the object name.  The associated value in the\n     * table is the associated value in the object name.\n     *\n     * @return an ObjectName corresponding to the given domain and\n     * key mappings.\n     *\n     * @exception MalformedObjectNameException The <code>domain<\/code>\n     * contains an illegal character, or one of the keys or values in\n     * <code>table<\/code> contains an illegal character, or one of the\n     * values in <code>table<\/code> does not follow the rules for\n     * quoting.\n     * @exception NullPointerException One of the parameters is null.\n     *\n     */\n    public static ObjectName getInstance(String domain,\n                                         Hashtable<String,String> table)\n        throws MalformedObjectNameException {\n        return new ObjectName(domain, table);\n    }"}
{"Number":"1380","API Relative Path":"javax.management.ObjectName.java-getInstance(String-String-String)","Corresponding Source":"/**\n     * <p>Return an instance of ObjectName that can be used anywhere\n     * an object obtained with {@link #ObjectName(String, String,\n     * String) new ObjectName(domain, key, value)} can be used.  The\n     * returned object may be of a subclass of ObjectName.  Calling\n     * this method twice with the same parameters may return the same\n     * object or two equal but not identical objects.<\/p>\n     *\n     * @param domain  The domain part of the object name.\n     * @param key  The attribute in the key property of the object name.\n     * @param value The value in the key property of the object name.\n     *\n     * @return an ObjectName corresponding to the given domain,\n     * key, and value.\n     *\n     * @exception MalformedObjectNameException The\n     * <code>domain<\/code>, <code>key<\/code>, or <code>value<\/code>\n     * contains an illegal character, or <code>value<\/code> does not\n     * follow the rules for quoting.\n     * @exception NullPointerException One of the parameters is null.\n     *\n     */\n    public static ObjectName getInstance(String domain, String key,\n                                         String value)\n            throws MalformedObjectNameException {\n        return new ObjectName(domain, key, value);\n    }"}
{"Number":"1381","API Relative Path":"javax.management.ObjectName.java-ObjectName(String-Hashtable)","Corresponding Source":"/**\n     * Construct an object name with several key properties from a Hashtable.\n     *\n     * @param domain  The domain part of the object name.\n     * @param table A hash table containing one or more key\n     * properties.  The key of each entry in the table is the key of a\n     * key property in the object name.  The associated value in the\n     * table is the associated value in the object name.\n     *\n     * @exception MalformedObjectNameException The <code>domain<\/code>\n     * contains an illegal character, or one of the keys or values in\n     * <code>table<\/code> contains an illegal character, or one of the\n     * values in <code>table<\/code> does not follow the rules for\n     * quoting.\n     * @exception NullPointerException One of the parameters is null.\n     */\n    public ObjectName(String domain, Hashtable<String,String> table)\n            throws MalformedObjectNameException {\n        construct(domain, table);\n        /* The exception for when a key or value in the table is not a\n           String is now ClassCastException rather than\n           MalformedObjectNameException.  This was not previously\n           specified.  */\n    }"}
{"Number":"1382","API Relative Path":"javax.management.ObjectName.java-ObjectName(String-Hashtable)","Corresponding Source":"/**\n     * Construct an object name with several key properties from a Hashtable.\n     *\n     * @param domain  The domain part of the object name.\n     * @param table A hash table containing one or more key\n     * properties.  The key of each entry in the table is the key of a\n     * key property in the object name.  The associated value in the\n     * table is the associated value in the object name.\n     *\n     * @exception MalformedObjectNameException The <code>domain<\/code>\n     * contains an illegal character, or one of the keys or values in\n     * <code>table<\/code> contains an illegal character, or one of the\n     * values in <code>table<\/code> does not follow the rules for\n     * quoting.\n     * @exception NullPointerException One of the parameters is null.\n     */\n    public ObjectName(String domain, Hashtable<String,String> table)\n            throws MalformedObjectNameException {\n        construct(domain, table);\n        /* The exception for when a key or value in the table is not a\n           String is now ClassCastException rather than\n           MalformedObjectNameException.  This was not previously\n           specified.  */\n    }"}
{"Number":"1383","API Relative Path":"javax.management.ObjectName.java-ObjectName(String-String-String)","Corresponding Source":"/**\n     * Construct an object name with exactly one key property.\n     *\n     * @param domain  The domain part of the object name.\n     * @param key  The attribute in the key property of the object name.\n     * @param value The value in the key property of the object name.\n     *\n     * @exception MalformedObjectNameException The\n     * <code>domain<\/code>, <code>key<\/code>, or <code>value<\/code>\n     * contains an illegal character, or <code>value<\/code> does not\n     * follow the rules for quoting.\n     * @exception NullPointerException One of the parameters is null.\n     */\n    public ObjectName(String domain, String key, String value)\n        throws MalformedObjectNameException {\n        // If key or value are null a NullPointerException\n        // will be thrown by the put method in Hashtable.\n        //\n        Map<String,String> table = Collections.singletonMap(key, value);\n        construct(domain, table);\n    }"}
{"Number":"1384","API Relative Path":"javax.management.ObjectName.java-unquote(String)","Corresponding Source":"/**\n     * <p>Returns an unquoted form of the given String.  If\n     * <code>q<\/code> is a String returned by {@link #quote quote(s)},\n     * then <code>unquote(q).equals(s)<\/code>.  If there is no String\n     * <code>s<\/code> for which <code>quote(s).equals(q)<\/code>, then\n     * unquote(q) throws an IllegalArgumentException.<\/p>\n     *\n     * <p>These rules imply that there is a one-to-one mapping between\n     * quoted and unquoted forms.<\/p>\n     *\n     * @param q the String to be unquoted.\n     *\n     * @return the unquoted String.\n     *\n     * @exception IllegalArgumentException if <code>q<\/code> could not\n     * have been returned by the {@link #quote} method, for instance\n     * if it does not begin and end with a quote (\").\n     *\n     * @exception NullPointerException if <code>q<\/code> is null.\n     *\n     */\n    public static String unquote(String q) {\n        final StringBuilder buf = new StringBuilder();\n        final int len = q.length();\n        if (len < 2 || q.charAt(0) != '\"' || q.charAt(len - 1) != '\"')\n            throw new IllegalArgumentException(\"Argument not quoted\");\n        for (int i = 1; i < len - 1; i++) {\n            char c = q.charAt(i);\n            if (c == '\\\\') {\n                if (i == len - 2)\n                    throw new IllegalArgumentException(\"Trailing backslash\");\n                c = q.charAt(++i);\n                switch (c) {\n                case 'n':\n                    c = '\\n';\n                    break;\n                case '\\\\':\n                case '\\\"':\n                case '*':\n                case '?':\n                    break;\n                default:\n                  throw new IllegalArgumentException(\n                                   \"Bad character '\" + c + \"' after backslash\");\n                }\n            } else {\n                switch (c) {\n                    case '*' :\n                    case '?' :\n                    case '\\\"':\n                    case '\\n':\n                         throw new IllegalArgumentException(\n                                          \"Invalid unescaped character '\" + c +\n                                          \"' in the string to unquote\");\n                }\n            }\n            buf.append(c);\n        }\n        return buf.toString();\n    }"}
{"Number":"1385","API Relative Path":"javax.management.openmbean.CompositeDataSupport.java-CompositeDataSupport(CompositeType-String[]-Object[])","Corresponding Source":"/**\n     * <p>Constructs a <tt>CompositeDataSupport<\/tt> instance with the specified\n     * <tt>compositeType<\/tt>, whose item values\n     * are specified by <tt>itemValues[]<\/tt>, in the same order as in\n     * <tt>itemNames[]<\/tt>.\n     * As a <tt>CompositeType<\/tt> does not specify any order on its items,\n     * the <tt>itemNames[]<\/tt> parameter is used\n     * to specify the order in which the values are given in <tt>itemValues[]<\/tt>.\n     * The items contained in this <tt>CompositeDataSupport<\/tt> instance are\n     * internally stored in a <tt>TreeMap<\/tt>,\n     * thus sorted in ascending lexicographic order of their names, for faster\n     * retrieval of individual item values.<\/p>\n     *\n     * <p>The constructor checks that all the constraints listed below for each\n     * parameter are satisfied,\n     * and throws the appropriate exception if they are not.<\/p>\n     *\n     * @param compositeType the <i>composite type <\/i> of this <i>composite\n     * data<\/i> instance; must not be null.\n     *\n     * @param itemNames <tt>itemNames<\/tt> must list, in any order, all the\n     * item names defined in <tt>compositeType<\/tt>; the order in which the\n     * names are listed, is used to match values in <tt>itemValues[]<\/tt>; must\n     * not be null or empty.\n     *\n     * @param itemValues the values of the items, listed in the same order as\n     * their respective names in <tt>itemNames<\/tt>; each item value can be\n     * null, but if it is non-null it must be a valid value for the open type\n     * defined in <tt>compositeType<\/tt> for the corresponding item; must be of\n     * the same size as <tt>itemNames<\/tt>; must not be null or empty.\n     *\n     * @throws IllegalArgumentException <tt>compositeType<\/tt> is null, or\n     * <tt>itemNames[]<\/tt> or <tt>itemValues[]<\/tt> is null or empty, or one\n     * of the elements in <tt>itemNames[]<\/tt> is a null or empty string, or\n     * <tt>itemNames[]<\/tt> and <tt>itemValues[]<\/tt> are not of the same size.\n     *\n     * @throws OpenDataException <tt>itemNames[]<\/tt> or\n     * <tt>itemValues[]<\/tt>'s size differs from the number of items defined in\n     * <tt>compositeType<\/tt>, or one of the elements in <tt>itemNames[]<\/tt>\n     * does not exist as an item name defined in <tt>compositeType<\/tt>, or one\n     * of the elements in <tt>itemValues[]<\/tt> is not a valid value for the\n     * corresponding item as defined in <tt>compositeType<\/tt>.\n     */\n    public CompositeDataSupport(\n            CompositeType compositeType, String[] itemNames, Object[] itemValues)\n            throws OpenDataException {\n        this(makeMap(itemNames, itemValues), compositeType);\n    }"}
{"Number":"1386","API Relative Path":"javax.management.openmbean.CompositeDataSupport.java-CompositeDataSupport(CompositeType-String[]-Object[])","Corresponding Source":"/**\n     * <p>Constructs a <tt>CompositeDataSupport<\/tt> instance with the specified\n     * <tt>compositeType<\/tt>, whose item values\n     * are specified by <tt>itemValues[]<\/tt>, in the same order as in\n     * <tt>itemNames[]<\/tt>.\n     * As a <tt>CompositeType<\/tt> does not specify any order on its items,\n     * the <tt>itemNames[]<\/tt> parameter is used\n     * to specify the order in which the values are given in <tt>itemValues[]<\/tt>.\n     * The items contained in this <tt>CompositeDataSupport<\/tt> instance are\n     * internally stored in a <tt>TreeMap<\/tt>,\n     * thus sorted in ascending lexicographic order of their names, for faster\n     * retrieval of individual item values.<\/p>\n     *\n     * <p>The constructor checks that all the constraints listed below for each\n     * parameter are satisfied,\n     * and throws the appropriate exception if they are not.<\/p>\n     *\n     * @param compositeType the <i>composite type <\/i> of this <i>composite\n     * data<\/i> instance; must not be null.\n     *\n     * @param itemNames <tt>itemNames<\/tt> must list, in any order, all the\n     * item names defined in <tt>compositeType<\/tt>; the order in which the\n     * names are listed, is used to match values in <tt>itemValues[]<\/tt>; must\n     * not be null or empty.\n     *\n     * @param itemValues the values of the items, listed in the same order as\n     * their respective names in <tt>itemNames<\/tt>; each item value can be\n     * null, but if it is non-null it must be a valid value for the open type\n     * defined in <tt>compositeType<\/tt> for the corresponding item; must be of\n     * the same size as <tt>itemNames<\/tt>; must not be null or empty.\n     *\n     * @throws IllegalArgumentException <tt>compositeType<\/tt> is null, or\n     * <tt>itemNames[]<\/tt> or <tt>itemValues[]<\/tt> is null or empty, or one\n     * of the elements in <tt>itemNames[]<\/tt> is a null or empty string, or\n     * <tt>itemNames[]<\/tt> and <tt>itemValues[]<\/tt> are not of the same size.\n     *\n     * @throws OpenDataException <tt>itemNames[]<\/tt> or\n     * <tt>itemValues[]<\/tt>'s size differs from the number of items defined in\n     * <tt>compositeType<\/tt>, or one of the elements in <tt>itemNames[]<\/tt>\n     * does not exist as an item name defined in <tt>compositeType<\/tt>, or one\n     * of the elements in <tt>itemValues[]<\/tt> is not a valid value for the\n     * corresponding item as defined in <tt>compositeType<\/tt>.\n     */\n    public CompositeDataSupport(\n            CompositeType compositeType, String[] itemNames, Object[] itemValues)\n            throws OpenDataException {\n        this(makeMap(itemNames, itemValues), compositeType);\n    }"}
{"Number":"1387","API Relative Path":"javax.management.openmbean.CompositeDataSupport.java-CompositeDataSupport(CompositeType-String[]-Object[])","Corresponding Source":"/**\n     * <p>Constructs a <tt>CompositeDataSupport<\/tt> instance with the specified\n     * <tt>compositeType<\/tt>, whose item values\n     * are specified by <tt>itemValues[]<\/tt>, in the same order as in\n     * <tt>itemNames[]<\/tt>.\n     * As a <tt>CompositeType<\/tt> does not specify any order on its items,\n     * the <tt>itemNames[]<\/tt> parameter is used\n     * to specify the order in which the values are given in <tt>itemValues[]<\/tt>.\n     * The items contained in this <tt>CompositeDataSupport<\/tt> instance are\n     * internally stored in a <tt>TreeMap<\/tt>,\n     * thus sorted in ascending lexicographic order of their names, for faster\n     * retrieval of individual item values.<\/p>\n     *\n     * <p>The constructor checks that all the constraints listed below for each\n     * parameter are satisfied,\n     * and throws the appropriate exception if they are not.<\/p>\n     *\n     * @param compositeType the <i>composite type <\/i> of this <i>composite\n     * data<\/i> instance; must not be null.\n     *\n     * @param itemNames <tt>itemNames<\/tt> must list, in any order, all the\n     * item names defined in <tt>compositeType<\/tt>; the order in which the\n     * names are listed, is used to match values in <tt>itemValues[]<\/tt>; must\n     * not be null or empty.\n     *\n     * @param itemValues the values of the items, listed in the same order as\n     * their respective names in <tt>itemNames<\/tt>; each item value can be\n     * null, but if it is non-null it must be a valid value for the open type\n     * defined in <tt>compositeType<\/tt> for the corresponding item; must be of\n     * the same size as <tt>itemNames<\/tt>; must not be null or empty.\n     *\n     * @throws IllegalArgumentException <tt>compositeType<\/tt> is null, or\n     * <tt>itemNames[]<\/tt> or <tt>itemValues[]<\/tt> is null or empty, or one\n     * of the elements in <tt>itemNames[]<\/tt> is a null or empty string, or\n     * <tt>itemNames[]<\/tt> and <tt>itemValues[]<\/tt> are not of the same size.\n     *\n     * @throws OpenDataException <tt>itemNames[]<\/tt> or\n     * <tt>itemValues[]<\/tt>'s size differs from the number of items defined in\n     * <tt>compositeType<\/tt>, or one of the elements in <tt>itemNames[]<\/tt>\n     * does not exist as an item name defined in <tt>compositeType<\/tt>, or one\n     * of the elements in <tt>itemValues[]<\/tt> is not a valid value for the\n     * corresponding item as defined in <tt>compositeType<\/tt>.\n     */\n    public CompositeDataSupport(\n            CompositeType compositeType, String[] itemNames, Object[] itemValues)\n            throws OpenDataException {\n        this(makeMap(itemNames, itemValues), compositeType);\n    }"}
{"Number":"1388","API Relative Path":"javax.management.openmbean.CompositeType.java-CompositeType(String-String-String[]-String[]-OpenType)","Corresponding Source":"/* *** Constructor *** */\n\n    /**\n     * Constructs a <code>CompositeType<\/code> instance, checking for the validity of the given parameters.\n     * The validity constraints are described below for each parameter.\n     * <p>\n     * Note that the contents of the three array parameters\n     * <var>itemNames<\/var>, <var>itemDescriptions<\/var> and <var>itemTypes<\/var>\n     * are internally copied so that any subsequent modification of these arrays by the caller of this constructor\n     * has no impact on the constructed <code>CompositeType<\/code> instance.\n     * <p>\n     * The Java class name of composite data values this composite type represents\n     * (ie the class name returned by the {@link OpenType#getClassName() getClassName} method)\n     * is set to the string value returned by <code>CompositeData.class.getName()<\/code>.\n     * <p>\n     * @param  typeName  The name given to the composite type this instance represents; cannot be a null or empty string.\n     * <br>&nbsp;\n     * @param  description  The human readable description of the composite type this instance represents;\n     *                      cannot be a null or empty string.\n     * <br>&nbsp;\n     * @param  itemNames  The names of the items contained in the\n     *                    composite data values described by this <code>CompositeType<\/code> instance;\n     *                    cannot be null and should contain at least one element; no element can be a null or empty string.\n     *                    Note that the order in which the item names are given is not important to differentiate a\n     *                    <code>CompositeType<\/code> instance from another;\n     *                    the item names are internally stored sorted in ascending alphanumeric order.\n     * <br>&nbsp;\n     * @param  itemDescriptions  The descriptions, in the same order as <var>itemNames<\/var>, of the items contained in the\n     *                           composite data values described by this <code>CompositeType<\/code> instance;\n     *                           should be of the same size as <var>itemNames<\/var>;\n     *                           no element can be null or an empty string.\n     * <br>&nbsp;\n     * @param  itemTypes  The open type instances, in the same order as <var>itemNames<\/var>, describing the items contained\n     *                    in the composite data values described by this <code>CompositeType<\/code> instance;\n     *                    should be of the same size as <var>itemNames<\/var>;\n     *                    no element can be null.\n     * <br>&nbsp;\n     * @throws IllegalArgumentException  If <var>typeName<\/var> or <var>description<\/var> is a null or empty string,\n     *                                   or <var>itemNames<\/var> or <var>itemDescriptions<\/var> or <var>itemTypes<\/var> is null,\n     *                                   or any element of <var>itemNames<\/var> or <var>itemDescriptions<\/var>\n     *                                   is a null or empty string,\n     *                                   or any element of <var>itemTypes<\/var> is null,\n     *                                   or <var>itemNames<\/var> or <var>itemDescriptions<\/var> or <var>itemTypes<\/var>\n     *                                   are not of the same size.\n     * <br>&nbsp;\n     * @throws OpenDataException  If <var>itemNames<\/var> contains duplicate item names\n     *                            (case sensitive, but leading and trailing whitespaces removed).\n     */\n    public CompositeType(String        typeName,\n                         String        description,\n                         String[]      itemNames,\n                         String[]      itemDescriptions,\n                         OpenType<?>[] itemTypes) throws OpenDataException {\n\n        // Check and construct state defined by parent\n        //\n        super(CompositeData.class.getName(), typeName, description, false);\n\n        // Check the 3 arrays are not null or empty (ie length==0) and that there is no null element or empty string in them\n        //\n        checkForNullElement(itemNames, \"itemNames\");\n        checkForNullElement(itemDescriptions, \"itemDescriptions\");\n        checkForNullElement(itemTypes, \"itemTypes\");\n        checkForEmptyString(itemNames, \"itemNames\");\n        checkForEmptyString(itemDescriptions, \"itemDescriptions\");\n\n        // Check the sizes of the 3 arrays are the same\n        //\n        if ( (itemNames.length != itemDescriptions.length) || (itemNames.length != itemTypes.length) ) {\n            throw new IllegalArgumentException(\"Array arguments itemNames[], itemDescriptions[] and itemTypes[] \"+\n                                               \"should be of same length (got \"+ itemNames.length +\", \"+\n                                               itemDescriptions.length +\" and \"+ itemTypes.length +\").\");\n        }\n\n        // Initialize internal \"names to descriptions\" and \"names to types\" sorted maps,\n        // and, by doing so, check there are no duplicate item names\n        //\n        nameToDescription = new TreeMap<String,String>();\n        nameToType        = new TreeMap<String,OpenType<?>>();\n        String key;\n        for (int i=0; i<itemNames.length; i++) {\n            key = itemNames[i].trim();\n            if (nameToDescription.containsKey(key)) {\n                throw new OpenDataException(\"Argument's element itemNames[\"+ i +\"]=\\\"\"+ itemNames[i] +\n                                            \"\\\" duplicates a previous item names.\");\n            }\n            nameToDescription.put(key, itemDescriptions[i].trim());\n            nameToType.put(key, itemTypes[i]);\n        }\n    }"}
{"Number":"1389","API Relative Path":"javax.management.openmbean.CompositeType.java-getDescription(String)","Corresponding Source":"/**\n     * Returns the description of the item whose name is <var>itemName<\/var>,\n     * or <code>null<\/code> if this <code>CompositeType<\/code> instance does not define any item\n     * whose name is <var>itemName<\/var>.\n     *\n     * @param itemName the name of the item.\n     *\n     * @return the description.\n     */\n    public String getDescription(String itemName) {\n\n        if (itemName == null) {\n            return null;\n        }\n        return nameToDescription.get(itemName);\n    }"}
{"Number":"1390","API Relative Path":"javax.management.openmbean.CompositeType.java-getDescription(String)","Corresponding Source":"/**\n     * Returns the description of the item whose name is <var>itemName<\/var>,\n     * or <code>null<\/code> if this <code>CompositeType<\/code> instance does not define any item\n     * whose name is <var>itemName<\/var>.\n     *\n     * @param itemName the name of the item.\n     *\n     * @return the description.\n     */\n    public String getDescription(String itemName) {\n\n        if (itemName == null) {\n            return null;\n        }\n        return nameToDescription.get(itemName);\n    }"}
{"Number":"1391","API Relative Path":"javax.management.openmbean.CompositeType.java-getType(String)","Corresponding Source":"/**\n     * Returns the <i>open type<\/i> of the item whose name is <var>itemName<\/var>,\n     * or <code>null<\/code> if this <code>CompositeType<\/code> instance does not define any item\n     * whose name is <var>itemName<\/var>.\n     *\n     * @param itemName the name of the time.\n     *\n     * @return the type.\n     */\n    public OpenType<?> getType(String itemName) {\n\n        if (itemName == null) {\n            return null;\n        }\n        return (OpenType<?>) nameToType.get(itemName);\n    }"}
{"Number":"1392","API Relative Path":"javax.management.openmbean.CompositeType.java-getType(String)","Corresponding Source":"/**\n     * Returns the <i>open type<\/i> of the item whose name is <var>itemName<\/var>,\n     * or <code>null<\/code> if this <code>CompositeType<\/code> instance does not define any item\n     * whose name is <var>itemName<\/var>.\n     *\n     * @param itemName the name of the time.\n     *\n     * @return the type.\n     */\n    public OpenType<?> getType(String itemName) {\n\n        if (itemName == null) {\n            return null;\n        }\n        return (OpenType<?>) nameToType.get(itemName);\n    }"}
{"Number":"1393","API Relative Path":"javax.management.openmbean.OpenMBeanConstructorInfoSupport.java-OpenMBeanConstructorInfoSupport(String-String-OpenMBeanParameterInfo[]-Descriptor)","Corresponding Source":"/**\n     * <p>Constructs an {@code OpenMBeanConstructorInfoSupport}\n     * instance, which describes the constructor of a class of open\n     * MBeans with the specified {@code name}, {@code description},\n     * {@code signature}, and {@code descriptor}.<\/p>\n     *\n     * <p>The {@code signature} array parameter is internally copied,\n     * so that subsequent changes to the array referenced by {@code\n     * signature} have no effect on this instance.<\/p>\n     *\n     * @param name cannot be a null or empty string.\n     *\n     * @param description cannot be a null or empty string.\n     *\n     * @param signature can be null or empty if there are no\n     * parameters to describe.\n     *\n     * @param descriptor The descriptor for the constructor.  This may\n     * be null which is equivalent to an empty descriptor.\n     *\n     * @throws IllegalArgumentException if {@code name} or {@code\n     * description} are null or empty string.\n     *\n     * @throws ArrayStoreException If {@code signature} is not an\n     * array of instances of a subclass of {@code MBeanParameterInfo}.\n     *\n     * @since 1.6\n     */\n    public OpenMBeanConstructorInfoSupport(String name,\n                                           String description,\n                                           OpenMBeanParameterInfo[] signature,\n                                           Descriptor descriptor) {\n        super(name,\n              description,\n              arrayCopyCast(signature), // may throw an ArrayStoreException\n              descriptor);\n\n        // check parameters that should not be null or empty\n        // (unfortunately it is not done in superclass :-( ! )\n        //\n        if (name == null || name.trim().equals(\"\")) {\n            throw new IllegalArgumentException(\"Argument name cannot be \" +\n                                               \"null or empty\");\n        }\n        if (description == null || description.trim().equals(\"\")) {\n            throw new IllegalArgumentException(\"Argument description cannot \" +\n                                               \"be null or empty\");\n        }\n\n    }"}
{"Number":"1394","API Relative Path":"javax.management.openmbean.OpenMBeanConstructorInfoSupport.java-OpenMBeanConstructorInfoSupport(String-String-OpenMBeanParameterInfo[]-Descriptor)","Corresponding Source":"/**\n     * <p>Constructs an {@code OpenMBeanConstructorInfoSupport}\n     * instance, which describes the constructor of a class of open\n     * MBeans with the specified {@code name}, {@code description},\n     * {@code signature}, and {@code descriptor}.<\/p>\n     *\n     * <p>The {@code signature} array parameter is internally copied,\n     * so that subsequent changes to the array referenced by {@code\n     * signature} have no effect on this instance.<\/p>\n     *\n     * @param name cannot be a null or empty string.\n     *\n     * @param description cannot be a null or empty string.\n     *\n     * @param signature can be null or empty if there are no\n     * parameters to describe.\n     *\n     * @param descriptor The descriptor for the constructor.  This may\n     * be null which is equivalent to an empty descriptor.\n     *\n     * @throws IllegalArgumentException if {@code name} or {@code\n     * description} are null or empty string.\n     *\n     * @throws ArrayStoreException If {@code signature} is not an\n     * array of instances of a subclass of {@code MBeanParameterInfo}.\n     *\n     * @since 1.6\n     */\n    public OpenMBeanConstructorInfoSupport(String name,\n                                           String description,\n                                           OpenMBeanParameterInfo[] signature,\n                                           Descriptor descriptor) {\n        super(name,\n              description,\n              arrayCopyCast(signature), // may throw an ArrayStoreException\n              descriptor);\n\n        // check parameters that should not be null or empty\n        // (unfortunately it is not done in superclass :-( ! )\n        //\n        if (name == null || name.trim().equals(\"\")) {\n            throw new IllegalArgumentException(\"Argument name cannot be \" +\n                                               \"null or empty\");\n        }\n        if (description == null || description.trim().equals(\"\")) {\n            throw new IllegalArgumentException(\"Argument description cannot \" +\n                                               \"be null or empty\");\n        }\n\n    }"}
{"Number":"1395","API Relative Path":"javax.management.openmbean.OpenMBeanInfoSupport.java-OpenMBeanInfoSupport(String-String-OpenMBeanAttributeInfo[]-OpenMBeanConstructorInfo[]-OpenMBeanOperationInfo[]-MBeanNotificationInfo[]-Descriptor)","Corresponding Source":"/**\n     * <p>Constructs an {@code OpenMBeanInfoSupport} instance, which\n     * describes a class of open MBeans with the specified {@code\n     * className}, {@code description}, {@code openAttributes}, {@code\n     * openConstructors} , {@code openOperations}, {@code\n     * notifications}, and {@code descriptor}.<\/p>\n     *\n     * <p>The {@code openAttributes}, {@code openConstructors}, {@code\n     * openOperations} and {@code notifications} array parameters are\n     * internally copied, so that subsequent changes to the arrays\n     * referenced by these parameters have no effect on this\n     * instance.<\/p>\n     *\n     * @param className The fully qualified Java class name of the\n     * open MBean described by this <CODE>OpenMBeanInfoSupport<\/CODE>\n     * instance.\n     *\n     * @param description A human readable description of the open\n     * MBean described by this <CODE>OpenMBeanInfoSupport<\/CODE>\n     * instance.\n     *\n     * @param openAttributes The list of exposed attributes of the\n     * described open MBean; Must be an array of instances of a\n     * subclass of {@code MBeanAttributeInfo}, typically {@code\n     * OpenMBeanAttributeInfoSupport}.\n     *\n     * @param openConstructors The list of exposed public constructors\n     * of the described open MBean; Must be an array of instances of a\n     * subclass of {@code MBeanConstructorInfo}, typically {@code\n     * OpenMBeanConstructorInfoSupport}.\n     *\n     * @param openOperations The list of exposed operations of the\n     * described open MBean.  Must be an array of instances of a\n     * subclass of {@code MBeanOperationInfo}, typically {@code\n     * OpenMBeanOperationInfoSupport}.\n     *\n     * @param notifications The list of notifications emitted by the\n     * described open MBean.\n     *\n     * @param descriptor The descriptor for the MBean.  This may be null\n     * which is equivalent to an empty descriptor.\n     *\n     * @throws ArrayStoreException If {@code openAttributes}, {@code\n     * openConstructors} or {@code openOperations} is not an array of\n     * instances of a subclass of {@code MBeanAttributeInfo}, {@code\n     * MBeanConstructorInfo} or {@code MBeanOperationInfo}\n     * respectively.\n     *\n     * @since 1.6\n     */\n    public OpenMBeanInfoSupport(String className,\n                                String description,\n                                OpenMBeanAttributeInfo[] openAttributes,\n                                OpenMBeanConstructorInfo[] openConstructors,\n                                OpenMBeanOperationInfo[] openOperations,\n                                MBeanNotificationInfo[] notifications,\n                                Descriptor descriptor) {\n        super(className,\n              description,\n              attributeArray(openAttributes),\n              constructorArray(openConstructors),\n              operationArray(openOperations),\n              (notifications == null) ? null : notifications.clone(),\n              descriptor);\n    }"}
{"Number":"1396","API Relative Path":"javax.management.openmbean.OpenMBeanInfoSupport.java-OpenMBeanInfoSupport(String-String-OpenMBeanAttributeInfo[]-OpenMBeanConstructorInfo[]-OpenMBeanOperationInfo[]-MBeanNotificationInfo[]-Descriptor)","Corresponding Source":"/**\n     * <p>Constructs an {@code OpenMBeanInfoSupport} instance, which\n     * describes a class of open MBeans with the specified {@code\n     * className}, {@code description}, {@code openAttributes}, {@code\n     * openConstructors} , {@code openOperations}, {@code\n     * notifications}, and {@code descriptor}.<\/p>\n     *\n     * <p>The {@code openAttributes}, {@code openConstructors}, {@code\n     * openOperations} and {@code notifications} array parameters are\n     * internally copied, so that subsequent changes to the arrays\n     * referenced by these parameters have no effect on this\n     * instance.<\/p>\n     *\n     * @param className The fully qualified Java class name of the\n     * open MBean described by this <CODE>OpenMBeanInfoSupport<\/CODE>\n     * instance.\n     *\n     * @param description A human readable description of the open\n     * MBean described by this <CODE>OpenMBeanInfoSupport<\/CODE>\n     * instance.\n     *\n     * @param openAttributes The list of exposed attributes of the\n     * described open MBean; Must be an array of instances of a\n     * subclass of {@code MBeanAttributeInfo}, typically {@code\n     * OpenMBeanAttributeInfoSupport}.\n     *\n     * @param openConstructors The list of exposed public constructors\n     * of the described open MBean; Must be an array of instances of a\n     * subclass of {@code MBeanConstructorInfo}, typically {@code\n     * OpenMBeanConstructorInfoSupport}.\n     *\n     * @param openOperations The list of exposed operations of the\n     * described open MBean.  Must be an array of instances of a\n     * subclass of {@code MBeanOperationInfo}, typically {@code\n     * OpenMBeanOperationInfoSupport}.\n     *\n     * @param notifications The list of notifications emitted by the\n     * described open MBean.\n     *\n     * @param descriptor The descriptor for the MBean.  This may be null\n     * which is equivalent to an empty descriptor.\n     *\n     * @throws ArrayStoreException If {@code openAttributes}, {@code\n     * openConstructors} or {@code openOperations} is not an array of\n     * instances of a subclass of {@code MBeanAttributeInfo}, {@code\n     * MBeanConstructorInfo} or {@code MBeanOperationInfo}\n     * respectively.\n     *\n     * @since 1.6\n     */\n    public OpenMBeanInfoSupport(String className,\n                                String description,\n                                OpenMBeanAttributeInfo[] openAttributes,\n                                OpenMBeanConstructorInfo[] openConstructors,\n                                OpenMBeanOperationInfo[] openOperations,\n                                MBeanNotificationInfo[] notifications,\n                                Descriptor descriptor) {\n        super(className,\n              description,\n              attributeArray(openAttributes),\n              constructorArray(openConstructors),\n              operationArray(openOperations),\n              (notifications == null) ? null : notifications.clone(),\n              descriptor);\n    }"}
{"Number":"1397","API Relative Path":"javax.management.openmbean.OpenMBeanInfoSupport.java-OpenMBeanInfoSupport(String-String-OpenMBeanAttributeInfo[]-OpenMBeanConstructorInfo[]-OpenMBeanOperationInfo[]-MBeanNotificationInfo[]-Descriptor)","Corresponding Source":"/**\n     * <p>Constructs an {@code OpenMBeanInfoSupport} instance, which\n     * describes a class of open MBeans with the specified {@code\n     * className}, {@code description}, {@code openAttributes}, {@code\n     * openConstructors} , {@code openOperations}, {@code\n     * notifications}, and {@code descriptor}.<\/p>\n     *\n     * <p>The {@code openAttributes}, {@code openConstructors}, {@code\n     * openOperations} and {@code notifications} array parameters are\n     * internally copied, so that subsequent changes to the arrays\n     * referenced by these parameters have no effect on this\n     * instance.<\/p>\n     *\n     * @param className The fully qualified Java class name of the\n     * open MBean described by this <CODE>OpenMBeanInfoSupport<\/CODE>\n     * instance.\n     *\n     * @param description A human readable description of the open\n     * MBean described by this <CODE>OpenMBeanInfoSupport<\/CODE>\n     * instance.\n     *\n     * @param openAttributes The list of exposed attributes of the\n     * described open MBean; Must be an array of instances of a\n     * subclass of {@code MBeanAttributeInfo}, typically {@code\n     * OpenMBeanAttributeInfoSupport}.\n     *\n     * @param openConstructors The list of exposed public constructors\n     * of the described open MBean; Must be an array of instances of a\n     * subclass of {@code MBeanConstructorInfo}, typically {@code\n     * OpenMBeanConstructorInfoSupport}.\n     *\n     * @param openOperations The list of exposed operations of the\n     * described open MBean.  Must be an array of instances of a\n     * subclass of {@code MBeanOperationInfo}, typically {@code\n     * OpenMBeanOperationInfoSupport}.\n     *\n     * @param notifications The list of notifications emitted by the\n     * described open MBean.\n     *\n     * @param descriptor The descriptor for the MBean.  This may be null\n     * which is equivalent to an empty descriptor.\n     *\n     * @throws ArrayStoreException If {@code openAttributes}, {@code\n     * openConstructors} or {@code openOperations} is not an array of\n     * instances of a subclass of {@code MBeanAttributeInfo}, {@code\n     * MBeanConstructorInfo} or {@code MBeanOperationInfo}\n     * respectively.\n     *\n     * @since 1.6\n     */\n    public OpenMBeanInfoSupport(String className,\n                                String description,\n                                OpenMBeanAttributeInfo[] openAttributes,\n                                OpenMBeanConstructorInfo[] openConstructors,\n                                OpenMBeanOperationInfo[] openOperations,\n                                MBeanNotificationInfo[] notifications,\n                                Descriptor descriptor) {\n        super(className,\n              description,\n              attributeArray(openAttributes),\n              constructorArray(openConstructors),\n              operationArray(openOperations),\n              (notifications == null) ? null : notifications.clone(),\n              descriptor);\n    }"}
{"Number":"1398","API Relative Path":"javax.management.openmbean.OpenMBeanOperationInfoSupport.java-OpenMBeanOperationInfoSupport(String-String-OpenMBeanParameterInfo[]-OpenType-int-Descriptor)","Corresponding Source":"/**\n     * <p>Constructs an {@code OpenMBeanOperationInfoSupport}\n     * instance, which describes the operation of a class of open\n     * MBeans, with the specified {@code name}, {@code description},\n     * {@code signature}, {@code returnOpenType}, {@code\n     * impact}, and {@code descriptor}.<\/p>\n     *\n     * <p>The {@code signature} array parameter is internally copied,\n     * so that subsequent changes to the array referenced by {@code\n     * signature} have no effect on this instance.<\/p>\n     *\n     * @param name cannot be a null or empty string.\n     *\n     * @param description cannot be a null or empty string.\n     *\n     * @param signature can be null or empty if there are no\n     * parameters to describe.\n     *\n     * @param returnOpenType cannot be null: use {@code\n     * SimpleType.VOID} for operations that return nothing.\n     *\n     * @param impact must be one of {@code ACTION}, {@code\n     * ACTION_INFO}, {@code INFO}, or {@code UNKNOWN}.\n     *\n     * @param descriptor The descriptor for the operation.  This may\n     * be null, which is equivalent to an empty descriptor.\n     *\n     * @throws IllegalArgumentException if {@code name} or {@code\n     * description} are null or empty string, or {@code\n     * returnOpenType} is null, or {@code impact} is not one of {@code\n     * ACTION}, {@code ACTION_INFO}, {@code INFO}, or {@code UNKNOWN}.\n     *\n     * @throws ArrayStoreException If {@code signature} is not an\n     * array of instances of a subclass of {@code MBeanParameterInfo}.\n     *\n     * @since 1.6\n     */\n    public OpenMBeanOperationInfoSupport(String name,\n                                         String description,\n                                         OpenMBeanParameterInfo[] signature,\n                                         OpenType<?> returnOpenType,\n                                         int impact,\n                                         Descriptor descriptor) {\n        super(name,\n              description,\n              arrayCopyCast(signature),\n              // must prevent NPE here - we will throw IAE later on if\n              // returnOpenType is null\n              (returnOpenType == null) ? null : returnOpenType.getClassName(),\n              impact,\n              ImmutableDescriptor.union(descriptor,\n                // must prevent NPE here - we will throw IAE later on if\n                // returnOpenType is null\n                (returnOpenType==null) ? null :returnOpenType.getDescriptor()));\n\n        // check parameters that should not be null or empty\n        // (unfortunately it is not done in superclass :-( ! )\n        //\n        if (name == null || name.trim().equals(\"\")) {\n            throw new IllegalArgumentException(\"Argument name cannot \" +\n                                               \"be null or empty\");\n        }\n        if (description == null || description.trim().equals(\"\")) {\n            throw new IllegalArgumentException(\"Argument description cannot \" +\n                                               \"be null or empty\");\n        }\n        if (returnOpenType == null) {\n            throw new IllegalArgumentException(\"Argument returnOpenType \" +\n                                               \"cannot be null\");\n        }\n\n        if (impact != ACTION && impact != ACTION_INFO && impact != INFO &&\n                impact != UNKNOWN) {\n            throw new IllegalArgumentException(\"Argument impact can only be \" +\n                                               \"one of ACTION, ACTION_INFO, \" +\n                                               \"INFO, or UNKNOWN: \" + impact);\n        }\n\n        this.returnOpenType = returnOpenType;\n    }"}
{"Number":"1399","API Relative Path":"javax.management.openmbean.OpenMBeanOperationInfoSupport.java-OpenMBeanOperationInfoSupport(String-String-OpenMBeanParameterInfo[]-OpenType-int-Descriptor)","Corresponding Source":"/**\n     * <p>Constructs an {@code OpenMBeanOperationInfoSupport}\n     * instance, which describes the operation of a class of open\n     * MBeans, with the specified {@code name}, {@code description},\n     * {@code signature}, {@code returnOpenType}, {@code\n     * impact}, and {@code descriptor}.<\/p>\n     *\n     * <p>The {@code signature} array parameter is internally copied,\n     * so that subsequent changes to the array referenced by {@code\n     * signature} have no effect on this instance.<\/p>\n     *\n     * @param name cannot be a null or empty string.\n     *\n     * @param description cannot be a null or empty string.\n     *\n     * @param signature can be null or empty if there are no\n     * parameters to describe.\n     *\n     * @param returnOpenType cannot be null: use {@code\n     * SimpleType.VOID} for operations that return nothing.\n     *\n     * @param impact must be one of {@code ACTION}, {@code\n     * ACTION_INFO}, {@code INFO}, or {@code UNKNOWN}.\n     *\n     * @param descriptor The descriptor for the operation.  This may\n     * be null, which is equivalent to an empty descriptor.\n     *\n     * @throws IllegalArgumentException if {@code name} or {@code\n     * description} are null or empty string, or {@code\n     * returnOpenType} is null, or {@code impact} is not one of {@code\n     * ACTION}, {@code ACTION_INFO}, {@code INFO}, or {@code UNKNOWN}.\n     *\n     * @throws ArrayStoreException If {@code signature} is not an\n     * array of instances of a subclass of {@code MBeanParameterInfo}.\n     *\n     * @since 1.6\n     */\n    public OpenMBeanOperationInfoSupport(String name,\n                                         String description,\n                                         OpenMBeanParameterInfo[] signature,\n                                         OpenType<?> returnOpenType,\n                                         int impact,\n                                         Descriptor descriptor) {\n        super(name,\n              description,\n              arrayCopyCast(signature),\n              // must prevent NPE here - we will throw IAE later on if\n              // returnOpenType is null\n              (returnOpenType == null) ? null : returnOpenType.getClassName(),\n              impact,\n              ImmutableDescriptor.union(descriptor,\n                // must prevent NPE here - we will throw IAE later on if\n                // returnOpenType is null\n                (returnOpenType==null) ? null :returnOpenType.getDescriptor()));\n\n        // check parameters that should not be null or empty\n        // (unfortunately it is not done in superclass :-( ! )\n        //\n        if (name == null || name.trim().equals(\"\")) {\n            throw new IllegalArgumentException(\"Argument name cannot \" +\n                                               \"be null or empty\");\n        }\n        if (description == null || description.trim().equals(\"\")) {\n            throw new IllegalArgumentException(\"Argument description cannot \" +\n                                               \"be null or empty\");\n        }\n        if (returnOpenType == null) {\n            throw new IllegalArgumentException(\"Argument returnOpenType \" +\n                                               \"cannot be null\");\n        }\n\n        if (impact != ACTION && impact != ACTION_INFO && impact != INFO &&\n                impact != UNKNOWN) {\n            throw new IllegalArgumentException(\"Argument impact can only be \" +\n                                               \"one of ACTION, ACTION_INFO, \" +\n                                               \"INFO, or UNKNOWN: \" + impact);\n        }\n\n        this.returnOpenType = returnOpenType;\n    }"}
{"Number":"1400","API Relative Path":"javax.management.openmbean.OpenType.java-OpenType(String-String-String)","Corresponding Source":"/* *** Constructor *** */\n\n    /**\n     * Constructs an <code>OpenType<\/code> instance (actually a subclass instance as <code>OpenType<\/code> is abstract),\n     * checking for the validity of the given parameters.\n     * The validity constraints are described below for each parameter.\n     * <br>&nbsp;\n     * @param  className  The fully qualified Java class name of the open data values this open type describes.\n     *                    The valid Java class names allowed for open data values are listed in\n     *                    {@link #ALLOWED_CLASSNAMES_LIST ALLOWED_CLASSNAMES_LIST}.\n     *                    A multidimensional array of any one of these classes\n     *                    or their corresponding primitive types is also an allowed class,\n     *                    in which case the class name follows the rules defined by the method\n     *                    {@link Class#getName() getName()} of <code>java.lang.Class<\/code>.\n     *                    For example, a 3-dimensional array of Strings has for class name\n     *                    &quot;<code>[[[Ljava.lang.String;<\/code>&quot; (without the quotes).\n     * <br>&nbsp;\n     * @param  typeName  The name given to the open type this instance represents; cannot be a null or empty string.\n     * <br>&nbsp;\n     * @param  description  The human readable description of the open type this instance represents;\n     *                      cannot be a null or empty string.\n     * <br>&nbsp;\n     * @throws IllegalArgumentException  if <var>className<\/var>, <var>typeName<\/var> or <var>description<\/var>\n     *                                   is a null or empty string\n     * <br>&nbsp;\n     * @throws OpenDataException  if <var>className<\/var> is not one of the allowed Java class names for open data\n     */\n    protected OpenType(String  className,\n                       String  typeName,\n                       String  description) throws OpenDataException {\n        checkClassNameOverride();\n        this.typeName = valid(\"typeName\", typeName);\n        this.description = valid(\"description\", description);\n        this.className = validClassName(className);\n        this.isArray = (this.className != null && this.className.startsWith(\"[\"));\n    }"}
{"Number":"1401","API Relative Path":"javax.management.openmbean.OpenType.java-OpenType(String-String-String)","Corresponding Source":"/* *** Constructor *** */\n\n    /**\n     * Constructs an <code>OpenType<\/code> instance (actually a subclass instance as <code>OpenType<\/code> is abstract),\n     * checking for the validity of the given parameters.\n     * The validity constraints are described below for each parameter.\n     * <br>&nbsp;\n     * @param  className  The fully qualified Java class name of the open data values this open type describes.\n     *                    The valid Java class names allowed for open data values are listed in\n     *                    {@link #ALLOWED_CLASSNAMES_LIST ALLOWED_CLASSNAMES_LIST}.\n     *                    A multidimensional array of any one of these classes\n     *                    or their corresponding primitive types is also an allowed class,\n     *                    in which case the class name follows the rules defined by the method\n     *                    {@link Class#getName() getName()} of <code>java.lang.Class<\/code>.\n     *                    For example, a 3-dimensional array of Strings has for class name\n     *                    &quot;<code>[[[Ljava.lang.String;<\/code>&quot; (without the quotes).\n     * <br>&nbsp;\n     * @param  typeName  The name given to the open type this instance represents; cannot be a null or empty string.\n     * <br>&nbsp;\n     * @param  description  The human readable description of the open type this instance represents;\n     *                      cannot be a null or empty string.\n     * <br>&nbsp;\n     * @throws IllegalArgumentException  if <var>className<\/var>, <var>typeName<\/var> or <var>description<\/var>\n     *                                   is a null or empty string\n     * <br>&nbsp;\n     * @throws OpenDataException  if <var>className<\/var> is not one of the allowed Java class names for open data\n     */\n    protected OpenType(String  className,\n                       String  typeName,\n                       String  description) throws OpenDataException {\n        checkClassNameOverride();\n        this.typeName = valid(\"typeName\", typeName);\n        this.description = valid(\"description\", description);\n        this.className = validClassName(className);\n        this.isArray = (this.className != null && this.className.startsWith(\"[\"));\n    }"}
{"Number":"1402","API Relative Path":"javax.management.openmbean.TabularDataSupport.java-get(Object[])","Corresponding Source":"/**\n     * Returns the <tt>CompositeData<\/tt> value whose index is\n     * <var>key<\/var>, or <tt>null<\/tt> if there is no value mapping\n     * to <var>key<\/var>, in this <tt>TabularData<\/tt> instance.\n     *\n     * @param key the index of the value to get in this\n     * <tt>TabularData<\/tt> instance; * must be valid with this\n     * <tt>TabularData<\/tt> instance's row type definition; * must not\n     * be null.\n     *\n     * @return the value corresponding to <var>key<\/var>.\n     *\n     * @throws NullPointerException  if the <var>key<\/var> is <tt>null<\/tt>\n     * @throws InvalidKeyException   if the <var>key<\/var> does not conform to this <tt>TabularData<\/tt> instance's\n     *                               <tt>TabularType<\/tt> type definition.\n     */\n    public CompositeData get(Object[] key) {\n\n        // Check key is not null and valid with tabularType\n        // (throws NullPointerException, InvalidKeyException)\n        //\n        checkKeyType(key);\n\n        // Return the mapping stored in the parent HashMap\n        //\n        return dataMap.get(Arrays.asList(key));\n    }"}
{"Number":"1403","API Relative Path":"javax.management.openmbean.TabularDataSupport.java-putAll(CompositeData[])","Corresponding Source":"/**\n     * Add all the elements in <var>values<\/var> to this\n     * <tt>TabularData<\/tt> instance.  If any element in\n     * <var>values<\/var> does not satisfy the constraints defined in\n     * {@link #put(CompositeData) <tt>put<\/tt>}, or if any two\n     * elements in <var>values<\/var> have the same index calculated\n     * according to this <tt>TabularData<\/tt> instance's\n     * <tt>TabularType<\/tt> definition, then an exception describing\n     * the failure is thrown and no element of <var>values<\/var> is\n     * added, thus leaving this <tt>TabularData<\/tt> instance\n     * unchanged.\n     *\n     * @param values the array of composite data values to be added as\n     * new rows to this <tt>TabularData<\/tt> instance; if\n     * <var>values<\/var> is <tt>null<\/tt> or empty, this method\n     * returns without doing anything.\n     *\n     * @throws NullPointerException if an element of <var>values<\/var>\n     * is <tt>null<\/tt>\n     * @throws InvalidOpenTypeException if an element of\n     * <var>values<\/var> does not conform to this\n     * <tt>TabularData<\/tt> instance's row type definition (ie its\n     * <tt>TabularType<\/tt> definition)\n     * @throws KeyAlreadyExistsException if the index for an element\n     * of <var>values<\/var>, calculated according to this\n     * <tt>TabularData<\/tt> instance's <tt>TabularType<\/tt> definition\n     * already maps to an existing value in this instance, or two\n     * elements of <var>values<\/var> have the same index\n     */\n    public void putAll(CompositeData[] values) {\n\n        // if values is null or empty, just return\n        //\n        if ( (values == null) || (values.length == 0) ) {\n            return;\n        }\n\n        // create the list of indexes corresponding to each value\n        List<List<?>> indexes =\n            new ArrayList<List<?>>(values.length + 1);\n\n        // Check all elements in values and build index list\n        //\n        List<?> index;\n        for (int i=0; i<values.length; i++) {\n            // check value and calculate index\n            index = checkValueAndIndex(values[i]);\n            // check index is different of those previously calculated\n            if (indexes.contains(index)) {\n                throw new KeyAlreadyExistsException(\"Argument elements values[\"+ i +\"] and values[\"+ indexes.indexOf(index) +\n                                                    \"] have the same indexes, \"+\n                                                    \"calculated according to this TabularData instance's tabularType.\");\n            }\n            // add to index list\n            indexes.add(index);\n        }\n\n        // store all (index, value) mappings in the dataMap HashMap\n        //\n        for (int i=0; i<values.length; i++) {\n            dataMap.put(indexes.get(i), values[i]);\n        }\n    }"}
{"Number":"1404","API Relative Path":"javax.management.openmbean.TabularDataSupport.java-putAll(Map)","Corresponding Source":"/* ***   Content modification bulk operations   *** */\n\n\n    /**\n     * Add all the values contained in the specified map <var>t<\/var>\n     * to this <tt>TabularData<\/tt> instance.  This method converts\n     * the collection of values contained in this map into an array of\n     * <tt>CompositeData<\/tt> values, if possible, and then call the\n     * method <tt>putAll(CompositeData[])<\/tt>. Note that the keys\n     * used in the specified map <var>t<\/var> are ignored. This method\n     * allows, for example to add the content of another\n     * <tt>TabularData<\/tt> instance with the same row type (but\n     * possibly different index names) into this instance.\n     *\n     * @param t the map whose values are to be added as new rows to\n     * this <tt>TabularData<\/tt> instance; if <var>t<\/var> is\n     * <tt>null<\/tt> or empty, this method returns without doing\n     * anything.\n     *\n     * @throws NullPointerException if a value in <var>t<\/var> is\n     * <tt>null<\/tt>.\n     * @throws ClassCastException if a value in <var>t<\/var> is not an\n     * instance of <tt>CompositeData<\/tt>.\n     * @throws InvalidOpenTypeException if a value in <var>t<\/var>\n     * does not conform to this <tt>TabularData<\/tt> instance's row\n     * type definition.\n     * @throws KeyAlreadyExistsException if the index for a value in\n     * <var>t<\/var>, calculated according to this\n     * <tt>TabularData<\/tt> instance's <tt>TabularType<\/tt> definition\n     * already maps to an existing value in this instance, or two\n     * values in <var>t<\/var> have the same index.\n     */\n    public void putAll(Map<?,?> t) {\n\n        // if t is null or empty, just return\n        //\n        if ( (t == null) || (t.size() == 0) ) {\n            return;\n        }\n\n        // Convert the values in t into an array of <tt>CompositeData<\/tt>\n        //\n        CompositeData[] values;\n        try {\n            values =\n                t.values().toArray(new CompositeData[t.size()]);\n        } catch (java.lang.ArrayStoreException e) {\n            throw new ClassCastException(\"Map argument t contains values which are not instances of <tt>CompositeData<\/tt>\");\n        }\n\n        // Add the array of values\n        //\n        putAll(values);\n    }"}
{"Number":"1405","API Relative Path":"javax.management.openmbean.TabularDataSupport.java-remove(Object[])","Corresponding Source":"/**\n     * Removes the <tt>CompositeData<\/tt> value whose index is <var>key<\/var> from this <tt>TabularData<\/tt> instance,\n     * and returns the removed value, or returns <tt>null<\/tt> if there is no value whose index is <var>key<\/var>.\n     *\n     * @param  key  the index of the value to get in this <tt>TabularData<\/tt> instance;\n     *              must be valid with this <tt>TabularData<\/tt> instance's row type definition;\n     *              must not be null.\n     *\n     * @return previous value associated with specified key, or <tt>null<\/tt>\n     *         if there was no mapping for key.\n     *\n     * @throws NullPointerException  if the <var>key<\/var> is <tt>null<\/tt>\n     * @throws InvalidKeyException   if the <var>key<\/var> does not conform to this <tt>TabularData<\/tt> instance's\n     *                               <tt>TabularType<\/tt> definition\n     */\n    public CompositeData remove(Object[] key) {\n\n        // Check key is not null and valid with tabularType\n        // (throws NullPointerException, InvalidKeyException)\n        //\n        checkKeyType(key);\n\n        // Removes the (key, value) mapping in the parent HashMap\n        //\n        return dataMap.remove(Arrays.asList(key));\n    }"}
{"Number":"1406","API Relative Path":"javax.management.Query.java-isInstanceOf(StringValueExp)","Corresponding Source":"/**\n      * Returns a query expression that represents an inheritance constraint\n      * on an MBean class.\n      * <p>Example: to find MBeans that are instances of\n      * {@link NotificationBroadcaster}, use\n      * {@code Query.isInstanceOf(Query.value(NotificationBroadcaster.class.getName()))}.\n      * <\/p>\n      * <p>Evaluating this expression for a given\n      * <code>objectName<\/code> includes performing {@link\n      * MBeanServer#isInstanceOf MBeanServer.isInstanceOf(objectName,\n      * ((StringValueExp)classNameValue.apply(objectName)).getValue()}.<\/p>\n      *\n      * @param classNameValue The {@link StringValueExp} returning the name\n      *        of the class of which selected MBeans should be instances.\n      * @return a query expression that represents an inheritance\n      * constraint on an MBean class.  The returned object will be\n      * serialized as an instance of the non-public class\n      * <a href=\"../../serialized-form.html#javax.management.InstanceOfQueryExp\">\n      * javax.management.InstanceOfQueryExp<\/a>.\n      * @since 1.6\n      */\n     public static QueryExp isInstanceOf(StringValueExp classNameValue) {\n        return new InstanceOfQueryExp(classNameValue);\n     }"}
{"Number":"1407","API Relative Path":"javax.management.relation.RelationService.java-addRelation(ObjectName)","Corresponding Source":"/**\n     * Adds an MBean created by the user (and registered by him in the MBean\n     * Server) as a relation in the Relation Service.\n     * <P>To be added as a relation, the MBean must conform to the\n     * following:\n     * <P>- implement the Relation interface\n     * <P>- have for RelationService ObjectName the ObjectName of current\n     * Relation Service\n     * <P>- have a relation id unique and unused in current Relation Service\n     * <P>- have for relation type a relation type created in the Relation\n     * Service\n     * <P>- have roles conforming to the role info provided in the relation\n     * type.\n     *\n     * @param relationObjectName  ObjectName of the relation MBean to be added.\n     *\n     * @exception IllegalArgumentException  if null parameter\n     * @exception RelationServiceNotRegisteredException  if the Relation\n     * Service is not registered in the MBean Server\n     * @exception NoSuchMethodException  If the MBean does not implement the\n     * Relation interface\n     * @exception InvalidRelationIdException  if:\n     * <P>- no relation identifier in MBean\n     * <P>- the relation identifier is already used in the Relation Service\n     * @exception InstanceNotFoundException  if the MBean for given ObjectName\n     * has not been registered\n     * @exception InvalidRelationServiceException  if:\n     * <P>- no Relation Service name in MBean\n     * <P>- the Relation Service name in the MBean is not the one of the\n     * current Relation Service\n     * @exception RelationTypeNotFoundException  if:\n     * <P>- no relation type name in MBean\n     * <P>- the relation type name in MBean does not correspond to a relation\n     * type created in the Relation Service\n     * @exception InvalidRoleValueException  if:\n     * <P>- the number of referenced MBeans in a role is less than\n     * expected minimum degree\n     * <P>- the number of referenced MBeans in a role exceeds expected\n     * maximum degree\n     * <P>- one referenced MBean in the value is not an Object of the MBean\n     * class expected for that role\n     * <P>- an MBean provided for a role does not exist\n     * @exception RoleNotFoundException  if a value is provided for a role\n     * that does not exist in the relation type\n     */\n    public void addRelation(ObjectName relationObjectName)\n        throws IllegalArgumentException,\n               RelationServiceNotRegisteredException,\n               NoSuchMethodException,\n               InvalidRelationIdException,\n               InstanceNotFoundException,\n               InvalidRelationServiceException,\n               RelationTypeNotFoundException,\n               RoleNotFoundException,\n               InvalidRoleValueException {\n\n        if (relationObjectName == null) {\n            String excMsg = \"Invalid parameter.\";\n            throw new IllegalArgumentException(excMsg);\n        }\n\n        RELATION_LOGGER.entering(RelationService.class.getName(),\n                \"addRelation\", relationObjectName);\n\n        // Can throw RelationServiceNotRegisteredException\n        isActive();\n\n        // Checks that the relation MBean implements the Relation interface.\n        // It will also check that the provided ObjectName corresponds to a\n        // registered MBean (else will throw an InstanceNotFoundException)\n        if ((!(myMBeanServer.isInstanceOf(relationObjectName, \"javax.management.relation.Relation\")))) {\n            String excMsg = \"This MBean does not implement the Relation interface.\";\n            throw new NoSuchMethodException(excMsg);\n        }\n        // Checks there is a relation id in the relation MBean (its uniqueness\n        // is checked in addRelationInt())\n        // Can throw InstanceNotFoundException (but detected above)\n        // No MBeanException as no exception raised by this method, and no\n        // ReflectionException\n        String relId;\n        try {\n            relId = (String)(myMBeanServer.getAttribute(relationObjectName,\n                                                        \"RelationId\"));\n\n        } catch (MBeanException exc1) {\n            throw new RuntimeException(\n                                     (exc1.getTargetException()).getMessage());\n        } catch (ReflectionException exc2) {\n            throw new RuntimeException(exc2.getMessage());\n        } catch (AttributeNotFoundException exc3) {\n            throw new RuntimeException(exc3.getMessage());\n        }\n\n        if (relId == null) {\n            String excMsg = \"This MBean does not provide a relation id.\";\n            throw new InvalidRelationIdException(excMsg);\n        }\n        // Checks that the Relation Service where the relation MBean is\n        // expected to be added is the current one\n        // Can throw InstanceNotFoundException (but detected above)\n        // No MBeanException as no exception raised by this method, no\n        // ReflectionException\n        ObjectName relServObjName;\n        try {\n            relServObjName = (ObjectName)\n                (myMBeanServer.getAttribute(relationObjectName,\n                                            \"RelationServiceName\"));\n\n        } catch (MBeanException exc1) {\n            throw new RuntimeException(\n                                     (exc1.getTargetException()).getMessage());\n        } catch (ReflectionException exc2) {\n            throw new RuntimeException(exc2.getMessage());\n        } catch (AttributeNotFoundException exc3) {\n            throw new RuntimeException(exc3.getMessage());\n        }\n\n        boolean badRelServFlag = false;\n        if (relServObjName == null) {\n            badRelServFlag = true;\n\n        } else if (!(relServObjName.equals(myObjName))) {\n            badRelServFlag = true;\n        }\n        if (badRelServFlag) {\n            String excMsg = \"The Relation Service referenced in the MBean is not the current one.\";\n            throw new InvalidRelationServiceException(excMsg);\n        }\n        // Checks that a relation type has been specified for the relation\n        // Can throw InstanceNotFoundException (but detected above)\n        // No MBeanException as no exception raised by this method, no\n        // ReflectionException\n        String relTypeName;\n        try {\n            relTypeName = (String)(myMBeanServer.getAttribute(relationObjectName,\n                                                              \"RelationTypeName\"));\n\n        } catch (MBeanException exc1) {\n            throw new RuntimeException(\n                                     (exc1.getTargetException()).getMessage());\n        }catch (ReflectionException exc2) {\n            throw new RuntimeException(exc2.getMessage());\n        } catch (AttributeNotFoundException exc3) {\n            throw new RuntimeException(exc3.getMessage());\n        }\n        if (relTypeName == null) {\n            String excMsg = \"No relation type provided.\";\n            throw new RelationTypeNotFoundException(excMsg);\n        }\n        // Retrieves all roles without considering read mode\n        // Can throw InstanceNotFoundException (but detected above)\n        // No MBeanException as no exception raised by this method, no\n        // ReflectionException\n        RoleList roleList;\n        try {\n            roleList = (RoleList)(myMBeanServer.invoke(relationObjectName,\n                                                       \"retrieveAllRoles\",\n                                                       null,\n                                                       null));\n        } catch (MBeanException exc1) {\n            throw new RuntimeException(\n                                     (exc1.getTargetException()).getMessage());\n        } catch (ReflectionException exc2) {\n            throw new RuntimeException(exc2.getMessage());\n        }\n\n        // Can throw RoleNotFoundException, InvalidRelationIdException,\n        // RelationTypeNotFoundException, InvalidRoleValueException\n        addRelationInt(false,\n                       null,\n                       relationObjectName,\n                       relId,\n                       relTypeName,\n                       roleList);\n        // Adds relation MBean ObjectName in map\n        synchronized(myRelMBeanObjName2RelIdMap) {\n            myRelMBeanObjName2RelIdMap.put(relationObjectName, relId);\n        }\n\n        // Updates flag to specify that the relation is managed by the Relation\n        // Service\n        // This flag and setter are inherited from RelationSupport and not parts\n        // of the Relation interface, so may be not supported.\n        try {\n            myMBeanServer.setAttribute(relationObjectName,\n                                       new Attribute(\n                                         \"RelationServiceManagementFlag\",\n                                         Boolean.TRUE));\n        } catch (Exception exc) {\n            // OK : The flag is not supported.\n        }\n\n        // Updates listener information to received notification for\n        // unregistration of this MBean\n        List<ObjectName> newRefList = new ArrayList<ObjectName>();\n        newRefList.add(relationObjectName);\n        updateUnregistrationListener(newRefList, null);\n\n        RELATION_LOGGER.exiting(RelationService.class.getName(),\n                \"addRelation\");\n        return;\n    }"}
{"Number":"1408","API Relative Path":"javax.management.relation.RelationService.java-addRelation(ObjectName)","Corresponding Source":"/**\n     * Adds an MBean created by the user (and registered by him in the MBean\n     * Server) as a relation in the Relation Service.\n     * <P>To be added as a relation, the MBean must conform to the\n     * following:\n     * <P>- implement the Relation interface\n     * <P>- have for RelationService ObjectName the ObjectName of current\n     * Relation Service\n     * <P>- have a relation id unique and unused in current Relation Service\n     * <P>- have for relation type a relation type created in the Relation\n     * Service\n     * <P>- have roles conforming to the role info provided in the relation\n     * type.\n     *\n     * @param relationObjectName  ObjectName of the relation MBean to be added.\n     *\n     * @exception IllegalArgumentException  if null parameter\n     * @exception RelationServiceNotRegisteredException  if the Relation\n     * Service is not registered in the MBean Server\n     * @exception NoSuchMethodException  If the MBean does not implement the\n     * Relation interface\n     * @exception InvalidRelationIdException  if:\n     * <P>- no relation identifier in MBean\n     * <P>- the relation identifier is already used in the Relation Service\n     * @exception InstanceNotFoundException  if the MBean for given ObjectName\n     * has not been registered\n     * @exception InvalidRelationServiceException  if:\n     * <P>- no Relation Service name in MBean\n     * <P>- the Relation Service name in the MBean is not the one of the\n     * current Relation Service\n     * @exception RelationTypeNotFoundException  if:\n     * <P>- no relation type name in MBean\n     * <P>- the relation type name in MBean does not correspond to a relation\n     * type created in the Relation Service\n     * @exception InvalidRoleValueException  if:\n     * <P>- the number of referenced MBeans in a role is less than\n     * expected minimum degree\n     * <P>- the number of referenced MBeans in a role exceeds expected\n     * maximum degree\n     * <P>- one referenced MBean in the value is not an Object of the MBean\n     * class expected for that role\n     * <P>- an MBean provided for a role does not exist\n     * @exception RoleNotFoundException  if a value is provided for a role\n     * that does not exist in the relation type\n     */\n    public void addRelation(ObjectName relationObjectName)\n        throws IllegalArgumentException,\n               RelationServiceNotRegisteredException,\n               NoSuchMethodException,\n               InvalidRelationIdException,\n               InstanceNotFoundException,\n               InvalidRelationServiceException,\n               RelationTypeNotFoundException,\n               RoleNotFoundException,\n               InvalidRoleValueException {\n\n        if (relationObjectName == null) {\n            String excMsg = \"Invalid parameter.\";\n            throw new IllegalArgumentException(excMsg);\n        }\n\n        RELATION_LOGGER.entering(RelationService.class.getName(),\n                \"addRelation\", relationObjectName);\n\n        // Can throw RelationServiceNotRegisteredException\n        isActive();\n\n        // Checks that the relation MBean implements the Relation interface.\n        // It will also check that the provided ObjectName corresponds to a\n        // registered MBean (else will throw an InstanceNotFoundException)\n        if ((!(myMBeanServer.isInstanceOf(relationObjectName, \"javax.management.relation.Relation\")))) {\n            String excMsg = \"This MBean does not implement the Relation interface.\";\n            throw new NoSuchMethodException(excMsg);\n        }\n        // Checks there is a relation id in the relation MBean (its uniqueness\n        // is checked in addRelationInt())\n        // Can throw InstanceNotFoundException (but detected above)\n        // No MBeanException as no exception raised by this method, and no\n        // ReflectionException\n        String relId;\n        try {\n            relId = (String)(myMBeanServer.getAttribute(relationObjectName,\n                                                        \"RelationId\"));\n\n        } catch (MBeanException exc1) {\n            throw new RuntimeException(\n                                     (exc1.getTargetException()).getMessage());\n        } catch (ReflectionException exc2) {\n            throw new RuntimeException(exc2.getMessage());\n        } catch (AttributeNotFoundException exc3) {\n            throw new RuntimeException(exc3.getMessage());\n        }\n\n        if (relId == null) {\n            String excMsg = \"This MBean does not provide a relation id.\";\n            throw new InvalidRelationIdException(excMsg);\n        }\n        // Checks that the Relation Service where the relation MBean is\n        // expected to be added is the current one\n        // Can throw InstanceNotFoundException (but detected above)\n        // No MBeanException as no exception raised by this method, no\n        // ReflectionException\n        ObjectName relServObjName;\n        try {\n            relServObjName = (ObjectName)\n                (myMBeanServer.getAttribute(relationObjectName,\n                                            \"RelationServiceName\"));\n\n        } catch (MBeanException exc1) {\n            throw new RuntimeException(\n                                     (exc1.getTargetException()).getMessage());\n        } catch (ReflectionException exc2) {\n            throw new RuntimeException(exc2.getMessage());\n        } catch (AttributeNotFoundException exc3) {\n            throw new RuntimeException(exc3.getMessage());\n        }\n\n        boolean badRelServFlag = false;\n        if (relServObjName == null) {\n            badRelServFlag = true;\n\n        } else if (!(relServObjName.equals(myObjName))) {\n            badRelServFlag = true;\n        }\n        if (badRelServFlag) {\n            String excMsg = \"The Relation Service referenced in the MBean is not the current one.\";\n            throw new InvalidRelationServiceException(excMsg);\n        }\n        // Checks that a relation type has been specified for the relation\n        // Can throw InstanceNotFoundException (but detected above)\n        // No MBeanException as no exception raised by this method, no\n        // ReflectionException\n        String relTypeName;\n        try {\n            relTypeName = (String)(myMBeanServer.getAttribute(relationObjectName,\n                                                              \"RelationTypeName\"));\n\n        } catch (MBeanException exc1) {\n            throw new RuntimeException(\n                                     (exc1.getTargetException()).getMessage());\n        }catch (ReflectionException exc2) {\n            throw new RuntimeException(exc2.getMessage());\n        } catch (AttributeNotFoundException exc3) {\n            throw new RuntimeException(exc3.getMessage());\n        }\n        if (relTypeName == null) {\n            String excMsg = \"No relation type provided.\";\n            throw new RelationTypeNotFoundException(excMsg);\n        }\n        // Retrieves all roles without considering read mode\n        // Can throw InstanceNotFoundException (but detected above)\n        // No MBeanException as no exception raised by this method, no\n        // ReflectionException\n        RoleList roleList;\n        try {\n            roleList = (RoleList)(myMBeanServer.invoke(relationObjectName,\n                                                       \"retrieveAllRoles\",\n                                                       null,\n                                                       null));\n        } catch (MBeanException exc1) {\n            throw new RuntimeException(\n                                     (exc1.getTargetException()).getMessage());\n        } catch (ReflectionException exc2) {\n            throw new RuntimeException(exc2.getMessage());\n        }\n\n        // Can throw RoleNotFoundException, InvalidRelationIdException,\n        // RelationTypeNotFoundException, InvalidRoleValueException\n        addRelationInt(false,\n                       null,\n                       relationObjectName,\n                       relId,\n                       relTypeName,\n                       roleList);\n        // Adds relation MBean ObjectName in map\n        synchronized(myRelMBeanObjName2RelIdMap) {\n            myRelMBeanObjName2RelIdMap.put(relationObjectName, relId);\n        }\n\n        // Updates flag to specify that the relation is managed by the Relation\n        // Service\n        // This flag and setter are inherited from RelationSupport and not parts\n        // of the Relation interface, so may be not supported.\n        try {\n            myMBeanServer.setAttribute(relationObjectName,\n                                       new Attribute(\n                                         \"RelationServiceManagementFlag\",\n                                         Boolean.TRUE));\n        } catch (Exception exc) {\n            // OK : The flag is not supported.\n        }\n\n        // Updates listener information to received notification for\n        // unregistration of this MBean\n        List<ObjectName> newRefList = new ArrayList<ObjectName>();\n        newRefList.add(relationObjectName);\n        updateUnregistrationListener(newRefList, null);\n\n        RELATION_LOGGER.exiting(RelationService.class.getName(),\n                \"addRelation\");\n        return;\n    }"}
{"Number":"1409","API Relative Path":"javax.management.relation.RelationService.java-addRelation(ObjectName)","Corresponding Source":"/**\n     * Adds an MBean created by the user (and registered by him in the MBean\n     * Server) as a relation in the Relation Service.\n     * <P>To be added as a relation, the MBean must conform to the\n     * following:\n     * <P>- implement the Relation interface\n     * <P>- have for RelationService ObjectName the ObjectName of current\n     * Relation Service\n     * <P>- have a relation id unique and unused in current Relation Service\n     * <P>- have for relation type a relation type created in the Relation\n     * Service\n     * <P>- have roles conforming to the role info provided in the relation\n     * type.\n     *\n     * @param relationObjectName  ObjectName of the relation MBean to be added.\n     *\n     * @exception IllegalArgumentException  if null parameter\n     * @exception RelationServiceNotRegisteredException  if the Relation\n     * Service is not registered in the MBean Server\n     * @exception NoSuchMethodException  If the MBean does not implement the\n     * Relation interface\n     * @exception InvalidRelationIdException  if:\n     * <P>- no relation identifier in MBean\n     * <P>- the relation identifier is already used in the Relation Service\n     * @exception InstanceNotFoundException  if the MBean for given ObjectName\n     * has not been registered\n     * @exception InvalidRelationServiceException  if:\n     * <P>- no Relation Service name in MBean\n     * <P>- the Relation Service name in the MBean is not the one of the\n     * current Relation Service\n     * @exception RelationTypeNotFoundException  if:\n     * <P>- no relation type name in MBean\n     * <P>- the relation type name in MBean does not correspond to a relation\n     * type created in the Relation Service\n     * @exception InvalidRoleValueException  if:\n     * <P>- the number of referenced MBeans in a role is less than\n     * expected minimum degree\n     * <P>- the number of referenced MBeans in a role exceeds expected\n     * maximum degree\n     * <P>- one referenced MBean in the value is not an Object of the MBean\n     * class expected for that role\n     * <P>- an MBean provided for a role does not exist\n     * @exception RoleNotFoundException  if a value is provided for a role\n     * that does not exist in the relation type\n     */\n    public void addRelation(ObjectName relationObjectName)\n        throws IllegalArgumentException,\n               RelationServiceNotRegisteredException,\n               NoSuchMethodException,\n               InvalidRelationIdException,\n               InstanceNotFoundException,\n               InvalidRelationServiceException,\n               RelationTypeNotFoundException,\n               RoleNotFoundException,\n               InvalidRoleValueException {\n\n        if (relationObjectName == null) {\n            String excMsg = \"Invalid parameter.\";\n            throw new IllegalArgumentException(excMsg);\n        }\n\n        RELATION_LOGGER.entering(RelationService.class.getName(),\n                \"addRelation\", relationObjectName);\n\n        // Can throw RelationServiceNotRegisteredException\n        isActive();\n\n        // Checks that the relation MBean implements the Relation interface.\n        // It will also check that the provided ObjectName corresponds to a\n        // registered MBean (else will throw an InstanceNotFoundException)\n        if ((!(myMBeanServer.isInstanceOf(relationObjectName, \"javax.management.relation.Relation\")))) {\n            String excMsg = \"This MBean does not implement the Relation interface.\";\n            throw new NoSuchMethodException(excMsg);\n        }\n        // Checks there is a relation id in the relation MBean (its uniqueness\n        // is checked in addRelationInt())\n        // Can throw InstanceNotFoundException (but detected above)\n        // No MBeanException as no exception raised by this method, and no\n        // ReflectionException\n        String relId;\n        try {\n            relId = (String)(myMBeanServer.getAttribute(relationObjectName,\n                                                        \"RelationId\"));\n\n        } catch (MBeanException exc1) {\n            throw new RuntimeException(\n                                     (exc1.getTargetException()).getMessage());\n        } catch (ReflectionException exc2) {\n            throw new RuntimeException(exc2.getMessage());\n        } catch (AttributeNotFoundException exc3) {\n            throw new RuntimeException(exc3.getMessage());\n        }\n\n        if (relId == null) {\n            String excMsg = \"This MBean does not provide a relation id.\";\n            throw new InvalidRelationIdException(excMsg);\n        }\n        // Checks that the Relation Service where the relation MBean is\n        // expected to be added is the current one\n        // Can throw InstanceNotFoundException (but detected above)\n        // No MBeanException as no exception raised by this method, no\n        // ReflectionException\n        ObjectName relServObjName;\n        try {\n            relServObjName = (ObjectName)\n                (myMBeanServer.getAttribute(relationObjectName,\n                                            \"RelationServiceName\"));\n\n        } catch (MBeanException exc1) {\n            throw new RuntimeException(\n                                     (exc1.getTargetException()).getMessage());\n        } catch (ReflectionException exc2) {\n            throw new RuntimeException(exc2.getMessage());\n        } catch (AttributeNotFoundException exc3) {\n            throw new RuntimeException(exc3.getMessage());\n        }\n\n        boolean badRelServFlag = false;\n        if (relServObjName == null) {\n            badRelServFlag = true;\n\n        } else if (!(relServObjName.equals(myObjName))) {\n            badRelServFlag = true;\n        }\n        if (badRelServFlag) {\n            String excMsg = \"The Relation Service referenced in the MBean is not the current one.\";\n            throw new InvalidRelationServiceException(excMsg);\n        }\n        // Checks that a relation type has been specified for the relation\n        // Can throw InstanceNotFoundException (but detected above)\n        // No MBeanException as no exception raised by this method, no\n        // ReflectionException\n        String relTypeName;\n        try {\n            relTypeName = (String)(myMBeanServer.getAttribute(relationObjectName,\n                                                              \"RelationTypeName\"));\n\n        } catch (MBeanException exc1) {\n            throw new RuntimeException(\n                                     (exc1.getTargetException()).getMessage());\n        }catch (ReflectionException exc2) {\n            throw new RuntimeException(exc2.getMessage());\n        } catch (AttributeNotFoundException exc3) {\n            throw new RuntimeException(exc3.getMessage());\n        }\n        if (relTypeName == null) {\n            String excMsg = \"No relation type provided.\";\n            throw new RelationTypeNotFoundException(excMsg);\n        }\n        // Retrieves all roles without considering read mode\n        // Can throw InstanceNotFoundException (but detected above)\n        // No MBeanException as no exception raised by this method, no\n        // ReflectionException\n        RoleList roleList;\n        try {\n            roleList = (RoleList)(myMBeanServer.invoke(relationObjectName,\n                                                       \"retrieveAllRoles\",\n                                                       null,\n                                                       null));\n        } catch (MBeanException exc1) {\n            throw new RuntimeException(\n                                     (exc1.getTargetException()).getMessage());\n        } catch (ReflectionException exc2) {\n            throw new RuntimeException(exc2.getMessage());\n        }\n\n        // Can throw RoleNotFoundException, InvalidRelationIdException,\n        // RelationTypeNotFoundException, InvalidRoleValueException\n        addRelationInt(false,\n                       null,\n                       relationObjectName,\n                       relId,\n                       relTypeName,\n                       roleList);\n        // Adds relation MBean ObjectName in map\n        synchronized(myRelMBeanObjName2RelIdMap) {\n            myRelMBeanObjName2RelIdMap.put(relationObjectName, relId);\n        }\n\n        // Updates flag to specify that the relation is managed by the Relation\n        // Service\n        // This flag and setter are inherited from RelationSupport and not parts\n        // of the Relation interface, so may be not supported.\n        try {\n            myMBeanServer.setAttribute(relationObjectName,\n                                       new Attribute(\n                                         \"RelationServiceManagementFlag\",\n                                         Boolean.TRUE));\n        } catch (Exception exc) {\n            // OK : The flag is not supported.\n        }\n\n        // Updates listener information to received notification for\n        // unregistration of this MBean\n        List<ObjectName> newRefList = new ArrayList<ObjectName>();\n        newRefList.add(relationObjectName);\n        updateUnregistrationListener(newRefList, null);\n\n        RELATION_LOGGER.exiting(RelationService.class.getName(),\n                \"addRelation\");\n        return;\n    }"}
{"Number":"1410","API Relative Path":"javax.management.relation.RelationService.java-createRelation(String-String-RoleList)","Corresponding Source":"//\n    // Relation handling\n    //\n\n    /**\n     * Creates a simple relation (represented by a RelationSupport object) of\n     * given relation type, and adds it in the Relation Service.\n     * <P>Roles are initialized according to the role list provided in\n     * parameter. The ones not initialized in this way are set to an empty\n     * ArrayList of ObjectNames.\n     * <P>A RelationNotification, with type RELATION_BASIC_CREATION, is sent.\n     *\n     * @param relationId  relation identifier, to identify uniquely the relation\n     * inside the Relation Service\n     * @param relationTypeName  name of the relation type (has to be created\n     * in the Relation Service)\n     * @param roleList  role list to initialize roles of the relation (can\n     * be null).\n     *\n     * @exception RelationServiceNotRegisteredException  if the Relation\n     * Service is not registered in the MBean Server\n     * @exception IllegalArgumentException  if null parameter, except the role\n     * list which can be null if no role initialization\n     * @exception RoleNotFoundException  if a value is provided for a role\n     * that does not exist in the relation type\n     * @exception InvalidRelationIdException  if relation id already used\n     * @exception RelationTypeNotFoundException  if relation type not known in\n     * Relation Service\n     * @exception InvalidRoleValueException if:\n     * <P>- the same role name is used for two different roles\n     * <P>- the number of referenced MBeans in given value is less than\n     * expected minimum degree\n     * <P>- the number of referenced MBeans in provided value exceeds expected\n     * maximum degree\n     * <P>- one referenced MBean in the value is not an Object of the MBean\n     * class expected for that role\n     * <P>- an MBean provided for that role does not exist\n     */\n    public void createRelation(String relationId,\n                               String relationTypeName,\n                               RoleList roleList)\n        throws RelationServiceNotRegisteredException,\n               IllegalArgumentException,\n               RoleNotFoundException,\n               InvalidRelationIdException,\n               RelationTypeNotFoundException,\n               InvalidRoleValueException {\n\n        // Can throw RelationServiceNotRegisteredException\n        isActive();\n\n        if (relationId == null ||\n            relationTypeName == null) {\n            String excMsg = \"Invalid parameter.\";\n            throw new IllegalArgumentException(excMsg);\n        }\n\n        RELATION_LOGGER.entering(RelationService.class.getName(),\n                \"createRelation\",\n                new Object[] {relationId, relationTypeName, roleList});\n\n        // Creates RelationSupport object\n        // Can throw InvalidRoleValueException\n        RelationSupport relObj = new RelationSupport(relationId,\n                                               myObjName,\n                                               relationTypeName,\n                                               roleList);\n\n        // Adds relation object as a relation into the Relation Service\n        // Can throw RoleNotFoundException, InvalidRelationId,\n        // RelationTypeNotFoundException, InvalidRoleValueException\n        //\n        // Cannot throw MBeanException\n        addRelationInt(true,\n                       relObj,\n                       null,\n                       relationId,\n                       relationTypeName,\n                       roleList);\n        RELATION_LOGGER.exiting(RelationService.class.getName(),\n                \"createRelation\");\n        return;\n    }"}
{"Number":"1411","API Relative Path":"javax.management.relation.RelationService.java-createRelationType(String-RoleInfo[])","Corresponding Source":"//\n    // Relation type handling\n    //\n\n    /**\n     * Creates a relation type (a RelationTypeSupport object) with given\n     * role infos (provided by the RoleInfo objects), and adds it in the\n     * Relation Service.\n     *\n     * @param relationTypeName  name of the relation type\n     * @param roleInfoArray  array of role infos\n     *\n     * @exception IllegalArgumentException  if null parameter\n     * @exception InvalidRelationTypeException  If:\n     * <P>- there is already a relation type with that name\n     * <P>- the same name has been used for two different role infos\n     * <P>- no role info provided\n     * <P>- one null role info provided\n     */\n    public void createRelationType(String relationTypeName,\n                                   RoleInfo[] roleInfoArray)\n        throws IllegalArgumentException,\n               InvalidRelationTypeException {\n\n        if (relationTypeName == null || roleInfoArray == null) {\n            String excMsg = \"Invalid parameter.\";\n            throw new IllegalArgumentException(excMsg);\n        }\n\n        RELATION_LOGGER.entering(RelationService.class.getName(),\n                \"createRelationType\", relationTypeName);\n\n        // Can throw an InvalidRelationTypeException\n        RelationType relType =\n            new RelationTypeSupport(relationTypeName, roleInfoArray);\n\n        addRelationTypeInt(relType);\n\n        RELATION_LOGGER.exiting(RelationService.class.getName(),\n                \"createRelationType\");\n        return;\n    }"}
{"Number":"1412","API Relative Path":"javax.management.relation.RelationService.java-handleNotification(Notification-Object)","Corresponding Source":"//\n    // NotificationListener Interface\n    //\n\n    /**\n     * Invoked when a JMX notification occurs.\n     * Currently handles notifications for unregistration of MBeans, either\n     * referenced in a relation role or being a relation itself.\n     *\n     * @param notif  The notification.\n     * @param handback  An opaque object which helps the listener to\n     * associate information regarding the MBean emitter (can be null).\n     */\n    public void handleNotification(Notification notif,\n                                   Object handback) {\n\n        if (notif == null) {\n            String excMsg = \"Invalid parameter.\";\n            throw new IllegalArgumentException(excMsg);\n        }\n\n        RELATION_LOGGER.entering(RelationService.class.getName(),\n                \"handleNotification\", notif);\n\n        if (notif instanceof MBeanServerNotification) {\n\n            MBeanServerNotification mbsNtf = (MBeanServerNotification) notif;\n            String ntfType = notif.getType();\n\n            if (ntfType.equals(\n                       MBeanServerNotification.UNREGISTRATION_NOTIFICATION )) {\n                ObjectName mbeanName =\n                    ((MBeanServerNotification)notif).getMBeanName();\n\n                // Note: use a flag to block access to\n                // myRefedMBeanObjName2RelIdsMap only for a quick access\n                boolean isRefedMBeanFlag = false;\n                synchronized(myRefedMBeanObjName2RelIdsMap) {\n\n                    if (myRefedMBeanObjName2RelIdsMap.containsKey(mbeanName)) {\n                        // Unregistration of a referenced MBean\n                        synchronized(myUnregNtfList) {\n                            myUnregNtfList.add(mbsNtf);\n                        }\n                        isRefedMBeanFlag = true;\n                    }\n                    if (isRefedMBeanFlag && myPurgeFlag) {\n                        // Immediate purge\n                        // Can throw RelationServiceNotRegisteredException\n                        // but assume that will be fine :)\n                        try {\n                            purgeRelations();\n                        } catch (Exception exc) {\n                            throw new RuntimeException(exc.getMessage());\n                        }\n                    }\n                }\n\n                // Note: do both tests as a relation can be an MBean and be\n                //       itself referenced in another relation :)\n                String relId;\n                synchronized(myRelMBeanObjName2RelIdMap){\n                    relId = myRelMBeanObjName2RelIdMap.get(mbeanName);\n                }\n                if (relId != null) {\n                    // Unregistration of a relation MBean\n                    // Can throw RelationTypeNotFoundException,\n                    // RelationServiceNotRegisteredException\n                    //\n                    // Shall not throw RelationTypeNotFoundException or\n                    // InstanceNotFoundException\n                    try {\n                        removeRelation(relId);\n                    } catch (Exception exc) {\n                        throw new RuntimeException(exc.getMessage());\n                    }\n                }\n            }\n        }\n\n        RELATION_LOGGER.exiting(RelationService.class.getName(),\n                \"handleNotification\");\n        return;\n    }"}
{"Number":"1413","API Relative Path":"javax.management.relation.RelationService.java-handleNotification(Notification-Object)","Corresponding Source":"//\n    // NotificationListener Interface\n    //\n\n    /**\n     * Invoked when a JMX notification occurs.\n     * Currently handles notifications for unregistration of MBeans, either\n     * referenced in a relation role or being a relation itself.\n     *\n     * @param notif  The notification.\n     * @param handback  An opaque object which helps the listener to\n     * associate information regarding the MBean emitter (can be null).\n     */\n    public void handleNotification(Notification notif,\n                                   Object handback) {\n\n        if (notif == null) {\n            String excMsg = \"Invalid parameter.\";\n            throw new IllegalArgumentException(excMsg);\n        }\n\n        RELATION_LOGGER.entering(RelationService.class.getName(),\n                \"handleNotification\", notif);\n\n        if (notif instanceof MBeanServerNotification) {\n\n            MBeanServerNotification mbsNtf = (MBeanServerNotification) notif;\n            String ntfType = notif.getType();\n\n            if (ntfType.equals(\n                       MBeanServerNotification.UNREGISTRATION_NOTIFICATION )) {\n                ObjectName mbeanName =\n                    ((MBeanServerNotification)notif).getMBeanName();\n\n                // Note: use a flag to block access to\n                // myRefedMBeanObjName2RelIdsMap only for a quick access\n                boolean isRefedMBeanFlag = false;\n                synchronized(myRefedMBeanObjName2RelIdsMap) {\n\n                    if (myRefedMBeanObjName2RelIdsMap.containsKey(mbeanName)) {\n                        // Unregistration of a referenced MBean\n                        synchronized(myUnregNtfList) {\n                            myUnregNtfList.add(mbsNtf);\n                        }\n                        isRefedMBeanFlag = true;\n                    }\n                    if (isRefedMBeanFlag && myPurgeFlag) {\n                        // Immediate purge\n                        // Can throw RelationServiceNotRegisteredException\n                        // but assume that will be fine :)\n                        try {\n                            purgeRelations();\n                        } catch (Exception exc) {\n                            throw new RuntimeException(exc.getMessage());\n                        }\n                    }\n                }\n\n                // Note: do both tests as a relation can be an MBean and be\n                //       itself referenced in another relation :)\n                String relId;\n                synchronized(myRelMBeanObjName2RelIdMap){\n                    relId = myRelMBeanObjName2RelIdMap.get(mbeanName);\n                }\n                if (relId != null) {\n                    // Unregistration of a relation MBean\n                    // Can throw RelationTypeNotFoundException,\n                    // RelationServiceNotRegisteredException\n                    //\n                    // Shall not throw RelationTypeNotFoundException or\n                    // InstanceNotFoundException\n                    try {\n                        removeRelation(relId);\n                    } catch (Exception exc) {\n                        throw new RuntimeException(exc.getMessage());\n                    }\n                }\n            }\n        }\n\n        RELATION_LOGGER.exiting(RelationService.class.getName(),\n                \"handleNotification\");\n        return;\n    }"}
{"Number":"1414","API Relative Path":"javax.management.relation.RelationService.java-handleNotification(Notification-Object)","Corresponding Source":"//\n    // NotificationListener Interface\n    //\n\n    /**\n     * Invoked when a JMX notification occurs.\n     * Currently handles notifications for unregistration of MBeans, either\n     * referenced in a relation role or being a relation itself.\n     *\n     * @param notif  The notification.\n     * @param handback  An opaque object which helps the listener to\n     * associate information regarding the MBean emitter (can be null).\n     */\n    public void handleNotification(Notification notif,\n                                   Object handback) {\n\n        if (notif == null) {\n            String excMsg = \"Invalid parameter.\";\n            throw new IllegalArgumentException(excMsg);\n        }\n\n        RELATION_LOGGER.entering(RelationService.class.getName(),\n                \"handleNotification\", notif);\n\n        if (notif instanceof MBeanServerNotification) {\n\n            MBeanServerNotification mbsNtf = (MBeanServerNotification) notif;\n            String ntfType = notif.getType();\n\n            if (ntfType.equals(\n                       MBeanServerNotification.UNREGISTRATION_NOTIFICATION )) {\n                ObjectName mbeanName =\n                    ((MBeanServerNotification)notif).getMBeanName();\n\n                // Note: use a flag to block access to\n                // myRefedMBeanObjName2RelIdsMap only for a quick access\n                boolean isRefedMBeanFlag = false;\n                synchronized(myRefedMBeanObjName2RelIdsMap) {\n\n                    if (myRefedMBeanObjName2RelIdsMap.containsKey(mbeanName)) {\n                        // Unregistration of a referenced MBean\n                        synchronized(myUnregNtfList) {\n                            myUnregNtfList.add(mbsNtf);\n                        }\n                        isRefedMBeanFlag = true;\n                    }\n                    if (isRefedMBeanFlag && myPurgeFlag) {\n                        // Immediate purge\n                        // Can throw RelationServiceNotRegisteredException\n                        // but assume that will be fine :)\n                        try {\n                            purgeRelations();\n                        } catch (Exception exc) {\n                            throw new RuntimeException(exc.getMessage());\n                        }\n                    }\n                }\n\n                // Note: do both tests as a relation can be an MBean and be\n                //       itself referenced in another relation :)\n                String relId;\n                synchronized(myRelMBeanObjName2RelIdMap){\n                    relId = myRelMBeanObjName2RelIdMap.get(mbeanName);\n                }\n                if (relId != null) {\n                    // Unregistration of a relation MBean\n                    // Can throw RelationTypeNotFoundException,\n                    // RelationServiceNotRegisteredException\n                    //\n                    // Shall not throw RelationTypeNotFoundException or\n                    // InstanceNotFoundException\n                    try {\n                        removeRelation(relId);\n                    } catch (Exception exc) {\n                        throw new RuntimeException(exc.getMessage());\n                    }\n                }\n            }\n        }\n\n        RELATION_LOGGER.exiting(RelationService.class.getName(),\n                \"handleNotification\");\n        return;\n    }"}
{"Number":"1415","API Relative Path":"javax.management.relation.RelationService.java-sendRelationRemovalNotification(String-List)","Corresponding Source":"/**\n     * Sends a notification (RelationNotification) for a relation removal.\n     * The notification type is:\n     * <P>- RelationNotification.RELATION_BASIC_REMOVAL if the relation is an\n     * object internal to the Relation Service\n     * <P>- RelationNotification.RELATION_MBEAN_REMOVAL if the relation is a\n     * MBean added as a relation.\n     * <P>The source object is the Relation Service itself.\n     * <P>It is called in Relation Service removeRelation() method.\n     *\n     * @param relationId  relation identifier of the updated relation\n     * @param unregMBeanList  List of ObjectNames of MBeans expected\n     * to be unregistered due to relation removal (can be null)\n     *\n     * @exception IllegalArgumentException  if null parameter\n     * @exception RelationNotFoundException  if there is no relation for given\n     * relation id\n     */\n    public void sendRelationRemovalNotification(String relationId,\n                                                List<ObjectName> unregMBeanList)\n        throws IllegalArgumentException,\n               RelationNotFoundException {\n\n        if (relationId == null) {\n            String excMsg = \"Invalid parameter\";\n            throw new IllegalArgumentException(excMsg);\n        }\n\n        RELATION_LOGGER.entering(RelationService.class.getName(),\n                \"sendRelationRemovalNotification\",\n                new Object[] {relationId, unregMBeanList});\n\n        // Can throw RelationNotFoundException\n        sendNotificationInt(3,\n                            \"Removal of relation \" + relationId,\n                            relationId,\n                            unregMBeanList,\n                            null,\n                            null,\n                            null);\n\n\n        RELATION_LOGGER.exiting(RelationService.class.getName(),\n                \"sendRelationRemovalNotification\");\n        return;\n    }"}
{"Number":"1416","API Relative Path":"javax.management.relation.RelationSupport.java-getRole(String)","Corresponding Source":"//\n    // Relation Interface\n    //\n\n    /**\n     * Retrieves role value for given role name.\n     * <P>Checks if the role exists and is readable according to the relation\n     * type.\n     *\n     * @param roleName  name of role\n     *\n     * @return the ArrayList of ObjectName objects being the role value\n     *\n     * @exception IllegalArgumentException  if null role name\n     * @exception RoleNotFoundException  if:\n     * <P>- there is no role with given name\n     * <P>- the role is not readable.\n     * @exception RelationServiceNotRegisteredException  if the Relation\n     * Service is not registered in the MBean Server\n     *\n     * @see #setRole\n     */\n    public List<ObjectName> getRole(String roleName)\n        throws IllegalArgumentException,\n               RoleNotFoundException,\n               RelationServiceNotRegisteredException {\n\n        if (roleName == null) {\n            String excMsg = \"Invalid parameter.\";\n            throw new IllegalArgumentException(excMsg);\n        }\n\n        RELATION_LOGGER.entering(RelationSupport.class.getName(),\n                \"getRole\", roleName);\n\n        // Can throw RoleNotFoundException and\n        // RelationServiceNotRegisteredException\n        List<ObjectName> result = cast(\n            getRoleInt(roleName, false, null, false));\n\n        RELATION_LOGGER.exiting(RelationSupport.class.getName(), \"getRole\");\n        return result;\n    }"}
{"Number":"1417","API Relative Path":"javax.management.relation.RelationSupport.java-getRole(String)","Corresponding Source":"//\n    // Relation Interface\n    //\n\n    /**\n     * Retrieves role value for given role name.\n     * <P>Checks if the role exists and is readable according to the relation\n     * type.\n     *\n     * @param roleName  name of role\n     *\n     * @return the ArrayList of ObjectName objects being the role value\n     *\n     * @exception IllegalArgumentException  if null role name\n     * @exception RoleNotFoundException  if:\n     * <P>- there is no role with given name\n     * <P>- the role is not readable.\n     * @exception RelationServiceNotRegisteredException  if the Relation\n     * Service is not registered in the MBean Server\n     *\n     * @see #setRole\n     */\n    public List<ObjectName> getRole(String roleName)\n        throws IllegalArgumentException,\n               RoleNotFoundException,\n               RelationServiceNotRegisteredException {\n\n        if (roleName == null) {\n            String excMsg = \"Invalid parameter.\";\n            throw new IllegalArgumentException(excMsg);\n        }\n\n        RELATION_LOGGER.entering(RelationSupport.class.getName(),\n                \"getRole\", roleName);\n\n        // Can throw RoleNotFoundException and\n        // RelationServiceNotRegisteredException\n        List<ObjectName> result = cast(\n            getRoleInt(roleName, false, null, false));\n\n        RELATION_LOGGER.exiting(RelationSupport.class.getName(), \"getRole\");\n        return result;\n    }"}
{"Number":"1418","API Relative Path":"javax.management.relation.RelationSupport.java-getRole(String)","Corresponding Source":"//\n    // Relation Interface\n    //\n\n    /**\n     * Retrieves role value for given role name.\n     * <P>Checks if the role exists and is readable according to the relation\n     * type.\n     *\n     * @param roleName  name of role\n     *\n     * @return the ArrayList of ObjectName objects being the role value\n     *\n     * @exception IllegalArgumentException  if null role name\n     * @exception RoleNotFoundException  if:\n     * <P>- there is no role with given name\n     * <P>- the role is not readable.\n     * @exception RelationServiceNotRegisteredException  if the Relation\n     * Service is not registered in the MBean Server\n     *\n     * @see #setRole\n     */\n    public List<ObjectName> getRole(String roleName)\n        throws IllegalArgumentException,\n               RoleNotFoundException,\n               RelationServiceNotRegisteredException {\n\n        if (roleName == null) {\n            String excMsg = \"Invalid parameter.\";\n            throw new IllegalArgumentException(excMsg);\n        }\n\n        RELATION_LOGGER.entering(RelationSupport.class.getName(),\n                \"getRole\", roleName);\n\n        // Can throw RoleNotFoundException and\n        // RelationServiceNotRegisteredException\n        List<ObjectName> result = cast(\n            getRoleInt(roleName, false, null, false));\n\n        RELATION_LOGGER.exiting(RelationSupport.class.getName(), \"getRole\");\n        return result;\n    }"}
{"Number":"1419","API Relative Path":"javax.management.relation.RelationSupport.java-getRole(String)","Corresponding Source":"//\n    // Relation Interface\n    //\n\n    /**\n     * Retrieves role value for given role name.\n     * <P>Checks if the role exists and is readable according to the relation\n     * type.\n     *\n     * @param roleName  name of role\n     *\n     * @return the ArrayList of ObjectName objects being the role value\n     *\n     * @exception IllegalArgumentException  if null role name\n     * @exception RoleNotFoundException  if:\n     * <P>- there is no role with given name\n     * <P>- the role is not readable.\n     * @exception RelationServiceNotRegisteredException  if the Relation\n     * Service is not registered in the MBean Server\n     *\n     * @see #setRole\n     */\n    public List<ObjectName> getRole(String roleName)\n        throws IllegalArgumentException,\n               RoleNotFoundException,\n               RelationServiceNotRegisteredException {\n\n        if (roleName == null) {\n            String excMsg = \"Invalid parameter.\";\n            throw new IllegalArgumentException(excMsg);\n        }\n\n        RELATION_LOGGER.entering(RelationSupport.class.getName(),\n                \"getRole\", roleName);\n\n        // Can throw RoleNotFoundException and\n        // RelationServiceNotRegisteredException\n        List<ObjectName> result = cast(\n            getRoleInt(roleName, false, null, false));\n\n        RELATION_LOGGER.exiting(RelationSupport.class.getName(), \"getRole\");\n        return result;\n    }"}
{"Number":"1420","API Relative Path":"javax.management.relation.RelationSupport.java-getRoleCardinality(String)","Corresponding Source":"/**\n     * Returns the number of MBeans currently referenced in the given role.\n     *\n     * @param roleName  name of role\n     *\n     * @return the number of currently referenced MBeans in that role\n     *\n     * @exception IllegalArgumentException  if null role name\n     * @exception RoleNotFoundException  if there is no role with given name\n     */\n    public Integer getRoleCardinality(String roleName)\n        throws IllegalArgumentException,\n               RoleNotFoundException {\n\n        if (roleName == null) {\n            String excMsg = \"Invalid parameter.\";\n            throw new IllegalArgumentException(excMsg);\n        }\n\n        RELATION_LOGGER.entering(RelationSupport.class.getName(),\n                \"getRoleCardinality\", roleName);\n\n        // Try to retrieve the role\n        Role role;\n        synchronized(myRoleName2ValueMap) {\n            // No null Role is allowed, so direct use of get()\n            role = (myRoleName2ValueMap.get(roleName));\n        }\n        if (role == null) {\n            int pbType = RoleStatus.NO_ROLE_WITH_NAME;\n            // Will throw a RoleNotFoundException\n            //\n            // Will not throw InvalidRoleValueException, so catch it for the\n            // compiler\n            try {\n                RelationService.throwRoleProblemException(pbType,\n                                                          roleName);\n            } catch (InvalidRoleValueException exc) {\n                // OK : Do not throw InvalidRoleValueException as\n                //      a RoleNotFoundException will be thrown.\n            }\n        }\n\n        List<ObjectName> roleValue = role.getRoleValue();\n\n        RELATION_LOGGER.exiting(RelationSupport.class.getName(),\n                \"getRoleCardinality\");\n        return roleValue.size();\n    }"}
{"Number":"1421","API Relative Path":"javax.management.relation.RelationSupport.java-getRoles(String[])","Corresponding Source":"/**\n     * Retrieves values of roles with given names.\n     * <P>Checks for each role if it exists and is readable according to the\n     * relation type.\n     *\n     * @param roleNameArray  array of names of roles to be retrieved\n     *\n     * @return a RoleResult object, including a RoleList (for roles\n     * successfully retrieved) and a RoleUnresolvedList (for roles not\n     * retrieved).\n     *\n     * @exception IllegalArgumentException  if null role name\n     * @exception RelationServiceNotRegisteredException  if the Relation\n     * Service is not registered in the MBean Server\n     *\n     * @see #setRoles\n     */\n    public RoleResult getRoles(String[] roleNameArray)\n        throws IllegalArgumentException,\n               RelationServiceNotRegisteredException {\n\n        if (roleNameArray == null) {\n            String excMsg = \"Invalid parameter.\";\n            throw new IllegalArgumentException(excMsg);\n        }\n\n        RELATION_LOGGER.entering(RelationSupport.class.getName(), \"getRoles\");\n\n        // Can throw RelationServiceNotRegisteredException\n        RoleResult result = getRolesInt(roleNameArray, false, null);\n\n        RELATION_LOGGER.exiting(RelationSupport.class.getName(), \"getRoles\");\n        return result;\n    }"}
{"Number":"1422","API Relative Path":"javax.management.relation.RelationSupport.java-getRoles(String[])","Corresponding Source":"/**\n     * Retrieves values of roles with given names.\n     * <P>Checks for each role if it exists and is readable according to the\n     * relation type.\n     *\n     * @param roleNameArray  array of names of roles to be retrieved\n     *\n     * @return a RoleResult object, including a RoleList (for roles\n     * successfully retrieved) and a RoleUnresolvedList (for roles not\n     * retrieved).\n     *\n     * @exception IllegalArgumentException  if null role name\n     * @exception RelationServiceNotRegisteredException  if the Relation\n     * Service is not registered in the MBean Server\n     *\n     * @see #setRoles\n     */\n    public RoleResult getRoles(String[] roleNameArray)\n        throws IllegalArgumentException,\n               RelationServiceNotRegisteredException {\n\n        if (roleNameArray == null) {\n            String excMsg = \"Invalid parameter.\";\n            throw new IllegalArgumentException(excMsg);\n        }\n\n        RELATION_LOGGER.entering(RelationSupport.class.getName(), \"getRoles\");\n\n        // Can throw RelationServiceNotRegisteredException\n        RoleResult result = getRolesInt(roleNameArray, false, null);\n\n        RELATION_LOGGER.exiting(RelationSupport.class.getName(), \"getRoles\");\n        return result;\n    }"}
{"Number":"1423","API Relative Path":"javax.management.relation.RelationSupport.java-RelationSupport(String-ObjectName-MBeanServer-String-RoleList)","Corresponding Source":"/**\n     * Creates a {@code RelationSupport} object.\n     * <P>This constructor has to be used when the user relation MBean\n     * implements the interfaces expected to be supported by a relation by\n     * delegating to a RelationSupport object.\n     * <P>This object needs to know the Relation Service expected to handle the\n     * relation. So it has to know the MBean Server where the Relation Service\n     * is registered.\n     * <P>According to a limitation, a relation MBean must be registered in the\n     * same MBean Server as the Relation Service expected to handle it. So the\n     * user relation MBean has to be created and registered, and then the\n     * wrapped RelationSupport object can be created within the identified MBean\n     * Server.\n     * <P>Nothing is done at the Relation Service level, i.e.\n     * the {@code RelationSupport} object is not added to the\n     * {@code RelationService} and no checks are performed to\n     * see if the provided values are correct.\n     * The object is always created, EXCEPT if:\n     * <P>- any of the required parameters is {@code null}.\n     * <P>- the same name is used for two roles.\n     * <P>To be handled as a relation, the {@code RelationSupport} object has\n     * to be added to the Relation Service using the Relation Service method\n     * addRelation().\n     *\n     * @param relationId  relation identifier, to identify the relation in the\n     * Relation Service.\n     * <P>Expected to be unique in the given Relation Service.\n     * @param relationServiceName  ObjectName of the Relation Service where\n     * the relation will be registered.\n     * <P>This parameter is required as it is the Relation Service that is\n     * aware of the definition of the relation type of the given relation,\n     * so that will be able to check update operations (set).\n     * @param relationServiceMBeanServer  MBean Server where the wrapping MBean\n     * is or will be registered.\n     * <P>Expected to be the MBean Server where the Relation Service is or will\n     * be registered.\n     * @param relationTypeName  Name of relation type.\n     * <P>Expected to have been created in the given Relation Service.\n     * @param list  list of roles (Role objects) to initialize the\n     * relation. Can be {@code null}.\n     * <P>Expected to conform to relation info in associated relation type.\n     *\n     * @exception InvalidRoleValueException  if the same name is used for two\n     * roles.\n     * @exception IllegalArgumentException  if any of the required parameters\n     * (relation id, relation service ObjectName, relation service MBeanServer,\n     * or relation type name) is {@code null}.\n     */\n    public RelationSupport(String relationId,\n                        ObjectName relationServiceName,\n                        MBeanServer relationServiceMBeanServer,\n                        String relationTypeName,\n                        RoleList list)\n        throws InvalidRoleValueException,\n               IllegalArgumentException {\n\n        super();\n\n        if (relationServiceMBeanServer == null) {\n            String excMsg = \"Invalid parameter.\";\n            throw new IllegalArgumentException(excMsg);\n        }\n\n        RELATION_LOGGER.entering(RelationSupport.class.getName(),\n                \"RelationSupport\");\n\n        // Can throw InvalidRoleValueException and\n        // IllegalArgumentException\n        initMembers(relationId,\n                    relationServiceName,\n                    relationServiceMBeanServer,\n                    relationTypeName,\n                    list);\n\n        RELATION_LOGGER.exiting(RelationSupport.class.getName(),\n                \"RelationSupport\");\n    }"}
{"Number":"1424","API Relative Path":"javax.management.relation.RelationSupport.java-RelationSupport(String-ObjectName-String-RoleList)","Corresponding Source":"//\n    // Constructors\n    //\n\n    /**\n     * Creates a {@code RelationSupport} object.\n     * <P>This constructor has to be used when the RelationSupport object will\n     * be registered as a MBean by the user, or when creating a user relation\n     * MBean whose class extends RelationSupport.\n     * <P>Nothing is done at the Relation Service level, i.e.\n     * the {@code RelationSupport} object is not added to the\n     * {@code RelationService} and no checks are performed to\n     * see if the provided values are correct.\n     * The object is always created, EXCEPT if:\n     * <P>- any of the required parameters is {@code null}.\n     * <P>- the same name is used for two roles.\n     * <P>To be handled as a relation, the {@code RelationSupport} object has\n     * to be added to the Relation Service using the Relation Service method\n     * addRelation().\n     *\n     * @param relationId  relation identifier, to identify the relation in the\n     * Relation Service.\n     * <P>Expected to be unique in the given Relation Service.\n     * @param relationServiceName  ObjectName of the Relation Service where\n     * the relation will be registered.\n     * <P>This parameter is required as it is the Relation Service that is\n     * aware of the definition of the relation type of the given relation,\n     * so that will be able to check update operations (set).\n     * @param relationTypeName  Name of relation type.\n     * <P>Expected to have been created in the given Relation Service.\n     * @param list  list of roles (Role objects) to initialize the\n     * relation. Can be {@code null}.\n     * <P>Expected to conform to relation info in associated relation type.\n     *\n     * @exception InvalidRoleValueException  if the same name is used for two\n     * roles.\n     * @exception IllegalArgumentException  if any of the required parameters\n     * (relation id, relation service ObjectName, or relation type name) is\n     * {@code null}.\n     */\n    public RelationSupport(String relationId,\n                        ObjectName relationServiceName,\n                        String relationTypeName,\n                        RoleList list)\n        throws InvalidRoleValueException,\n               IllegalArgumentException {\n\n        super();\n\n        RELATION_LOGGER.entering(RelationSupport.class.getName(),\n                \"RelationSupport\");\n\n        // Can throw InvalidRoleValueException and IllegalArgumentException\n        initMembers(relationId,\n                    relationServiceName,\n                    null,\n                    relationTypeName,\n                    list);\n\n        RELATION_LOGGER.exiting(RelationSupport.class.getName(),\n                \"RelationSupport\");\n    }"}
{"Number":"1425","API Relative Path":"javax.management.relation.RelationSupport.java-setRoles(RoleList)","Corresponding Source":"/**\n     * Sets the given roles.\n     * <P>Will check the role according to its corresponding role definition\n     * provided in relation's relation type\n     * <P>Will send one notification (RelationNotification with type\n     * RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the\n     * relation is a MBean or not) per updated role.\n     *\n     * @param list  list of roles to be set\n     *\n     * @return a RoleResult object, including a RoleList (for roles\n     * successfully set) and a RoleUnresolvedList (for roles not\n     * set).\n     *\n     * @exception IllegalArgumentException  if null role list\n     * @exception RelationServiceNotRegisteredException  if the Relation\n     * Service is not registered in the MBean Server\n     * @exception RelationTypeNotFoundException  if the relation type has not\n     * been declared in the Relation Service.\n     * @exception RelationNotFoundException  if the relation MBean has not been\n     * added in the Relation Service.\n     *\n     * @see #getRoles\n     */\n    public RoleResult setRoles(RoleList list)\n        throws IllegalArgumentException,\n               RelationServiceNotRegisteredException,\n               RelationTypeNotFoundException,\n               RelationNotFoundException {\n\n        if (list == null) {\n            String excMsg = \"Invalid parameter.\";\n            throw new IllegalArgumentException(excMsg);\n        }\n\n        RELATION_LOGGER.entering(RelationSupport.class.getName(),\n                \"setRoles\", list);\n\n        RoleResult result = setRolesInt(list, false, null);\n\n        RELATION_LOGGER.exiting(RelationSupport.class.getName(), \"setRoles\");\n        return result;\n    }"}
{"Number":"1426","API Relative Path":"javax.management.relation.RelationSupport.java-setRoles(RoleList)","Corresponding Source":"/**\n     * Sets the given roles.\n     * <P>Will check the role according to its corresponding role definition\n     * provided in relation's relation type\n     * <P>Will send one notification (RelationNotification with type\n     * RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the\n     * relation is a MBean or not) per updated role.\n     *\n     * @param list  list of roles to be set\n     *\n     * @return a RoleResult object, including a RoleList (for roles\n     * successfully set) and a RoleUnresolvedList (for roles not\n     * set).\n     *\n     * @exception IllegalArgumentException  if null role list\n     * @exception RelationServiceNotRegisteredException  if the Relation\n     * Service is not registered in the MBean Server\n     * @exception RelationTypeNotFoundException  if the relation type has not\n     * been declared in the Relation Service.\n     * @exception RelationNotFoundException  if the relation MBean has not been\n     * added in the Relation Service.\n     *\n     * @see #getRoles\n     */\n    public RoleResult setRoles(RoleList list)\n        throws IllegalArgumentException,\n               RelationServiceNotRegisteredException,\n               RelationTypeNotFoundException,\n               RelationNotFoundException {\n\n        if (list == null) {\n            String excMsg = \"Invalid parameter.\";\n            throw new IllegalArgumentException(excMsg);\n        }\n\n        RELATION_LOGGER.entering(RelationSupport.class.getName(),\n                \"setRoles\", list);\n\n        RoleResult result = setRolesInt(list, false, null);\n\n        RELATION_LOGGER.exiting(RelationSupport.class.getName(), \"setRoles\");\n        return result;\n    }"}
{"Number":"1427","API Relative Path":"javax.management.relation.RelationTypeSupport.java-RelationTypeSupport(String-RoleInfo[])","Corresponding Source":"//\n    // Constructors\n    //\n\n    /**\n     * Constructor where all role definitions are dynamically created and\n     * passed as parameter.\n     *\n     * @param relationTypeName  Name of relation type\n     * @param roleInfoArray  List of role definitions (RoleInfo objects)\n     *\n     * @exception IllegalArgumentException  if null parameter\n     * @exception InvalidRelationTypeException  if:\n     * <P>- the same name has been used for two different roles\n     * <P>- no role info provided\n     * <P>- one null role info provided\n     */\n    public RelationTypeSupport(String relationTypeName,\n                            RoleInfo[] roleInfoArray)\n        throws IllegalArgumentException,\n               InvalidRelationTypeException {\n\n        if (relationTypeName == null || roleInfoArray == null) {\n            String excMsg = \"Invalid parameter.\";\n            throw new IllegalArgumentException(excMsg);\n        }\n\n        RELATION_LOGGER.entering(RelationTypeSupport.class.getName(),\n                \"RelationTypeSupport\", relationTypeName);\n\n        // Can throw InvalidRelationTypeException, ClassNotFoundException\n        // and NotCompliantMBeanException\n        initMembers(relationTypeName, roleInfoArray);\n\n        RELATION_LOGGER.exiting(RelationTypeSupport.class.getName(),\n                \"RelationTypeSupport\");\n        return;\n    }"}
{"Number":"1428","API Relative Path":"javax.management.relation.RoleList.java-addAll(int-RoleList)","Corresponding Source":"/**\n     * Inserts all of the elements in the RoleList specified into this\n     * list, starting at the specified position, in the order in which they are\n     * returned by the Iterator of the RoleList specified.\n     *\n     * @param index  Position at which to insert the first element from the\n     * RoleList specified.\n     * @param roleList  Elements to be inserted into the list.\n     *\n     * @return true if this list changed as a result of the call.\n     *\n     * @exception IllegalArgumentException  if the role is null.\n     * @exception IndexOutOfBoundsException  if accessing with an index\n     * outside of the list.\n     *\n     * @see ArrayList#addAll(int, Collection)\n     */\n    public boolean addAll(int index,\n                          RoleList roleList)\n        throws IllegalArgumentException,\n               IndexOutOfBoundsException {\n\n        if (roleList == null) {\n            // Revisit [cebro] Localize message\n            String excMsg = \"Invalid parameter.\";\n            throw new IllegalArgumentException(excMsg);\n        }\n\n        return (super.addAll(index, roleList));\n    }"}
{"Number":"1429","API Relative Path":"javax.management.relation.RoleUnresolvedList.java-addAll(int-RoleUnresolvedList)","Corresponding Source":"/**\n     * Inserts all of the elements in the RoleUnresolvedList specified into\n     * this list, starting at the specified position, in the order in which\n     * they are returned by the Iterator of the RoleUnresolvedList specified.\n     *\n     * @param index - Position at which to insert the first element from the\n     * RoleUnresolvedList specified.\n     * @param roleList - Elements to be inserted into the list.\n     *\n     * @return true if this list changed as a result of the call.\n     *\n     * @exception IllegalArgumentException  if the role is null.\n     * @exception IndexOutOfBoundsException if index is out of range\n     * (<code>index &lt; 0 || index &gt; size()<\/code>).\n     */\n    public boolean addAll(int index,\n                          RoleUnresolvedList roleList)\n        throws IllegalArgumentException,\n               IndexOutOfBoundsException {\n\n        if (roleList == null) {\n            String excMsg = \"Invalid parameter\";\n            throw new IllegalArgumentException(excMsg);\n        }\n\n        return (super.addAll(index, roleList));\n    }"}
{"Number":"1430","API Relative Path":"javax.management.remote.JMXConnectionNotification.java-JMXConnectionNotification(String-Object-String-long-String-Object)","Corresponding Source":"/**\n     * Constructs a new connection notification.  The {@link\n     * #getSource() source} of the notification depends on whether it\n     * is being sent by a connector server or a connector client:\n     *\n     * <ul>\n     *\n     * <li>For a connector server, if it is registered in an MBean\n     * server, the source is the {@link ObjectName} under which it is\n     * registered.  Otherwise, it is a reference to the connector\n     * server object itself, an instance of a subclass of {@link\n     * JMXConnectorServer}.\n     *\n     * <li>For a connector client, the source is a reference to the\n     * connector client object, an instance of a class implementing\n     * {@link JMXConnector}.\n     *\n     * <\/ul>\n     *\n     * @param type the type of the notification.  This is usually one\n     * of the constants {@link #OPENED}, {@link #CLOSED}, {@link\n     * #FAILED}, {@link #NOTIFS_LOST}.  It is not an error for it to\n     * be a different string.\n     *\n     * @param source the connector server or client emitting the\n     * notification.\n     *\n     * @param connectionId the ID of the connection within its\n     * connector server.\n     *\n     * @param sequenceNumber a non-negative integer.  It is expected\n     * but not required that this number will be greater than any\n     * previous <code>sequenceNumber<\/code> in a notification from\n     * this source.\n     *\n     * @param message an unspecified text message, typically containing\n     * a human-readable description of the event.  Can be null.\n     *\n     * @param userData an object whose type and meaning is defined by\n     * the connector server.  Can be null.\n     *\n     * @exception NullPointerException if <code>type<\/code>,\n     * <code>source<\/code>, or <code>connectionId<\/code> is null.\n     *\n     * @exception IllegalArgumentException if\n     * <code>sequenceNumber<\/code> is negative.\n     */\n    public JMXConnectionNotification(String type,\n                                     Object source,\n                                     String connectionId,\n                                     long sequenceNumber,\n                                     String message,\n                                     Object userData) {\n        /* We don't know whether the parent class (Notification) will\n           throw an exception if the type or source is null, because\n           JMX 1.2 doesn't specify that.  So we make sure it is not\n           null, in case it would throw the wrong exception\n           (e.g. IllegalArgumentException instead of\n           NullPointerException).  Likewise for the sequence number.  */\n        super((String) nonNull(type),\n              nonNull(source),\n              Math.max(0, sequenceNumber),\n              System.currentTimeMillis(),\n              message);\n        if (type == null || source == null || connectionId == null)\n            throw new NullPointerException(\"Illegal null argument\");\n        if (sequenceNumber < 0)\n            throw new IllegalArgumentException(\"Negative sequence number\");\n        this.connectionId = connectionId;\n        setUserData(userData);\n    }"}
{"Number":"1431","API Relative Path":"javax.management.remote.JMXConnectorServer.java-preRegister(MBeanServer-ObjectName)","Corresponding Source":"// implements MBeanRegistration\n    /**\n     * <p>Called by an MBean server when this connector server is\n     * registered in that MBean server.  This connector server becomes\n     * attached to the MBean server and its {@link #getMBeanServer()}\n     * method will return <code>mbs<\/code>.<\/p>\n     *\n     * <p>If this connector server is already attached to an MBean\n     * server, this method has no effect.  The MBean server it is\n     * attached to is not necessarily the one it is being registered\n     * in.<\/p>\n     *\n     * @param mbs the MBean server in which this connection server is\n     * being registered.\n     *\n     * @param name The object name of the MBean.\n     *\n     * @return The name under which the MBean is to be registered.\n     *\n     * @exception NullPointerException if <code>mbs<\/code> or\n     * <code>name<\/code> is null.\n     */\n    public synchronized ObjectName preRegister(MBeanServer mbs,\n                                               ObjectName name) {\n        if (mbs == null || name == null)\n            throw new NullPointerException(\"Null MBeanServer or ObjectName\");\n        if (mbeanServer == null) {\n            mbeanServer = mbs;\n            myName = name;\n        }\n        return name;\n    }"}
{"Number":"1432","API Relative Path":"javax.management.remote.JMXPrincipal.java-JMXPrincipal(String)","Corresponding Source":"/**\n     * <p>Creates a JMXPrincipal for a given identity.<\/p>\n     *\n     * @param name the JMX Remote API name for this identity.\n     *\n     * @exception NullPointerException if the <code>name<\/code> is\n     * <code>null<\/code>.\n     */\n    public JMXPrincipal(String name) {\n        validate(name);\n        this.name = name;\n    }"}
{"Number":"1433","API Relative Path":"javax.management.remote.JMXServiceURL.java-JMXServiceURL(String)","Corresponding Source":"/**\n     * <p>Constructs a <code>JMXServiceURL<\/code> by parsing a Service URL\n     * string.<\/p>\n     *\n     * @param serviceURL the URL string to be parsed.\n     *\n     * @exception NullPointerException if <code>serviceURL<\/code> is\n     * null.\n     *\n     * @exception MalformedURLException if <code>serviceURL<\/code>\n     * does not conform to the syntax for an Abstract Service URL or\n     * if it is not a valid name for a JMX Remote API service.  A\n     * <code>JMXServiceURL<\/code> must begin with the string\n     * <code>\"service:jmx:\"<\/code> (case-insensitive).  It must not\n     * contain any characters that are not printable ASCII characters.\n     */\n    public JMXServiceURL(String serviceURL) throws MalformedURLException {\n        final int serviceURLLength = serviceURL.length();\n\n        /* Check that there are no non-ASCII characters in the URL,\n           following RFC 2609.  */\n        for (int i = 0; i < serviceURLLength; i++) {\n            char c = serviceURL.charAt(i);\n            if (c < 32 || c >= 127) {\n                throw new MalformedURLException(\"Service URL contains \" +\n                                                \"non-ASCII character 0x\" +\n                                                Integer.toHexString(c));\n            }\n        }\n\n        // Parse the required prefix\n        final String requiredPrefix = \"service:jmx:\";\n        final int requiredPrefixLength = requiredPrefix.length();\n        if (!serviceURL.regionMatches(true, // ignore case\n                                      0,    // serviceURL offset\n                                      requiredPrefix,\n                                      0,    // requiredPrefix offset\n                                      requiredPrefixLength)) {\n            throw new MalformedURLException(\"Service URL must start with \" +\n                                            requiredPrefix);\n        }\n\n        // Parse the protocol name\n        final int protoStart = requiredPrefixLength;\n        final int protoEnd = indexOf(serviceURL, ':', protoStart);\n        this.protocol =\n            serviceURL.substring(protoStart, protoEnd).toLowerCase();\n\n        if (!serviceURL.regionMatches(protoEnd, \"://\", 0, 3)) {\n            throw new MalformedURLException(\"Missing \\\"://\\\" after \" +\n                                            \"protocol name\");\n        }\n\n        // Parse the host name\n        final int hostStart = protoEnd + 3;\n        final int hostEnd;\n        if (hostStart < serviceURLLength\n            && serviceURL.charAt(hostStart) == '[') {\n            hostEnd = serviceURL.indexOf(']', hostStart) + 1;\n            if (hostEnd == 0)\n                throw new MalformedURLException(\"Bad host name: [ without ]\");\n            this.host = serviceURL.substring(hostStart + 1, hostEnd - 1);\n            if (!isNumericIPv6Address(this.host)) {\n                throw new MalformedURLException(\"Address inside [...] must \" +\n                                                \"be numeric IPv6 address\");\n            }\n        } else {\n            hostEnd =\n                indexOfFirstNotInSet(serviceURL, hostNameBitSet, hostStart);\n            this.host = serviceURL.substring(hostStart, hostEnd);\n        }\n\n        // Parse the port number\n        final int portEnd;\n        if (hostEnd < serviceURLLength && serviceURL.charAt(hostEnd) == ':') {\n            if (this.host.length() == 0) {\n                throw new MalformedURLException(\"Cannot give port number \" +\n                                                \"without host name\");\n            }\n            final int portStart = hostEnd + 1;\n            portEnd =\n                indexOfFirstNotInSet(serviceURL, numericBitSet, portStart);\n            final String portString = serviceURL.substring(portStart, portEnd);\n            try {\n                this.port = Integer.parseInt(portString);\n            } catch (NumberFormatException e) {\n                throw new MalformedURLException(\"Bad port number: \\\"\" +\n                                                portString + \"\\\": \" + e);\n            }\n        } else {\n            portEnd = hostEnd;\n            this.port = 0;\n        }\n\n        // Parse the URL path\n        final int urlPathStart = portEnd;\n        if (urlPathStart < serviceURLLength)\n            this.urlPath = serviceURL.substring(urlPathStart);\n        else\n            this.urlPath = \"\";\n\n        validate();\n    }"}
{"Number":"1434","API Relative Path":"javax.management.remote.JMXServiceURL.java-JMXServiceURL(String)","Corresponding Source":"/**\n     * <p>Constructs a <code>JMXServiceURL<\/code> by parsing a Service URL\n     * string.<\/p>\n     *\n     * @param serviceURL the URL string to be parsed.\n     *\n     * @exception NullPointerException if <code>serviceURL<\/code> is\n     * null.\n     *\n     * @exception MalformedURLException if <code>serviceURL<\/code>\n     * does not conform to the syntax for an Abstract Service URL or\n     * if it is not a valid name for a JMX Remote API service.  A\n     * <code>JMXServiceURL<\/code> must begin with the string\n     * <code>\"service:jmx:\"<\/code> (case-insensitive).  It must not\n     * contain any characters that are not printable ASCII characters.\n     */\n    public JMXServiceURL(String serviceURL) throws MalformedURLException {\n        final int serviceURLLength = serviceURL.length();\n\n        /* Check that there are no non-ASCII characters in the URL,\n           following RFC 2609.  */\n        for (int i = 0; i < serviceURLLength; i++) {\n            char c = serviceURL.charAt(i);\n            if (c < 32 || c >= 127) {\n                throw new MalformedURLException(\"Service URL contains \" +\n                                                \"non-ASCII character 0x\" +\n                                                Integer.toHexString(c));\n            }\n        }\n\n        // Parse the required prefix\n        final String requiredPrefix = \"service:jmx:\";\n        final int requiredPrefixLength = requiredPrefix.length();\n        if (!serviceURL.regionMatches(true, // ignore case\n                                      0,    // serviceURL offset\n                                      requiredPrefix,\n                                      0,    // requiredPrefix offset\n                                      requiredPrefixLength)) {\n            throw new MalformedURLException(\"Service URL must start with \" +\n                                            requiredPrefix);\n        }\n\n        // Parse the protocol name\n        final int protoStart = requiredPrefixLength;\n        final int protoEnd = indexOf(serviceURL, ':', protoStart);\n        this.protocol =\n            serviceURL.substring(protoStart, protoEnd).toLowerCase();\n\n        if (!serviceURL.regionMatches(protoEnd, \"://\", 0, 3)) {\n            throw new MalformedURLException(\"Missing \\\"://\\\" after \" +\n                                            \"protocol name\");\n        }\n\n        // Parse the host name\n        final int hostStart = protoEnd + 3;\n        final int hostEnd;\n        if (hostStart < serviceURLLength\n            && serviceURL.charAt(hostStart) == '[') {\n            hostEnd = serviceURL.indexOf(']', hostStart) + 1;\n            if (hostEnd == 0)\n                throw new MalformedURLException(\"Bad host name: [ without ]\");\n            this.host = serviceURL.substring(hostStart + 1, hostEnd - 1);\n            if (!isNumericIPv6Address(this.host)) {\n                throw new MalformedURLException(\"Address inside [...] must \" +\n                                                \"be numeric IPv6 address\");\n            }\n        } else {\n            hostEnd =\n                indexOfFirstNotInSet(serviceURL, hostNameBitSet, hostStart);\n            this.host = serviceURL.substring(hostStart, hostEnd);\n        }\n\n        // Parse the port number\n        final int portEnd;\n        if (hostEnd < serviceURLLength && serviceURL.charAt(hostEnd) == ':') {\n            if (this.host.length() == 0) {\n                throw new MalformedURLException(\"Cannot give port number \" +\n                                                \"without host name\");\n            }\n            final int portStart = hostEnd + 1;\n            portEnd =\n                indexOfFirstNotInSet(serviceURL, numericBitSet, portStart);\n            final String portString = serviceURL.substring(portStart, portEnd);\n            try {\n                this.port = Integer.parseInt(portString);\n            } catch (NumberFormatException e) {\n                throw new MalformedURLException(\"Bad port number: \\\"\" +\n                                                portString + \"\\\": \" + e);\n            }\n        } else {\n            portEnd = hostEnd;\n            this.port = 0;\n        }\n\n        // Parse the URL path\n        final int urlPathStart = portEnd;\n        if (urlPathStart < serviceURLLength)\n            this.urlPath = serviceURL.substring(urlPathStart);\n        else\n            this.urlPath = \"\";\n\n        validate();\n    }"}
{"Number":"1435","API Relative Path":"javax.management.remote.JMXServiceURL.java-JMXServiceURL(String)","Corresponding Source":"/**\n     * <p>Constructs a <code>JMXServiceURL<\/code> by parsing a Service URL\n     * string.<\/p>\n     *\n     * @param serviceURL the URL string to be parsed.\n     *\n     * @exception NullPointerException if <code>serviceURL<\/code> is\n     * null.\n     *\n     * @exception MalformedURLException if <code>serviceURL<\/code>\n     * does not conform to the syntax for an Abstract Service URL or\n     * if it is not a valid name for a JMX Remote API service.  A\n     * <code>JMXServiceURL<\/code> must begin with the string\n     * <code>\"service:jmx:\"<\/code> (case-insensitive).  It must not\n     * contain any characters that are not printable ASCII characters.\n     */\n    public JMXServiceURL(String serviceURL) throws MalformedURLException {\n        final int serviceURLLength = serviceURL.length();\n\n        /* Check that there are no non-ASCII characters in the URL,\n           following RFC 2609.  */\n        for (int i = 0; i < serviceURLLength; i++) {\n            char c = serviceURL.charAt(i);\n            if (c < 32 || c >= 127) {\n                throw new MalformedURLException(\"Service URL contains \" +\n                                                \"non-ASCII character 0x\" +\n                                                Integer.toHexString(c));\n            }\n        }\n\n        // Parse the required prefix\n        final String requiredPrefix = \"service:jmx:\";\n        final int requiredPrefixLength = requiredPrefix.length();\n        if (!serviceURL.regionMatches(true, // ignore case\n                                      0,    // serviceURL offset\n                                      requiredPrefix,\n                                      0,    // requiredPrefix offset\n                                      requiredPrefixLength)) {\n            throw new MalformedURLException(\"Service URL must start with \" +\n                                            requiredPrefix);\n        }\n\n        // Parse the protocol name\n        final int protoStart = requiredPrefixLength;\n        final int protoEnd = indexOf(serviceURL, ':', protoStart);\n        this.protocol =\n            serviceURL.substring(protoStart, protoEnd).toLowerCase();\n\n        if (!serviceURL.regionMatches(protoEnd, \"://\", 0, 3)) {\n            throw new MalformedURLException(\"Missing \\\"://\\\" after \" +\n                                            \"protocol name\");\n        }\n\n        // Parse the host name\n        final int hostStart = protoEnd + 3;\n        final int hostEnd;\n        if (hostStart < serviceURLLength\n            && serviceURL.charAt(hostStart) == '[') {\n            hostEnd = serviceURL.indexOf(']', hostStart) + 1;\n            if (hostEnd == 0)\n                throw new MalformedURLException(\"Bad host name: [ without ]\");\n            this.host = serviceURL.substring(hostStart + 1, hostEnd - 1);\n            if (!isNumericIPv6Address(this.host)) {\n                throw new MalformedURLException(\"Address inside [...] must \" +\n                                                \"be numeric IPv6 address\");\n            }\n        } else {\n            hostEnd =\n                indexOfFirstNotInSet(serviceURL, hostNameBitSet, hostStart);\n            this.host = serviceURL.substring(hostStart, hostEnd);\n        }\n\n        // Parse the port number\n        final int portEnd;\n        if (hostEnd < serviceURLLength && serviceURL.charAt(hostEnd) == ':') {\n            if (this.host.length() == 0) {\n                throw new MalformedURLException(\"Cannot give port number \" +\n                                                \"without host name\");\n            }\n            final int portStart = hostEnd + 1;\n            portEnd =\n                indexOfFirstNotInSet(serviceURL, numericBitSet, portStart);\n            final String portString = serviceURL.substring(portStart, portEnd);\n            try {\n                this.port = Integer.parseInt(portString);\n            } catch (NumberFormatException e) {\n                throw new MalformedURLException(\"Bad port number: \\\"\" +\n                                                portString + \"\\\": \" + e);\n            }\n        } else {\n            portEnd = hostEnd;\n            this.port = 0;\n        }\n\n        // Parse the URL path\n        final int urlPathStart = portEnd;\n        if (urlPathStart < serviceURLLength)\n            this.urlPath = serviceURL.substring(urlPathStart);\n        else\n            this.urlPath = \"\";\n\n        validate();\n    }"}
{"Number":"1436","API Relative Path":"javax.management.remote.JMXServiceURL.java-JMXServiceURL(String)","Corresponding Source":"/**\n     * <p>Constructs a <code>JMXServiceURL<\/code> by parsing a Service URL\n     * string.<\/p>\n     *\n     * @param serviceURL the URL string to be parsed.\n     *\n     * @exception NullPointerException if <code>serviceURL<\/code> is\n     * null.\n     *\n     * @exception MalformedURLException if <code>serviceURL<\/code>\n     * does not conform to the syntax for an Abstract Service URL or\n     * if it is not a valid name for a JMX Remote API service.  A\n     * <code>JMXServiceURL<\/code> must begin with the string\n     * <code>\"service:jmx:\"<\/code> (case-insensitive).  It must not\n     * contain any characters that are not printable ASCII characters.\n     */\n    public JMXServiceURL(String serviceURL) throws MalformedURLException {\n        final int serviceURLLength = serviceURL.length();\n\n        /* Check that there are no non-ASCII characters in the URL,\n           following RFC 2609.  */\n        for (int i = 0; i < serviceURLLength; i++) {\n            char c = serviceURL.charAt(i);\n            if (c < 32 || c >= 127) {\n                throw new MalformedURLException(\"Service URL contains \" +\n                                                \"non-ASCII character 0x\" +\n                                                Integer.toHexString(c));\n            }\n        }\n\n        // Parse the required prefix\n        final String requiredPrefix = \"service:jmx:\";\n        final int requiredPrefixLength = requiredPrefix.length();\n        if (!serviceURL.regionMatches(true, // ignore case\n                                      0,    // serviceURL offset\n                                      requiredPrefix,\n                                      0,    // requiredPrefix offset\n                                      requiredPrefixLength)) {\n            throw new MalformedURLException(\"Service URL must start with \" +\n                                            requiredPrefix);\n        }\n\n        // Parse the protocol name\n        final int protoStart = requiredPrefixLength;\n        final int protoEnd = indexOf(serviceURL, ':', protoStart);\n        this.protocol =\n            serviceURL.substring(protoStart, protoEnd).toLowerCase();\n\n        if (!serviceURL.regionMatches(protoEnd, \"://\", 0, 3)) {\n            throw new MalformedURLException(\"Missing \\\"://\\\" after \" +\n                                            \"protocol name\");\n        }\n\n        // Parse the host name\n        final int hostStart = protoEnd + 3;\n        final int hostEnd;\n        if (hostStart < serviceURLLength\n            && serviceURL.charAt(hostStart) == '[') {\n            hostEnd = serviceURL.indexOf(']', hostStart) + 1;\n            if (hostEnd == 0)\n                throw new MalformedURLException(\"Bad host name: [ without ]\");\n            this.host = serviceURL.substring(hostStart + 1, hostEnd - 1);\n            if (!isNumericIPv6Address(this.host)) {\n                throw new MalformedURLException(\"Address inside [...] must \" +\n                                                \"be numeric IPv6 address\");\n            }\n        } else {\n            hostEnd =\n                indexOfFirstNotInSet(serviceURL, hostNameBitSet, hostStart);\n            this.host = serviceURL.substring(hostStart, hostEnd);\n        }\n\n        // Parse the port number\n        final int portEnd;\n        if (hostEnd < serviceURLLength && serviceURL.charAt(hostEnd) == ':') {\n            if (this.host.length() == 0) {\n                throw new MalformedURLException(\"Cannot give port number \" +\n                                                \"without host name\");\n            }\n            final int portStart = hostEnd + 1;\n            portEnd =\n                indexOfFirstNotInSet(serviceURL, numericBitSet, portStart);\n            final String portString = serviceURL.substring(portStart, portEnd);\n            try {\n                this.port = Integer.parseInt(portString);\n            } catch (NumberFormatException e) {\n                throw new MalformedURLException(\"Bad port number: \\\"\" +\n                                                portString + \"\\\": \" + e);\n            }\n        } else {\n            portEnd = hostEnd;\n            this.port = 0;\n        }\n\n        // Parse the URL path\n        final int urlPathStart = portEnd;\n        if (urlPathStart < serviceURLLength)\n            this.urlPath = serviceURL.substring(urlPathStart);\n        else\n            this.urlPath = \"\";\n\n        validate();\n    }"}
{"Number":"1437","API Relative Path":"javax.management.remote.rmi.RMIConnectionImpl.java-RMIConnectionImpl(RMIServerImpl-String-ClassLoader-Subject-Map)","Corresponding Source":"/**\n     * Constructs a new {@link RMIConnection}. This connection can be\n     * used with either the JRMP or IIOP transport. This object does\n     * not export itself: it is the responsibility of the caller to\n     * export it appropriately (see {@link\n     * RMIJRMPServerImpl#makeClient(String,Subject)} and {@link\n     * RMIIIOPServerImpl#makeClient(String,Subject)}.\n     *\n     * @param rmiServer The RMIServerImpl object for which this\n     * connection is created.  The behavior is unspecified if this\n     * parameter is null.\n     * @param connectionId The ID for this connection.  The behavior\n     * is unspecified if this parameter is null.\n     * @param defaultClassLoader The default ClassLoader to be used\n     * when deserializing marshalled objects.  Can be null, to signify\n     * the bootstrap class loader.\n     * @param subject the authenticated subject to be used for\n     * authorization.  Can be null, to signify that no subject has\n     * been authenticated.\n     * @param env the environment containing attributes for the new\n     * <code>RMIServerImpl<\/code>.  Can be null, equivalent to an\n     * empty map.\n     */\n    public RMIConnectionImpl(RMIServerImpl rmiServer,\n                             String connectionId,\n                             ClassLoader defaultClassLoader,\n                             Subject subject,\n                             Map<String,?> env) {\n        if (rmiServer == null || connectionId == null)\n            throw new NullPointerException(\"Illegal null argument\");\n        if (env == null)\n            env = Collections.emptyMap();\n        this.rmiServer = rmiServer;\n        this.connectionId = connectionId;\n        this.defaultClassLoader = defaultClassLoader;\n\n        this.subjectDelegator = new SubjectDelegator();\n        this.subject = subject;\n        if (subject == null) {\n            this.acc = null;\n            this.removeCallerContext = false;\n        } else {\n            this.removeCallerContext =\n                SubjectDelegator.checkRemoveCallerContext(subject);\n            if (this.removeCallerContext) {\n                this.acc =\n                    JMXSubjectDomainCombiner.getDomainCombinerContext(subject);\n            } else {\n                this.acc =\n                    JMXSubjectDomainCombiner.getContext(subject);\n            }\n        }\n        this.mbeanServer = rmiServer.getMBeanServer();\n\n        final ClassLoader dcl = defaultClassLoader;\n\n        this.classLoaderWithRepository =\n            AccessController.doPrivileged(\n                new PrivilegedAction<ClassLoaderWithRepository>() {\n                    public ClassLoaderWithRepository run() {\n                        return new ClassLoaderWithRepository(\n                                      mbeanServer.getClassLoaderRepository(),\n                                      dcl);\n                    }\n                },\n\n                withPermissions( new MBeanPermission(\"*\", \"getClassLoaderRepository\"),\n                                 new RuntimePermission(\"createClassLoader\"))\n            );\n\n\n        this.defaultContextClassLoader =\n            AccessController.doPrivileged(\n                new PrivilegedAction<ClassLoader>() {\n            @Override\n                    public ClassLoader run() {\n                        return new CombinedClassLoader(Thread.currentThread().getContextClassLoader(),\n                                dcl);\n                    }\n                });\n\n        serverCommunicatorAdmin = new\n          RMIServerCommunicatorAdmin(EnvHelp.getServerConnectionTimeout(env));\n\n        this.env = env;\n    }"}
{"Number":"1438","API Relative Path":"javax.management.remote.rmi.RMIConnector.java-connectStub(RMIServer-Map)","Corresponding Source":"//--------------------------------------------------------------------\n    // Private stuff - Serialization\n    //--------------------------------------------------------------------\n    /**\n     * <p>In order to be usable, an IIOP stub must be connected to an ORB.\n     * The stub is automatically connected to the ORB if:\n     * <ul>\n     *     <li> It was returned by the COS naming<\/li>\n     *     <li> Its server counterpart has been registered in COS naming\n     *          through JNDI.<\/li>\n     * <\/ul>\n     * Otherwise, it is not connected. A stub which is deserialized\n     * from Jini is not connected. A stub which is obtained from a\n     * non registered RMIIIOPServerImpl is not a connected.<br>\n     * A stub which is not connected can't be serialized, and thus\n     * can't be registered in Jini. A stub which is not connected can't\n     * be used to invoke methods on the server.\n     * <p>\n     * In order to palliate this, this method will connect the\n     * given stub if it is not yet connected. If the given\n     * <var>RMIServer<\/var> is not an instance of\n     * {@link javax.rmi.CORBA.Stub javax.rmi.CORBA.Stub}, then the\n     * method do nothing and simply returns that stub. Otherwise,\n     * this method will attempt to connect the stub to an ORB as\n     * follows:\n     * <ul>\n     * <li>This method looks in the provided <var>environment<\/var> for\n     * the \"java.naming.corba.orb\" property. If it is found, the\n     * referenced object (an {@link org.omg.CORBA.ORB ORB}) is used to\n     * connect the stub. Otherwise, a new org.omg.CORBA.ORB is created\n     * by calling {@link\n     * org.omg.CORBA.ORB#init(String[], Properties)\n     * org.omg.CORBA.ORB.init((String[])null,(Properties)null)}<\/li>\n     * <li>The new created ORB is kept in a static\n     * {@link WeakReference} and can be reused for connecting other\n     * stubs. However, no reference is ever kept on the ORB provided\n     * in the <var>environment<\/var> map, if any.<\/li>\n     * <\/ul>\n     * @param rmiServer A RMI Server Stub.\n     * @param environment An environment map, possibly containing an ORB.\n     * @return the given stub.\n     * @exception IllegalArgumentException if the\n     *      <tt>java.naming.corba.orb<\/tt> property is specified and\n     *      does not point to an {@link org.omg.CORBA.ORB ORB}.\n     * @exception IOException if the connection to the ORB failed.\n     **/\n    static RMIServer connectStub(RMIServer rmiServer,\n                                 Map<String, ?> environment)\n        throws IOException {\n        if (IIOPHelper.isStub(rmiServer)) {\n            try {\n                IIOPHelper.getOrb(rmiServer);\n            } catch (UnsupportedOperationException x) {\n                // BAD_OPERATION\n                IIOPHelper.connect(rmiServer, resolveOrb(environment));\n            }\n        }\n        return rmiServer;\n    }"}
{"Number":"1439","API Relative Path":"javax.management.remote.rmi.RMIConnector.java-resolveOrb(Map)","Corresponding Source":"/**\n     * Get the ORB specified by <var>environment<\/var>, or create a\n     * new one.\n     * <p>This method looks in the provided <var>environment<\/var> for\n     * the \"java.naming.corba.orb\" property. If it is found, the\n     * referenced object (an {@link org.omg.CORBA.ORB ORB}) is\n     * returned. Otherwise, a new org.omg.CORBA.ORB is created\n     * by calling {@link\n     * org.omg.CORBA.ORB#init(String[], java.util.Properties)\n     * org.omg.CORBA.ORB.init((String[])null,(Properties)null)}\n     * <p>The new created ORB is kept in a static\n     * {@link WeakReference} and can be reused for connecting other\n     * stubs. However, no reference is ever kept on the ORB provided\n     * in the <var>environment<\/var> map, if any.\n     * @param environment An environment map, possibly containing an ORB.\n     * @return An ORB.\n     * @exception IllegalArgumentException if the\n     *      <tt>java.naming.corba.orb<\/tt> property is specified and\n     *      does not point to an {@link org.omg.CORBA.ORB ORB}.\n     * @exception IOException if the ORB initialization failed.\n     **/\n    static Object resolveOrb(Map<String, ?> environment)\n        throws IOException {\n        if (environment != null) {\n            final Object orb = environment.get(EnvHelp.DEFAULT_ORB);\n            if (orb != null && !(IIOPHelper.isOrb(orb)))\n                throw new IllegalArgumentException(EnvHelp.DEFAULT_ORB +\n                        \" must be an instance of org.omg.CORBA.ORB.\");\n            if (orb != null) return orb;\n        }\n        final Object orb =\n                (RMIConnector.orb==null)?null:RMIConnector.orb.get();\n        if (orb != null) return orb;\n\n        final Object newOrb =\n                IIOPHelper.createOrb((String[])null, (Properties)null);\n        RMIConnector.orb = new WeakReference<Object>(newOrb);\n        return newOrb;\n    }"}
{"Number":"1440","API Relative Path":"javax.management.remote.rmi.RMIIIOPServerImpl.java-makeClient(String-Subject)","Corresponding Source":"/**\n     * <p>Creates a new client connection as an RMI object exported\n     * through IIOP.\n     *\n     * @param connectionId the ID of the new connection.  Every\n     * connection opened by this connector server will have a\n     * different ID.  The behavior is unspecified if this parameter is\n     * null.\n     *\n     * @param subject the authenticated subject.  Can be null.\n     *\n     * @return the newly-created <code>RMIConnection<\/code>.\n     *\n     * @exception IOException if the new client object cannot be\n     * created or exported.\n     */\n    protected RMIConnection makeClient(String connectionId, Subject subject)\n            throws IOException {\n\n        if (connectionId == null)\n            throw new NullPointerException(\"Null connectionId\");\n\n        RMIConnection client =\n            new RMIConnectionImpl(this, connectionId, getDefaultClassLoader(),\n                                  subject, env);\n        IIOPHelper.exportObject(client);\n        return client;\n    }"}
{"Number":"1441","API Relative Path":"javax.management.remote.rmi.RMIIIOPServerImpl.java-makeClient(String-Subject)","Corresponding Source":"/**\n     * <p>Creates a new client connection as an RMI object exported\n     * through IIOP.\n     *\n     * @param connectionId the ID of the new connection.  Every\n     * connection opened by this connector server will have a\n     * different ID.  The behavior is unspecified if this parameter is\n     * null.\n     *\n     * @param subject the authenticated subject.  Can be null.\n     *\n     * @return the newly-created <code>RMIConnection<\/code>.\n     *\n     * @exception IOException if the new client object cannot be\n     * created or exported.\n     */\n    protected RMIConnection makeClient(String connectionId, Subject subject)\n            throws IOException {\n\n        if (connectionId == null)\n            throw new NullPointerException(\"Null connectionId\");\n\n        RMIConnection client =\n            new RMIConnectionImpl(this, connectionId, getDefaultClassLoader(),\n                                  subject, env);\n        IIOPHelper.exportObject(client);\n        return client;\n    }"}
{"Number":"1442","API Relative Path":"javax.management.remote.rmi.RMIJRMPServerImpl.java-makeClient(String-Subject)","Corresponding Source":"/**\n     * <p>Creates a new client connection as an RMI object exported\n     * through JRMP. The port and socket factories for the new\n     * {@link RMIConnection} object are the ones supplied\n     * to the <code>RMIJRMPServerImpl<\/code> constructor.<\/p>\n     *\n     * @param connectionId the ID of the new connection. Every\n     * connection opened by this connector server will have a\n     * different id.  The behavior is unspecified if this parameter is\n     * null.\n     *\n     * @param subject the authenticated subject.  Can be null.\n     *\n     * @return the newly-created <code>RMIConnection<\/code>.\n     *\n     * @exception IOException if the new {@link RMIConnection}\n     * object cannot be created or exported.\n     */\n    protected RMIConnection makeClient(String connectionId, Subject subject)\n            throws IOException {\n\n        if (connectionId == null)\n            throw new NullPointerException(\"Null connectionId\");\n\n        RMIConnection client =\n            new RMIConnectionImpl(this, connectionId, getDefaultClassLoader(),\n                                  subject, env);\n        export(client);\n        return client;\n    }"}
{"Number":"1443","API Relative Path":"javax.management.remote.rmi.RMIJRMPServerImpl.java-makeClient(String-Subject)","Corresponding Source":"/**\n     * <p>Creates a new client connection as an RMI object exported\n     * through JRMP. The port and socket factories for the new\n     * {@link RMIConnection} object are the ones supplied\n     * to the <code>RMIJRMPServerImpl<\/code> constructor.<\/p>\n     *\n     * @param connectionId the ID of the new connection. Every\n     * connection opened by this connector server will have a\n     * different id.  The behavior is unspecified if this parameter is\n     * null.\n     *\n     * @param subject the authenticated subject.  Can be null.\n     *\n     * @return the newly-created <code>RMIConnection<\/code>.\n     *\n     * @exception IOException if the new {@link RMIConnection}\n     * object cannot be created or exported.\n     */\n    protected RMIConnection makeClient(String connectionId, Subject subject)\n            throws IOException {\n\n        if (connectionId == null)\n            throw new NullPointerException(\"Null connectionId\");\n\n        RMIConnection client =\n            new RMIConnectionImpl(this, connectionId, getDefaultClassLoader(),\n                                  subject, env);\n        export(client);\n        return client;\n    }"}
{"Number":"1444","API Relative Path":"javax.management.remote.TargetedNotification.java-TargetedNotification(Notification-Integer)","Corresponding Source":"// If we replace Integer with int...\n//     /**\n//      * <p>Constructs a <code>TargetedNotification<\/code> object.  The\n//      * object contains a pair (Notification, Listener ID).\n//      * The Listener ID identifies the client listener to which that\n//      * notification is targeted. The client listener ID is one\n//      * previously returned by the connector server in response to an\n//      * <code>addNotificationListener<\/code> request.<\/p>\n//      * @param notification Notification emitted from the MBean server.\n//      * @param listenerID   The ID of the listener to which this\n//      *        notification is targeted.\n//      */\n//     public TargetedNotification(Notification notification,\n//                              int listenerID) {\n//      this.notif = notification;\n//      this.id = listenerID;\n//     }\n\n    /**\n     * <p>Constructs a <code>TargetedNotification<\/code> object.  The\n     * object contains a pair (Notification, Listener ID).\n     * The Listener ID identifies the client listener to which that\n     * notification is targeted. The client listener ID is one\n     * previously returned by the connector server in response to an\n     * <code>addNotificationListener<\/code> request.<\/p>\n     * @param notification Notification emitted from the MBean server.\n     * @param listenerID   The ID of the listener to which this\n     *        notification is targeted.\n     * @exception IllegalArgumentException if the <var>listenerID<\/var>\n     *        or <var>notification<\/var> is null.\n     */\n    public TargetedNotification(Notification notification,\n                                Integer listenerID) {\n        validate(notification, listenerID);\n        // If we replace integer with int...\n        // this(notification,intValue(listenerID));\n        this.notif = notification;\n        this.id = listenerID;\n    }"}
{"Number":"1445","API Relative Path":"javax.management.StandardMBean.java-getConstructors(MBeanConstructorInfo[]-Object)","Corresponding Source":"/**\n     * Customization hook:\n     * Get the MBeanConstructorInfo[] that will be used in the MBeanInfo\n     * returned by this MBean.\n     * <br>\n     * By default, this method returns <code>null<\/code> if the wrapped\n     * implementation is not <var>this<\/var>. Indeed, if the wrapped\n     * implementation is not this object itself, it will not be possible\n     * to recreate a wrapped implementation by calling the implementation\n     * constructors through <code>MBeanServer.createMBean(...)<\/code>.<br>\n     * Otherwise, if the wrapped implementation is <var>this<\/var>,\n     * <var>ctors<\/var> is returned.\n     * <br>\n     * Subclasses may redefine this method in order to modify this\n     * behavior, if needed.\n     * @param ctors The default MBeanConstructorInfo[] derived by reflection.\n     * @param impl  The wrapped implementation. If <code>null<\/code> is\n     *        passed, the wrapped implementation is ignored and\n     *        <var>ctors<\/var> is returned.\n     * @return the MBeanConstructorInfo[] for the new MBeanInfo.\n     **/\n    protected MBeanConstructorInfo[]\n        getConstructors(MBeanConstructorInfo[] ctors, Object impl) {\n            if (ctors == null) return null;\n            if (impl != null && impl != this) return null;\n            return ctors;\n    }"}
{"Number":"1446","API Relative Path":"javax.management.StandardMBean.java-getConstructors(MBeanConstructorInfo[]-Object)","Corresponding Source":"/**\n     * Customization hook:\n     * Get the MBeanConstructorInfo[] that will be used in the MBeanInfo\n     * returned by this MBean.\n     * <br>\n     * By default, this method returns <code>null<\/code> if the wrapped\n     * implementation is not <var>this<\/var>. Indeed, if the wrapped\n     * implementation is not this object itself, it will not be possible\n     * to recreate a wrapped implementation by calling the implementation\n     * constructors through <code>MBeanServer.createMBean(...)<\/code>.<br>\n     * Otherwise, if the wrapped implementation is <var>this<\/var>,\n     * <var>ctors<\/var> is returned.\n     * <br>\n     * Subclasses may redefine this method in order to modify this\n     * behavior, if needed.\n     * @param ctors The default MBeanConstructorInfo[] derived by reflection.\n     * @param impl  The wrapped implementation. If <code>null<\/code> is\n     *        passed, the wrapped implementation is ignored and\n     *        <var>ctors<\/var> is returned.\n     * @return the MBeanConstructorInfo[] for the new MBeanInfo.\n     **/\n    protected MBeanConstructorInfo[]\n        getConstructors(MBeanConstructorInfo[] ctors, Object impl) {\n            if (ctors == null) return null;\n            if (impl != null && impl != this) return null;\n            return ctors;\n    }"}
{"Number":"1447","API Relative Path":"javax.management.StandardMBean.java-getDescription(MBeanConstructorInfo-MBeanParameterInfo-int)","Corresponding Source":"/**\n     * Customization hook:\n     * Get the description that will be used for the  <var>sequence<\/var>\n     * MBeanParameterInfo of the MBeanConstructorInfo returned by this MBean.\n     * <br>\n     * Subclasses may redefine this method in order to supply their\n     * custom description.  The default implementation returns\n     * {@link MBeanParameterInfo#getDescription() param.getDescription()}.\n     *\n     * @param ctor  The default MBeanConstructorInfo derived by reflection.\n     * @param param The default MBeanParameterInfo derived by reflection.\n     * @param sequence The sequence number of the parameter considered\n     *        (\"0\" for the first parameter, \"1\" for the second parameter,\n     *        etc...).\n     * @return the description for the given MBeanParameterInfo.\n     **/\n    protected String getDescription(MBeanConstructorInfo ctor,\n                                    MBeanParameterInfo   param,\n                                    int sequence) {\n        if (param == null) return null;\n        return param.getDescription();\n    }"}
{"Number":"1448","API Relative Path":"javax.management.StandardMBean.java-getDescription(MBeanFeatureInfo)","Corresponding Source":"/**\n     * <p>Customization hook:\n     * Get the description that will be used in the MBeanFeatureInfo\n     * returned by this MBean.<\/p>\n     *\n     * <p>Subclasses may redefine this method in order to supply\n     * their custom description.  The default implementation returns\n     * {@link MBeanFeatureInfo#getDescription()\n     * info.getDescription()}.<\/p>\n     *\n     * <p>This method is called by\n     *      {@link #getDescription(MBeanAttributeInfo)},\n     *      {@link #getDescription(MBeanOperationInfo)},\n     *      {@link #getDescription(MBeanConstructorInfo)}.<\/p>\n     *\n     * @param info The default MBeanFeatureInfo derived by reflection.\n     * @return the description for the given MBeanFeatureInfo.\n     **/\n    protected String getDescription(MBeanFeatureInfo info) {\n        if (info == null) return null;\n        return info.getDescription();\n    }"}
{"Number":"1449","API Relative Path":"javax.management.StandardMBean.java-getDescription(MBeanInfo)","Corresponding Source":"/**\n     * Customization hook:\n     * Get the description that will be used in the MBeanInfo returned by\n     * this MBean.\n     * <br>\n     * Subclasses may redefine this method in order to supply their\n     * custom MBean description.  The default implementation returns\n     * {@link MBeanInfo#getDescription() info.getDescription()}.\n     * @param info The default MBeanInfo derived by reflection.\n     * @return the description for the new MBeanInfo.\n     **/\n    protected String getDescription(MBeanInfo info) {\n        if (info == null) return null;\n        return info.getDescription();\n    }"}
{"Number":"1450","API Relative Path":"javax.management.StandardMBean.java-getDescription(MBeanOperationInfo-MBeanParameterInfo-int)","Corresponding Source":"/**\n     * Customization hook:\n     * Get the description that will be used for the  <var>sequence<\/var>\n     * MBeanParameterInfo of the MBeanOperationInfo returned by this MBean.\n     * <br>\n     * Subclasses may redefine this method in order to supply their\n     * custom description.  The default implementation returns\n     * {@link MBeanParameterInfo#getDescription() param.getDescription()}.\n     *\n     * @param op    The default MBeanOperationInfo derived by reflection.\n     * @param param The default MBeanParameterInfo derived by reflection.\n     * @param sequence The sequence number of the parameter considered\n     *        (\"0\" for the first parameter, \"1\" for the second parameter,\n     *        etc...).\n     * @return the description for the given MBeanParameterInfo.\n     **/\n    protected String getDescription(MBeanOperationInfo op,\n                                    MBeanParameterInfo param,\n                                    int sequence) {\n        if (param == null) return null;\n        return param.getDescription();\n    }"}
{"Number":"1451","API Relative Path":"javax.management.StandardMBean.java-getParameterName(MBeanConstructorInfo-MBeanParameterInfo-int)","Corresponding Source":"/**\n     * Customization hook:\n     * Get the name that will be used for the <var>sequence<\/var>\n     * MBeanParameterInfo of the MBeanConstructorInfo returned by this MBean.\n     * <br>\n     * Subclasses may redefine this method in order to supply their\n     * custom parameter name.  The default implementation returns\n     * {@link MBeanParameterInfo#getName() param.getName()}.\n     *\n     * @param ctor  The default MBeanConstructorInfo derived by reflection.\n     * @param param The default MBeanParameterInfo derived by reflection.\n     * @param sequence The sequence number of the parameter considered\n     *        (\"0\" for the first parameter, \"1\" for the second parameter,\n     *        etc...).\n     * @return the name for the given MBeanParameterInfo.\n     **/\n    protected String getParameterName(MBeanConstructorInfo ctor,\n                                      MBeanParameterInfo param,\n                                      int sequence) {\n        if (param == null) return null;\n        return param.getName();\n    }"}
{"Number":"1452","API Relative Path":"javax.management.StandardMBean.java-getParameterName(MBeanOperationInfo-MBeanParameterInfo-int)","Corresponding Source":"/**\n     * Customization hook:\n     * Get the name that will be used for the <var>sequence<\/var>\n     * MBeanParameterInfo of the MBeanOperationInfo returned by this MBean.\n     * <br>\n     * Subclasses may redefine this method in order to supply their\n     * custom parameter name.  The default implementation returns\n     * {@link MBeanParameterInfo#getName() param.getName()}.\n     *\n     * @param op    The default MBeanOperationInfo derived by reflection.\n     * @param param The default MBeanParameterInfo derived by reflection.\n     * @param sequence The sequence number of the parameter considered\n     *        (\"0\" for the first parameter, \"1\" for the second parameter,\n     *        etc...).\n     * @return the name to use for the given MBeanParameterInfo.\n     **/\n    protected String getParameterName(MBeanOperationInfo op,\n                                      MBeanParameterInfo param,\n                                      int sequence) {\n        if (param == null) return null;\n        return param.getName();\n    }"}
{"Number":"1453","API Relative Path":"javax.management.StandardMBean.java-StandardMBean(T-Class)","Corresponding Source":"/**\n     * <p>Make a DynamicMBean out of the object\n     * <var>implementation<\/var>, using the specified\n     * <var>mbeanInterface<\/var> class.<\/p>\n     *\n     * @param implementation The implementation of this MBean.\n     * @param mbeanInterface The Management Interface exported by this\n     *        MBean's implementation. If <code>null<\/code>, then this\n     *        object will use standard JMX design pattern to determine\n     *        the management interface associated with the given\n     *        implementation.\n     * @param <T> Allows the compiler to check\n     * that {@code implementation} does indeed implement the class\n     * described by {@code mbeanInterface}.  The compiler can only\n     * check this if {@code mbeanInterface} is a class literal such\n     * as {@code MyMBean.class}.\n     *\n     * @exception IllegalArgumentException if the given\n     *    <var>implementation<\/var> is null.\n     * @exception NotCompliantMBeanException if the <var>mbeanInterface<\/var>\n     *    does not follow JMX design patterns for Management Interfaces, or\n     *    if the given <var>implementation<\/var> does not implement the\n     *    specified interface.\n     **/\n    public <T> StandardMBean(T implementation, Class<T> mbeanInterface)\n        throws NotCompliantMBeanException {\n        construct(implementation, mbeanInterface, false, false);\n    }"}
{"Number":"1454","API Relative Path":"javax.management.timer.Timer.java-addNotification(String-String-Object-Date-long-long-boolean)","Corresponding Source":"/**\n     * Creates a new timer notification with the specified <CODE>type<\/CODE>, <CODE>message<\/CODE>\n     * and <CODE>userData<\/CODE> and inserts it into the list of notifications with a given date,\n     * period and number of occurrences.\n     * <P>\n     * If the timer notification to be inserted has a date that is before the current date,\n     * the method behaves as if the specified date were the current date. <BR>\n     * For once-off notifications, the notification is delivered immediately. <BR>\n     * For periodic notifications, the first notification is delivered immediately and the\n     * subsequent ones are spaced as specified by the period parameter.\n     * <P>\n     * Note that once the timer notification has been added into the list of notifications,\n     * its associated date, period and number of occurrences cannot be updated.\n     * <P>\n     * In the case of a periodic notification, the value of parameter <i>fixedRate<\/i> is used to\n     * specify the execution scheme, as specified in {@link java.util.Timer}.\n     *\n     * @param type The timer notification type.\n     * @param message The timer notification detailed message.\n     * @param userData The timer notification user data object.\n     * @param date The date when the notification occurs.\n     * @param period The period of the timer notification (in milliseconds).\n     * @param nbOccurences The total number the timer notification will be emitted.\n     * @param fixedRate If <code>true<\/code> and if the notification is periodic, the notification\n     *                  is scheduled with a <i>fixed-rate<\/i> execution scheme. If\n     *                  <code>false<\/code> and if the notification is periodic, the notification\n     *                  is scheduled with a <i>fixed-delay<\/i> execution scheme. Ignored if the\n     *                  notification is not periodic.\n     *\n     * @return The identifier of the new created timer notification.\n     *\n     * @exception java.lang.IllegalArgumentException The date is {@code null} or\n     * the period or the number of occurrences is negative.\n     *\n     * @see #addNotification(String, String, Object, Date, long, long)\n     */\n// NPCTE fix for bugId 4464388, esc 0,  MR, to be added after modification of jmx spec\n//  public synchronized Integer addNotification(String type, String message, Serializable userData,\n//                                                Date date, long period, long nbOccurences)\n// end of NPCTE fix for bugId 4464388\n\n    public synchronized Integer addNotification(String type, String message, Object userData,\n                                                Date date, long period, long nbOccurences, boolean fixedRate)\n        throws java.lang.IllegalArgumentException {\n\n        if (date == null) {\n            throw new java.lang.IllegalArgumentException(\"Timer notification date cannot be null.\");\n        }\n\n        // Check that all the timer notification attributes are valid.\n        //\n\n        // Invalid timer period value exception:\n        // Check that the period and the nbOccurences are POSITIVE VALUES.\n        //\n        if ((period < 0) || (nbOccurences < 0)) {\n            throw new java.lang.IllegalArgumentException(\"Negative values for the periodicity\");\n        }\n\n        Date currentDate = new Date();\n\n        // Update the date if it is before the current date.\n        //\n        if (currentDate.after(date)) {\n\n            date.setTime(currentDate.getTime());\n            if (TIMER_LOGGER.isLoggable(Level.FINER)) {\n                TIMER_LOGGER.logp(Level.FINER, Timer.class.getName(),\n                        \"addNotification\",\n                        \"update timer notification to add with:\" +\n                        \"\\n\\tNotification date = \" + date);\n            }\n        }\n\n        // Create and add the timer notification into the timer table.\n        //\n        Integer notifID = Integer.valueOf(++counterID);\n\n        // The sequenceNumber and the timeStamp attributes are updated\n        // when the notification is emitted by the timer.\n        //\n        TimerNotification notif = new TimerNotification(type, this, 0, 0, message, notifID);\n        notif.setUserData(userData);\n\n        Object[] obj = new Object[6];\n\n        TimerAlarmClock alarmClock;\n        if (fixedRate)\n        {\n          alarmClock = new TimerAlarmClock(this, date);\n        }\n        else\n        {\n          alarmClock = new TimerAlarmClock(this, (date.getTime() - currentDate.getTime()));\n        }\n\n        // Fix bug 00417.B\n        // The date registered into the timer is a clone from the date parameter.\n        //\n        Date d = new Date(date.getTime());\n\n        obj[TIMER_NOTIF_INDEX] = (Object)notif;\n        obj[TIMER_DATE_INDEX] = (Object)d;\n        obj[TIMER_PERIOD_INDEX] = (Object) period;\n        obj[TIMER_NB_OCCUR_INDEX] = (Object) nbOccurences;\n        obj[ALARM_CLOCK_INDEX] = (Object)alarmClock;\n        obj[FIXED_RATE_INDEX] = Boolean.valueOf(fixedRate);\n\n        if (TIMER_LOGGER.isLoggable(Level.FINER)) {\n            StringBuilder strb = new StringBuilder()\n            .append(\"adding timer notification:\\n\\t\")\n            .append(\"Notification source = \")\n            .append(notif.getSource())\n            .append(\"\\n\\tNotification type = \")\n            .append(notif.getType())\n            .append(\"\\n\\tNotification ID = \")\n            .append(notifID)\n            .append(\"\\n\\tNotification date = \")\n            .append(d)\n            .append(\"\\n\\tNotification period = \")\n            .append(period)\n            .append(\"\\n\\tNotification nb of occurrences = \")\n            .append(nbOccurences)\n            .append(\"\\n\\tNotification executes at fixed rate = \")\n            .append(fixedRate);\n            TIMER_LOGGER.logp(Level.FINER, Timer.class.getName(),\n                    \"addNotification\", strb.toString());\n        }\n\n        timerTable.put(notifID, obj);\n\n        // Update and start the TimerAlarmClock.\n        //\n        if (isActive == true) {\n          if (fixedRate)\n          {\n            timer.schedule(alarmClock, alarmClock.next);\n          }\n          else\n          {\n            timer.schedule(alarmClock, alarmClock.timeout);\n          }\n        }\n\n        TIMER_LOGGER.logp(Level.FINER, Timer.class.getName(),\n                \"addNotification\", \"timer notification added\");\n        return notifID;\n    }"}
{"Number":"1455","API Relative Path":"javax.sql.rowset.BaseRowSet.java-setArray(int-Array)","Corresponding Source":"/**\n     * Sets the designated parameter to an <code>Array<\/code> object in the\n     * Java programming language.  The driver converts this to an SQL\n     * <code>ARRAY<\/code> value when it sends it to the database. Internally,\n     * the <code>Array<\/code> is represented as a <code>SerialArray<\/code>\n     * to ensure serializability.\n     * <P>\n     * The parameter value set by this method is stored internally and\n     * will be supplied as the appropriate parameter in this <code>RowSet<\/code>\n     * object's command when the method <code>execute<\/code> is called.\n     * Methods such as <code>execute<\/code> and <code>populate<\/code> must be\n     * provided in any class that extends this class and implements one or\n     * more of the standard JSR-114 <code>RowSet<\/code> interfaces.\n     * <P>\n     * Note: <code>JdbcRowSet<\/code> does not require the <code>populate<\/code> method\n     * as it is undefined in this class.\n     * <p>\n     * After this method has been called, a call to the\n     * method <code>getParams<\/code>\n     * will return an object array of the current command parameters, which will\n     * include the <code>Array<\/code> object set for placeholder parameter number\n     * <code>parameterIndex<\/code>.\n     * Note that because the numbering of elements in an array starts at zero,\n     * the array element that corresponds to placeholder parameter number\n     * <i>parameterIndex<\/i> is element number <i>parameterIndex<\/i> -1.\n     *\n     * @param parameterIndex the ordinal number of the placeholder parameter\n     *        in this <code>RowSet<\/code> object's command that is to be set.\n     *        The first parameter is 1, the second is 2, and so on; must be\n     *        <code>1<\/code> or greater\n     * @param array an <code>Array<\/code> object representing an SQL\n     *        <code>ARRAY<\/code> value; cannot be null. The <code>Array<\/code> object\n     *        passed to this method must return a non-null Object for all\n     *        <code>getArray()<\/code> method calls. A null value will cause a\n     *        <code>SQLException<\/code> to be thrown.\n     * @throws SQLException if an error occurs; the parameter index is out of\n     *        bounds or the <code>ARRAY<\/code> is null\n     * @see #getParams\n     * @see javax.sql.rowset.serial.SerialArray\n     */\n    public void setArray (int parameterIndex, Array array) throws SQLException {\n        checkParamIndex(parameterIndex);\n        if (params == null){\n             throw new SQLException(\"Set initParams() before setArray\");\n        }\n        params.put(Integer.valueOf(parameterIndex - 1), new SerialArray(array));\n    }"}
{"Number":"1456","API Relative Path":"javax.sql.rowset.BaseRowSet.java-setBlob(int-Blob)","Corresponding Source":"/**\n     * Sets the designated parameter to the given <code>Blob<\/code> object in\n     * the Java programming language.  The driver converts this to an SQL\n     * <code>BLOB<\/code> value when it sends it to the database. Internally,\n     * the <code>Blob<\/code> is represented as a <code>SerialBlob<\/code>\n     * to ensure serializability.\n     * <P>\n     * The parameter value set by this method is stored internally and\n     * will be supplied as the appropriate parameter in this <code>RowSet<\/code>\n     * object's command when the method <code>execute<\/code> is called.\n     * Methods such as <code>execute<\/code> and <code>populate<\/code> must be\n     * provided in any class that extends this class and implements one or\n     * more of the standard JSR-114 <code>RowSet<\/code> interfaces.\n     * NOTE: <code>JdbcRowSet<\/code> does not require the <code>populate<\/code> method\n     * as it is undefined in this class.\n     * <p>\n     * After this method has been called, a call to the\n     * method <code>getParams<\/code>\n     * will return an object array of the current command parameters, which will\n     * include the <code>Blob<\/code> object set for placeholder parameter number\n     * <code>parameterIndex<\/code>.\n     * Note that because the numbering of elements in an array starts at zero,\n     * the array element that corresponds to placeholder parameter number\n     * <i>parameterIndex<\/i> is element number <i>parameterIndex<\/i> -1.\n     *\n     * @param parameterIndex the ordinal number of the placeholder parameter\n     *        in this <code>RowSet<\/code> object's command that is to be set.\n     *        The first parameter is 1, the second is 2, and so on; must be\n     *        <code>1<\/code> or greater\n     * @param x a <code>Blob<\/code> object representing an SQL\n     *          <code>BLOB<\/code> value\n     * @throws SQLException if an error occurs or the\n     *                         parameter index is out of bounds\n     * @see #getParams\n     * @see javax.sql.rowset.serial.SerialBlob\n     */\n    public void setBlob (int parameterIndex, Blob x) throws SQLException {\n        checkParamIndex(parameterIndex);\n        if(params == null){\n             throw new SQLException(\"Set initParams() before setBlob\");\n        }\n        params.put(Integer.valueOf(parameterIndex - 1), new SerialBlob(x));\n    }"}
{"Number":"1457","API Relative Path":"javax.sql.rowset.BaseRowSet.java-setBlob(int-Blob)","Corresponding Source":"/**\n     * Sets the designated parameter to the given <code>Blob<\/code> object in\n     * the Java programming language.  The driver converts this to an SQL\n     * <code>BLOB<\/code> value when it sends it to the database. Internally,\n     * the <code>Blob<\/code> is represented as a <code>SerialBlob<\/code>\n     * to ensure serializability.\n     * <P>\n     * The parameter value set by this method is stored internally and\n     * will be supplied as the appropriate parameter in this <code>RowSet<\/code>\n     * object's command when the method <code>execute<\/code> is called.\n     * Methods such as <code>execute<\/code> and <code>populate<\/code> must be\n     * provided in any class that extends this class and implements one or\n     * more of the standard JSR-114 <code>RowSet<\/code> interfaces.\n     * NOTE: <code>JdbcRowSet<\/code> does not require the <code>populate<\/code> method\n     * as it is undefined in this class.\n     * <p>\n     * After this method has been called, a call to the\n     * method <code>getParams<\/code>\n     * will return an object array of the current command parameters, which will\n     * include the <code>Blob<\/code> object set for placeholder parameter number\n     * <code>parameterIndex<\/code>.\n     * Note that because the numbering of elements in an array starts at zero,\n     * the array element that corresponds to placeholder parameter number\n     * <i>parameterIndex<\/i> is element number <i>parameterIndex<\/i> -1.\n     *\n     * @param parameterIndex the ordinal number of the placeholder parameter\n     *        in this <code>RowSet<\/code> object's command that is to be set.\n     *        The first parameter is 1, the second is 2, and so on; must be\n     *        <code>1<\/code> or greater\n     * @param x a <code>Blob<\/code> object representing an SQL\n     *          <code>BLOB<\/code> value\n     * @throws SQLException if an error occurs or the\n     *                         parameter index is out of bounds\n     * @see #getParams\n     * @see javax.sql.rowset.serial.SerialBlob\n     */\n    public void setBlob (int parameterIndex, Blob x) throws SQLException {\n        checkParamIndex(parameterIndex);\n        if(params == null){\n             throw new SQLException(\"Set initParams() before setBlob\");\n        }\n        params.put(Integer.valueOf(parameterIndex - 1), new SerialBlob(x));\n    }"}
{"Number":"1458","API Relative Path":"javax.sql.rowset.BaseRowSet.java-setBoolean(int-boolean)","Corresponding Source":"/**\n     * Sets the designated parameter to the given <code>boolean<\/code> in the\n     * Java programming language.  The driver converts this to an SQL\n     * <code>BIT<\/code> value when it sends it to the database.\n     * <P>\n     * The parameter value set by this method is stored internally and\n     * will be supplied as the appropriate parameter in this <code>RowSet<\/code>\n     * object's command when the method <code>execute<\/code> is called.\n     * Methods such as <code>execute<\/code>, <code>populate<\/code> must be\n     * provided in any class that extends this class and implements one or\n     * more of the standard JSR-114 <code>RowSet<\/code> interfaces.\n     * <p>\n     * NOTE: <code>JdbcRowSet<\/code> does not require the <code>populate<\/code> method\n     * as it is undefined in this class.\n     *\n     * @param parameterIndex the ordinal number of the placeholder parameter\n     *        in this <code>RowSet<\/code> object's command that is to be set.\n     *        The first parameter is 1, the second is 2, and so on; must be\n     *        <code>1<\/code> or greater\n     * @param x the parameter value\n     * @throws SQLException if an error occurs or the\n     *                         parameter index is out of bounds\n     * @see #getParams\n     */\n    public void setBoolean(int parameterIndex, boolean x) throws SQLException {\n        checkParamIndex(parameterIndex);\n\n       if(params == null){\n            throw new SQLException(\"Set initParams() before setNull\");\n       }\n\n        params.put(Integer.valueOf(parameterIndex - 1), Boolean.valueOf(x));\n    }"}
{"Number":"1459","API Relative Path":"javax.sql.rowset.BaseRowSet.java-setByte(int-byte)","Corresponding Source":"/**\n     * Sets the designated parameter to the given <code>byte<\/code> in the Java\n     * programming language.  The driver converts this to an SQL\n     * <code>TINYINT<\/code> value when it sends it to the database.\n     * <P>\n     * The parameter value set by this method is stored internally and\n     * will be supplied as the appropriate parameter in this <code>RowSet<\/code>\n     * object's command when the method <code>execute<\/code> is called.\n     * Methods such as <code>execute<\/code> and <code>populate<\/code> must be\n     * provided in any class that extends this class and implements one or\n     * more of the standard JSR-114 <code>RowSet<\/code> interfaces.\n     * <p>\n     * NOTE: <code>JdbcRowSet<\/code> does not require the <code>populate<\/code> method\n     * as it is undefined in this class.\n     *\n     * @param parameterIndex the ordinal number of the placeholder parameter\n     *        in this <code>RowSet<\/code> object's command that is to be set.\n     *        The first parameter is 1, the second is 2, and so on; must be\n     *        <code>1<\/code> or greater\n     * @param x the parameter value\n     * @throws SQLException if an error occurs or the\n     *                         parameter index is out of bounds\n     * @see #getParams\n     */\n    public void setByte(int parameterIndex, byte x) throws SQLException {\n        checkParamIndex(parameterIndex);\n\n       if(params == null){\n            throw new SQLException(\"Set initParams() before setByte\");\n       }\n\n        params.put(Integer.valueOf(parameterIndex - 1), Byte.valueOf(x));\n    }"}
{"Number":"1460","API Relative Path":"javax.sql.rowset.BaseRowSet.java-setCharacterStream(int-Reader-int)","Corresponding Source":"/**\n     * Sets the designated parameter to the given <code>java.io.Reader<\/code>\n     * object, which will have the specified number of characters. The\n     * contents of the reader will be read and sent to the database.\n     * This method throws an <code>SQLException<\/code> if the number of bytes\n     * read and sent to the database is not equal to <i>length<\/i>.\n     * <P>\n     * When a very large Unicode value is input to a\n     * <code>LONGVARCHAR<\/code> parameter, it may be more practical\n     * to send it via a <code>Reader<\/code> object.\n     * A JDBC technology-enabled driver will read the data from the\n     * stream as needed until it reaches end-of-file.\n     * The driver will do any necessary conversion from Unicode to the\n     * database <code>CHAR<\/code> format.\n     * The byte format of the Unicode stream must be Java UTF-8, as\n     * defined in the Java Virtual Machine Specification.\n     *\n     * <P><B>Note:<\/B> This stream object can be either a standard\n     * Java stream object or your own subclass that implements the\n     * standard interface.\n     * <P>\n     * The parameter value set by this method is stored internally and\n     * will be supplied as the appropriate parameter in this <code>RowSet<\/code>\n     * object's command when the method <code>execute<\/code> is called.\n     * Methods such as <code>execute<\/code> and <code>populate<\/code> must be\n     * provided in any class that extends this class and implements one or\n     * more of the standard JSR-114 <code>RowSet<\/code> interfaces.\n     * <P>\n     * NOTE: <code>JdbcRowSet<\/code> does not require the <code>populate<\/code> method\n     * as it is undefined in this class.\n     * <P>\n     * Calls made to the method <code>getParams<\/code> after\n     * <code>setCharacterStream<\/code>\n     * has been called will return an array containing the parameter values that\n     * have been set.  In that array, the element that represents the values\n     * set with this method will itself be an array. The first element of that array\n     * is the given <code>java.io.Reader<\/code> object.\n     * The second element is the value set for <i>length<\/i>.\n     * The parameter number is indicated by an element's position in the array\n     * returned by the method <code>getParams<\/code>,\n     * with the first element being the value for the first placeholder parameter, the\n     * second element being the value for the second placeholder parameter, and so on.\n     * In other words, if the reader being set is the value for the second\n     * placeholder parameter, the array containing it will be the second element in\n     * the array returned by <code>getParams<\/code>.\n     * <P>\n     * Note that because the numbering of elements in an array starts at zero,\n     * the array element that corresponds to placeholder parameter number\n     * <i>parameterIndex<\/i> is element number <i>parameterIndex<\/i> -1.\n     *\n     * @param parameterIndex the ordinal number of the placeholder parameter\n     *        in this <code>RowSet<\/code> object's command that is to be set.\n     *        The first parameter is 1, the second is 2, and so on; must be\n     *        <code>1<\/code> or greater\n     * @param reader the <code>Reader<\/code> object that contains the\n     *        Unicode data\n     * @param length the number of characters in the stream; lengths of 0 or\n     *        less are undefined but will cause an invalid length exception to\n     *        be thrown in the underlying JDBC driver.\n     * @throws SQLException if an error occurs, the parameter index is out of bounds,\n     *        or when connected to a data source, the number of bytes the driver\n     *        reads and sends to the database is not equal to the number of bytes\n     *        specified in <i>length<\/i>\n     * @see #getParams\n     */\n    public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {\n        Object charStream[];\n        checkParamIndex(parameterIndex);\n\n        charStream = new Object[2];\n        charStream[0] = reader;\n        charStream[1] = Integer.valueOf(length);\n        if(params == null){\n             throw new SQLException(\"Set initParams() before setCharacterStream\");\n        }\n        params.put(Integer.valueOf(parameterIndex - 1), charStream);\n    }"}
{"Number":"1461","API Relative Path":"javax.sql.rowset.BaseRowSet.java-setClob(int-Clob)","Corresponding Source":"/**\n     * Sets the designated parameter to the given <code>Clob<\/code> object in\n     * the Java programming language.  The driver converts this to an SQL\n     * <code>CLOB<\/code> value when it sends it to the database. Internally, the\n     * <code>Clob<\/code> is represented as a <code>SerialClob<\/code> to ensure\n     * serializability.\n     * <P>\n     * The parameter value set by this method is stored internally and\n     * will be supplied as the appropriate parameter in this <code>RowSet<\/code>\n     * object's command when the method <code>execute<\/code> is called.\n     * Methods such as <code>execute<\/code> and <code>populate<\/code> must be\n     * provided in any class that extends this class and implements one or\n     * more of the standard JSR-114 <code>RowSet<\/code> interfaces.\n     * <p>\n     * NOTE: <code>JdbcRowSet<\/code> does not require the <code>populate<\/code> method\n     * as it is undefined in this class.\n     * <p>\n     * After this method has been called, a call to the\n     * method <code>getParams<\/code>\n     * will return an object array of the current command parameters, which will\n     * include the <code>Clob<\/code> object set for placeholder parameter number\n     * <code>parameterIndex<\/code>.\n     * Note that because the numbering of elements in an array starts at zero,\n     * the array element that corresponds to placeholder parameter number\n     * <i>parameterIndex<\/i> is element number <i>parameterIndex<\/i> -1.\n     *\n     * @param parameterIndex the ordinal number of the placeholder parameter\n     *     in this <code>RowSet<\/code> object's command that is to be set.\n     *     The first parameter is 1, the second is 2, and so on; must be\n     *     <code>1<\/code> or greater\n     * @param x a <code>Clob<\/code> object representing an SQL\n     *     <code>CLOB<\/code> value; cannot be null\n     * @throws SQLException if an error occurs; the parameter index is out of\n     *     bounds or the <code>Clob<\/code> is null\n     * @see #getParams\n     * @see javax.sql.rowset.serial.SerialBlob\n     */\n    public void setClob (int parameterIndex, Clob x) throws SQLException {\n        checkParamIndex(parameterIndex);\n        if(params == null){\n             throw new SQLException(\"Set initParams() before setClob\");\n        }\n        params.put(Integer.valueOf(parameterIndex - 1), new SerialClob(x));\n    }"}
{"Number":"1462","API Relative Path":"javax.sql.rowset.BaseRowSet.java-setConcurrency(int)","Corresponding Source":"/**\n     * Sets the concurrency for this <code>RowSet<\/code> object to\n     * the specified concurrency. The default concurrency for any <code>RowSet<\/code>\n     * object (connected or disconnected) is <code>ResultSet.CONCUR_UPDATABLE<\/code>,\n     * but this method may be called at any time to change the concurrency.\n     * <P>\n     * @param concurrency one of the following constants:\n     *                    <code>ResultSet.CONCUR_READ_ONLY<\/code> or\n     *                    <code>ResultSet.CONCUR_UPDATABLE<\/code>\n     * @throws SQLException if the parameter supplied is not one of the\n     *         following constants:\n     *          <code>ResultSet.CONCUR_UPDATABLE<\/code> or\n     *          <code>ResultSet.CONCUR_READ_ONLY<\/code>\n     * @see #getConcurrency\n     * @see #isReadOnly\n     */\n    public void setConcurrency(int concurrency) throws SQLException {\n\n        if((concurrency != ResultSet.CONCUR_READ_ONLY) &&\n           (concurrency != ResultSet.CONCUR_UPDATABLE)) {\n                throw new SQLException(\"Invalid concurrency set. Must be either \" +\n                \"ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE.\");\n        }\n        this.concurrency = concurrency;\n    }"}
{"Number":"1463","API Relative Path":"javax.sql.rowset.BaseRowSet.java-setDouble(int-double)","Corresponding Source":"/**\n     * Sets the designated parameter to the given <code>double<\/code> in the\n     * Java programming language.  The driver converts this to an SQL\n     * <code>DOUBLE<\/code> value when it sends it to the database.\n     * <P>\n     * The parameter value set by this method is stored internally and\n     * will be supplied as the appropriate parameter in this <code>RowSet<\/code>\n     * object's command when the method <code>execute<\/code> is called.\n     * Methods such as <code>execute<\/code> and <code>populate<\/code> must be\n     * provided in any class that extends this class and implements one or\n     * more of the standard JSR-114 <code>RowSet<\/code> interfaces.\n     * <P>\n     * NOTE: <code>JdbcRowSet<\/code> does not require the <code>populate<\/code> method\n     * as it is undefined in this class.\n     * S\n     * @param parameterIndex the ordinal number of the placeholder parameter\n     *        in this <code>RowSet<\/code> object's command that is to be set.\n     *        The first parameter is 1, the second is 2, and so on; must be\n     *        <code>1<\/code> or greater\n     * @param x the parameter value\n     * @throws SQLException if an error occurs or the\n     *                         parameter index is out of bounds\n     * @see #getParams\n     */\n    public void setDouble(int parameterIndex, double x) throws SQLException {\n        checkParamIndex(parameterIndex);\n        if(params == null){\n             throw new SQLException(\"Set initParams() before setDouble\");\n        }\n        params.put(Integer.valueOf(parameterIndex - 1), Double.valueOf(x));\n    }"}
{"Number":"1464","API Relative Path":"javax.sql.rowset.BaseRowSet.java-setFetchDirection(int)","Corresponding Source":"/**\n     * Gives the driver a performance hint as to the direction in\n     * which the rows in this <code>RowSet<\/code> object will be\n     * processed.  The driver may ignore this hint.\n     * <P>\n     * A <code>RowSet<\/code> object inherits the default properties of the\n     * <code>ResultSet<\/code> object from which it got its data.  That\n     * <code>ResultSet<\/code> object's default fetch direction is set by\n     * the <code>Statement<\/code> object that created it.\n     * <P>\n     * This method applies to a <code>RowSet<\/code> object only while it is\n     * connected to a database using a JDBC driver.\n     * <p>\n     * A <code>RowSet<\/code> object may use this method at any time to change\n     * its setting for the fetch direction.\n     *\n     * @param direction one of <code>ResultSet.FETCH_FORWARD<\/code>,\n     *                  <code>ResultSet.FETCH_REVERSE<\/code>, or\n     *                  <code>ResultSet.FETCH_UNKNOWN<\/code>\n     * @throws SQLException if (1) the <code>RowSet<\/code> type is\n     *     <code>TYPE_FORWARD_ONLY<\/code> and the given fetch direction is not\n     *     <code>FETCH_FORWARD<\/code> or (2) the given fetch direction is not\n     *     one of the following:\n     *        ResultSet.FETCH_FORWARD,\n     *        ResultSet.FETCH_REVERSE, or\n     *        ResultSet.FETCH_UNKNOWN\n     * @see #getFetchDirection\n     */\n    public void setFetchDirection(int direction) throws SQLException {\n        // Changed the condition checking to the below as there were two\n        // conditions that had to be checked\n        // 1. RowSet is TYPE_FORWARD_ONLY and direction is not FETCH_FORWARD\n        // 2. Direction is not one of the valid values\n\n        if (((getType() == ResultSet.TYPE_FORWARD_ONLY) && (direction != ResultSet.FETCH_FORWARD)) ||\n            ((direction != ResultSet.FETCH_FORWARD) &&\n            (direction != ResultSet.FETCH_REVERSE) &&\n            (direction != ResultSet.FETCH_UNKNOWN))) {\n            throw new SQLException(\"Invalid Fetch Direction\");\n        }\n        fetchDir = direction;\n    }"}
{"Number":"1465","API Relative Path":"javax.sql.rowset.BaseRowSet.java-setFetchSize(int)","Corresponding Source":"/**\n     * Sets the fetch size for this <code>RowSet<\/code> object to the given number of\n     * rows.  The fetch size gives a JDBC technology-enabled driver (\"JDBC driver\")\n     * a hint as to the\n     * number of rows that should be fetched from the database when more rows\n     * are needed for this <code>RowSet<\/code> object. If the fetch size specified\n     * is zero, the driver ignores the value and is free to make its own best guess\n     * as to what the fetch size should be.\n     * <P>\n     * A <code>RowSet<\/code> object inherits the default properties of the\n     * <code>ResultSet<\/code> object from which it got its data.  That\n     * <code>ResultSet<\/code> object's default fetch size is set by\n     * the <code>Statement<\/code> object that created it.\n     * <P>\n     * This method applies to a <code>RowSet<\/code> object only while it is\n     * connected to a database using a JDBC driver.\n     * For connected <code>RowSet<\/code> implementations such as\n     * <code>JdbcRowSet<\/code>, this method has a direct and immediate effect\n     * on the underlying JDBC driver.\n     * <P>\n     * A <code>RowSet<\/code> object may use this method at any time to change\n     * its setting for the fetch size.\n     * <p>\n     * For <code>RowSet<\/code> implementations such as\n     * <code>CachedRowSet<\/code>, which operate in a disconnected environment,\n     * the <code>SyncProvider<\/code> object being used\n     * may leverage the fetch size to poll the data source and\n     * retrieve a number of rows that do not exceed the fetch size and that may\n     * form a subset of the actual rows returned by the original query. This is\n     * an implementation variance determined by the specific <code>SyncProvider<\/code>\n     * object employed by the disconnected <code>RowSet<\/code> object.\n     * <P>\n     *\n     * @param rows the number of rows to fetch; <code>0<\/code> to let the\n     *        driver decide what the best fetch size is; must not be less\n     *        than <code>0<\/code> or more than the maximum number of rows\n     *        allowed for this <code>RowSet<\/code> object (the number returned\n     *        by a call to the method {@link #getMaxRows})\n     * @throws SQLException if the specified fetch size is less than <code>0<\/code>\n     *        or more than the limit for the maximum number of rows\n     * @see #getFetchSize\n     */\n    public void setFetchSize(int rows) throws SQLException {\n        //Added this checking as maxRows can be 0 when this function is called\n        //maxRows = 0 means rowset can hold any number of rows, os this checking\n        // is needed to take care of this condition.\n        if (getMaxRows() == 0 && rows >= 0)  {\n            fetchSize = rows;\n            return;\n        }\n        if ((rows < 0) || (rows > getMaxRows())) {\n            throw new SQLException(\"Invalid fetch size set. Cannot be of \" +\n            \"value: \" + rows);\n        }\n        fetchSize = rows;\n    }"}
{"Number":"1466","API Relative Path":"javax.sql.rowset.BaseRowSet.java-setFloat(int-float)","Corresponding Source":"/**\n     * Sets the designated parameter to the given <code>float<\/code> in the\n     * Java programming language.  The driver converts this to an SQL\n     * <code>FLOAT<\/code> value when it sends it to the database.\n     * <P>\n     * The parameter value set by this method is stored internally and\n     * will be supplied as the appropriate parameter in this <code>RowSet<\/code>\n     * object's command when the method <code>execute<\/code> is called.\n     * Methods such as <code>execute<\/code> and <code>populate<\/code> must be\n     * provided in any class that extends this class and implements one or\n     * more of the standard JSR-114 <code>RowSet<\/code> interfaces.\n     * <P>\n     * NOTE: <code>JdbcRowSet<\/code> does not require the <code>populate<\/code> method\n     * as it is undefined in this class.\n     *\n     * @param parameterIndex the ordinal number of the placeholder parameter\n     *        in this <code>RowSet<\/code> object's command that is to be set.\n     *        The first parameter is 1, the second is 2, and so on; must be\n     *        <code>1<\/code> or greater\n     * @param x the parameter value\n     * @throws SQLException if an error occurs or the\n     *                         parameter index is out of bounds\n     * @see #getParams\n     */\n    public void setFloat(int parameterIndex, float x) throws SQLException {\n        checkParamIndex(parameterIndex);\n        if(params == null){\n             throw new SQLException(\"Set initParams() before setFloat\");\n        }\n        params.put(Integer.valueOf(parameterIndex - 1), Float.valueOf(x));\n    }"}
{"Number":"1467","API Relative Path":"javax.sql.rowset.BaseRowSet.java-setInt(int-int)","Corresponding Source":"/**\n     * Sets the designated parameter to an <code>int<\/code> in the Java\n     * programming language.  The driver converts this to an SQL\n     * <code>INTEGER<\/code> value when it sends it to the database.\n     * <P>\n     * The parameter value set by this method is stored internally and\n     * will be supplied as the appropriate parameter in this <code>RowSet<\/code>\n     * object's command when the method <code>execute<\/code> is called.\n     * Methods such as <code>execute<\/code> and <code>populate<\/code> must be\n     * provided in any class that extends this class and implements one or\n     * more of the standard JSR-114 <code>RowSet<\/code> interfaces.\n     * <P>\n     * NOTE: <code>JdbcRowSet<\/code> does not require the <code>populate<\/code> method\n     * as it is undefined in this class.\n     *\n     * @param parameterIndex the ordinal number of the placeholder parameter\n     *        in this <code>RowSet<\/code> object's command that is to be set.\n     *        The first parameter is 1, the second is 2, and so on; must be\n     *        <code>1<\/code> or greater\n     * @param x the parameter value\n     * @throws SQLException if an error occurs or the\n     *                         parameter index is out of bounds\n     * @see #getParams\n     */\n    public void setInt(int parameterIndex, int x) throws SQLException {\n        checkParamIndex(parameterIndex);\n        if(params == null){\n             throw new SQLException(\"Set initParams() before setInt\");\n        }\n        params.put(Integer.valueOf(parameterIndex - 1), Integer.valueOf(x));\n    }"}
{"Number":"1468","API Relative Path":"javax.sql.rowset.BaseRowSet.java-setLong(int-long)","Corresponding Source":"/**\n     * Sets the designated parameter to the given <code>long<\/code> in the Java\n     * programming language.  The driver converts this to an SQL\n     * <code>BIGINT<\/code> value when it sends it to the database.\n     * <P>\n     * The parameter value set by this method is stored internally and\n     * will be supplied as the appropriate parameter in this <code>RowSet<\/code>\n     * object's command when the method <code>execute<\/code> is called.\n     * Methods such as <code>execute<\/code> and <code>populate<\/code> must be\n     * provided in any class that extends this class and implements one or\n     * more of the standard JSR-114 <code>RowSet<\/code> interfaces.\n     * <P>\n     * NOTE: <code>JdbcRowSet<\/code> does not require the <code>populate<\/code> method\n     * as it is undefined in this class.\n     *\n     * @param parameterIndex the ordinal number of the placeholder parameter\n     *        in this <code>RowSet<\/code> object's command that is to be set.\n     *        The first parameter is 1, the second is 2, and so on; must be\n     *        <code>1<\/code> or greater\n     * @param x the parameter value\n     * @throws SQLException if an error occurs or the\n     *                         parameter index is out of bounds\n     * @see #getParams\n     */\n    public void setLong(int parameterIndex, long x) throws SQLException {\n        checkParamIndex(parameterIndex);\n        if(params == null){\n             throw new SQLException(\"Set initParams() before setLong\");\n        }\n        params.put(Integer.valueOf(parameterIndex - 1), Long.valueOf(x));\n    }"}
{"Number":"1469","API Relative Path":"javax.sql.rowset.BaseRowSet.java-setMaxFieldSize(int)","Corresponding Source":"/**\n     * Sets the maximum number of bytes that can be used for a column\n     * value in this <code>RowSet<\/code> object to the given number.\n     * This limit applies only to columns that hold values of the\n     * following types:  <code>BINARY<\/code>, <code>VARBINARY<\/code>,\n     * <code>LONGVARBINARY<\/code>, <code>CHAR<\/code>, <code>VARCHAR<\/code>,\n     * and <code>LONGVARCHAR<\/code>.  If the limit is exceeded, the excess\n     * data is silently discarded. For maximum portability, it is advisable to\n     * use values greater than 256.\n     *\n     * @param max an <code>int<\/code> indicating the new maximum column size\n     *     limit; zero means that there is no limit\n     * @throws SQLException if (1) an error occurs internally setting the\n     *     maximum limit of the column size or (2) a size of less than 0 is set\n     */\n    public void setMaxFieldSize(int max) throws SQLException {\n        if (max < 0) {\n            throw new SQLException(\"Invalid max field size set. Cannot be of \" +\n            \"value: \" + max);\n        }\n        maxFieldSize = max;\n    }"}
{"Number":"1470","API Relative Path":"javax.sql.rowset.BaseRowSet.java-setNull(int-int)","Corresponding Source":"//---------------------------------------------------------------------\n    // setter methods for setting the parameters in a <code>RowSet<\/code> object's command\n    //---------------------------------------------------------------------\n\n    /**\n     * Sets the designated parameter to SQL <code>NULL<\/code>.\n     * Note that the parameter's SQL type must be specified using one of the\n         * type codes defined in <code>java.sql.Types<\/code>.  This SQL type is\n     * specified in the second parameter.\n     * <p>\n     * Note that the second parameter tells the DBMS the data type of the value being\n     * set to <code>NULL<\/code>. Some DBMSs require this information, so it is required\n     * in order to make code more portable.\n     * <P>\n     * The parameter value set by this method is stored internally and\n     * will be supplied as the appropriate parameter in this <code>RowSet<\/code>\n     * object's command when the method <code>execute<\/code> is called.\n     * Methods such as <code>execute<\/code> and <code>populate<\/code> must be\n     * provided in any class that extends this class and implements one or\n     * more of the standard JSR-114 <code>RowSet<\/code> interfaces.\n     * <P>\n     * NOTE: <code>JdbcRowSet<\/code> does not require the <code>populate<\/code> method\n     * as it is undefined in this class.\n     * <P>\n     * Calls made to the method <code>getParams<\/code> after this version of\n     * <code>setNull<\/code>\n     * has been called will return an <code>Object<\/code> array containing the parameter values that\n     * have been set.  In that array, the element that represents the values\n     * set with this method will itself be an array. The first element of that array\n     * is <code>null<\/code>.\n     * The second element is the value set for <i>sqlType<\/i>.\n     * The parameter number is indicated by an element's position in the array\n     * returned by the method <code>getParams<\/code>,\n     * with the first element being the value for the first placeholder parameter, the\n     * second element being the value for the second placeholder parameter, and so on.\n     * In other words, if the second placeholder parameter is being set to\n     * <code>null<\/code>, the array containing it will be the second element in\n     * the array returned by <code>getParams<\/code>.\n     * <P>\n     * Note that because the numbering of elements in an array starts at zero,\n     * the array element that corresponds to placeholder parameter number\n     * <i>parameterIndex<\/i> is <i>parameterIndex<\/i> -1.\n     *\n     * @param parameterIndex the ordinal number of the placeholder parameter\n     *        in this <code>RowSet<\/code> object's command that is to be set.\n     *        The first parameter is 1, the second is 2, and so on; must be\n     *        <code>1<\/code> or greater\n     * @param sqlType an <code>int<\/code> that is one of the SQL type codes\n     *        defined in the class {@link java.sql.Types}. If a non-standard\n     *        <i>sqlType<\/i> is supplied, this method will not throw a\n     *        <code>SQLException<\/code>. This allows implicit support for\n     *        non-standard SQL types.\n     * @throws SQLException if a database access error occurs or the given\n     *        parameter index is out of bounds\n     * @see #getParams\n     */\n    public void setNull(int parameterIndex, int sqlType) throws SQLException {\n        Object nullVal[];\n        checkParamIndex(parameterIndex);\n\n        nullVal = new Object[2];\n        nullVal[0] = null;\n        nullVal[1] = Integer.valueOf(sqlType);\n\n       if (params == null){\n            throw new SQLException(\"Set initParams() before setNull\");\n       }\n\n        params.put(Integer.valueOf(parameterIndex - 1), nullVal);\n    }"}
{"Number":"1471","API Relative Path":"javax.sql.rowset.BaseRowSet.java-setNull(int-int-String)","Corresponding Source":"/**\n     * Sets the designated parameter to SQL <code>NULL<\/code>.\n     *\n     * Although this version of the  method <code>setNull<\/code> is intended\n     * for user-defined\n     * and <code>REF<\/code> parameters, this method may be used to set a null\n     * parameter for any JDBC type. The following are user-defined types:\n     * <code>STRUCT<\/code>, <code>DISTINCT<\/code>, and <code>JAVA_OBJECT<\/code>,\n     * and named array types.\n     *\n     * <P><B>Note:<\/B> To be portable, applications must give the\n     * SQL type code and the fully qualified SQL type name when specifying\n     * a <code>NULL<\/code> user-defined or <code>REF<\/code> parameter.\n     * In the case of a user-defined type, the name is the type name of\n     * the parameter itself.  For a <code>REF<\/code> parameter, the name is\n     * the type name of the referenced type.  If a JDBC technology-enabled\n     * driver does not need the type code or type name information,\n     * it may ignore it.\n     * <P>\n     * If the parameter does not have a user-defined or <code>REF<\/code> type,\n     * the given <code>typeName<\/code> parameter is ignored.\n     * <P>\n     * The parameter value set by this method is stored internally and\n     * will be supplied as the appropriate parameter in this <code>RowSet<\/code>\n     * object's command when the method <code>execute<\/code> is called.\n     * Methods such as <code>execute<\/code> and <code>populate<\/code> must be\n     * provided in any class that extends this class and implements one or\n     * more of the standard JSR-114 <code>RowSet<\/code> interfaces.\n     * <P>\n     * NOTE: <code>JdbcRowSet<\/code> does not require the <code>populate<\/code> method\n     * as it is undefined in this class.\n     * <P>\n     * Calls made to the method <code>getParams<\/code> after this version of\n     * <code>setNull<\/code>\n     * has been called will return an <code>Object<\/code> array containing the parameter values that\n     * have been set.  In that array, the element that represents the values\n     * set with this method will itself be an array. The first element of that array\n     * is <code>null<\/code>.\n     * The second element is the value set for <i>sqlType<\/i>, and the third\n     * element is the value set for <i>typeName<\/i>.\n     * The parameter number is indicated by an element's position in the array\n     * returned by the method <code>getParams<\/code>,\n     * with the first element being the value for the first placeholder parameter, the\n     * second element being the value for the second placeholder parameter, and so on.\n     * In other words, if the second placeholder parameter is being set to\n     * <code>null<\/code>, the array containing it will be the second element in\n     * the array returned by <code>getParams<\/code>.\n     * <P>\n     * Note that because the numbering of elements in an array starts at zero,\n     * the array element that corresponds to placeholder parameter number\n     * <i>parameterIndex<\/i> is <i>parameterIndex<\/i> -1.\n     *\n     * @param parameterIndex the ordinal number of the placeholder parameter\n     *        in this <code>RowSet<\/code> object's command that is to be set.\n     *        The first parameter is 1, the second is 2, and so on; must be\n     *        <code>1<\/code> or greater\n     * @param sqlType a value from <code>java.sql.Types<\/code>\n     * @param typeName the fully qualified name of an SQL user-defined type,\n     *                 which is ignored if the parameter is not a user-defined\n     *                 type or <code>REF<\/code> value\n     * @throws SQLException if an error occurs or the given parameter index\n     *            is out of bounds\n     * @see #getParams\n     */\n    public void setNull(int parameterIndex, int sqlType, String typeName)\n        throws SQLException {\n\n        Object nullVal[];\n        checkParamIndex(parameterIndex);\n\n        nullVal = new Object[3];\n        nullVal[0] = null;\n        nullVal[1] = Integer.valueOf(sqlType);\n        nullVal[2] = typeName;\n\n       if(params == null){\n            throw new SQLException(\"Set initParams() before setNull\");\n       }\n\n        params.put(Integer.valueOf(parameterIndex - 1), nullVal);\n    }"}
{"Number":"1472","API Relative Path":"javax.sql.rowset.BaseRowSet.java-setObject(int-Object)","Corresponding Source":"/**\n     * Sets the designated parameter to an <code>Object<\/code> in the Java\n     * programming language. The second parameter must be an\n     * <code>Object<\/code>\n     * type.  For integral values, the <code>java.lang<\/code> equivalent\n     * objects should be used. For example, use the class <code>Integer<\/code>\n     * for an <code>int<\/code>.\n     * <P>\n     * The JDBC specification defines a standard mapping from\n     * Java <code>Object<\/code> types to SQL types.  The driver will\n     * use this standard mapping to  convert the given object\n     * to its corresponding SQL type before sending it to the database.\n     * If the object has a custom mapping (is of a class implementing\n     * <code>SQLData<\/code>), the driver should call the method\n     * <code>SQLData.writeSQL<\/code> to write the object to the SQL\n     * data stream.\n     * <P>\n     * If, on the other hand, the object is of a class\n     * implementing <code>Ref<\/code>, <code>Blob<\/code>, <code>Clob<\/code>,\n     * <code>Struct<\/code>, or <code>Array<\/code>,\n     * the driver should pass it to the database as a value of the\n     * corresponding SQL type.\n     * <P>\n     * This method throws an exception if there\n     * is an ambiguity, for example, if the object is of a class\n     * implementing more than one interface.\n     * <P>\n     * Note that this method may be used to pass database-specific\n     * abstract data types.\n     * <P>\n     * The parameter value set by this method is stored internally and\n     * will be supplied as the appropriate parameter in this <code>RowSet<\/code>\n     * object's command when the method <code>execute<\/code> is called.\n     * Methods such as <code>execute<\/code> and <code>populate<\/code> must be\n     * provided in any class that extends this class and implements one or\n     * more of the standard JSR-114 <code>RowSet<\/code> interfaces.\n     * <p>\n     * NOTE: <code>JdbcRowSet<\/code> does not require the <code>populate<\/code> method\n     * as it is undefined in this class.\n     * <P>\n     * After this method has been called, a call to the\n     * method <code>getParams<\/code>\n     * will return an object array of the current command parameters, which will\n     * include the <code>Object<\/code> set for placeholder parameter number\n     * <code>parameterIndex<\/code>.\n     * Note that because the numbering of elements in an array starts at zero,\n     * the array element that corresponds to placeholder parameter number\n     * <i>parameterIndex<\/i> is element number <i>parameterIndex<\/i> -1.\n     *\n     * @param parameterIndex the ordinal number of the placeholder parameter\n     *        in this <code>RowSet<\/code> object's command that is to be set.\n     *        The first parameter is 1, the second is 2, and so on; must be\n     *        <code>1<\/code> or greater\n     * @param x the object containing the input parameter value\n     * @throws SQLException if an error occurs the\n     *                         parameter index is out of bounds, or there\n     *                         is ambiguity in the implementation of the\n     *                         object being set\n     * @see #getParams\n     */\n    public void setObject(int parameterIndex, Object x) throws SQLException {\n        checkParamIndex(parameterIndex);\n        if (params == null) {\n             throw new SQLException(\"Set initParams() before setObject\");\n        }\n        params.put(Integer.valueOf(parameterIndex - 1), x);\n    }"}
{"Number":"1473","API Relative Path":"javax.sql.rowset.BaseRowSet.java-setObject(int-Object-int)","Corresponding Source":"/**\n     * Sets the value of the designated parameter with the given\n     * <code>Object<\/code> value.\n     * This method is like <code>setObject(int parameterIndex, Object x, int\n     * targetSqlType, int scale)<\/code> except that it assumes a scale of zero.\n     * <P>\n     * The parameter value set by this method is stored internally and\n     * will be supplied as the appropriate parameter in this <code>RowSet<\/code>\n     * object's command when the method <code>execute<\/code> is called.\n     * Methods such as <code>execute<\/code> and <code>populate<\/code> must be\n     * provided in any class that extends this class and implements one or\n     * more of the standard JSR-114 <code>RowSet<\/code> interfaces.\n     * <P>\n     * NOTE: <code>JdbcRowSet<\/code> does not require the <code>populate<\/code> method\n     * as it is undefined in this class.\n     * <P>\n     * Calls made to the method <code>getParams<\/code> after this version of\n     * <code>setObject<\/code>\n     * has been called will return an array containing the parameter values that\n     * have been set.  In that array, the element that represents the values\n     * set with this method will itself be an array. The first element of that array\n     * is the given <code>Object<\/code> instance.\n     * The second element is the value set for <i>targetSqlType<\/i>.\n     * The parameter number is indicated by an element's position in the array\n     * returned by the method <code>getParams<\/code>,\n     * with the first element being the value for the first placeholder parameter, the\n     * second element being the value for the second placeholder parameter, and so on.\n     * In other words, if the object being set is the value for the second\n     * placeholder parameter, the array containing it will be the second element in\n     * the array returned by <code>getParams<\/code>.\n     * <P>\n     * Note that because the numbering of elements in an array starts at zero,\n     * the array element that corresponds to placeholder parameter number\n     * <i>parameterIndex<\/i> is element number <i>parameterIndex<\/i> -1.\n     *\n     * @param parameterIndex the ordinal number of the placeholder parameter\n     *        in this <code>RowSet<\/code> object's command that is to be set.\n     *        The first parameter is 1, the second is 2, and so on; must be\n     *        <code>1<\/code> or greater\n     * @param x the <code>Object<\/code> containing the input parameter value;\n     *        must be an <code>Object<\/code> type\n     * @param targetSqlType the SQL type (as defined in <code>java.sql.Types<\/code>)\n     *        to be sent to the database. If a non-standard <i>targetSqlType<\/i>\n     *        is supplied, this method will not throw a <code>SQLException<\/code>.\n     *        This allows implicit support for non-standard SQL types.\n     * @throws SQLException if an error occurs or the parameter index\n     *        is out of bounds\n     * @see #getParams\n     */\n    public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {\n        Object obj[];\n        checkParamIndex(parameterIndex);\n\n        obj = new Object[2];\n        obj[0] = x;\n        obj[1] = Integer.valueOf(targetSqlType);\n        if (params == null){\n             throw new SQLException(\"Set initParams() before setObject\");\n        }\n        params.put(Integer.valueOf(parameterIndex - 1), obj);\n    }"}
{"Number":"1474","API Relative Path":"javax.sql.rowset.BaseRowSet.java-setObject(int-Object-int-int)","Corresponding Source":"/**\n     * Sets the designated parameter to an <code>Object<\/code> in the Java\n     * programming language. The second parameter must be an\n     * <code>Object<\/code> type.  For integral values, the\n     * <code>java.lang<\/code> equivalent\n     * objects should be used. For example, use the class <code>Integer<\/code>\n     * for an <code>int<\/code>.\n     * <P>\n     * The driver converts this object to the specified\n     * target SQL type before sending it to the database.\n     * If the object has a custom mapping (is of a class implementing\n     * <code>SQLData<\/code>), the driver should call the method\n     * <code>SQLData.writeSQL<\/code> to write the object to the SQL\n     * data stream. If, on the other hand, the object is of a class\n     * implementing <code>Ref<\/code>, <code>Blob<\/code>, <code>Clob<\/code>,\n     * <code>Struct<\/code>, or <code>Array<\/code>,\n     * the driver should pass it to the database as a value of the\n     * corresponding SQL type.\n     *\n     * <p>Note that this method may be used to pass database-\n     * specific abstract data types.\n     * <P>\n     * The parameter value set by this method is stored internally and\n     * will be supplied as the appropriate parameter in this <code>RowSet<\/code>\n     * object's command when the method <code>execute<\/code> is called.\n     * Methods such as <code>execute<\/code> and <code>populate<\/code> must be\n     * provided in any class that extends this class and implements one or\n     * more of the standard JSR-114 <code>RowSet<\/code> interfaces.\n     * <P>\n     * NOTE: <code>JdbcRowSet<\/code> does not require the <code>populate<\/code> method\n     * as it is undefined in this class.\n     * <P>\n     * Calls made to the method <code>getParams<\/code> after this version of\n     * <code>setObject<\/code>\n     * has been called will return an array containing the parameter values that\n     * have been set.  In that array, the element that represents the values\n     * set with this method will itself be an array. The first element of that array\n     * is the given <code>Object<\/code> instance, and the\n     * second element is the value set for <i>targetSqlType<\/i>.  The\n     * third element is the value set for <i>scale<\/i>, which the driver will\n     * ignore if the type of the object being set is not\n     * <code>java.sql.Types.NUMERIC<\/code> or <code>java.sql.Types.DECIMAL<\/code>.\n     * The parameter number is indicated by an element's position in the array\n     * returned by the method <code>getParams<\/code>,\n     * with the first element being the value for the first placeholder parameter, the\n     * second element being the value for the second placeholder parameter, and so on.\n     * In other words, if the object being set is the value for the second\n     * placeholder parameter, the array containing it will be the second element in\n     * the array returned by <code>getParams<\/code>.\n     *<P>\n     * Note that because the numbering of elements in an array starts at zero,\n     * the array element that corresponds to placeholder parameter number\n     * <i>parameterIndex<\/i> is element number <i>parameterIndex<\/i> -1.\n     *\n     *\n     * @param parameterIndex the ordinal number of the placeholder parameter\n     *        in this <code>RowSet<\/code> object's command that is to be set.\n     *        The first parameter is 1, the second is 2, and so on; must be\n     *        <code>1<\/code> or greater\n     * @param x the <code>Object<\/code> containing the input parameter value;\n     *        must be an <code>Object<\/code> type\n     * @param targetSqlType the SQL type (as defined in <code>java.sql.Types<\/code>)\n     *        to be sent to the database. The <code>scale<\/code> argument may\n     *        further qualify this type. If a non-standard <i>targetSqlType<\/i>\n     *        is supplied, this method will not throw a <code>SQLException<\/code>.\n     *        This allows implicit support for non-standard SQL types.\n     * @param scale for the types <code>java.sql.Types.DECIMAL<\/code> and\n     *        <code>java.sql.Types.NUMERIC<\/code>, this is the number\n     *        of digits after the decimal point.  For all other types, this\n     *        value will be ignored.\n     * @throws SQLException if an error occurs or the parameter index is out of bounds\n     * @see #getParams\n     */\n    public void setObject(int parameterIndex, Object x, int targetSqlType, int scale) throws SQLException {\n        Object obj[];\n        checkParamIndex(parameterIndex);\n\n        obj = new Object[3];\n        obj[0] = x;\n        obj[1] = Integer.valueOf(targetSqlType);\n        obj[2] = Integer.valueOf(scale);\n        if(params == null){\n             throw new SQLException(\"Set initParams() before setObject\");\n        }\n        params.put(Integer.valueOf(parameterIndex - 1), obj);\n    }"}
{"Number":"1475","API Relative Path":"javax.sql.rowset.BaseRowSet.java-setQueryTimeout(int)","Corresponding Source":"/**\n     * Sets to the given number the maximum number of seconds the driver will\n     * wait for a query to execute. If the limit is exceeded, an\n     * <code>SQLException<\/code> is thrown.\n     *\n     * @param seconds the new query time-out limit in seconds; zero means that\n     *     there is no limit; must not be less than zero\n     * @throws SQLException if an error occurs setting the query\n     *     time-out or if the query time-out value is less than 0\n     */\n    public void setQueryTimeout(int seconds) throws SQLException {\n        if (seconds < 0) {\n            throw new SQLException(\"Invalid query timeout value set. Cannot be \" +\n            \"of value: \" + seconds);\n        }\n        this.queryTimeout = seconds;\n    }"}
{"Number":"1476","API Relative Path":"javax.sql.rowset.BaseRowSet.java-setRef(int-Ref)","Corresponding Source":"/**\n     * Sets the designated parameter to the given <code>Ref<\/code> object in\n     * the Java programming language.  The driver converts this to an SQL\n     * <code>REF<\/code> value when it sends it to the database. Internally, the\n     * <code>Ref<\/code> is represented as a <code>SerialRef<\/code> to ensure\n     * serializability.\n     * <P>\n     * The parameter value set by this method is stored internally and\n     * will be supplied as the appropriate parameter in this <code>RowSet<\/code>\n     * object's command when the method <code>execute<\/code> is called.\n     * Methods such as <code>execute<\/code> and <code>populate<\/code> must be\n     * provided in any class that extends this class and implements one or\n     * more of the standard JSR-114 <code>RowSet<\/code> interfaces.\n     * <p>\n     * NOTE: <code>JdbcRowSet<\/code> does not require the <code>populate<\/code> method\n     * as it is undefined in this class.\n     * <p>\n     * After this method has been called, a call to the\n     * method <code>getParams<\/code>\n     * will return an object array of the current command parameters, which will\n     * include the <code>Ref<\/code> object set for placeholder parameter number\n     * <code>parameterIndex<\/code>.\n     * Note that because the numbering of elements in an array starts at zero,\n     * the array element that corresponds to placeholder parameter number\n     * <i>parameterIndex<\/i> is element number <i>parameterIndex<\/i> -1.\n     *\n     * @param parameterIndex the ordinal number of the placeholder parameter\n     *        in this <code>RowSet<\/code> object's command that is to be set.\n     *        The first parameter is 1, the second is 2, and so on; must be\n     *        <code>1<\/code> or greater\n     * @param ref a <code>Ref<\/code> object representing an SQL <code>REF<\/code>\n     *         value; cannot be null\n     * @throws SQLException if an error occurs; the parameter index is out of\n     *         bounds or the <code>Ref<\/code> object is <code>null<\/code>; or\n     *         the <code>Ref<\/code> object returns a <code>null<\/code> base type\n     *         name.\n     * @see #getParams\n     * @see javax.sql.rowset.serial.SerialRef\n     */\n    public void setRef (int parameterIndex, Ref ref) throws SQLException {\n        checkParamIndex(parameterIndex);\n        if (params == null) {\n             throw new SQLException(\"Set initParams() before setRef\");\n        }\n        params.put(Integer.valueOf(parameterIndex - 1), new SerialRef(ref));\n    }"}
{"Number":"1477","API Relative Path":"javax.sql.rowset.BaseRowSet.java-setShort(int-short)","Corresponding Source":"/**\n     * Sets the designated parameter to the given <code>short<\/code> in the\n     * Java programming language.  The driver converts this to an SQL\n     * <code>SMALLINT<\/code> value when it sends it to the database.\n     * <P>\n     * The parameter value set by this method is stored internally and\n     * will be supplied as the appropriate parameter in this <code>RowSet<\/code>\n     * object's command when the method <code>execute<\/code> is called.\n     * Methods such as <code>execute<\/code> and <code>populate<\/code> must be\n     * provided in any class that extends this class and implements one or\n     * more of the standard JSR-114 <code>RowSet<\/code> interfaces.\n     * <p>\n     * NOTE: <code>JdbcRowSet<\/code> does not require the <code>populate<\/code> method\n     * as it is undefined in this class.\n     * <p>\n     * @param parameterIndex the ordinal number of the placeholder parameter\n     *        in this <code>RowSet<\/code> object's command that is to be set.\n     *        The first parameter is 1, the second is 2, and so on; must be\n     *        <code>1<\/code> or greater\n     * @param x the parameter value\n     * @throws SQLException if an error occurs or the\n     *                         parameter index is out of bounds\n     * @see #getParams\n     */\n    public void setShort(int parameterIndex, short x) throws SQLException {\n        checkParamIndex(parameterIndex);\n\n        if(params == null){\n             throw new SQLException(\"Set initParams() before setShort\");\n        }\n\n        params.put(Integer.valueOf(parameterIndex - 1), Short.valueOf(x));\n    }"}
{"Number":"1478","API Relative Path":"javax.sql.rowset.BaseRowSet.java-setString(int-String)","Corresponding Source":"/**\n     * Sets the designated parameter to the given <code>String<\/code>\n     * value.  The driver converts this to an SQL\n     * <code>VARCHAR<\/code> or <code>LONGVARCHAR<\/code> value\n     * (depending on the argument's size relative to the driver's limits\n     * on <code>VARCHAR<\/code> values) when it sends it to the database.\n     * <P>\n     * The parameter value set by this method is stored internally and\n     * will be supplied as the appropriate parameter in this <code>RowSet<\/code>\n     * object's command when the method <code>execute<\/code> is called.\n     * Methods such as <code>execute<\/code> and <code>populate<\/code> must be\n     * provided in any class that extends this class and implements one or\n     * more of the standard JSR-114 <code>RowSet<\/code> interfaces.\n     * <p>\n     * NOTE: <code>JdbcRowSet<\/code> does not require the <code>populate<\/code> method\n     * as it is undefined in this class.\n     * <p>\n     * @param parameterIndex the ordinal number of the placeholder parameter\n     *        in this <code>RowSet<\/code> object's command that is to be set.\n     *        The first parameter is 1, the second is 2, and so on; must be\n     *        <code>1<\/code> or greater\n     * @param x the parameter value\n     * @throws SQLException if an error occurs or the\n     *                         parameter index is out of bounds\n     * @see #getParams\n     */\n    public void setString(int parameterIndex, String x) throws SQLException {\n        checkParamIndex(parameterIndex);\n        if(params == null){\n             throw new SQLException(\"Set initParams() before setString\");\n        }\n        params.put(Integer.valueOf(parameterIndex - 1), x);\n    }"}
{"Number":"1479","API Relative Path":"javax.sql.rowset.BaseRowSet.java-setTransactionIsolation(int)","Corresponding Source":"/**\n     * Sets the transaction isolation property for this JDBC <code>RowSet<\/code> object to the given\n     * constant. The DBMS will use this transaction isolation level for\n     * transactions if it can.\n     * <p>\n     * For <code>RowSet<\/code> implementations such as\n     * the <code>CachedRowSet<\/code> that operate in a disconnected environment,\n     * the <code>SyncProvider<\/code> object being used\n     * offers complementary locking and data integrity options. The\n     * options described below are pertinent only to connected <code>RowSet<\/code>\n     * objects (<code>JdbcRowSet<\/code> objects).\n     *\n     * @param level one of the following constants, listed in ascending order:\n     *              <code>Connection.TRANSACTION_NONE<\/code>,\n     *              <code>Connection.TRANSACTION_READ_UNCOMMITTED<\/code>,\n     *              <code>Connection.TRANSACTION_READ_COMMITTED<\/code>,\n     *              <code>Connection.TRANSACTION_REPEATABLE_READ<\/code>, or\n     *              <code>Connection.TRANSACTION_SERIALIZABLE<\/code>\n     * @throws SQLException if the given parameter is not one of the Connection\n     *          constants\n     * @see javax.sql.rowset.spi.SyncFactory\n     * @see javax.sql.rowset.spi.SyncProvider\n     * @see #getTransactionIsolation\n     */\n    public void setTransactionIsolation(int level) throws SQLException {\n        if ((level != Connection.TRANSACTION_NONE) &&\n           (level != Connection.TRANSACTION_READ_COMMITTED) &&\n           (level != Connection.TRANSACTION_READ_UNCOMMITTED) &&\n           (level != Connection.TRANSACTION_REPEATABLE_READ) &&\n           (level != Connection.TRANSACTION_SERIALIZABLE))\n            {\n                throw new SQLException(\"Invalid transaction isolation set. Must \" +\n                \"be either \" +\n                \"Connection.TRANSACTION_NONE or \" +\n                \"Connection.TRANSACTION_READ_UNCOMMITTED or \" +\n                \"Connection.TRANSACTION_READ_COMMITTED or \" +\n                \"Connection.RRANSACTION_REPEATABLE_READ or \" +\n                \"Connection.TRANSACTION_SERIALIZABLE\");\n            }\n        this.isolation = level;\n    }"}
{"Number":"1480","API Relative Path":"javax.sql.rowset.BaseRowSet.java-setType(int)","Corresponding Source":"/**\n     * Sets the type for this <code>RowSet<\/code> object to the specified type.\n     * The default type is <code>ResultSet.TYPE_SCROLL_INSENSITIVE<\/code>.\n     *\n     * @param type one of the following constants:\n     *             <code>ResultSet.TYPE_FORWARD_ONLY<\/code>,\n     *             <code>ResultSet.TYPE_SCROLL_INSENSITIVE<\/code>, or\n     *             <code>ResultSet.TYPE_SCROLL_SENSITIVE<\/code>\n     * @throws SQLException if the parameter supplied is not one of the\n     *         following constants:\n     *          <code>ResultSet.TYPE_FORWARD_ONLY<\/code> or\n     *          <code>ResultSet.TYPE_SCROLL_INSENSITIVE<\/code>\n     *          <code>ResultSet.TYPE_SCROLL_SENSITIVE<\/code>\n     * @see #getConcurrency\n     * @see #getType\n     */\n    public void setType(int type) throws SQLException {\n\n        if ((type != ResultSet.TYPE_FORWARD_ONLY) &&\n           (type != ResultSet.TYPE_SCROLL_INSENSITIVE) &&\n           (type != ResultSet.TYPE_SCROLL_SENSITIVE)) {\n                throw new SQLException(\"Invalid type of RowSet set. Must be either \" +\n                \"ResultSet.TYPE_FORWARD_ONLY or ResultSet.TYPE_SCROLL_INSENSITIVE \" +\n                \"or ResultSet.TYPE_SCROLL_SENSITIVE.\");\n        }\n        this.rowSetType = type;\n    }"}
{"Number":"1481","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-getCatalogName(int)","Corresponding Source":"/**\n     * Retrieves the catalog name of the table from which the value\n     * in the designated column was derived.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     * must be between <code>1<\/code> and the number of columns, inclusive\n     * @return the catalog name of the column's table or an empty\n     *         <code>String<\/code> if no catalog name is available\n     * @throws SQLException if a database access error occurs\n     * or the given column number is out of bounds\n     */\n    public String getCatalogName(int columnIndex) throws SQLException {\n        checkColRange(columnIndex);\n        String str =\"\";\n        if(colInfo[columnIndex].catName == null){\n        } else {\n           str = colInfo[columnIndex].catName;\n        }\n        return str;\n    }"}
{"Number":"1482","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-getColumnClassName(int)","Corresponding Source":"/**\n     * Retrieves the fully-qualified name of the class in the Java\n     * programming language to which a value in the designated column\n     * will be mapped.  For example, if the value is an <code>int<\/code>,\n     * the class name returned by this method will be\n     * <code>java.lang.Integer<\/code>.\n     * <P>\n     * If the value in the designated column has a custom mapping,\n     * this method returns the name of the class that implements\n     * <code>SQLData<\/code>. When the method <code>ResultSet.getObject<\/code>\n     * is called to retrieve a value from the designated column, it will\n     * create an instance of this class or one of its subclasses.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     *        must be between <code>1<\/code> and the number of columns, inclusive\n     * @return the fully-qualified name of the class in the Java programming\n     *        language that would be used by the method <code>RowSet.getObject<\/code> to\n     *        retrieve the value in the specified column. This is the class\n     *        name used for custom mapping when there is a custom mapping.\n     * @throws SQLException if a database access error occurs\n     *         or the given column number is out of bounds\n     */\n    public String getColumnClassName(int columnIndex) throws SQLException {\n        String className = String.class.getName();\n\n        int sqlType = getColumnType(columnIndex);\n\n        switch (sqlType) {\n\n        case Types.NUMERIC:\n        case Types.DECIMAL:\n            className = java.math.BigDecimal.class.getName();\n            break;\n\n        case Types.BIT:\n            className = java.lang.Boolean.class.getName();\n            break;\n\n        case Types.TINYINT:\n            className = java.lang.Byte.class.getName();\n            break;\n\n        case Types.SMALLINT:\n            className = java.lang.Short.class.getName();\n            break;\n\n        case Types.INTEGER:\n            className = java.lang.Integer.class.getName();\n            break;\n\n        case Types.BIGINT:\n            className = java.lang.Long.class.getName();\n            break;\n\n        case Types.REAL:\n            className = java.lang.Float.class.getName();\n            break;\n\n        case Types.FLOAT:\n        case Types.DOUBLE:\n            className = java.lang.Double.class.getName();\n            break;\n\n        case Types.BINARY:\n        case Types.VARBINARY:\n        case Types.LONGVARBINARY:\n            className = \"byte[]\";\n            break;\n\n        case Types.DATE:\n            className = java.sql.Date.class.getName();\n            break;\n\n        case Types.TIME:\n            className = java.sql.Time.class.getName();\n            break;\n\n        case Types.TIMESTAMP:\n            className = java.sql.Timestamp.class.getName();\n            break;\n\n        case Types.BLOB:\n            className = java.sql.Blob.class.getName();\n            break;\n\n        case Types.CLOB:\n            className = java.sql.Clob.class.getName();\n            break;\n        }\n\n        return className;\n    }"}
{"Number":"1483","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-getColumnDisplaySize(int)","Corresponding Source":"/**\n     * Retrieves the normal maximum width in chars of the designated column.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     *        must be between <code>1<\/code> and the number of columns, inclusive\n     * @return the maximum number of chars that can be displayed in the designated\n     *         column\n     * @throws SQLException if a database access error occurs\n     *         or the given column number is out of bounds\n     */\n    public int getColumnDisplaySize(int columnIndex) throws SQLException {\n        checkColRange(columnIndex);\n        return colInfo[columnIndex].columnDisplaySize;\n    }"}
{"Number":"1484","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-getColumnLabel(int)","Corresponding Source":"/**\n     * Retrieves the the suggested column title for the designated\n     * column for use in printouts and displays.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     *        must be between <code>1<\/code> and the number of columns, inclusive\n     * @return the suggested column name to use in printouts and displays\n     * @throws SQLException if a database access error occurs\n     *         or the given column number is out of bounds\n     */\n    public String getColumnLabel(int columnIndex) throws SQLException {\n        checkColRange(columnIndex);\n        return colInfo[columnIndex].columnLabel;\n    }"}
{"Number":"1485","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-getColumnName(int)","Corresponding Source":"/**\n     * Retrieves the name of the designated column.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     * must be between <code>1<\/code> and the number of columns, inclusive\n     * @return the column name of the designated column\n     * @throws SQLException if a database access error occurs\n     * or the given column number is out of bounds\n     */\n    public String getColumnName(int columnIndex) throws SQLException {\n        checkColRange(columnIndex);\n        return colInfo[columnIndex].columnName;\n    }"}
{"Number":"1486","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-getColumnType(int)","Corresponding Source":"/**\n     * Retrieves the type code (one of the <code>java.sql.Types<\/code>\n     * constants) for the SQL type of the value stored in the\n     * designated column.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     * must be between <code>1<\/code> and the number of columns, inclusive\n     * @return an <code>int<\/code> representing the SQL type of values\n     * stored in the designated column\n     * @throws SQLException if a database access error occurs\n     * or the given column number is out of bounds\n     * @see java.sql.Types\n     */\n    public int getColumnType(int columnIndex) throws SQLException {\n        checkColRange(columnIndex);\n        return colInfo[columnIndex].colType;\n    }"}
{"Number":"1487","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-getColumnTypeName(int)","Corresponding Source":"/**\n     * Retrieves the DBMS-specific type name for values stored in the\n     * designated column.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     * must be between <code>1<\/code> and the number of columns, inclusive\n     * @return the type name used by the data source\n     * @throws SQLException if a database access error occurs\n     * or the given column number is out of bounds\n     */\n    public String getColumnTypeName(int columnIndex) throws SQLException {\n        checkColRange(columnIndex);\n        return colInfo[columnIndex].colTypeName;\n    }"}
{"Number":"1488","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-getPrecision(int)","Corresponding Source":"/**\n     * Retrieves the total number of digits for values stored in\n     * the designated column.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     * must be between <code>1<\/code> and the number of columns, inclusive\n     * @return the precision for values stored in the designated column\n     * @throws SQLException if a database access error occurs\n     * or the given column number is out of bounds\n     */\n    public int getPrecision(int columnIndex) throws SQLException {\n        checkColRange(columnIndex);\n        return colInfo[columnIndex].colPrecision;\n    }"}
{"Number":"1489","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-getScale(int)","Corresponding Source":"/**\n     * Retrieves the number of digits to the right of the decimal point\n     * for values stored in the designated column.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     * must be between <code>1<\/code> and the number of columns, inclusive\n     * @return the scale for values stored in the designated column\n     * @throws SQLException if a database access error occurs\n     * or the given column number is out of bounds\n     */\n    public int getScale(int columnIndex) throws SQLException {\n        checkColRange(columnIndex);\n        return colInfo[columnIndex].colScale;\n    }"}
{"Number":"1490","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-getSchemaName(int)","Corresponding Source":"/**\n     * Retrieves the schema name of the table from which the value\n     * in the designated column was derived.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     *         must be between <code>1<\/code> and the number of columns,\n     *         inclusive\n     * @return the schema name or an empty <code>String<\/code> if no schema\n     *         name is available\n     * @throws SQLException if a database access error occurs\n     * or the given column number is out of bounds\n     */\n    public String getSchemaName(int columnIndex) throws SQLException {\n        checkColRange(columnIndex);\n        String str =\"\";\n        if(colInfo[columnIndex].schemaName == null){\n        } else {\n              str = colInfo[columnIndex].schemaName;\n        }\n        return str;\n    }"}
{"Number":"1491","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-getTableName(int)","Corresponding Source":"/**\n     * Retrieves the name of the table from which the value\n     * in the designated column was derived.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     * must be between <code>1<\/code> and the number of columns, inclusive\n     * @return the table name or an empty <code>String<\/code> if no table name\n     *         is available\n     * @throws SQLException if a database access error occurs\n     * or the given column number is out of bounds\n     */\n    public String getTableName(int columnIndex) throws SQLException {\n        checkColRange(columnIndex);\n        return colInfo[columnIndex].tableName;\n    }"}
{"Number":"1492","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-isAutoIncrement(int)","Corresponding Source":"/**\n     * Retrieves whether a value stored in the designated column is\n     * automatically numbered, and thus readonly.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     *         must be between <code>1<\/code> and the number of columns, inclusive\n     * @return <code>true<\/code> if the column is automatically numbered;\n     *         <code>false<\/code> otherwise\n     * @throws SQLException if a database access error occurs\n     * or the given column number is out of bounds\n     */\n    public boolean isAutoIncrement(int columnIndex) throws SQLException {\n        checkColRange(columnIndex);\n        return colInfo[columnIndex].autoIncrement;\n    }"}
{"Number":"1493","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-isCaseSensitive(int)","Corresponding Source":"/**\n     * Indicates whether the case of the designated column's name\n     * matters.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     * must be between <code>1<\/code> and the number of columns, inclusive\n     * @return <code>true<\/code> if the column name is case sensitive;\n     *          <code>false<\/code> otherwise\n     * @throws SQLException if a database access error occurs\n     * or the given column number is out of bounds\n     */\n    public boolean isCaseSensitive(int columnIndex) throws SQLException {\n        checkColRange(columnIndex);\n        return colInfo[columnIndex].caseSensitive;\n    }"}
{"Number":"1494","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-isCurrency(int)","Corresponding Source":"/**\n     * Indicates whether a value stored in the designated column\n     * is a cash value.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     *        must be between <code>1<\/code> and the number of columns, inclusive\n     * @return <code>true<\/code> if a value in the designated column is a cash value;\n     *         <code>false<\/code> otherwise\n     * @throws SQLException if a database access error occurs\n     *         or the given column number is out of bounds\n     */\n    public boolean isCurrency(int columnIndex) throws SQLException {\n        checkColRange(columnIndex);\n        return colInfo[columnIndex].currency;\n    }"}
{"Number":"1495","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-isNullable(int)","Corresponding Source":"/**\n     * Retrieves a constant indicating whether it is possible\n     * to store a <code>NULL<\/code> value in the designated column.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     *        must be between <code>1<\/code> and the number of columns, inclusive\n     * @return a constant from the <code>ResultSetMetaData<\/code> interface;\n     *         either <code>columnNoNulls<\/code>,\n     *         <code>columnNullable<\/code>, or\n     *         <code>columnNullableUnknown<\/code>\n     * @throws SQLException if a database access error occurs\n     *         or the given column number is out of bounds\n     */\n    public int isNullable(int columnIndex) throws SQLException {\n        checkColRange(columnIndex);\n        return colInfo[columnIndex].nullable;\n    }"}
{"Number":"1496","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-isReadOnly(int)","Corresponding Source":"/**\n     * Indicates whether the designated column is definitely\n     * not writable, thus readonly.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     * must be between <code>1<\/code> and the number of columns, inclusive\n     * @return <code>true<\/code> if this <code>RowSet<\/code> object is read-Only\n     * and thus not updatable; <code>false<\/code> otherwise\n     * @throws SQLException if a database access error occurs\n     * or the given column number is out of bounds\n     */\n    public boolean isReadOnly(int columnIndex) throws SQLException {\n        checkColRange(columnIndex);\n        return colInfo[columnIndex].readOnly;\n    }"}
{"Number":"1497","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-isSearchable(int)","Corresponding Source":"/**\n     * Indicates whether a value stored in the designated column\n     * can be used in a <code>WHERE<\/code> clause.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     *        must be between <code>1<\/code> and the number of columns, inclusive\n     * @return <code>true<\/code> if a value in the designated column can be used in a\n     *         <code>WHERE<\/code> clause; <code>false<\/code> otherwise\n     * @throws SQLException if a database access error occurs\n     *         or the given column number is out of bounds\n     */\n    public boolean isSearchable(int columnIndex) throws SQLException {\n        checkColRange(columnIndex);\n        return colInfo[columnIndex].searchable;\n    }"}
{"Number":"1498","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-isSigned(int)","Corresponding Source":"/**\n     * Indicates whether a value stored in the designated column is\n     * a signed number.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     *        must be between <code>1<\/code> and the number of columns, inclusive\n     * @return <code>true<\/code> if if a value in the designated column is a signed\n     *         number; <code>false<\/code> otherwise\n     * @throws SQLException if a database access error occurs\n     *         or the given column number is out of bounds\n     */\n    public boolean isSigned(int columnIndex) throws SQLException {\n        checkColRange(columnIndex);\n        return colInfo[columnIndex].signed;\n    }"}
{"Number":"1499","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-isWritable(int)","Corresponding Source":"/**\n     * Indicates whether it is possible for a write operation on\n     * the designated column to succeed. A return value of\n     * <code>true<\/code> means that a write operation may or may\n     * not succeed.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     *         must be between <code>1<\/code> and the number of columns, inclusive\n     * @return <code>true<\/code> if a write operation on the designated column may\n     *          will succeed; <code>false<\/code> otherwise\n     * @throws SQLException if a database access error occurs\n     *         or the given column number is out of bounds\n     */\n    public boolean isWritable(int columnIndex) throws SQLException {\n        checkColRange(columnIndex);\n        return colInfo[columnIndex].writable;\n    }"}
{"Number":"1500","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-setAutoIncrement(int-boolean)","Corresponding Source":"/**\n     * Sets whether the designated column is automatically\n     * numbered, thus read-only, to the given <code>boolean<\/code>\n     * value.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     *        must be between <code>1<\/code> and the number of columns\n     *        in the rowset, inclusive\n     * @param property <code>true<\/code> if the given column is\n     *                 automatically incremented; <code>false<\/code>\n     *                 otherwise\n     * @throws SQLException if a database access error occurs or\n     *         the given index is out of bounds\n     */\n    public void setAutoIncrement(int columnIndex, boolean property) throws SQLException {\n        checkColRange(columnIndex);\n        colInfo[columnIndex].autoIncrement = property;\n    }"}
{"Number":"1501","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-setCaseSensitive(int-boolean)","Corresponding Source":"/**\n     * Sets whether the name of the designated column is case sensitive to\n     * the given <code>boolean<\/code>.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     *        must be between <code>1<\/code> and the number of columns\n     *        in the rowset, inclusive\n     * @param property <code>true<\/code> to indicate that the column\n     *                 name is case sensitive; <code>false<\/code> otherwise\n     * @throws SQLException if a database access error occurs or\n     *         the given column number is out of bounds\n     */\n    public void setCaseSensitive(int columnIndex, boolean property) throws SQLException {\n        checkColRange(columnIndex);\n        colInfo[columnIndex].caseSensitive = property;\n    }"}
{"Number":"1502","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-setCatalogName(int-String)","Corresponding Source":"/**\n     * Sets the catalog name of the table from which the designated\n     * column was derived to <i>catalogName<\/i>. If <i>catalogName<\/i>\n     * is <code>null<\/code>, the catalog name is set to an empty string.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     *        must be between <code>1<\/code> and the number of columns, inclusive\n     * @param catalogName the column's table's catalog name; if the catalogName\n     *        is <code>null<\/code>, an empty <code>String<\/code> is set\n     * @throws SQLException if a database access error occurs\n     *         or the given column number is out of bounds\n     */\n    public void setCatalogName(int columnIndex, String catalogName) throws SQLException {\n        checkColRange(columnIndex);\n        if (catalogName != null)\n            colInfo[columnIndex].catName = catalogName;\n        else\n            colInfo[columnIndex].catName = \"\";\n    }"}
{"Number":"1503","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-setColumnCount(int)","Corresponding Source":"/**\n     * Sets to the given number the number of columns in the <code>RowSet<\/code>\n     * object for which this <code>RowSetMetaDataImpl<\/code> object was created.\n     *\n     * @param columnCount an <code>int<\/code> giving the number of columns in the\n     *        <code>RowSet<\/code> object\n     * @throws SQLException if the given number is equal to or less than zero\n     */\n    public void setColumnCount(int columnCount) throws SQLException {\n\n        if (columnCount <= 0) {\n            throw new SQLException(\"Invalid column count. Cannot be less \" +\n                \"or equal to zero\");\n            }\n\n       colCount = columnCount;\n\n       // If the colCount is Integer.MAX_VALUE,\n       // we do not initialize the colInfo object.\n       // even if we try to initialize the colCount with\n       // colCount = Integer.MAx_VALUE-1, the colInfo\n       // initialization fails throwing an ERROR\n       // OutOfMemory Exception. So we do not initialize\n       // colInfo at Integer.MAX_VALUE. This is to pass TCK.\n\n       if(!(colCount == Integer.MAX_VALUE)) {\n            colInfo = new ColInfo[colCount + 1];\n\n           for (int i=1; i <= colCount; i++) {\n                 colInfo[i] = new ColInfo();\n           }\n       }\n\n\n    }"}
{"Number":"1504","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-setColumnDisplaySize(int-int)","Corresponding Source":"/**\n     * Sets the normal maximum number of chars in the designated column\n     * to the given number.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     *        must be between <code>1<\/code> and the number of columns, inclusive\n     * @param size the maximum size of the column in chars; must be\n     *        <code>0<\/code> or more\n     * @throws SQLException if a database access error occurs,\n     *        the given column number is out of bounds, or <i>size<\/i> is\n     *        less than <code>0<\/code>\n     */\n    public void setColumnDisplaySize(int columnIndex, int size) throws SQLException {\n        if (size < 0) {\n            throw new SQLException(\"Invalid column display size. Cannot be less \" +\n                \"than zero\");\n        }\n        checkColRange(columnIndex);\n        colInfo[columnIndex].columnDisplaySize = size;\n    }"}
{"Number":"1505","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-setColumnLabel(int-String)","Corresponding Source":"/**\n     * Sets the suggested column label for use in printouts and\n     * displays, if any, to <i>label<\/i>. If <i>label<\/i> is\n     * <code>null<\/code>, the column label is set to an empty string\n     * (\"\").\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     *        must be between <code>1<\/code> and the number of columns, inclusive\n     * @param label the column label to be used in printouts and displays; if the\n     *        column label is <code>null<\/code>, an empty <code>String<\/code> is\n     *        set\n     * @throws SQLException if a database access error occurs\n     *         or the given column index is out of bounds\n     */\n    public void setColumnLabel(int columnIndex, String label) throws SQLException {\n        checkColRange(columnIndex);\n        if (label != null) {\n            colInfo[columnIndex].columnLabel = label;\n        } else {\n            colInfo[columnIndex].columnLabel = \"\";\n        }\n    }"}
{"Number":"1506","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-setColumnName(int-String)","Corresponding Source":"/**\n     * Sets the column name of the designated column to the given name.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     *      must be between <code>1<\/code> and the number of columns, inclusive\n     * @param columnName a <code>String<\/code> object indicating the column name;\n     *      if the given name is <code>null<\/code>, an empty <code>String<\/code>\n     *      is set\n     * @throws SQLException if a database access error occurs or the given column\n     *      index is out of bounds\n     */\n    public void setColumnName(int columnIndex, String columnName) throws SQLException {\n        checkColRange(columnIndex);\n        if (columnName != null) {\n            colInfo[columnIndex].columnName = columnName;\n        } else {\n            colInfo[columnIndex].columnName = \"\";\n        }\n    }"}
{"Number":"1507","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-setColumnType(int-int)","Corresponding Source":"/**\n     * Sets the SQL type code for values stored in the designated column\n     * to the given type code from the class <code>java.sql.Types<\/code>.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     *        must be between <code>1<\/code> and the number of columns, inclusive\n     * @param SQLType the designated column's SQL type, which must be one of the\n     *                constants in the class <code>java.sql.Types<\/code>\n     * @throws SQLException if a database access error occurs,\n     *         the given column number is out of bounds, or the column type\n     *         specified is not one of the constants in\n     *         <code>java.sql.Types<\/code>\n     * @see java.sql.Types\n     */\n    public void setColumnType(int columnIndex, int SQLType) throws SQLException {\n        // examine java.sql.Type reflectively, loop on the fields and check\n        // this. Separate out into a private method\n        checkColType(SQLType);\n        checkColRange(columnIndex);\n        colInfo[columnIndex].colType = SQLType;\n    }"}
{"Number":"1508","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-setColumnTypeName(int-String)","Corresponding Source":"/**\n     * Sets the type name used by the data source for values stored in the\n     * designated column to the given type name.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     * must be between <code>1<\/code> and the number of columns, inclusive\n     * @param typeName the data source-specific type name; if <i>typeName<\/i> is\n     *        <code>null<\/code>, an empty <code>String<\/code> is set\n     * @throws SQLException if a database access error occurs\n     *         or the given column number is out of bounds\n     */\n    public void setColumnTypeName(int columnIndex, String typeName)\n        throws SQLException {\n        checkColRange(columnIndex);\n        if (typeName != null) {\n            colInfo[columnIndex].colTypeName = typeName;\n        } else {\n            colInfo[columnIndex].colTypeName = \"\";\n        }\n    }"}
{"Number":"1509","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-setCurrency(int-boolean)","Corresponding Source":"/**\n     * Sets whether a value stored in the designated column is a cash\n     * value to the given <code>boolean<\/code>.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     * must be between <code>1<\/code> and the number of columns,\n     * inclusive between <code>1<\/code> and the number of columns, inclusive\n     * @param property true if the value is a cash value; false otherwise.\n     * @throws SQLException if a database access error occurs\n     *         or the given column number is out of bounds\n     */\n    public void setCurrency(int columnIndex, boolean property)\n        throws SQLException {\n        checkColRange(columnIndex);\n        colInfo[columnIndex].currency = property;\n    }"}
{"Number":"1510","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-setNullable(int-int)","Corresponding Source":"/**\n     * Sets whether a value stored in the designated column can be set\n     * to <code>NULL<\/code> to the given constant from the interface\n     * <code>ResultSetMetaData<\/code>.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     *        must be between <code>1<\/code> and the number of columns, inclusive\n     * @param property one of the following <code>ResultSetMetaData<\/code> constants:\n     *                 <code>columnNoNulls<\/code>,\n     *                 <code>columnNullable<\/code>, or\n     *                 <code>columnNullableUnknown<\/code>\n     *\n     * @throws SQLException if a database access error occurs,\n     *         the given column number is out of bounds, or the value supplied\n     *         for the <i>property<\/i> parameter is not one of the following\n     *         constants:\n     *           <code>ResultSetMetaData.columnNoNulls<\/code>,\n     *           <code>ResultSetMetaData.columnNullable<\/code>, or\n     *           <code>ResultSetMetaData.columnNullableUnknown<\/code>\n     */\n    public void setNullable(int columnIndex, int property) throws SQLException {\n        if ((property < ResultSetMetaData.columnNoNulls) ||\n            property > ResultSetMetaData.columnNullableUnknown) {\n                throw new SQLException(\"Invalid nullable constant set. Must be \" +\n                    \"either columnNoNulls, columnNullable or columnNullableUnknown\");\n        }\n        checkColRange(columnIndex);\n        colInfo[columnIndex].nullable = property;\n    }"}
{"Number":"1511","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-setNullable(int-int)","Corresponding Source":"/**\n     * Sets whether a value stored in the designated column can be set\n     * to <code>NULL<\/code> to the given constant from the interface\n     * <code>ResultSetMetaData<\/code>.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     *        must be between <code>1<\/code> and the number of columns, inclusive\n     * @param property one of the following <code>ResultSetMetaData<\/code> constants:\n     *                 <code>columnNoNulls<\/code>,\n     *                 <code>columnNullable<\/code>, or\n     *                 <code>columnNullableUnknown<\/code>\n     *\n     * @throws SQLException if a database access error occurs,\n     *         the given column number is out of bounds, or the value supplied\n     *         for the <i>property<\/i> parameter is not one of the following\n     *         constants:\n     *           <code>ResultSetMetaData.columnNoNulls<\/code>,\n     *           <code>ResultSetMetaData.columnNullable<\/code>, or\n     *           <code>ResultSetMetaData.columnNullableUnknown<\/code>\n     */\n    public void setNullable(int columnIndex, int property) throws SQLException {\n        if ((property < ResultSetMetaData.columnNoNulls) ||\n            property > ResultSetMetaData.columnNullableUnknown) {\n                throw new SQLException(\"Invalid nullable constant set. Must be \" +\n                    \"either columnNoNulls, columnNullable or columnNullableUnknown\");\n        }\n        checkColRange(columnIndex);\n        colInfo[columnIndex].nullable = property;\n    }"}
{"Number":"1512","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-setPrecision(int-int)","Corresponding Source":"/**\n     * Sets the total number of decimal digits in a value stored in the\n     * designated column to the given number.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     *        must be between <code>1<\/code> and the number of columns, inclusive\n     * @param precision the total number of decimal digits; must be <code>0<\/code>\n     *        or more\n     * @throws SQLException if a database access error occurs,\n     *         <i>columnIndex<\/i> is out of bounds, or <i>precision<\/i>\n     *         is less than <code>0<\/code>\n     */\n    public void setPrecision(int columnIndex, int precision) throws SQLException {\n\n        if (precision < 0) {\n            throw new SQLException(\"Invalid precision value. Cannot be less \" +\n                \"than zero\");\n        }\n        checkColRange(columnIndex);\n        colInfo[columnIndex].colPrecision = precision;\n    }"}
{"Number":"1513","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-setScale(int-int)","Corresponding Source":"/**\n     * Sets the number of digits to the right of the decimal point in a value\n     * stored in the designated column to the given number.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     *        must be between <code>1<\/code> and the number of columns, inclusive\n     * @param scale the number of digits to the right of the decimal point; must be\n     *        zero or greater\n     * @throws SQLException if a database access error occurs,\n     *         <i>columnIndex<\/i> is out of bounds, or <i>scale<\/i>\n     *         is less than <code>0<\/code>\n     */\n    public void setScale(int columnIndex, int scale) throws SQLException {\n        if (scale < 0) {\n            throw new SQLException(\"Invalid scale size. Cannot be less \" +\n                \"than zero\");\n        }\n        checkColRange(columnIndex);\n        colInfo[columnIndex].colScale = scale;\n    }"}
{"Number":"1514","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-setSchemaName(int-String)","Corresponding Source":"/**\n     * Sets the designated column's table's schema name, if any, to\n     * <i>schemaName<\/i>. If <i>schemaName<\/i> is <code>null<\/code>,\n     * the schema name is set to an empty string (\"\").\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     *        must be between <code>1<\/code> and the number of columns, inclusive\n     * @param schemaName the schema name for the table from which a value in the\n     *        designated column was derived; may be an empty <code>String<\/code>\n     *        or <code>null<\/code>\n     * @throws SQLException if a database access error occurs\n     *        or the given column number is out of bounds\n     */\n    public void setSchemaName(int columnIndex, String schemaName) throws SQLException {\n        checkColRange(columnIndex);\n        if (schemaName != null ) {\n            colInfo[columnIndex].schemaName = schemaName;\n        } else {\n            colInfo[columnIndex].schemaName = \"\";\n        }\n    }"}
{"Number":"1515","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-setSearchable(int-boolean)","Corresponding Source":"/**\n     * Sets whether a value stored in the designated column can be used\n     * in a <code>WHERE<\/code> clause to the given <code>boolean<\/code> value.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     *                    must be between <code>1<\/code> and the number\n     *                    of columns in the rowset, inclusive\n     * @param property <code>true<\/code> to indicate that a column\n     *                 value can be used in a <code>WHERE<\/code> clause;\n     *                 <code>false<\/code> otherwise\n     *\n     * @throws SQLException if a database access error occurs or\n     *         the given column number is out of bounds\n     */\n    public void setSearchable(int columnIndex, boolean property)\n        throws SQLException {\n        checkColRange(columnIndex);\n        colInfo[columnIndex].searchable = property;\n    }"}
{"Number":"1516","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-setSigned(int-boolean)","Corresponding Source":"/**\n     * Sets whether a value stored in the designated column is a signed\n     * number to the given <code>boolean<\/code>.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     *        must be between <code>1<\/code> and the number of columns, inclusive\n     * @param property <code>true<\/code> to indicate that a column\n     *                 value is a signed number;\n     *                 <code>false<\/code> to indicate that it is not\n     * @throws SQLException if a database access error occurs\n     *         or the given column number is out of bounds\n     */\n    public void setSigned(int columnIndex, boolean property) throws SQLException {\n        checkColRange(columnIndex);\n        colInfo[columnIndex].signed = property;\n    }"}
{"Number":"1517","API Relative Path":"javax.sql.rowset.RowSetMetaDataImpl.java-setTableName(int-String)","Corresponding Source":"/**\n     * Sets the name of the table from which the designated column\n     * was derived to the given table name.\n     *\n     * @param columnIndex the first column is 1, the second is 2, and so on;\n     *        must be between <code>1<\/code> and the number of columns, inclusive\n     * @param tableName the column's table name; may be <code>null<\/code> or an\n     *        empty string\n     * @throws SQLException if a database access error occurs\n     *         or the given column number is out of bounds\n     */\n    public void setTableName(int columnIndex, String tableName) throws SQLException {\n        checkColRange(columnIndex);\n        if (tableName != null) {\n            colInfo[columnIndex].tableName = tableName;\n        } else {\n            colInfo[columnIndex].tableName = \"\";\n        }\n    }"}
{"Number":"1518","API Relative Path":"javax.sql.rowset.serial.SerialBlob.java-getBinaryStream(long-long)","Corresponding Source":"/**\n     * Returns an\n     * <code>InputStream<\/code> object that contains a partial\n     * {@code Blob} value, starting with the byte specified by pos, which is\n     * length bytes in length.\n     *\n     * @param pos the offset to the first byte of the partial value to be\n     * retrieved. The first byte in the {@code Blob} is at position 1\n     * @param length the length in bytes of the partial value to be retrieved\n     * @return\n     * <code>InputStream<\/code> through which the partial {@code Blob} value can\n     * be read.\n     * @throws SQLException if pos is less than 1 or if pos is greater than the\n     * number of bytes in the {@code Blob} or if pos + length is greater than\n     * the number of bytes in the {@code Blob}\n     * @throws SerialException if the {@code free} method had been previously\n     * called on this object\n     *\n     * @since 1.6\n     */\n    public InputStream getBinaryStream(long pos, long length) throws SQLException {\n        isValid();\n        if (pos < 1 || pos > this.length()) {\n            throw new SerialException(\"Invalid position in BLOB object set\");\n        }\n        if (length < 1 || length > len - pos + 1) {\n            throw new SerialException(\"length is < 1 or pos + length >\"\n                    + \"total number of bytes\");\n        }\n        return new ByteArrayInputStream(buf, (int) pos - 1, (int) length);\n    }"}
{"Number":"1519","API Relative Path":"javax.sql.rowset.serial.SerialBlob.java-getBinaryStream(long-long)","Corresponding Source":"/**\n     * Returns an\n     * <code>InputStream<\/code> object that contains a partial\n     * {@code Blob} value, starting with the byte specified by pos, which is\n     * length bytes in length.\n     *\n     * @param pos the offset to the first byte of the partial value to be\n     * retrieved. The first byte in the {@code Blob} is at position 1\n     * @param length the length in bytes of the partial value to be retrieved\n     * @return\n     * <code>InputStream<\/code> through which the partial {@code Blob} value can\n     * be read.\n     * @throws SQLException if pos is less than 1 or if pos is greater than the\n     * number of bytes in the {@code Blob} or if pos + length is greater than\n     * the number of bytes in the {@code Blob}\n     * @throws SerialException if the {@code free} method had been previously\n     * called on this object\n     *\n     * @since 1.6\n     */\n    public InputStream getBinaryStream(long pos, long length) throws SQLException {\n        isValid();\n        if (pos < 1 || pos > this.length()) {\n            throw new SerialException(\"Invalid position in BLOB object set\");\n        }\n        if (length < 1 || length > len - pos + 1) {\n            throw new SerialException(\"length is < 1 or pos + length >\"\n                    + \"total number of bytes\");\n        }\n        return new ByteArrayInputStream(buf, (int) pos - 1, (int) length);\n    }"}
{"Number":"1520","API Relative Path":"javax.sql.rowset.serial.SerialBlob.java-getBytes(long-int)","Corresponding Source":"/**\n     * Copies the specified number of bytes, starting at the given\n     * position, from this <code>SerialBlob<\/code> object to\n     * another array of bytes.\n     * <P>\n     * Note that if the given number of bytes to be copied is larger than\n     * the length of this <code>SerialBlob<\/code> object's array of\n     * bytes, the given number will be shortened to the array's length.\n     *\n     * @param pos the ordinal position of the first byte in this\n     *            <code>SerialBlob<\/code> object to be copied;\n     *            numbering starts at <code>1<\/code>; must not be less\n     *            than <code>1<\/code> and must be less than or equal\n     *            to the length of this <code>SerialBlob<\/code> object\n     * @param length the number of bytes to be copied\n     * @return an array of bytes that is a copy of a region of this\n     *         <code>SerialBlob<\/code> object, starting at the given\n     *         position and containing the given number of consecutive bytes\n     * @throws SerialException if the given starting position is out of bounds;\n     * if {@code free} had previously been called on this object\n     */\n    public byte[] getBytes(long pos, int length) throws SerialException {\n        isValid();\n        if (length > len) {\n            length = (int)len;\n        }\n\n        if (pos < 1 || len - pos < 0 ) {\n            throw new SerialException(\"Invalid arguments: position cannot be \"\n                    + \"less than 1 or greater than the length of the SerialBlob\");\n        }\n\n        pos--; // correct pos to array index\n\n        byte[] b = new byte[length];\n\n        for (int i = 0; i < length; i++) {\n            b[i] = this.buf[(int)pos];\n            pos++;\n        }\n        return b;\n    }"}
{"Number":"1521","API Relative Path":"javax.sql.rowset.serial.SerialBlob.java-setBytes(long-byte[]-int-int)","Corresponding Source":"/**\n     * Writes all or part of the given <code>byte<\/code> array to the\n     * <code>BLOB<\/code> value that this <code>Blob<\/code> object represents\n     * and returns the number of bytes written.\n     * Writing starts at position <code>pos<\/code> in the <code>BLOB<\/code>\n     * value; <i>len<\/i> bytes from the given byte array are written.\n     *\n     * @param pos the position in the <code>BLOB<\/code> object at which\n     *     to start writing. The first position is <code>1<\/code>;\n     *     must not be less than <code>1<\/code> nor greater than\n     *     the length of this <code>SerialBlob<\/code> object.\n     * @param bytes the array of bytes to be written to the <code>BLOB<\/code>\n     *     value\n     * @param offset the offset in the <code>byte<\/code> array at which\n     *     to start reading the bytes. The first offset position is\n     *     <code>0<\/code>; must not be less than <code>0<\/code> nor greater\n     *     than the length of the <code>byte<\/code> array\n     * @param length the number of bytes to be written to the\n     *     <code>BLOB<\/code> value from the array of bytes <i>bytes<\/i>.\n     *\n     * @return the number of bytes written\n     * @throws SerialException if there is an error accessing the\n     *     <code>BLOB<\/code> value; if an invalid position is set; if an\n     *     invalid offset value is set; if number of bytes to be written\n     *     is greater than the <code>SerialBlob<\/code> length; or the combined\n     *     values of the length and offset is greater than the Blob buffer;\n     * if {@code free} had previously been called on this object\n     * @throws SQLException if there is an error accessing the <code>BLOB<\/code>\n     *         value from the database.\n     * @see #getBytes\n     */\n    public int setBytes(long pos, byte[] bytes, int offset, int length)\n        throws SerialException, SQLException {\n\n        isValid();\n        if (offset < 0 || offset > bytes.length) {\n            throw new SerialException(\"Invalid offset in byte array set\");\n        }\n\n        if (pos < 1 || pos > this.length()) {\n            throw new SerialException(\"Invalid position in BLOB object set\");\n        }\n\n        if ((long)(length) > origLen) {\n            throw new SerialException(\"Buffer is not sufficient to hold the value\");\n        }\n\n        if ((length + offset) > bytes.length) {\n            throw new SerialException(\"Invalid OffSet. Cannot have combined offset \" +\n                \"and length that is greater that the Blob buffer\");\n        }\n\n        int i = 0;\n        pos--; // correct to array indexing\n        while ( i < length || (offset + i +1) < (bytes.length-offset) ) {\n            this.buf[(int)pos + i] = bytes[offset + i ];\n            i++;\n        }\n        return i;\n    }"}
{"Number":"1522","API Relative Path":"javax.sql.rowset.serial.SerialBlob.java-setBytes(long-byte[]-int-int)","Corresponding Source":"/**\n     * Writes all or part of the given <code>byte<\/code> array to the\n     * <code>BLOB<\/code> value that this <code>Blob<\/code> object represents\n     * and returns the number of bytes written.\n     * Writing starts at position <code>pos<\/code> in the <code>BLOB<\/code>\n     * value; <i>len<\/i> bytes from the given byte array are written.\n     *\n     * @param pos the position in the <code>BLOB<\/code> object at which\n     *     to start writing. The first position is <code>1<\/code>;\n     *     must not be less than <code>1<\/code> nor greater than\n     *     the length of this <code>SerialBlob<\/code> object.\n     * @param bytes the array of bytes to be written to the <code>BLOB<\/code>\n     *     value\n     * @param offset the offset in the <code>byte<\/code> array at which\n     *     to start reading the bytes. The first offset position is\n     *     <code>0<\/code>; must not be less than <code>0<\/code> nor greater\n     *     than the length of the <code>byte<\/code> array\n     * @param length the number of bytes to be written to the\n     *     <code>BLOB<\/code> value from the array of bytes <i>bytes<\/i>.\n     *\n     * @return the number of bytes written\n     * @throws SerialException if there is an error accessing the\n     *     <code>BLOB<\/code> value; if an invalid position is set; if an\n     *     invalid offset value is set; if number of bytes to be written\n     *     is greater than the <code>SerialBlob<\/code> length; or the combined\n     *     values of the length and offset is greater than the Blob buffer;\n     * if {@code free} had previously been called on this object\n     * @throws SQLException if there is an error accessing the <code>BLOB<\/code>\n     *         value from the database.\n     * @see #getBytes\n     */\n    public int setBytes(long pos, byte[] bytes, int offset, int length)\n        throws SerialException, SQLException {\n\n        isValid();\n        if (offset < 0 || offset > bytes.length) {\n            throw new SerialException(\"Invalid offset in byte array set\");\n        }\n\n        if (pos < 1 || pos > this.length()) {\n            throw new SerialException(\"Invalid position in BLOB object set\");\n        }\n\n        if ((long)(length) > origLen) {\n            throw new SerialException(\"Buffer is not sufficient to hold the value\");\n        }\n\n        if ((length + offset) > bytes.length) {\n            throw new SerialException(\"Invalid OffSet. Cannot have combined offset \" +\n                \"and length that is greater that the Blob buffer\");\n        }\n\n        int i = 0;\n        pos--; // correct to array indexing\n        while ( i < length || (offset + i +1) < (bytes.length-offset) ) {\n            this.buf[(int)pos + i] = bytes[offset + i ];\n            i++;\n        }\n        return i;\n    }"}
{"Number":"1523","API Relative Path":"javax.sql.rowset.serial.SerialBlob.java-setBytes(long-byte[]-int-int)","Corresponding Source":"/**\n     * Writes all or part of the given <code>byte<\/code> array to the\n     * <code>BLOB<\/code> value that this <code>Blob<\/code> object represents\n     * and returns the number of bytes written.\n     * Writing starts at position <code>pos<\/code> in the <code>BLOB<\/code>\n     * value; <i>len<\/i> bytes from the given byte array are written.\n     *\n     * @param pos the position in the <code>BLOB<\/code> object at which\n     *     to start writing. The first position is <code>1<\/code>;\n     *     must not be less than <code>1<\/code> nor greater than\n     *     the length of this <code>SerialBlob<\/code> object.\n     * @param bytes the array of bytes to be written to the <code>BLOB<\/code>\n     *     value\n     * @param offset the offset in the <code>byte<\/code> array at which\n     *     to start reading the bytes. The first offset position is\n     *     <code>0<\/code>; must not be less than <code>0<\/code> nor greater\n     *     than the length of the <code>byte<\/code> array\n     * @param length the number of bytes to be written to the\n     *     <code>BLOB<\/code> value from the array of bytes <i>bytes<\/i>.\n     *\n     * @return the number of bytes written\n     * @throws SerialException if there is an error accessing the\n     *     <code>BLOB<\/code> value; if an invalid position is set; if an\n     *     invalid offset value is set; if number of bytes to be written\n     *     is greater than the <code>SerialBlob<\/code> length; or the combined\n     *     values of the length and offset is greater than the Blob buffer;\n     * if {@code free} had previously been called on this object\n     * @throws SQLException if there is an error accessing the <code>BLOB<\/code>\n     *         value from the database.\n     * @see #getBytes\n     */\n    public int setBytes(long pos, byte[] bytes, int offset, int length)\n        throws SerialException, SQLException {\n\n        isValid();\n        if (offset < 0 || offset > bytes.length) {\n            throw new SerialException(\"Invalid offset in byte array set\");\n        }\n\n        if (pos < 1 || pos > this.length()) {\n            throw new SerialException(\"Invalid position in BLOB object set\");\n        }\n\n        if ((long)(length) > origLen) {\n            throw new SerialException(\"Buffer is not sufficient to hold the value\");\n        }\n\n        if ((length + offset) > bytes.length) {\n            throw new SerialException(\"Invalid OffSet. Cannot have combined offset \" +\n                \"and length that is greater that the Blob buffer\");\n        }\n\n        int i = 0;\n        pos--; // correct to array indexing\n        while ( i < length || (offset + i +1) < (bytes.length-offset) ) {\n            this.buf[(int)pos + i] = bytes[offset + i ];\n            i++;\n        }\n        return i;\n    }"}
{"Number":"1524","API Relative Path":"javax.sql.rowset.serial.SerialBlob.java-setBytes(long-byte[]-int-int)","Corresponding Source":"/**\n     * Writes all or part of the given <code>byte<\/code> array to the\n     * <code>BLOB<\/code> value that this <code>Blob<\/code> object represents\n     * and returns the number of bytes written.\n     * Writing starts at position <code>pos<\/code> in the <code>BLOB<\/code>\n     * value; <i>len<\/i> bytes from the given byte array are written.\n     *\n     * @param pos the position in the <code>BLOB<\/code> object at which\n     *     to start writing. The first position is <code>1<\/code>;\n     *     must not be less than <code>1<\/code> nor greater than\n     *     the length of this <code>SerialBlob<\/code> object.\n     * @param bytes the array of bytes to be written to the <code>BLOB<\/code>\n     *     value\n     * @param offset the offset in the <code>byte<\/code> array at which\n     *     to start reading the bytes. The first offset position is\n     *     <code>0<\/code>; must not be less than <code>0<\/code> nor greater\n     *     than the length of the <code>byte<\/code> array\n     * @param length the number of bytes to be written to the\n     *     <code>BLOB<\/code> value from the array of bytes <i>bytes<\/i>.\n     *\n     * @return the number of bytes written\n     * @throws SerialException if there is an error accessing the\n     *     <code>BLOB<\/code> value; if an invalid position is set; if an\n     *     invalid offset value is set; if number of bytes to be written\n     *     is greater than the <code>SerialBlob<\/code> length; or the combined\n     *     values of the length and offset is greater than the Blob buffer;\n     * if {@code free} had previously been called on this object\n     * @throws SQLException if there is an error accessing the <code>BLOB<\/code>\n     *         value from the database.\n     * @see #getBytes\n     */\n    public int setBytes(long pos, byte[] bytes, int offset, int length)\n        throws SerialException, SQLException {\n\n        isValid();\n        if (offset < 0 || offset > bytes.length) {\n            throw new SerialException(\"Invalid offset in byte array set\");\n        }\n\n        if (pos < 1 || pos > this.length()) {\n            throw new SerialException(\"Invalid position in BLOB object set\");\n        }\n\n        if ((long)(length) > origLen) {\n            throw new SerialException(\"Buffer is not sufficient to hold the value\");\n        }\n\n        if ((length + offset) > bytes.length) {\n            throw new SerialException(\"Invalid OffSet. Cannot have combined offset \" +\n                \"and length that is greater that the Blob buffer\");\n        }\n\n        int i = 0;\n        pos--; // correct to array indexing\n        while ( i < length || (offset + i +1) < (bytes.length-offset) ) {\n            this.buf[(int)pos + i] = bytes[offset + i ];\n            i++;\n        }\n        return i;\n    }"}
{"Number":"1525","API Relative Path":"javax.sql.rowset.serial.SerialBlob.java-truncate(long)","Corresponding Source":"/**\n     * Truncates the <code>BLOB<\/code> value that this <code>Blob<\/code>\n     * object represents to be <code>len<\/code> bytes in length.\n     *\n     * @param length the length, in bytes, to which the <code>BLOB<\/code>\n     *        value that this <code>Blob<\/code> object represents should be\n     *        truncated\n     * @throws SerialException if there is an error accessing the Blob value;\n     *     or the length to truncate is greater that the SerialBlob length;\n     * if {@code free} had previously been called on this object\n     */\n    public void truncate(long length) throws SerialException {\n\n        isValid();\n        if (length > len) {\n           throw new SerialException\n              (\"Length more than what can be truncated\");\n        } else if((int)length == 0) {\n             buf = new byte[0];\n             len = length;\n        } else {\n             len = length;\n             buf = this.getBytes(1, (int)len);\n        }\n    }"}
{"Number":"1526","API Relative Path":"javax.sql.rowset.serial.SerialClob.java-getCharacterStream(long-long)","Corresponding Source":"/**\n     * Returns a {@code Reader} object that contains a partial\n     * {@code SerialClob} value, starting\n     * with the character specified by pos, which is length characters in length.\n     *\n     * @param pos the offset to the first character of the partial value to\n     * be retrieved.  The first character in the {@code SerialClob} is at position 1.\n     * @param length the length in characters of the partial value to be retrieved.\n     * @return {@code Reader} through which the partial {@code SerialClob}\n     * value can be read.\n     * @throws SQLException if pos is less than 1 or if pos is greater than the\n     * number of characters in the {@code SerialClob} or if pos + length\n     * is greater than the number of characters in the {@code SerialClob};\n     * @throws SerialException if the {@code free} method had been previously\n     * called on this object\n     * @since 1.6\n     */\n    public Reader getCharacterStream(long pos, long length) throws SQLException {\n        isValid();\n        if (pos < 1 || pos > len) {\n            throw new SerialException(\"Invalid position in Clob object set\");\n        }\n\n        if ((pos-1) + length > len) {\n            throw new SerialException(\"Invalid position and substring length\");\n        }\n        if (length <= 0) {\n            throw new SerialException(\"Invalid length specified\");\n        }\n        return new CharArrayReader(buf, (int)pos, (int)length);\n    }"}
{"Number":"1527","API Relative Path":"javax.sql.rowset.serial.SerialClob.java-getCharacterStream(long-long)","Corresponding Source":"/**\n     * Returns a {@code Reader} object that contains a partial\n     * {@code SerialClob} value, starting\n     * with the character specified by pos, which is length characters in length.\n     *\n     * @param pos the offset to the first character of the partial value to\n     * be retrieved.  The first character in the {@code SerialClob} is at position 1.\n     * @param length the length in characters of the partial value to be retrieved.\n     * @return {@code Reader} through which the partial {@code SerialClob}\n     * value can be read.\n     * @throws SQLException if pos is less than 1 or if pos is greater than the\n     * number of characters in the {@code SerialClob} or if pos + length\n     * is greater than the number of characters in the {@code SerialClob};\n     * @throws SerialException if the {@code free} method had been previously\n     * called on this object\n     * @since 1.6\n     */\n    public Reader getCharacterStream(long pos, long length) throws SQLException {\n        isValid();\n        if (pos < 1 || pos > len) {\n            throw new SerialException(\"Invalid position in Clob object set\");\n        }\n\n        if ((pos-1) + length > len) {\n            throw new SerialException(\"Invalid position and substring length\");\n        }\n        if (length <= 0) {\n            throw new SerialException(\"Invalid length specified\");\n        }\n        return new CharArrayReader(buf, (int)pos, (int)length);\n    }"}
{"Number":"1528","API Relative Path":"javax.sql.rowset.serial.SerialClob.java-getCharacterStream(long-long)","Corresponding Source":"/**\n     * Returns a {@code Reader} object that contains a partial\n     * {@code SerialClob} value, starting\n     * with the character specified by pos, which is length characters in length.\n     *\n     * @param pos the offset to the first character of the partial value to\n     * be retrieved.  The first character in the {@code SerialClob} is at position 1.\n     * @param length the length in characters of the partial value to be retrieved.\n     * @return {@code Reader} through which the partial {@code SerialClob}\n     * value can be read.\n     * @throws SQLException if pos is less than 1 or if pos is greater than the\n     * number of characters in the {@code SerialClob} or if pos + length\n     * is greater than the number of characters in the {@code SerialClob};\n     * @throws SerialException if the {@code free} method had been previously\n     * called on this object\n     * @since 1.6\n     */\n    public Reader getCharacterStream(long pos, long length) throws SQLException {\n        isValid();\n        if (pos < 1 || pos > len) {\n            throw new SerialException(\"Invalid position in Clob object set\");\n        }\n\n        if ((pos-1) + length > len) {\n            throw new SerialException(\"Invalid position and substring length\");\n        }\n        if (length <= 0) {\n            throw new SerialException(\"Invalid length specified\");\n        }\n        return new CharArrayReader(buf, (int)pos, (int)length);\n    }"}
{"Number":"1529","API Relative Path":"javax.sql.rowset.serial.SerialClob.java-getSubString(long-int)","Corresponding Source":"/**\n     * Returns a copy of the substring contained in this\n     * <code>SerialClob<\/code> object, starting at the given position\n     * and continuing for the specified number or characters.\n     *\n     * @param pos the position of the first character in the substring\n     *            to be copied; the first character of the\n     *            <code>SerialClob<\/code> object is at position\n     *            <code>1<\/code>; must not be less than <code>1<\/code>,\n     *            and the sum of the starting position and the length\n     *            of the substring must be less than the length of this\n     *            <code>SerialClob<\/code> object\n     * @param length the number of characters in the substring to be\n     *               returned; must not be greater than the length of\n     *               this <code>SerialClob<\/code> object, and the\n     *               sum of the starting position and the length\n     *               of the substring must be less than the length of this\n     *               <code>SerialClob<\/code> object\n     * @return a <code>String<\/code> object containing a substring of\n     *         this <code>SerialClob<\/code> object beginning at the\n     *         given position and containing the specified number of\n     *         consecutive characters\n     * @throws SerialException if either of the arguments is out of bounds;\n     * if {@code free} had previously been called on this object\n     */\n    public String getSubString(long pos, int length) throws SerialException {\n\n        isValid();\n        if (pos < 1 || pos > this.length()) {\n            throw new SerialException(\"Invalid position in SerialClob object set\");\n        }\n\n        if ((pos-1) + length > this.length()) {\n            throw new SerialException(\"Invalid position and substring length\");\n        }\n\n        try {\n            return new String(buf, (int)pos - 1, length);\n\n        } catch (StringIndexOutOfBoundsException e) {\n            throw new SerialException(\"StringIndexOutOfBoundsException: \" +\n                e.getMessage());\n        }\n\n    }"}
{"Number":"1530","API Relative Path":"javax.sql.rowset.serial.SerialClob.java-setString(long-String-int-int)","Corresponding Source":"/**\n     * Writes <code>len<\/code> characters of <code>str<\/code>, starting\n     * at character <code>offset<\/code>, to the <code>CLOB<\/code> value\n     * that this <code>Clob<\/code> represents.\n     *\n     * @param pos the position at which to start writing to the <code>CLOB<\/code>\n     *         value that this <code>SerialClob<\/code> object represents; the first\n     *         position is <code>1<\/code>; must not be less than <code>1<\/code> nor\n     *         greater than the length of this <code>SerialClob<\/code> object\n     * @param str the string to be written to the <code>CLOB<\/code>\n     *        value that this <code>Clob<\/code> object represents\n     * @param offset the offset into <code>str<\/code> to start reading\n     *        the characters to be written\n     * @param length the number of characters to be written\n     * @return the number of characters written\n     * @throws SerialException if there is an error accessing the\n     *     <code>CLOB<\/code> value; if an invalid position is set; if an\n     *     invalid offset value is set; if number of bytes to be written\n     *     is greater than the <code>SerialClob<\/code> length; or the combined\n     *     values of the length and offset is greater than the Clob buffer;\n     * if the {@code free} method had been previously called on this object\n     */\n    public int setString(long pos, String str, int offset, int length)\n        throws SerialException {\n        isValid();\n        String temp = str.substring(offset);\n        char cPattern[] = temp.toCharArray();\n\n        if (offset < 0 || offset > str.length()) {\n            throw new SerialException(\"Invalid offset in byte array set\");\n        }\n\n        if (pos < 1 || pos > this.length()) {\n            throw new SerialException(\"Invalid position in Clob object set\");\n        }\n\n        if ((long)(length) > origLen) {\n            throw new SerialException(\"Buffer is not sufficient to hold the value\");\n        }\n\n        if ((length + offset) > str.length()) {\n            // need check to ensure length + offset !> bytes.length\n            throw new SerialException(\"Invalid OffSet. Cannot have combined offset \" +\n                \" and length that is greater that the Blob buffer\");\n        }\n\n        int i = 0;\n        pos--;  //values in the array are at position one less\n        while ( i < length || (offset + i +1) < (str.length() - offset ) ) {\n            this.buf[(int)pos + i ] = cPattern[offset + i ];\n            i++;\n        }\n        return i;\n    }"}
{"Number":"1531","API Relative Path":"javax.sql.rowset.serial.SerialClob.java-setString(long-String-int-int)","Corresponding Source":"/**\n     * Writes <code>len<\/code> characters of <code>str<\/code>, starting\n     * at character <code>offset<\/code>, to the <code>CLOB<\/code> value\n     * that this <code>Clob<\/code> represents.\n     *\n     * @param pos the position at which to start writing to the <code>CLOB<\/code>\n     *         value that this <code>SerialClob<\/code> object represents; the first\n     *         position is <code>1<\/code>; must not be less than <code>1<\/code> nor\n     *         greater than the length of this <code>SerialClob<\/code> object\n     * @param str the string to be written to the <code>CLOB<\/code>\n     *        value that this <code>Clob<\/code> object represents\n     * @param offset the offset into <code>str<\/code> to start reading\n     *        the characters to be written\n     * @param length the number of characters to be written\n     * @return the number of characters written\n     * @throws SerialException if there is an error accessing the\n     *     <code>CLOB<\/code> value; if an invalid position is set; if an\n     *     invalid offset value is set; if number of bytes to be written\n     *     is greater than the <code>SerialClob<\/code> length; or the combined\n     *     values of the length and offset is greater than the Clob buffer;\n     * if the {@code free} method had been previously called on this object\n     */\n    public int setString(long pos, String str, int offset, int length)\n        throws SerialException {\n        isValid();\n        String temp = str.substring(offset);\n        char cPattern[] = temp.toCharArray();\n\n        if (offset < 0 || offset > str.length()) {\n            throw new SerialException(\"Invalid offset in byte array set\");\n        }\n\n        if (pos < 1 || pos > this.length()) {\n            throw new SerialException(\"Invalid position in Clob object set\");\n        }\n\n        if ((long)(length) > origLen) {\n            throw new SerialException(\"Buffer is not sufficient to hold the value\");\n        }\n\n        if ((length + offset) > str.length()) {\n            // need check to ensure length + offset !> bytes.length\n            throw new SerialException(\"Invalid OffSet. Cannot have combined offset \" +\n                \" and length that is greater that the Blob buffer\");\n        }\n\n        int i = 0;\n        pos--;  //values in the array are at position one less\n        while ( i < length || (offset + i +1) < (str.length() - offset ) ) {\n            this.buf[(int)pos + i ] = cPattern[offset + i ];\n            i++;\n        }\n        return i;\n    }"}
{"Number":"1532","API Relative Path":"javax.sql.rowset.serial.SerialClob.java-setString(long-String-int-int)","Corresponding Source":"/**\n     * Writes <code>len<\/code> characters of <code>str<\/code>, starting\n     * at character <code>offset<\/code>, to the <code>CLOB<\/code> value\n     * that this <code>Clob<\/code> represents.\n     *\n     * @param pos the position at which to start writing to the <code>CLOB<\/code>\n     *         value that this <code>SerialClob<\/code> object represents; the first\n     *         position is <code>1<\/code>; must not be less than <code>1<\/code> nor\n     *         greater than the length of this <code>SerialClob<\/code> object\n     * @param str the string to be written to the <code>CLOB<\/code>\n     *        value that this <code>Clob<\/code> object represents\n     * @param offset the offset into <code>str<\/code> to start reading\n     *        the characters to be written\n     * @param length the number of characters to be written\n     * @return the number of characters written\n     * @throws SerialException if there is an error accessing the\n     *     <code>CLOB<\/code> value; if an invalid position is set; if an\n     *     invalid offset value is set; if number of bytes to be written\n     *     is greater than the <code>SerialClob<\/code> length; or the combined\n     *     values of the length and offset is greater than the Clob buffer;\n     * if the {@code free} method had been previously called on this object\n     */\n    public int setString(long pos, String str, int offset, int length)\n        throws SerialException {\n        isValid();\n        String temp = str.substring(offset);\n        char cPattern[] = temp.toCharArray();\n\n        if (offset < 0 || offset > str.length()) {\n            throw new SerialException(\"Invalid offset in byte array set\");\n        }\n\n        if (pos < 1 || pos > this.length()) {\n            throw new SerialException(\"Invalid position in Clob object set\");\n        }\n\n        if ((long)(length) > origLen) {\n            throw new SerialException(\"Buffer is not sufficient to hold the value\");\n        }\n\n        if ((length + offset) > str.length()) {\n            // need check to ensure length + offset !> bytes.length\n            throw new SerialException(\"Invalid OffSet. Cannot have combined offset \" +\n                \" and length that is greater that the Blob buffer\");\n        }\n\n        int i = 0;\n        pos--;  //values in the array are at position one less\n        while ( i < length || (offset + i +1) < (str.length() - offset ) ) {\n            this.buf[(int)pos + i ] = cPattern[offset + i ];\n            i++;\n        }\n        return i;\n    }"}
{"Number":"1533","API Relative Path":"javax.sql.rowset.serial.SerialClob.java-setString(long-String-int-int)","Corresponding Source":"/**\n     * Writes <code>len<\/code> characters of <code>str<\/code>, starting\n     * at character <code>offset<\/code>, to the <code>CLOB<\/code> value\n     * that this <code>Clob<\/code> represents.\n     *\n     * @param pos the position at which to start writing to the <code>CLOB<\/code>\n     *         value that this <code>SerialClob<\/code> object represents; the first\n     *         position is <code>1<\/code>; must not be less than <code>1<\/code> nor\n     *         greater than the length of this <code>SerialClob<\/code> object\n     * @param str the string to be written to the <code>CLOB<\/code>\n     *        value that this <code>Clob<\/code> object represents\n     * @param offset the offset into <code>str<\/code> to start reading\n     *        the characters to be written\n     * @param length the number of characters to be written\n     * @return the number of characters written\n     * @throws SerialException if there is an error accessing the\n     *     <code>CLOB<\/code> value; if an invalid position is set; if an\n     *     invalid offset value is set; if number of bytes to be written\n     *     is greater than the <code>SerialClob<\/code> length; or the combined\n     *     values of the length and offset is greater than the Clob buffer;\n     * if the {@code free} method had been previously called on this object\n     */\n    public int setString(long pos, String str, int offset, int length)\n        throws SerialException {\n        isValid();\n        String temp = str.substring(offset);\n        char cPattern[] = temp.toCharArray();\n\n        if (offset < 0 || offset > str.length()) {\n            throw new SerialException(\"Invalid offset in byte array set\");\n        }\n\n        if (pos < 1 || pos > this.length()) {\n            throw new SerialException(\"Invalid position in Clob object set\");\n        }\n\n        if ((long)(length) > origLen) {\n            throw new SerialException(\"Buffer is not sufficient to hold the value\");\n        }\n\n        if ((length + offset) > str.length()) {\n            // need check to ensure length + offset !> bytes.length\n            throw new SerialException(\"Invalid OffSet. Cannot have combined offset \" +\n                \" and length that is greater that the Blob buffer\");\n        }\n\n        int i = 0;\n        pos--;  //values in the array are at position one less\n        while ( i < length || (offset + i +1) < (str.length() - offset ) ) {\n            this.buf[(int)pos + i ] = cPattern[offset + i ];\n            i++;\n        }\n        return i;\n    }"}
{"Number":"1534","API Relative Path":"javax.sql.rowset.serial.SerialClob.java-truncate(long)","Corresponding Source":"/**\n     * Truncates the <code>CLOB<\/code> value that this <code>SerialClob<\/code>\n     * object represents so that it has a length of <code>len<\/code>\n     * characters.\n     * <p>\n     * Truncating a <code>SerialClob<\/code> object to length 0 has the effect of\n     * clearing its contents.\n     *\n     * @param length the length, in bytes, to which the <code>CLOB<\/code>\n     *        value should be truncated\n     * @throws SerialException if there is an error accessing the\n     *        <code>CLOB<\/code> value;\n     * if the {@code free} method had been previously called on this object\n     */\n    public void truncate(long length) throws SerialException {\n        isValid();\n        if (length > len) {\n           throw new SerialException\n              (\"Length more than what can be truncated\");\n        } else {\n             len = length;\n             // re-size the buffer\n\n             if (len == 0) {\n                buf = new char[] {};\n             } else {\n                buf = (this.getSubString(1, (int)len)).toCharArray();\n             }\n        }\n    }"}
{"Number":"1535","API Relative Path":"javax.sql.rowset.serial.SQLInputImpl.java-SQLInputImpl(Object[]-Map)","Corresponding Source":"/**\n     * Creates an <code>SQLInputImpl<\/code> object initialized with the\n     * given array of attributes and the given type map. If any of the\n     * attributes is a UDT whose name is in an entry in the type map,\n     * the attribute will be mapped according to the corresponding\n     * <code>SQLData<\/code> implementation.\n     *\n     * @param attributes an array of <code>Object<\/code> instances in which\n     *        each element is an attribute of a UDT. The order of the\n     *        attributes in the array is the same order in which\n     *        the attributes were defined in the UDT definition.\n     * @param map a <code>java.util.Map<\/code> object containing zero or more\n     *        entries, with each entry consisting of 1) a <code>String<\/code>\n     *        giving the fully\n     *        qualified name of the UDT and 2) the <code>Class<\/code> object\n     *        for the <code>SQLData<\/code> implementation that defines how\n     *        the UDT is to be mapped\n     * @throws SQLException if the <code>attributes<\/code> or the <code>map<\/code>\n     *        is a <code>null<\/code> value\n     */\n\n    public SQLInputImpl(Object[] attributes, Map<String,Class<?>> map)\n        throws SQLException\n    {\n        if ((attributes == null) || (map == null)) {\n            throw new SQLException(\"Cannot instantiate a SQLInputImpl \" +\n            \"object with null parameters\");\n        }\n        // assign our local reference to the attribute stream\n        attrib = Arrays.copyOf(attributes, attributes.length);\n        // init the index point before the head of the stream\n        idx = -1;\n        // set the map\n        this.map = map;\n    }"}
{"Number":"1536","API Relative Path":"javax.sql.rowset.serial.SQLOutputImpl.java-SQLOutputImpl(Vector-Map)","Corresponding Source":"/**\n     * Creates a new <code>SQLOutputImpl<\/code> object\n     * initialized with the given vector of attributes and\n     * type map.  The driver will use the type map to determine\n     * which <code>SQLData.writeSQL<\/code> method to invoke.\n     * This method will then call the appropriate\n     * <code>SQLOutputImpl<\/code> writer methods in order and\n     * thereby write the attributes to the new output stream.\n     *\n     * @param attributes a <code>Vector<\/code> object containing the attributes of\n     *        the UDT to be mapped to one or more objects in the Java\n     *        programming language\n     *\n     * @param map a <code>java.util.Map<\/code> object containing zero or\n     *        more entries, with each entry consisting of 1) a <code>String<\/code>\n     *        giving the fully qualified name of a UDT and 2) the\n     *        <code>Class<\/code> object for the <code>SQLData<\/code> implementation\n     *        that defines how the UDT is to be mapped\n     * @throws SQLException if the <code>attributes<\/code> or the <code>map<\/code>\n     *        is a <code>null<\/code> value\n     */\n    public SQLOutputImpl(Vector<?> attributes, Map<String,?> map)\n        throws SQLException\n    {\n        if ((attributes == null) || (map == null)) {\n            throw new SQLException(\"Cannot instantiate a SQLOutputImpl \" +\n            \"instance with null parameters\");\n        }\n        this.attribs = attributes;\n        this.map = map;\n    }"}
{"Number":"1537","API Relative Path":"javax.sql.rowset.serial.SQLOutputImpl.java-writeArray(Array)","Corresponding Source":"/**\n     * Writes an <code>Array<\/code> object in the Java\n     * programming language to this <code>SQLOutputImpl<\/code>\n     * object. The driver converts this value to a serializable\n     * <code>SerialArray<\/code> SQL <code>ARRAY<\/code>\n     * value before returning it to the database.\n     *\n     * @param x an object representing an SQL <code>ARRAY<\/code> value\n     * @throws SQLException if the <code>SQLOutputImpl<\/code> object is in\n     *        use by a <code>SQLData<\/code> object attempting to write the attribute\n     *        values of a UDT to the database.\n     */\n    @SuppressWarnings(\"unchecked\")\n    public void writeArray(Array x) throws SQLException {\n        if (x == null) {\n            attribs.add(null);\n        } else {\n            attribs.add(new SerialArray(x, map));\n        }\n    }"}
{"Number":"1538","API Relative Path":"javax.sql.rowset.serial.SQLOutputImpl.java-writeBlob(Blob)","Corresponding Source":"/**\n     * Writes a <code>Blob<\/code> object in the Java programming language\n     * to this <code>SQLOutputImpl<\/code> object.  The driver converts\n     * it to a serializable <code>SerialBlob<\/code> SQL <code>BLOB<\/code> value\n     * before returning it to the database.\n     *\n     * @param x an object representing an SQL <code>BLOB<\/code> value\n     * @throws SQLException if the <code>SQLOutputImpl<\/code> object is in\n     *        use by a <code>SQLData<\/code> object attempting to write the attribute\n     *        values of a UDT to the database.\n     */\n    @SuppressWarnings(\"unchecked\")\n    public void writeBlob(Blob x) throws SQLException {\n        if (x == null) {\n            attribs.add(null);\n        } else {\n            attribs.add(new SerialBlob(x));\n        }\n    }"}
{"Number":"1539","API Relative Path":"javax.sql.rowset.serial.SQLOutputImpl.java-writeClob(Clob)","Corresponding Source":"/**\n     * Writes a <code>Clob<\/code> object in the Java programming language\n     * to this <code>SQLOutputImpl<\/code> object.  The driver converts\n     * it to a serializable <code>SerialClob<\/code> SQL <code>CLOB<\/code> value\n     * before returning it to the database.\n     *\n     * @param x an object representing an SQL <code>CLOB<\/code> value\n     * @throws SQLException if the <code>SQLOutputImpl<\/code> object is in\n     *        use by a <code>SQLData<\/code> object attempting to write the attribute\n     *        values of a UDT to the database.\n     */\n    @SuppressWarnings(\"unchecked\")\n    public void writeClob(Clob x) throws SQLException {\n        if (x == null) {\n            attribs.add(null);\n        } else {\n            attribs.add(new SerialClob(x));\n        }\n    }"}
{"Number":"1540","API Relative Path":"javax.sql.rowset.serial.SQLOutputImpl.java-writeRef(Ref)","Corresponding Source":"/**\n     * Writes a <code>Ref<\/code> object in the Java programming language\n     * to this <code>SQLOutputImpl<\/code> object.  The driver converts\n     * it to a serializable <code>SerialRef<\/code> SQL <code>REF<\/code> value\n     * before returning it to the database.\n     *\n     * @param x an object representing an SQL <code>REF<\/code> value\n     * @throws SQLException if the <code>SQLOutputImpl<\/code> object is in\n     *        use by a <code>SQLData<\/code> object attempting to write the attribute\n     *        values of a UDT to the database.\n     */\n    @SuppressWarnings(\"unchecked\")\n    public void writeRef(Ref x) throws SQLException {\n        if (x == null) {\n            attribs.add(null);\n        } else {\n            attribs.add(new SerialRef(x));\n        }\n    }"}
{"Number":"1541","API Relative Path":"javax.xml.bind.annotation.adapters.CollapsedStringAdapter.java-unmarshal(String)","Corresponding Source":"/**\n     * Removes leading and trailing whitespaces of the string\n     * given as the parameter, then truncate any\n     * sequnce of tab, CR, LF, and SP by a single whitespace character ' '.\n     */\n    public String unmarshal(String text) {\n        if(text==null)  return null;        // be defensive\n\n        int len = text.length();\n\n        // most of the texts are already in the collapsed form.\n        // so look for the first whitespace in the hope that we will\n        // never see it.\n        int s=0;\n        while(s<len) {\n            if(isWhiteSpace(text.charAt(s)))\n                break;\n            s++;\n        }\n        if(s==len)\n            // the input happens to be already collapsed.\n            return text;\n\n        // we now know that the input contains spaces.\n        // let's sit down and do the collapsing normally.\n\n        StringBuilder result = new StringBuilder(len /*allocate enough size to avoid re-allocation*/ );\n\n        if(s!=0) {\n            for( int i=0; i<s; i++ )\n                result.append(text.charAt(i));\n            result.append(' ');\n        }\n\n        boolean inStripMode = true;\n        for (int i = s+1; i < len; i++) {\n            char ch = text.charAt(i);\n            boolean b = isWhiteSpace(ch);\n            if (inStripMode && b)\n                continue; // skip this character\n\n            inStripMode = b;\n            if (inStripMode)\n                result.append(' ');\n            else\n                result.append(ch);\n        }\n\n        // remove trailing whitespaces\n        len = result.length();\n        if (len > 0 && result.charAt(len - 1) == ' ')\n            result.setLength(len - 1);\n        // whitespaces are already collapsed,\n        // so all we have to do is to remove the last one character\n        // if it's a whitespace.\n\n        return result.toString();\n    }"}
{"Number":"1542","API Relative Path":"javax.xml.bind.annotation.adapters.NormalizedStringAdapter.java-unmarshal(String)","Corresponding Source":"/**\n     * Replace any tab, CR, and LF by a whitespace character ' ',\n     * as specified in <a href=\"http://www.w3.org/TR/xmlschema-2/#rf-whiteSpace\">the whitespace facet 'replace'<\/a>\n     */\n    public String unmarshal(String text) {\n        if(text==null)      return null;    // be defensive\n\n        int i=text.length()-1;\n\n        // look for the first whitespace char.\n        while( i>=0 && !isWhiteSpaceExceptSpace(text.charAt(i)) )\n            i--;\n\n        if( i<0 )\n            // no such whitespace. replace(text)==text.\n            return text;\n\n        // we now know that we need to modify the text.\n        // allocate a char array to do it.\n        char[] buf = text.toCharArray();\n\n        buf[i--] = ' ';\n        for( ; i>=0; i-- )\n            if( isWhiteSpaceExceptSpace(buf[i]))\n                buf[i] = ' ';\n\n        return new String(buf);\n    }"}
{"Number":"1543","API Relative Path":"javax.xml.bind.helpers.AbstractMarshallerImpl.java-getJavaEncoding(String)","Corresponding Source":"/**\n     * Gets the corresponding Java encoding name from an IANA name.\n     *\n     * This method is a helper method for the derived class to convert\n     * encoding names.\n     *\n     * @exception UnsupportedEncodingException\n     *      If this implementation couldn't find the Java encoding name.\n     */\n    protected String getJavaEncoding( String encoding ) throws UnsupportedEncodingException {\n        try {\n            \"1\".getBytes(encoding);\n            return encoding;\n        } catch( UnsupportedEncodingException e ) {\n            // try known alias\n            for( int i=0; i<aliases.length; i+=2 ) {\n                if(encoding.equals(aliases[i])) {\n                    \"1\".getBytes(aliases[i+1]);\n                    return aliases[i+1];\n                }\n            }\n\n            throw new UnsupportedEncodingException(encoding);\n        }\n        /* J2SE1.4 feature\n        try {\n            this.encoding = Charset.forName( _encoding );\n        } catch( UnsupportedCharsetException uce ) {\n            throw new JAXBException( uce );\n        }\n         */\n    }"}
{"Number":"1544","API Relative Path":"javax.xml.bind.helpers.AbstractMarshallerImpl.java-getJavaEncoding(String)","Corresponding Source":"/**\n     * Gets the corresponding Java encoding name from an IANA name.\n     *\n     * This method is a helper method for the derived class to convert\n     * encoding names.\n     *\n     * @exception UnsupportedEncodingException\n     *      If this implementation couldn't find the Java encoding name.\n     */\n    protected String getJavaEncoding( String encoding ) throws UnsupportedEncodingException {\n        try {\n            \"1\".getBytes(encoding);\n            return encoding;\n        } catch( UnsupportedEncodingException e ) {\n            // try known alias\n            for( int i=0; i<aliases.length; i+=2 ) {\n                if(encoding.equals(aliases[i])) {\n                    \"1\".getBytes(aliases[i+1]);\n                    return aliases[i+1];\n                }\n            }\n\n            throw new UnsupportedEncodingException(encoding);\n        }\n        /* J2SE1.4 feature\n        try {\n            this.encoding = Charset.forName( _encoding );\n        } catch( UnsupportedCharsetException uce ) {\n            throw new JAXBException( uce );\n        }\n         */\n    }"}
{"Number":"1545","API Relative Path":"javax.xml.bind.helpers.AbstractMarshallerImpl.java-getNode(Object)","Corresponding Source":"/**\n     * By default, the getNode method is unsupported and throw\n     * an {@link java.lang.UnsupportedOperationException}.\n     *\n     * Implementations that choose to support this method must\n     * override this method.\n     */\n    public org.w3c.dom.Node getNode( Object obj ) throws JAXBException {\n\n        checkNotNull( obj, \"obj\", Boolean.TRUE, \"foo\" );\n\n        throw new UnsupportedOperationException();\n    }"}
{"Number":"1546","API Relative Path":"javax.xml.bind.helpers.AbstractMarshallerImpl.java-getProperty(String)","Corresponding Source":"/**\n     * Default implementation of the getProperty method handles\n     * the four defined properties in Marshaller.  If a provider\n     * needs to support additional provider specific properties,\n     * it should override this method in a derived class.\n     */\n    public Object getProperty( String name )\n        throws PropertyException {\n\n        if( name == null ) {\n            throw new IllegalArgumentException(\n                Messages.format( Messages.MUST_NOT_BE_NULL, \"name\" ) );\n        }\n\n        // recognize and handle four pre-defined properties.\n        if( JAXB_ENCODING.equals(name) )\n            return getEncoding();\n        if( JAXB_FORMATTED_OUTPUT.equals(name) )\n            return isFormattedOutput()?Boolean.TRUE:Boolean.FALSE;\n        if( JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(name) )\n            return getNoNSSchemaLocation();\n        if( JAXB_SCHEMA_LOCATION.equals(name) )\n            return getSchemaLocation();\n        if( JAXB_FRAGMENT.equals(name) )\n            return isFragment()?Boolean.TRUE:Boolean.FALSE;\n\n        throw new PropertyException(name);\n    }"}
{"Number":"1547","API Relative Path":"javax.xml.bind.helpers.AbstractMarshallerImpl.java-setProperty(String-Object)","Corresponding Source":"/**\n     * Default implementation of the setProperty method handles\n     * the four defined properties in Marshaller. If a provider\n     * needs to handle additional properties, it should override\n     * this method in a derived class.\n     */\n    public void setProperty( String name, Object value )\n        throws PropertyException {\n\n        if( name == null ) {\n            throw new IllegalArgumentException(\n                Messages.format( Messages.MUST_NOT_BE_NULL, \"name\" ) );\n        }\n\n        // recognize and handle four pre-defined properties.\n        if( JAXB_ENCODING.equals(name) ) {\n            checkString( name, value );\n            setEncoding( (String)value );\n            return;\n        }\n        if( JAXB_FORMATTED_OUTPUT.equals(name) ) {\n            checkBoolean( name, value );\n            setFormattedOutput((Boolean) value );\n            return;\n        }\n        if( JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(name) ) {\n            checkString( name, value );\n            setNoNSSchemaLocation( (String)value );\n            return;\n        }\n        if( JAXB_SCHEMA_LOCATION.equals(name) ) {\n            checkString( name, value );\n            setSchemaLocation( (String)value );\n            return;\n        }\n        if( JAXB_FRAGMENT.equals(name) )  {\n            checkBoolean(name, value);\n            setFragment((Boolean) value );\n            return;\n        }\n\n        throw new PropertyException(name, value);\n    }"}
{"Number":"1548","API Relative Path":"javax.xml.bind.helpers.AbstractMarshallerImpl.java-setProperty(String-Object)","Corresponding Source":"/**\n     * Default implementation of the setProperty method handles\n     * the four defined properties in Marshaller. If a provider\n     * needs to handle additional properties, it should override\n     * this method in a derived class.\n     */\n    public void setProperty( String name, Object value )\n        throws PropertyException {\n\n        if( name == null ) {\n            throw new IllegalArgumentException(\n                Messages.format( Messages.MUST_NOT_BE_NULL, \"name\" ) );\n        }\n\n        // recognize and handle four pre-defined properties.\n        if( JAXB_ENCODING.equals(name) ) {\n            checkString( name, value );\n            setEncoding( (String)value );\n            return;\n        }\n        if( JAXB_FORMATTED_OUTPUT.equals(name) ) {\n            checkBoolean( name, value );\n            setFormattedOutput((Boolean) value );\n            return;\n        }\n        if( JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(name) ) {\n            checkString( name, value );\n            setNoNSSchemaLocation( (String)value );\n            return;\n        }\n        if( JAXB_SCHEMA_LOCATION.equals(name) ) {\n            checkString( name, value );\n            setSchemaLocation( (String)value );\n            return;\n        }\n        if( JAXB_FRAGMENT.equals(name) )  {\n            checkBoolean(name, value);\n            setFragment((Boolean) value );\n            return;\n        }\n\n        throw new PropertyException(name, value);\n    }"}
{"Number":"1549","API Relative Path":"javax.xml.bind.helpers.AbstractMarshallerImpl.java-setProperty(String-Object)","Corresponding Source":"/**\n     * Default implementation of the setProperty method handles\n     * the four defined properties in Marshaller. If a provider\n     * needs to handle additional properties, it should override\n     * this method in a derived class.\n     */\n    public void setProperty( String name, Object value )\n        throws PropertyException {\n\n        if( name == null ) {\n            throw new IllegalArgumentException(\n                Messages.format( Messages.MUST_NOT_BE_NULL, \"name\" ) );\n        }\n\n        // recognize and handle four pre-defined properties.\n        if( JAXB_ENCODING.equals(name) ) {\n            checkString( name, value );\n            setEncoding( (String)value );\n            return;\n        }\n        if( JAXB_FORMATTED_OUTPUT.equals(name) ) {\n            checkBoolean( name, value );\n            setFormattedOutput((Boolean) value );\n            return;\n        }\n        if( JAXB_NO_NAMESPACE_SCHEMA_LOCATION.equals(name) ) {\n            checkString( name, value );\n            setNoNSSchemaLocation( (String)value );\n            return;\n        }\n        if( JAXB_SCHEMA_LOCATION.equals(name) ) {\n            checkString( name, value );\n            setSchemaLocation( (String)value );\n            return;\n        }\n        if( JAXB_FRAGMENT.equals(name) )  {\n            checkBoolean(name, value);\n            setFragment((Boolean) value );\n            return;\n        }\n\n        throw new PropertyException(name, value);\n    }"}
{"Number":"1550","API Relative Path":"javax.xml.bind.helpers.AbstractUnmarshallerImpl.java-getProperty(String)","Corresponding Source":"/**\n     * Default implementation of the getProperty method always\n     * throws PropertyException since there are no required\n     * properties. If a provider needs to handle additional\n     * properties, it should override this method in a derived class.\n     */\n    public Object getProperty( String name )\n        throws PropertyException {\n\n        if( name == null ) {\n            throw new IllegalArgumentException(\n                Messages.format( Messages.MUST_NOT_BE_NULL, \"name\" ) );\n        }\n\n        throw new PropertyException(name);\n    }"}
{"Number":"1551","API Relative Path":"javax.xml.bind.helpers.AbstractUnmarshallerImpl.java-setProperty(String-Object)","Corresponding Source":"/**\n     * Default implementation of the setProperty method always\n     * throws PropertyException since there are no required\n     * properties. If a provider needs to handle additional\n     * properties, it should override this method in a derived class.\n     */\n    public void setProperty( String name, Object value )\n        throws PropertyException {\n\n        if( name == null ) {\n            throw new IllegalArgumentException(\n                Messages.format( Messages.MUST_NOT_BE_NULL, \"name\" ) );\n        }\n\n        throw new PropertyException(name, value);\n    }"}
{"Number":"1552","API Relative Path":"javax.xml.bind.helpers.ValidationEventImpl.java-setSeverity(int)","Corresponding Source":"/**\n     * Set the severity field of this event.\n     *\n     * @param _severity Must be one of ValidationEvent.WARNING,\n     * ValidationEvent.ERROR, or ValidationEvent.FATAL_ERROR.\n     * @throws IllegalArgumentException if an illegal severity field is supplied\n     */\n    public void setSeverity( int _severity ) {\n\n        if( _severity != ValidationEvent.WARNING &&\n            _severity != ValidationEvent.ERROR &&\n            _severity != ValidationEvent.FATAL_ERROR ) {\n                throw new IllegalArgumentException(\n                    Messages.format( Messages.ILLEGAL_SEVERITY ) );\n        }\n\n        this.severity = _severity;\n    }"}
{"Number":"1553","API Relative Path":"javax.xml.bind.helpers.ValidationEventImpl.java-ValidationEventImpl(int-String-ValidationEventLocator-Throwable)","Corresponding Source":"/**\n     * Create a new ValidationEventImpl.\n     *\n     * @param _severity The severity value for this event.  Must be one of\n     * ValidationEvent.WARNING, ValidationEvent.ERROR, or\n     * ValidationEvent.FATAL_ERROR\n     * @param _message The text message for this event - may be null.\n     * @param _locator The locator object for this event - may be null.\n     * @param _linkedException An optional linked exception that may provide\n     * additional information about the event - may be null.\n     * @throws IllegalArgumentException if an illegal severity field is supplied\n     */\n    public ValidationEventImpl( int _severity, String _message,\n                                 ValidationEventLocator _locator,\n                                 Throwable _linkedException ) {\n\n        setSeverity( _severity );\n        this.message = _message;\n        this.locator = _locator;\n        this.linkedException = _linkedException;\n    }"}
{"Number":"1554","API Relative Path":"javax.xml.bind.JAXBContext.java-newInstance(Class[]-Map)","Corresponding Source":"/**\n     * <p>\n     * Obtain a new instance of a <tt>JAXBContext<\/tt> class.\n     *\n     * <p>\n     * An overloading of {@link JAXBContext#newInstance(Class...)}\n     * to configure 'properties' for this instantiation of {@link JAXBContext}.\n     *\n     * <p>\n     * The interpretation of properties is up to implementations. Implementations should\n     * throw <tt>JAXBException<\/tt> if it finds properties that it doesn't understand.\n     *\n     * @param classesToBeBound\n     *      list of java classes to be recognized by the new {@link JAXBContext}.\n     *      Can be empty, in which case a {@link JAXBContext} that only knows about\n     *      spec-defined classes will be returned.\n     * @param properties\n     *      provider-specific properties. Can be null, which means the same thing as passing\n     *      in an empty map.\n     *\n     * @return\n     *      A new instance of a <tt>JAXBContext<\/tt>. Always non-null valid object.\n     *\n     * @throws JAXBException\n     *      if an error was encountered while creating the\n     *      <tt>JAXBContext<\/tt>, such as (but not limited to):\n     * <ol>\n     *  <li>No JAXB implementation was discovered\n     *  <li>Classes use JAXB annotations incorrectly\n     *  <li>Classes have colliding annotations (i.e., two classes with the same type name)\n     *  <li>The JAXB implementation was unable to locate\n     *      provider-specific out-of-band information (such as additional\n     *      files generated at the development time.)\n     * <\/ol>\n     *\n     * @throws IllegalArgumentException\n     *      if the parameter contains {@code null} (i.e., {@code newInstance(null,someMap);})\n     *\n     * @since JAXB2.0\n     */\n    public static JAXBContext newInstance( Class[] classesToBeBound, Map<String,?> properties )\n        throws JAXBException {\n\n        if (classesToBeBound == null) {\n                throw new IllegalArgumentException();\n        }\n\n        // but it is an error to have nulls in it.\n        for (int i = classesToBeBound.length - 1; i >= 0; i--) {\n            if (classesToBeBound[i] == null) {\n                throw new IllegalArgumentException();\n            }\n        }\n\n        return ContextFinder.find(classesToBeBound,properties);\n    }"}
{"Number":"1555","API Relative Path":"javax.xml.bind.JAXBElement.java-JAXBElement(QName-Class-Class-T)","Corresponding Source":"/**\n     * <p>Construct an xml element instance.<\/p>\n     *\n     * @param name          Java binding of xml element tag name\n     * @param declaredType  Java binding of xml element declaration's type\n     * @param scope\n     *      Java binding of scope of xml element declaration.\n     *      Passing null is the same as passing <tt>GlobalScope.class<\/tt>\n     * @param value\n     *      Java instance representing xml element's value.\n     * @see #getScope()\n     * @see #isTypeSubstituted()\n     */\n    public JAXBElement(QName name,\n                       Class<T> declaredType,\n                       Class scope,\n                       T value) {\n        if(declaredType==null || name==null)\n            throw new IllegalArgumentException();\n        this.declaredType = declaredType;\n        if(scope==null)     scope = GlobalScope.class;\n        this.scope = scope;\n        this.name = name;\n        setValue(value);\n    }"}
{"Number":"1556","API Relative Path":"javax.xml.crypto.dom.DOMCryptoContext.java-getNamespacePrefix(String-String)","Corresponding Source":"/**\n     * This implementation uses an internal {@link HashMap} to get the prefix\n     * that the specified URI maps to. It returns the <code>defaultPrefix<\/code>\n     * if it maps to <code>null<\/code>.\n     *\n     * @throws NullPointerException {@inheritDoc}\n     */\n    public String getNamespacePrefix(String namespaceURI,\n        String defaultPrefix) {\n        if (namespaceURI == null) {\n            throw new NullPointerException(\"namespaceURI cannot be null\");\n        }\n        String prefix = nsMap.get(namespaceURI);\n        return (prefix != null ? prefix : defaultPrefix);\n    }"}
{"Number":"1557","API Relative Path":"javax.xml.crypto.dom.DOMCryptoContext.java-getProperty(String)","Corresponding Source":"/**\n     * This implementation uses an internal {@link HashMap} to get the object\n     * that the specified name maps to.\n     *\n     * @throws NullPointerException {@inheritDoc}\n     */\n    public Object getProperty(String name) {\n        if (name == null) {\n            throw new NullPointerException(\"name is null\");\n        }\n        return propMap.get(name);\n    }"}
{"Number":"1558","API Relative Path":"javax.xml.crypto.dom.DOMCryptoContext.java-putNamespacePrefix(String-String)","Corresponding Source":"/**\n     * This implementation uses an internal {@link HashMap} to map the URI\n     * to the specified prefix.\n     *\n     * @throws NullPointerException {@inheritDoc}\n     */\n    public String putNamespacePrefix(String namespaceURI, String prefix) {\n        if (namespaceURI == null) {\n            throw new NullPointerException(\"namespaceURI is null\");\n        }\n        return nsMap.put(namespaceURI, prefix);\n    }"}
{"Number":"1559","API Relative Path":"javax.xml.crypto.dom.DOMCryptoContext.java-setIdAttributeNS(Element-String-String)","Corresponding Source":"/**\n     * Registers the element's attribute specified by the namespace URI and\n     * local name to be of type ID. The attribute must have a non-empty value.\n     *\n     * <p>This implementation uses an internal {@link HashMap} to map the\n     * attribute's value to the specified element.\n     *\n     * @param element the element\n     * @param namespaceURI the namespace URI of the attribute (specify\n     *    <code>null<\/code> if not applicable)\n     * @param localName the local name of the attribute\n     * @throws IllegalArgumentException if <code>localName<\/code> is not an\n     *    attribute of the specified element or it does not contain a specific\n     *    value\n     * @throws NullPointerException if <code>element<\/code> or\n     *    <code>localName<\/code> is <code>null<\/code>\n     * @see #getElementById\n     */\n    public void setIdAttributeNS(Element element, String namespaceURI,\n        String localName) {\n        if (element == null) {\n            throw new NullPointerException(\"element is null\");\n        }\n        if (localName == null) {\n            throw new NullPointerException(\"localName is null\");\n        }\n        String idValue = element.getAttributeNS(namespaceURI, localName);\n        if (idValue == null || idValue.length() == 0) {\n            throw new IllegalArgumentException(localName + \" is not an \" +\n                \"attribute\");\n        }\n        idMap.put(idValue, element);\n    }"}
{"Number":"1560","API Relative Path":"javax.xml.crypto.dom.DOMCryptoContext.java-setProperty(String-Object)","Corresponding Source":"/**\n     * This implementation uses an internal {@link HashMap} to map the name\n     * to the specified object.\n     *\n     * @throws NullPointerException {@inheritDoc}\n     */\n    public Object setProperty(String name, Object value) {\n        if (name == null) {\n            throw new NullPointerException(\"name is null\");\n        }\n        return propMap.put(name, value);\n    }"}
{"Number":"1561","API Relative Path":"javax.xml.crypto.dom.DOMStructure.java-isFeatureSupported(String)","Corresponding Source":"/**\n     * @throws NullPointerException {@inheritDoc}\n     */\n    public boolean isFeatureSupported(String feature) {\n        if (feature == null) {\n            throw new NullPointerException();\n        } else {\n            return false;\n        }\n    }"}
{"Number":"1562","API Relative Path":"javax.xml.crypto.dsig.dom.DOMSignContext.java-DOMSignContext(Key-Node)","Corresponding Source":"/**\n     * Creates a <code>DOMSignContext<\/code> with the specified key selector\n     * and parent node. The marshalled <code>XMLSignature<\/code> will be added\n     * as the last child element of the specified parent node unless a next\n     * sibling node is specified by invoking the\n     * {@link #setNextSibling setNextSibling} method.\n     *\n     * @param ks the key selector\n     * @param parent the parent node\n     * @throws NullPointerException if <code>ks<\/code> or <code>parent<\/code>\n     *    is <code>null<\/code>\n     */\n    public DOMSignContext(KeySelector ks, Node parent) {\n        if (ks == null) {\n            throw new NullPointerException(\"key selector cannot be null\");\n        }\n        if (parent == null) {\n            throw new NullPointerException(\"parent cannot be null\");\n        }\n        setKeySelector(ks);\n        this.parent = parent;\n    }"}
{"Number":"1563","API Relative Path":"javax.xml.crypto.dsig.dom.DOMSignContext.java-DOMSignContext(Key-Node-Node)","Corresponding Source":"/**\n     * Creates a <code>DOMSignContext<\/code> with the specified key selector,\n     * parent and next sibling nodes. The marshalled <code>XMLSignature<\/code>\n     * will be inserted as a child element of the specified parent node and\n     * immediately before the specified next sibling node.\n     *\n     * @param ks the key selector\n     * @param parent the parent node\n     * @param nextSibling the next sibling node\n     * @throws NullPointerException if <code>ks<\/code>, <code>parent<\/code> or\n     *    <code>nextSibling<\/code> is <code>null<\/code>\n     */\n    public DOMSignContext(KeySelector ks, Node parent, Node nextSibling) {\n        if (ks == null) {\n            throw new NullPointerException(\"key selector cannot be null\");\n        }\n        if (parent == null) {\n            throw new NullPointerException(\"parent cannot be null\");\n        }\n        if (nextSibling == null) {\n            throw new NullPointerException(\"nextSibling cannot be null\");\n        }\n        setKeySelector(ks);\n        this.parent = parent;\n        this.nextSibling = nextSibling;\n    }"}
{"Number":"1564","API Relative Path":"javax.xml.crypto.dsig.dom.DOMSignContext.java-DOMSignContext(Key-Node-Node)","Corresponding Source":"/**\n     * Creates a <code>DOMSignContext<\/code> with the specified key selector,\n     * parent and next sibling nodes. The marshalled <code>XMLSignature<\/code>\n     * will be inserted as a child element of the specified parent node and\n     * immediately before the specified next sibling node.\n     *\n     * @param ks the key selector\n     * @param parent the parent node\n     * @param nextSibling the next sibling node\n     * @throws NullPointerException if <code>ks<\/code>, <code>parent<\/code> or\n     *    <code>nextSibling<\/code> is <code>null<\/code>\n     */\n    public DOMSignContext(KeySelector ks, Node parent, Node nextSibling) {\n        if (ks == null) {\n            throw new NullPointerException(\"key selector cannot be null\");\n        }\n        if (parent == null) {\n            throw new NullPointerException(\"parent cannot be null\");\n        }\n        if (nextSibling == null) {\n            throw new NullPointerException(\"nextSibling cannot be null\");\n        }\n        setKeySelector(ks);\n        this.parent = parent;\n        this.nextSibling = nextSibling;\n    }"}
{"Number":"1565","API Relative Path":"javax.xml.crypto.dsig.dom.DOMSignContext.java-DOMSignContext(KeySelector-Node)","Corresponding Source":"/**\n     * Creates a <code>DOMSignContext<\/code> with the specified key selector\n     * and parent node. The marshalled <code>XMLSignature<\/code> will be added\n     * as the last child element of the specified parent node unless a next\n     * sibling node is specified by invoking the\n     * {@link #setNextSibling setNextSibling} method.\n     *\n     * @param ks the key selector\n     * @param parent the parent node\n     * @throws NullPointerException if <code>ks<\/code> or <code>parent<\/code>\n     *    is <code>null<\/code>\n     */\n    public DOMSignContext(KeySelector ks, Node parent) {\n        if (ks == null) {\n            throw new NullPointerException(\"key selector cannot be null\");\n        }\n        if (parent == null) {\n            throw new NullPointerException(\"parent cannot be null\");\n        }\n        setKeySelector(ks);\n        this.parent = parent;\n    }"}
{"Number":"1566","API Relative Path":"javax.xml.crypto.dsig.dom.DOMSignContext.java-DOMSignContext(KeySelector-Node-Node)","Corresponding Source":"/**\n     * Creates a <code>DOMSignContext<\/code> with the specified key selector,\n     * parent and next sibling nodes. The marshalled <code>XMLSignature<\/code>\n     * will be inserted as a child element of the specified parent node and\n     * immediately before the specified next sibling node.\n     *\n     * @param ks the key selector\n     * @param parent the parent node\n     * @param nextSibling the next sibling node\n     * @throws NullPointerException if <code>ks<\/code>, <code>parent<\/code> or\n     *    <code>nextSibling<\/code> is <code>null<\/code>\n     */\n    public DOMSignContext(KeySelector ks, Node parent, Node nextSibling) {\n        if (ks == null) {\n            throw new NullPointerException(\"key selector cannot be null\");\n        }\n        if (parent == null) {\n            throw new NullPointerException(\"parent cannot be null\");\n        }\n        if (nextSibling == null) {\n            throw new NullPointerException(\"nextSibling cannot be null\");\n        }\n        setKeySelector(ks);\n        this.parent = parent;\n        this.nextSibling = nextSibling;\n    }"}
{"Number":"1567","API Relative Path":"javax.xml.crypto.dsig.dom.DOMSignContext.java-DOMSignContext(KeySelector-Node-Node)","Corresponding Source":"/**\n     * Creates a <code>DOMSignContext<\/code> with the specified key selector,\n     * parent and next sibling nodes. The marshalled <code>XMLSignature<\/code>\n     * will be inserted as a child element of the specified parent node and\n     * immediately before the specified next sibling node.\n     *\n     * @param ks the key selector\n     * @param parent the parent node\n     * @param nextSibling the next sibling node\n     * @throws NullPointerException if <code>ks<\/code>, <code>parent<\/code> or\n     *    <code>nextSibling<\/code> is <code>null<\/code>\n     */\n    public DOMSignContext(KeySelector ks, Node parent, Node nextSibling) {\n        if (ks == null) {\n            throw new NullPointerException(\"key selector cannot be null\");\n        }\n        if (parent == null) {\n            throw new NullPointerException(\"parent cannot be null\");\n        }\n        if (nextSibling == null) {\n            throw new NullPointerException(\"nextSibling cannot be null\");\n        }\n        setKeySelector(ks);\n        this.parent = parent;\n        this.nextSibling = nextSibling;\n    }"}
{"Number":"1568","API Relative Path":"javax.xml.crypto.dsig.dom.DOMValidateContext.java-DOMValidateContext(Key-Node)","Corresponding Source":"/**\n     * Creates a <code>DOMValidateContext<\/code> containing the specified key\n     * and node. The validating key will be stored in a\n     * {@link KeySelector#singletonKeySelector singleton KeySelector} that\n     * is returned when the {@link #getKeySelector getKeySelector}\n     * method is called.\n     *\n     * @param validatingKey the validating key\n     * @param node the node\n     * @throws NullPointerException if <code>validatingKey<\/code> or\n     *    <code>node<\/code> is <code>null<\/code>\n     */\n    public DOMValidateContext(Key validatingKey, Node node) {\n        if (validatingKey == null) {\n            throw new NullPointerException(\"validatingKey is null\");\n        }\n        init(node, KeySelector.singletonKeySelector(validatingKey));\n    }"}
{"Number":"1569","API Relative Path":"javax.xml.crypto.dsig.dom.DOMValidateContext.java-DOMValidateContext(KeySelector-Node)","Corresponding Source":"/**\n     * Creates a <code>DOMValidateContext<\/code> containing the specified key\n     * selector and node.\n     *\n     * @param ks a key selector for finding a validation key\n     * @param node the node\n     * @throws NullPointerException if <code>ks<\/code> or <code>node<\/code> is\n     *    <code>null<\/code>\n     */\n    public DOMValidateContext(KeySelector ks, Node node) {\n        if (ks == null) {\n            throw new NullPointerException(\"key selector is null\");\n        }\n        init(node, ks);\n    }"}
{"Number":"1570","API Relative Path":"javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.java-getInstance(String-Provider)","Corresponding Source":"/**\n     * Returns a <code>KeyInfoFactory<\/code> that supports the\n     * requested XML processing mechanism and representation type (ex: \"DOM\"),\n     * as supplied by the specified provider. Note that the specified\n     * <code>Provider<\/code> object does not have to be registered in the\n     * provider list.\n     *\n     * @param mechanismType the type of the XML processing mechanism and\n     *    representation. See the <a\n     *    href=\"../../../../../../technotes/guides/security/xmldsig/overview.html#Service Provider\">\n     *    Service Providers<\/a> section of the API overview for a list of\n     *    standard mechanism types.\n     * @param provider the <code>Provider<\/code> object\n     * @return a new <code>KeyInfoFactory<\/code>\n     * @throws NullPointerException if <code>mechanismType<\/code> or\n     *    <code>provider<\/code> are <code>null<\/code>\n     * @throws NoSuchMechanismException if a <code>KeyInfoFactory<\/code>\n     *    implementation for the specified mechanism is not available from the\n     *    specified <code>Provider<\/code> object\n     * @see Provider\n     */\n    public static KeyInfoFactory getInstance(String mechanismType,\n        Provider provider) {\n        if (mechanismType == null) {\n            throw new NullPointerException(\"mechanismType cannot be null\");\n        } else if (provider == null) {\n            throw new NullPointerException(\"provider cannot be null\");\n        }\n\n        Instance instance;\n        try {\n            instance = GetInstance.getInstance\n                (\"KeyInfoFactory\", null, mechanismType, provider);\n        } catch (NoSuchAlgorithmException nsae) {\n            throw new NoSuchMechanismException(nsae);\n        }\n        KeyInfoFactory factory = (KeyInfoFactory) instance.impl;\n        factory.mechanismType = mechanismType;\n        factory.provider = instance.provider;\n        return factory;\n    }"}
{"Number":"1571","API Relative Path":"javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.java-getInstance(String-String)","Corresponding Source":"/**\n     * Returns a <code>KeyInfoFactory<\/code> that supports the\n     * requested XML processing mechanism and representation type (ex: \"DOM\"),\n     * as supplied by the specified provider. The specified provider must be\n     * registered in the security provider list.\n     *\n     * <p>Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param mechanismType the type of the XML processing mechanism and\n     *    representation. See the <a\n     *    href=\"../../../../../../technotes/guides/security/xmldsig/overview.html#Service Provider\">\n     *    Service Providers<\/a> section of the API overview for a list of\n     *    standard mechanism types.\n     * @param provider the string name of the provider\n     * @return a new <code>KeyInfoFactory<\/code>\n     * @throws NoSuchProviderException if the specified provider is not\n     *    registered in the security provider list\n     * @throws NullPointerException if <code>mechanismType<\/code> or\n     *    <code>provider<\/code> are <code>null<\/code>\n     * @throws NoSuchMechanismException if a <code>KeyInfoFactory<\/code>\n     *    implementation for the specified mechanism is not available from the\n     *    specified provider\n     * @see Provider\n     */\n    public static KeyInfoFactory getInstance(String mechanismType,\n        String provider) throws NoSuchProviderException {\n        if (mechanismType == null) {\n            throw new NullPointerException(\"mechanismType cannot be null\");\n        } else if (provider == null) {\n            throw new NullPointerException(\"provider cannot be null\");\n        } else if (provider.length() == 0) {\n            throw new NoSuchProviderException();\n        }\n\n        Instance instance;\n        try {\n            instance = GetInstance.getInstance\n                (\"KeyInfoFactory\", null, mechanismType, provider);\n        } catch (NoSuchAlgorithmException nsae) {\n            throw new NoSuchMechanismException(nsae);\n        }\n        KeyInfoFactory factory = (KeyInfoFactory) instance.impl;\n        factory.mechanismType = mechanismType;\n        factory.provider = instance.provider;\n        return factory;\n    }"}
{"Number":"1572","API Relative Path":"javax.xml.crypto.dsig.spec.XPathFilterParameterSpec.java-XPathFilterParameterSpec(String-Map)","Corresponding Source":"/**\n     * Creates an <code>XPathFilterParameterSpec<\/code> with the specified\n     * XPath expression and namespace map. The map is copied to protect against\n     * subsequent modification.\n     *\n     * @param xPath the XPath expression to be evaluated\n     * @param namespaceMap the map of namespace prefixes. Each key is a\n     *    namespace prefix <code>String<\/code> that maps to a corresponding\n     *    namespace URI <code>String<\/code>.\n     * @throws NullPointerException if <code>xPath<\/code> or\n     *    <code>namespaceMap<\/code> are <code>null<\/code>\n     * @throws ClassCastException if any of the map's keys or entries are not\n     *    of type <code>String<\/code>\n     */\n    @SuppressWarnings(\"rawtypes\")\n    public XPathFilterParameterSpec(String xPath, Map namespaceMap) {\n        if (xPath == null || namespaceMap == null) {\n            throw new NullPointerException();\n        }\n        this.xPath = xPath;\n        Map<?,?> copy = new HashMap<>((Map<?,?>)namespaceMap);\n        Iterator<? extends Map.Entry<?,?>> entries = copy.entrySet().iterator();\n        while (entries.hasNext()) {\n            Map.Entry<?,?> me = entries.next();\n            if (!(me.getKey() instanceof String) ||\n                !(me.getValue() instanceof String)) {\n                throw new ClassCastException(\"not a String\");\n            }\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        Map<String,String> temp = (Map<String,String>)copy;\n\n        nsMap = Collections.unmodifiableMap(temp);\n    }"}
{"Number":"1573","API Relative Path":"javax.xml.crypto.dsig.spec.XPathType.java-XPathType(String-Filter)","Corresponding Source":"/**\n     * Creates an <code>XPathType<\/code> instance with the specified XPath\n     * expression and filter.\n     *\n     * @param expression the XPath expression to be evaluated\n     * @param filter the filter operation ({@link Filter#INTERSECT},\n     *    {@link Filter#SUBTRACT}, or {@link Filter#UNION})\n     * @throws NullPointerException if <code>expression<\/code> or\n     *    <code>filter<\/code> is <code>null<\/code>\n     */\n    public XPathType(String expression, Filter filter) {\n        if (expression == null) {\n            throw new NullPointerException(\"expression cannot be null\");\n        }\n        if (filter == null) {\n            throw new NullPointerException(\"filter cannot be null\");\n        }\n        this.expression = expression;\n        this.filter = filter;\n        this.nsMap = Collections.emptyMap();\n    }"}
{"Number":"1574","API Relative Path":"javax.xml.crypto.dsig.TransformService.java-getInstance(String-String)","Corresponding Source":"/**\n     * Returns a <code>TransformService<\/code> that supports the specified\n     * algorithm URI (ex: {@link Transform#XPATH2}) and mechanism type\n     * (ex: DOM).\n     *\n     * <p>This method uses the standard JCA provider lookup mechanism to\n     * locate and instantiate a <code>TransformService<\/code> implementation\n     * of the desired algorithm and <code>MechanismType<\/code> service\n     * attribute. It traverses the list of registered security\n     * <code>Provider<\/code>s, starting with the most preferred\n     * <code>Provider<\/code>. A new <code>TransformService<\/code> object\n     * from the first <code>Provider<\/code> that supports the specified\n     * algorithm and mechanism type is returned.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param algorithm the URI of the algorithm\n     * @param mechanismType the type of the XML processing mechanism and\n     *   representation\n     * @return a new <code>TransformService<\/code>\n     * @throws NullPointerException if <code>algorithm<\/code> or\n     *   <code>mechanismType<\/code> is  <code>null<\/code>\n     * @throws NoSuchAlgorithmException if no <code>Provider<\/code> supports a\n     *   <code>TransformService<\/code> implementation for the specified\n     *   algorithm and mechanism type\n     * @see Provider\n     */\n    public static TransformService getInstance\n        (String algorithm, String mechanismType)\n        throws NoSuchAlgorithmException {\n        if (mechanismType == null || algorithm == null) {\n            throw new NullPointerException();\n        }\n        boolean dom = false;\n        if (mechanismType.equals(\"DOM\")) {\n            dom = true;\n        }\n        List<Service> services = GetInstance.getServices(\"TransformService\", algorithm);\n        for (Iterator<Service> t = services.iterator(); t.hasNext(); ) {\n            Service s = t.next();\n            String value = s.getAttribute(\"MechanismType\");\n            if ((value == null && dom) ||\n                (value != null && value.equals(mechanismType))) {\n                Instance instance = GetInstance.getInstance(s, null);\n                TransformService ts = (TransformService) instance.impl;\n                ts.algorithm = algorithm;\n                ts.mechanism = mechanismType;\n                ts.provider = instance.provider;\n                return ts;\n            }\n        }\n        throw new NoSuchAlgorithmException\n            (algorithm + \" algorithm and \" + mechanismType\n                 + \" mechanism not available\");\n    }"}
{"Number":"1575","API Relative Path":"javax.xml.crypto.dsig.TransformService.java-getInstance(String-String-Provider)","Corresponding Source":"/**\n     * Returns a <code>TransformService<\/code> that supports the specified\n     * algorithm URI (ex: {@link Transform#XPATH2}) and mechanism type\n     * (ex: DOM) as supplied by the specified provider. Note that the specified\n     * <code>Provider<\/code> object does not have to be registered in the\n     * provider list.\n     *\n     * @param algorithm the URI of the algorithm\n     * @param mechanismType the type of the XML processing mechanism and\n     *   representation\n     * @param provider the <code>Provider<\/code> object\n     * @return a new <code>TransformService<\/code>\n     * @throws NullPointerException if <code>provider<\/code>,\n     *   <code>algorithm<\/code>, or <code>mechanismType<\/code> is\n     *   <code>null<\/code>\n     * @throws NoSuchAlgorithmException if a <code>TransformService<\/code>\n     *   implementation for the specified algorithm and mechanism type is not\n     *   available from the specified <code>Provider<\/code> object\n     * @see Provider\n     */\n    public static TransformService getInstance\n        (String algorithm, String mechanismType, Provider provider)\n        throws NoSuchAlgorithmException {\n        if (mechanismType == null || algorithm == null || provider == null) {\n            throw new NullPointerException();\n        }\n\n        boolean dom = false;\n        if (mechanismType.equals(\"DOM\")) {\n            dom = true;\n        }\n        Service s = GetInstance.getService\n            (\"TransformService\", algorithm, provider);\n        String value = s.getAttribute(\"MechanismType\");\n        if ((value == null && dom) ||\n            (value != null && value.equals(mechanismType))) {\n            Instance instance = GetInstance.getInstance(s, null);\n            TransformService ts = (TransformService) instance.impl;\n            ts.algorithm = algorithm;\n            ts.mechanism = mechanismType;\n            ts.provider = instance.provider;\n            return ts;\n        }\n        throw new NoSuchAlgorithmException\n            (algorithm + \" algorithm and \" + mechanismType\n                 + \" mechanism not available\");\n    }"}
{"Number":"1576","API Relative Path":"javax.xml.crypto.dsig.TransformService.java-getInstance(String-String-String)","Corresponding Source":"/**\n     * Returns a <code>TransformService<\/code> that supports the specified\n     * algorithm URI (ex: {@link Transform#XPATH2}) and mechanism type\n     * (ex: DOM) as supplied by the specified provider. The specified provider\n     * must be registered in the security provider list.\n     *\n     * <p>Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param algorithm the URI of the algorithm\n     * @param mechanismType the type of the XML processing mechanism and\n     *   representation\n     * @param provider the string name of the provider\n     * @return a new <code>TransformService<\/code>\n     * @throws NoSuchProviderException if the specified provider is not\n     *   registered in the security provider list\n     * @throws NullPointerException if <code>provider<\/code>,\n     *   <code>mechanismType<\/code>, or <code>algorithm<\/code> is\n     *   <code>null<\/code>\n     * @throws NoSuchAlgorithmException if a <code>TransformService<\/code>\n     *   implementation for the specified algorithm and mechanism type is not\n     *   available from the specified provider\n     * @see Provider\n     */\n    public static TransformService getInstance\n        (String algorithm, String mechanismType, String provider)\n        throws NoSuchAlgorithmException, NoSuchProviderException {\n        if (mechanismType == null || algorithm == null || provider == null) {\n            throw new NullPointerException();\n        } else if (provider.length() == 0) {\n            throw new NoSuchProviderException();\n        }\n        boolean dom = false;\n        if (mechanismType.equals(\"DOM\")) {\n            dom = true;\n        }\n        Service s = GetInstance.getService\n            (\"TransformService\", algorithm, provider);\n        String value = s.getAttribute(\"MechanismType\");\n        if ((value == null && dom) ||\n            (value != null && value.equals(mechanismType))) {\n            Instance instance = GetInstance.getInstance(s, null);\n            TransformService ts = (TransformService) instance.impl;\n            ts.algorithm = algorithm;\n            ts.mechanism = mechanismType;\n            ts.provider = instance.provider;\n            return ts;\n        }\n        throw new NoSuchAlgorithmException\n            (algorithm + \" algorithm and \" + mechanismType\n                 + \" mechanism not available\");\n    }"}
{"Number":"1577","API Relative Path":"javax.xml.crypto.dsig.XMLSignatureFactory.java-getInstance(String-Provider)","Corresponding Source":"/**\n     * Returns an <code>XMLSignatureFactory<\/code> that supports the\n     * requested XML processing mechanism and representation type (ex: \"DOM\"),\n     * as supplied by the specified provider. Note that the specified\n     * <code>Provider<\/code> object does not have to be registered in the\n     * provider list.\n     *\n     * @param mechanismType the type of the XML processing mechanism and\n     *    representation. See the <a\n     *    href=\"../../../../../technotes/guides/security/xmldsig/overview.html#Service Provider\">\n     *    Service Providers<\/a> section of the API overview for a list of\n     *    standard mechanism types.\n     * @param provider the <code>Provider<\/code> object\n     * @return a new <code>XMLSignatureFactory<\/code>\n     * @throws NullPointerException if <code>provider<\/code> or\n     *    <code>mechanismType<\/code> is <code>null<\/code>\n     * @throws NoSuchMechanismException if an <code>XMLSignatureFactory<\/code>\n     *   implementation for the specified mechanism is not available\n     *   from the specified <code>Provider<\/code> object\n     * @see Provider\n     */\n    public static XMLSignatureFactory getInstance(String mechanismType,\n        Provider provider) {\n        if (mechanismType == null) {\n            throw new NullPointerException(\"mechanismType cannot be null\");\n        } else if (provider == null) {\n            throw new NullPointerException(\"provider cannot be null\");\n        }\n\n        Instance instance;\n        try {\n            instance = GetInstance.getInstance\n                (\"XMLSignatureFactory\", null, mechanismType, provider);\n        } catch (NoSuchAlgorithmException nsae) {\n            throw new NoSuchMechanismException(nsae);\n        }\n        XMLSignatureFactory factory = (XMLSignatureFactory) instance.impl;\n        factory.mechanismType = mechanismType;\n        factory.provider = instance.provider;\n        return factory;\n    }"}
{"Number":"1578","API Relative Path":"javax.xml.crypto.dsig.XMLSignatureFactory.java-getInstance(String-String)","Corresponding Source":"/**\n     * Returns an <code>XMLSignatureFactory<\/code> that supports the\n     * requested XML processing mechanism and representation type (ex: \"DOM\"),\n     * as supplied by the specified provider. The specified provider must be\n     * registered in the security provider list.\n     *\n     * <p>Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param mechanismType the type of the XML processing mechanism and\n     *    representation. See the <a\n     *    href=\"../../../../../technotes/guides/security/xmldsig/overview.html#Service Provider\">\n     *    Service Providers<\/a> section of the API overview for a list of\n     *    standard mechanism types.\n     * @param provider the string name of the provider\n     * @return a new <code>XMLSignatureFactory<\/code>\n     * @throws NoSuchProviderException if the specified provider is not\n     *    registered in the security provider list\n     * @throws NullPointerException if <code>provider<\/code> or\n     *    <code>mechanismType<\/code> is <code>null<\/code>\n     * @throws NoSuchMechanismException if an <code>XMLSignatureFactory<\/code>\n     *    implementation for the specified mechanism is not\n     *    available from the specified provider\n     * @see Provider\n     */\n    public static XMLSignatureFactory getInstance(String mechanismType,\n        String provider) throws NoSuchProviderException {\n        if (mechanismType == null) {\n            throw new NullPointerException(\"mechanismType cannot be null\");\n        } else if (provider == null) {\n            throw new NullPointerException(\"provider cannot be null\");\n        } else if (provider.length() == 0) {\n            throw new NoSuchProviderException();\n        }\n\n        Instance instance;\n        try {\n            instance = GetInstance.getInstance\n                (\"XMLSignatureFactory\", null, mechanismType, provider);\n        } catch (NoSuchAlgorithmException nsae) {\n            throw new NoSuchMechanismException(nsae);\n        }\n        XMLSignatureFactory factory = (XMLSignatureFactory) instance.impl;\n        factory.mechanismType = mechanismType;\n        factory.provider = instance.provider;\n        return factory;\n    }"}
{"Number":"1579","API Relative Path":"javax.xml.datatype.DatatypeFactory.java-newXMLGregorianCalendar(int-int-int-int-int-int-int-int)","Corresponding Source":"/**\n     * <p>Constructor of value spaces that a\n     * <code>java.util.GregorianCalendar<\/code> instance would need to convert to an\n     * <code>XMLGregorianCalendar<\/code> instance.<\/p>\n     *\n     * <p><code>XMLGregorianCalendar eon<\/code> and\n     * <code>fractionalSecond<\/code> are set to <code>null<\/code><\/p>\n     *\n     * <p>A {@link DatatypeConstants#FIELD_UNDEFINED} value indicates that field is not set.<\/p>\n     *\n     * @param year of <code>XMLGregorianCalendar<\/code> to be created.\n     * @param month of <code>XMLGregorianCalendar<\/code> to be created.\n     * @param day of <code>XMLGregorianCalendar<\/code> to be created.\n     * @param hour of <code>XMLGregorianCalendar<\/code> to be created.\n     * @param minute of <code>XMLGregorianCalendar<\/code> to be created.\n     * @param second of <code>XMLGregorianCalendar<\/code> to be created.\n     * @param millisecond of <code>XMLGregorianCalendar<\/code> to be created.\n     * @param timezone of <code>XMLGregorianCalendar<\/code> to be created.\n     *\n     * @return <code>XMLGregorianCalendar<\/code> created from specified values.\n     *\n     * @throws IllegalArgumentException If any individual parameter's value is outside the maximum value constraint for the field\n     *   as determined by the Date/Time Data Mapping table in {@link XMLGregorianCalendar}\n     *   or if the composite values constitute an invalid <code>XMLGregorianCalendar<\/code> instance\n     *   as determined by {@link XMLGregorianCalendar#isValid()}.\n     */\n    public XMLGregorianCalendar newXMLGregorianCalendar(\n            final int year,\n            final int month,\n            final int day,\n            final int hour,\n            final int minute,\n            final int second,\n            final int millisecond,\n            final int timezone) {\n\n            // year may be undefined\n            BigInteger realYear = (year != DatatypeConstants.FIELD_UNDEFINED) ? BigInteger.valueOf((long) year) : null;\n\n            // millisecond may be undefined\n            // millisecond must be >= 0 millisecond <= 1000\n            BigDecimal realMillisecond = null; // undefined value\n            if (millisecond != DatatypeConstants.FIELD_UNDEFINED) {\n                    if (millisecond < 0 || millisecond > 1000) {\n                            throw new IllegalArgumentException(\n                                                    \"javax.xml.datatype.DatatypeFactory#newXMLGregorianCalendar(\"\n                                                    + \"int year, int month, int day, int hour, int minute, int second, int millisecond, int timezone)\"\n                                                    + \"with invalid millisecond: \" + millisecond\n                                                    );\n                    }\n\n                    realMillisecond = BigDecimal.valueOf((long) millisecond).movePointLeft(3);\n            }\n\n            return newXMLGregorianCalendar(\n                    realYear,\n                    month,\n                    day,\n                    hour,\n                    minute,\n                    second,\n                    realMillisecond,\n                    timezone\n            );\n    }"}
{"Number":"1580","API Relative Path":"javax.xml.datatype.DatatypeFactory.java-newXMLGregorianCalendarTime(int-int-int-int-int)","Corresponding Source":"/**\n     * <p>Create a Java instance of XML Schema builtin datatype time.<\/p>\n     *\n     * <p>A {@link DatatypeConstants#FIELD_UNDEFINED} value indicates that field is not set.<\/p>\n     *\n     * @param hours number of hours\n     * @param minutes number of minutes\n     * @param seconds number of seconds\n     * @param milliseconds number of milliseconds\n     * @param timezone offset in minutes. {@link DatatypeConstants#FIELD_UNDEFINED} indicates optional field is not set.\n     *\n     * @return <code>XMLGregorianCalendar<\/code> created from parameter values.\n     *\n     * @see DatatypeConstants#FIELD_UNDEFINED\n     *\n     * @throws IllegalArgumentException If any individual parameter's value is outside the maximum value constraint for the field\n     *   as determined by the Date/Time Data Mapping table in {@link XMLGregorianCalendar}\n     *   or if the composite values constitute an invalid <code>XMLGregorianCalendar<\/code> instance\n     *   as determined by {@link XMLGregorianCalendar#isValid()}.\n     */\n    public XMLGregorianCalendar newXMLGregorianCalendarTime(\n            final int hours,\n            final int minutes,\n            final int seconds,\n            final int milliseconds,\n            final int timezone) {\n\n            // millisecond may be undefined\n            // millisecond must be >= 0 millisecond <= 1000\n            BigDecimal realMilliseconds = null; // undefined value\n            if (milliseconds != DatatypeConstants.FIELD_UNDEFINED) {\n                    if (milliseconds < 0 || milliseconds > 1000) {\n                            throw new IllegalArgumentException(\n                                                    \"javax.xml.datatype.DatatypeFactory#newXMLGregorianCalendarTime(\"\n                                                    + \"int hours, int minutes, int seconds, int milliseconds, int timezone)\"\n                                                    + \"with invalid milliseconds: \" + milliseconds\n                                                    );\n                    }\n\n                    realMilliseconds = BigDecimal.valueOf((long) milliseconds).movePointLeft(3);\n            }\n\n            return newXMLGregorianCalendarTime(\n                    hours,\n                    minutes,\n                    seconds,\n                    realMilliseconds,\n                    timezone\n            );\n    }"}
{"Number":"1581","API Relative Path":"javax.xml.datatype.FactoryFinder.java-find(Class-String)","Corresponding Source":"/**\n     * Finds the implementation Class object in the specified order.  Main\n     * entry point.\n     * @return Class object of factory, never null\n     *\n     * @param type                  Base class / Service interface  of the\n     *                              factory to find.\n     * @param fallbackClassName     Implementation class name, if nothing else\n     *                              is found.  Use null to mean no fallback.\n     *\n     * Package private so this code can be shared.\n     */\n    static <T> T find(Class<T> type, String fallbackClassName)\n        throws DatatypeConfigurationException\n    {\n        final String factoryId = type.getName();\n        dPrint(\"find factoryId =\" + factoryId);\n\n        // Use the system property first\n        try {\n            String systemProp = ss.getSystemProperty(factoryId);\n            if (systemProp != null) {\n                dPrint(\"found system property, value=\" + systemProp);\n                return newInstance(type, systemProp, null, true);\n            }\n        }\n        catch (SecurityException se) {\n            if (debug) se.printStackTrace();\n        }\n\n        // try to read from $java.home/lib/jaxp.properties\n        try {\n            if (firstTime) {\n                synchronized (cacheProps) {\n                    if (firstTime) {\n                        String configFile = ss.getSystemProperty(\"java.home\") + File.separator +\n                            \"lib\" + File.separator + \"jaxp.properties\";\n                        File f = new File(configFile);\n                        firstTime = false;\n                        if (ss.doesFileExist(f)) {\n                            dPrint(\"Read properties file \"+f);\n                            cacheProps.load(ss.getFileInputStream(f));\n                        }\n                    }\n                }\n            }\n            final String factoryClassName = cacheProps.getProperty(factoryId);\n\n            if (factoryClassName != null) {\n                dPrint(\"found in $java.home/jaxp.properties, value=\" + factoryClassName);\n                return newInstance(type, factoryClassName, null, true);\n            }\n        }\n        catch (Exception ex) {\n            if (debug) ex.printStackTrace();\n        }\n\n        // Try Jar Service Provider Mechanism\n        final T provider = findServiceProvider(type);\n        if (provider != null) {\n            return provider;\n        }\n        if (fallbackClassName == null) {\n            throw new DatatypeConfigurationException(\n                \"Provider for \" + factoryId + \" cannot be found\");\n        }\n\n        dPrint(\"loaded from fallback value: \" + fallbackClassName);\n        return newInstance(type, fallbackClassName, null, true);\n    }"}
{"Number":"1582","API Relative Path":"javax.xml.namespace.QName.java-QName(String-String-String)","Corresponding Source":"/**\n     * <p><code>QName<\/code> constructor specifying the Namespace URI,\n     * local part and prefix.<\/p>\n     *\n     * <p>If the Namespace URI is <code>null<\/code>, it is set to\n     * {@link javax.xml.XMLConstants#NULL_NS_URI\n     * XMLConstants.NULL_NS_URI}.  This value represents no\n     * explicitly defined Namespace as defined by the <a\n     * href=\"http://www.w3.org/TR/REC-xml-names/#ns-qualnames\">Namespaces\n     * in XML<\/a> specification.  This action preserves compatible\n     * behavior with QName 1.0.  Explicitly providing the {@link\n     * javax.xml.XMLConstants#NULL_NS_URI\n     * XMLConstants.NULL_NS_URI} value is the preferred coding\n     * style.<\/p>\n     *\n     * <p>If the local part is <code>null<\/code> an\n     * <code>IllegalArgumentException<\/code> is thrown.\n     * A local part of \"\" is allowed to preserve\n     * compatible behavior with QName 1.0. <\/p>\n     *\n     * <p>If the prefix is <code>null<\/code>, an\n     * <code>IllegalArgumentException<\/code> is thrown.  Use {@link\n     * javax.xml.XMLConstants#DEFAULT_NS_PREFIX\n     * XMLConstants.DEFAULT_NS_PREFIX} to explicitly indicate that no\n     * prefix is present or the prefix is not relevant.<\/p>\n     *\n     * <p>The Namespace URI is not validated as a\n     * <a href=\"http://www.ietf.org/rfc/rfc2396.txt\">URI reference<\/a>.\n     * The local part and prefix are not validated as a\n     * <a href=\"http://www.w3.org/TR/REC-xml-names/#NT-NCName\">NCName<\/a>\n     * as specified in <a href=\"http://www.w3.org/TR/REC-xml-names/\">Namespaces\n     * in XML<\/a>.<\/p>\n     *\n     * @param namespaceURI Namespace URI of the <code>QName<\/code>\n     * @param localPart    local part of the <code>QName<\/code>\n     * @param prefix       prefix of the <code>QName<\/code>\n     *\n     * @throws IllegalArgumentException When <code>localPart<\/code>\n     *   or <code>prefix<\/code> is <code>null<\/code>\n     */\n    public QName(String namespaceURI, String localPart, String prefix) {\n\n        // map null Namespace URI to default\n        // to preserve compatibility with QName 1.0\n        if (namespaceURI == null) {\n            this.namespaceURI = XMLConstants.NULL_NS_URI;\n        } else {\n            this.namespaceURI = namespaceURI;\n        }\n\n        // local part is required.\n        // \"\" is allowed to preserve compatibility with QName 1.0\n        if (localPart == null) {\n            throw new IllegalArgumentException(\n                    \"local part cannot be \\\"null\\\" when creating a QName\");\n        }\n        this.localPart = localPart;\n\n        // prefix is required\n        if (prefix == null) {\n            throw new IllegalArgumentException(\n                    \"prefix cannot be \\\"null\\\" when creating a QName\");\n        }\n        this.prefix = prefix;\n    }"}
{"Number":"1583","API Relative Path":"javax.xml.parsers.DocumentBuilder.java-parse(InputStream)","Corresponding Source":"/**\n     * Parse the content of the given <code>InputStream<\/code> as an XML\n     * document and return a new DOM {@link Document} object.\n     * An <code>IllegalArgumentException<\/code> is thrown if the\n     * <code>InputStream<\/code> is null.\n     *\n     * @param is InputStream containing the content to be parsed.\n     *\n     * @return <code>Document<\/code> result of parsing the\n     *  <code>InputStream<\/code>\n     *\n     * @throws IOException If any IO errors occur.\n     * @throws SAXException If any parse errors occur.\n     * @throws IllegalArgumentException When <code>is<\/code> is <code>null<\/code>\n     *\n     * @see org.xml.sax.DocumentHandler\n     */\n\n    public Document parse(InputStream is)\n        throws SAXException, IOException {\n        if (is == null) {\n            throw new IllegalArgumentException(\"InputStream cannot be null\");\n        }\n\n        InputSource in = new InputSource(is);\n        return parse(in);\n    }"}
{"Number":"1584","API Relative Path":"javax.xml.parsers.DocumentBuilder.java-parse(InputStream-String)","Corresponding Source":"/**\n     * Parse the content of the given <code>InputStream<\/code> as an\n     * XML document and return a new DOM {@link Document} object.\n     * An <code>IllegalArgumentException<\/code> is thrown if the\n     * <code>InputStream<\/code> is null.\n     *\n     * @param is InputStream containing the content to be parsed.\n     * @param systemId Provide a base for resolving relative URIs.\n     *\n     * @return A new DOM Document object.\n     *\n     * @throws IOException If any IO errors occur.\n     * @throws SAXException If any parse errors occur.\n     * @throws IllegalArgumentException When <code>is<\/code> is <code>null<\/code>\n     *\n     * @see org.xml.sax.DocumentHandler\n     */\n\n    public Document parse(InputStream is, String systemId)\n        throws SAXException, IOException {\n        if (is == null) {\n            throw new IllegalArgumentException(\"InputStream cannot be null\");\n        }\n\n        InputSource in = new InputSource(is);\n        in.setSystemId(systemId);\n        return parse(in);\n    }"}
{"Number":"1585","API Relative Path":"javax.xml.parsers.DocumentBuilderFactory.java-setXIncludeAware(boolean)","Corresponding Source":"/**\n     * <p>Set state of XInclude processing.<\/p>\n     *\n     * <p>If XInclude markup is found in the document instance, should it be\n     * processed as specified in <a href=\"http://www.w3.org/TR/xinclude/\">\n     * XML Inclusions (XInclude) Version 1.0<\/a>.<\/p>\n     *\n     * <p>XInclude processing defaults to <code>false<\/code>.<\/p>\n     *\n     * @param state Set XInclude processing to <code>true<\/code> or\n     *   <code>false<\/code>\n     *\n     * @throws UnsupportedOperationException When implementation does not\n     *   override this method.\n     *\n     * @since 1.5\n     */\n    public void setXIncludeAware(final boolean state) {\n        if (state) {\n            throw new UnsupportedOperationException(\" setXIncludeAware \" +\n                \"is not supported on this JAXP\" +\n                \" implementation or earlier: \" + this.getClass());\n        }\n    }"}
{"Number":"1586","API Relative Path":"javax.xml.parsers.SAXParserFactory.java-setXIncludeAware(boolean)","Corresponding Source":"/**\n     * <p>Set state of XInclude processing.<\/p>\n     *\n     * <p>If XInclude markup is found in the document instance, should it be\n     * processed as specified in <a href=\"http://www.w3.org/TR/xinclude/\">\n     * XML Inclusions (XInclude) Version 1.0<\/a>.<\/p>\n     *\n     * <p>XInclude processing defaults to <code>false<\/code>.<\/p>\n     *\n     * @param state Set XInclude processing to <code>true<\/code> or\n     *   <code>false<\/code>\n     *\n     * @throws UnsupportedOperationException When implementation does not\n     *   override this method\n     *\n     * @since 1.5\n     */\n    public void setXIncludeAware(final boolean state) {\n        if (state) {\n            throw new UnsupportedOperationException(\" setXIncludeAware \" +\n                \"is not supported on this JAXP\"  +\n                \" implementation or earlier: \" + this.getClass());\n        }\n    }"}
{"Number":"1587","API Relative Path":"javax.xml.soap.FactoryFinder.java-find(String-String-boolean)","Corresponding Source":"/**\n     * Finds the implementation <code>Class<\/code> object for the given\n     * factory name, or if that fails, finds the <code>Class<\/code> object\n     * for the given default class name, but only if <code>tryFallback<\/code>\n     * is <code>true<\/code>.  The arguments supplied must be used in order\n     * If using the first argument is successful, the second one will not\n     * be used.  Note the default class name may be needed even if fallback\n     * is not to be attempted, so certain error conditions can be handled.\n     * <P>\n     * This method is package private so that this code can be shared.\n     *\n     * @return the <code>Class<\/code> object of the specified message factory;\n     *         may not be <code>null<\/code>\n     *\n     * @param factoryId             the name of the factory to find, which is\n     *                              a system property\n     * @param defaultClassName      the implementation class name, which is\n     *                              to be used only if nothing else\n     *                              is found; <code>null<\/code> to indicate\n     *                              that there is no default class name\n     * @param tryFallback           whether to try the default class as a\n     *                              fallback\n     * @exception SOAPException if there is a SOAP error\n     */\n    static Object find(String factoryId, String defaultClassName,\n                       boolean tryFallback) throws SOAPException {\n        ClassLoader classLoader;\n        try {\n            classLoader = Thread.currentThread().getContextClassLoader();\n        } catch (Exception x) {\n            throw new SOAPException(x.toString(), x);\n        }\n\n        // Use the system property first\n        try {\n            String systemProp =\n                    System.getProperty( factoryId );\n            if( systemProp!=null) {\n                return newInstance(systemProp, classLoader);\n            }\n        } catch (SecurityException se) {\n        }\n\n        // try to read from $java.home/lib/jaxm.properties\n        try {\n            String javah=System.getProperty( \"java.home\" );\n            String configFile = javah + File.separator +\n                    \"lib\" + File.separator + \"jaxm.properties\";\n            File f=new File( configFile );\n            if( f.exists()) {\n                Properties props=new Properties();\n                props.load( new FileInputStream(f));\n                String factoryClassName = props.getProperty(factoryId);\n                return newInstance(factoryClassName, classLoader);\n            }\n        } catch(Exception ex ) {\n        }\n\n        String serviceId = \"META-INF/services/\" + factoryId;\n        // try to find services in CLASSPATH\n        try {\n            InputStream is=null;\n            if (classLoader == null) {\n                is=ClassLoader.getSystemResourceAsStream(serviceId);\n            } else {\n                is=classLoader.getResourceAsStream(serviceId);\n            }\n\n            if( is!=null ) {\n                BufferedReader rd =\n                        new BufferedReader(new InputStreamReader(is, \"UTF-8\"));\n\n                String factoryClassName = rd.readLine();\n                rd.close();\n\n                if (factoryClassName != null &&\n                        ! \"\".equals(factoryClassName)) {\n                    return newInstance(factoryClassName, classLoader);\n                }\n            }\n        } catch( Exception ex ) {\n        }\n\n        // If not found and fallback should not be tried, return a null result.\n        if (!tryFallback)\n            return null;\n\n        // We didn't find the class through the usual means so try the default\n        // (built in) factory if specified.\n        if (defaultClassName == null) {\n            throw new SOAPException(\n                    \"Provider for \" + factoryId + \" cannot be found\", null);\n        }\n        return newInstance(defaultClassName, classLoader);\n    }"}
{"Number":"1588","API Relative Path":"javax.xml.soap.MimeHeaders.java-addHeader(String-String)","Corresponding Source":"/**\n     * Adds a <code>MimeHeader<\/code> object with the specified name and value\n     * to this <code>MimeHeaders<\/code> object's list of headers.\n     * <P>\n     * Note that RFC822 headers can contain only US-ASCII characters.\n     *\n     * @param   name a <code>String<\/code> with the name of the header to\n     *          be added\n     * @param   value a <code>String<\/code> with the value of the header to\n     *          be added\n     *\n     * @exception IllegalArgumentException if there was a problem in the\n     * mime header name or value being added\n     */\n    public void addHeader(String name, String value)\n    {\n        if ((name == null) || name.equals(\"\"))\n            throw new IllegalArgumentException(\"Illegal MimeHeader name\");\n\n        int pos = headers.size();\n\n        for(int i = pos - 1 ; i >= 0; i--) {\n            MimeHeader hdr = (MimeHeader) headers.elementAt(i);\n            if (hdr.getName().equalsIgnoreCase(name)) {\n                headers.insertElementAt(new MimeHeader(name, value),\n                                        i+1);\n                return;\n            }\n        }\n        headers.addElement(new MimeHeader(name, value));\n    }"}
{"Number":"1589","API Relative Path":"javax.xml.soap.MimeHeaders.java-setHeader(String-String)","Corresponding Source":"/**\n     * Replaces the current value of the first header entry whose name matches\n     * the given name with the given value, adding a new header if no existing header\n     * name matches. This method also removes all matching headers after the first one.\n     * <P>\n     * Note that RFC822 headers can contain only US-ASCII characters.\n     *\n     * @param   name a <code>String<\/code> with the name of the header for\n     *          which to search\n     * @param   value a <code>String<\/code> with the value that will replace the\n     *          current value of the specified header\n     *\n     * @exception IllegalArgumentException if there was a problem in the\n     * mime header name or the value being set\n     * @see #getHeader\n     */\n    public void setHeader(String name, String value)\n    {\n        boolean found = false;\n\n        if ((name == null) || name.equals(\"\"))\n            throw new IllegalArgumentException(\"Illegal MimeHeader name\");\n\n        for(int i = 0; i < headers.size(); i++) {\n            MimeHeader hdr = (MimeHeader) headers.elementAt(i);\n            if (hdr.getName().equalsIgnoreCase(name)) {\n                if (!found) {\n                    headers.setElementAt(new MimeHeader(hdr.getName(),\n                                                        value), i);\n                    found = true;\n                }\n                else\n                    headers.removeElementAt(i--);\n            }\n        }\n\n        if (!found)\n            addHeader(name, value);\n    }"}
{"Number":"1590","API Relative Path":"javax.xml.soap.MimeHeaders.java-setHeader(String-String)","Corresponding Source":"/**\n     * Replaces the current value of the first header entry whose name matches\n     * the given name with the given value, adding a new header if no existing header\n     * name matches. This method also removes all matching headers after the first one.\n     * <P>\n     * Note that RFC822 headers can contain only US-ASCII characters.\n     *\n     * @param   name a <code>String<\/code> with the name of the header for\n     *          which to search\n     * @param   value a <code>String<\/code> with the value that will replace the\n     *          current value of the specified header\n     *\n     * @exception IllegalArgumentException if there was a problem in the\n     * mime header name or the value being set\n     * @see #getHeader\n     */\n    public void setHeader(String name, String value)\n    {\n        boolean found = false;\n\n        if ((name == null) || name.equals(\"\"))\n            throw new IllegalArgumentException(\"Illegal MimeHeader name\");\n\n        for(int i = 0; i < headers.size(); i++) {\n            MimeHeader hdr = (MimeHeader) headers.elementAt(i);\n            if (hdr.getName().equalsIgnoreCase(name)) {\n                if (!found) {\n                    headers.setElementAt(new MimeHeader(hdr.getName(),\n                                                        value), i);\n                    found = true;\n                }\n                else\n                    headers.removeElementAt(i--);\n            }\n        }\n\n        if (!found)\n            addHeader(name, value);\n    }"}
{"Number":"1591","API Relative Path":"javax.xml.soap.SOAPException.java-initCause(Throwable)","Corresponding Source":"/**\n     * Initializes the <code>cause<\/code> field of this <code>SOAPException<\/code>\n     * object with the given <code>Throwable<\/code> object.\n     * <P>\n     * This method can be called at most once.  It is generally called from\n     * within the constructor or immediately after the constructor has\n     * returned a new <code>SOAPException<\/code> object.\n     * If this <code>SOAPException<\/code> object was created with the\n     * constructor {@link #SOAPException(Throwable)} or\n     * {@link #SOAPException(String,Throwable)}, meaning that its\n     * <code>cause<\/code> field already has a value, this method cannot be\n     * called even once.\n     *\n     * @param  cause the <code>Throwable<\/code> object that caused this\n     *         <code>SOAPException<\/code> object to be thrown.  The value of this\n     *         parameter is saved for later retrieval by the\n     *         {@link #getCause()} method.  A <tt>null<\/tt> value is\n     *         permitted and indicates that the cause is nonexistent or\n     *         unknown.\n     * @return  a reference to this <code>SOAPException<\/code> instance\n     * @throws IllegalArgumentException if <code>cause<\/code> is this\n     *         <code>Throwable<\/code> object.  (A <code>Throwable<\/code> object\n     *         cannot be its own cause.)\n     * @throws IllegalStateException if the cause for this <code>SOAPException<\/code> object\n     *         has already been initialized\n     */\n    public synchronized Throwable initCause(Throwable cause) {\n        if (this.cause != null) {\n            throw new IllegalStateException(\"Can't override cause\");\n        }\n        if (cause == this) {\n            throw new IllegalArgumentException(\"Self-causation not permitted\");\n        }\n        this.cause = cause;\n\n        return this;\n    }"}
{"Number":"1592","API Relative Path":"javax.xml.soap.SOAPException.java-initCause(Throwable)","Corresponding Source":"/**\n     * Initializes the <code>cause<\/code> field of this <code>SOAPException<\/code>\n     * object with the given <code>Throwable<\/code> object.\n     * <P>\n     * This method can be called at most once.  It is generally called from\n     * within the constructor or immediately after the constructor has\n     * returned a new <code>SOAPException<\/code> object.\n     * If this <code>SOAPException<\/code> object was created with the\n     * constructor {@link #SOAPException(Throwable)} or\n     * {@link #SOAPException(String,Throwable)}, meaning that its\n     * <code>cause<\/code> field already has a value, this method cannot be\n     * called even once.\n     *\n     * @param  cause the <code>Throwable<\/code> object that caused this\n     *         <code>SOAPException<\/code> object to be thrown.  The value of this\n     *         parameter is saved for later retrieval by the\n     *         {@link #getCause()} method.  A <tt>null<\/tt> value is\n     *         permitted and indicates that the cause is nonexistent or\n     *         unknown.\n     * @return  a reference to this <code>SOAPException<\/code> instance\n     * @throws IllegalArgumentException if <code>cause<\/code> is this\n     *         <code>Throwable<\/code> object.  (A <code>Throwable<\/code> object\n     *         cannot be its own cause.)\n     * @throws IllegalStateException if the cause for this <code>SOAPException<\/code> object\n     *         has already been initialized\n     */\n    public synchronized Throwable initCause(Throwable cause) {\n        if (this.cause != null) {\n            throw new IllegalStateException(\"Can't override cause\");\n        }\n        if (cause == this) {\n            throw new IllegalArgumentException(\"Self-causation not permitted\");\n        }\n        this.cause = cause;\n\n        return this;\n    }"}
{"Number":"1593","API Relative Path":"javax.xml.soap.SOAPException.java-SOAPException(String-Throwable)","Corresponding Source":"/**\n     * Constructs a <code>SOAPException<\/code> object with the given\n     * <code>String<\/code> as the reason for the exception being thrown\n     * and the given <code>Throwable<\/code> object as an embedded\n     * exception.\n     *\n     * @param reason a description of what caused the exception\n     * @param cause a <code>Throwable<\/code> object that is to\n     *        be embedded in this <code>SOAPException<\/code> object\n     */\n    public SOAPException(String reason, Throwable cause) {\n        super(reason);\n        initCause(cause);\n    }"}
{"Number":"1594","API Relative Path":"javax.xml.soap.SOAPException.java-SOAPException(String-Throwable)","Corresponding Source":"/**\n     * Constructs a <code>SOAPException<\/code> object with the given\n     * <code>String<\/code> as the reason for the exception being thrown\n     * and the given <code>Throwable<\/code> object as an embedded\n     * exception.\n     *\n     * @param reason a description of what caused the exception\n     * @param cause a <code>Throwable<\/code> object that is to\n     *        be embedded in this <code>SOAPException<\/code> object\n     */\n    public SOAPException(String reason, Throwable cause) {\n        super(reason);\n        initCause(cause);\n    }"}
{"Number":"1595","API Relative Path":"javax.xml.soap.SOAPException.java-SOAPException(Throwable)","Corresponding Source":"/**\n     * Constructs a <code>SOAPException<\/code> object initialized\n     * with the given <code>Throwable<\/code> object.\n     */\n    public SOAPException(Throwable cause) {\n        super(cause.toString());\n        initCause(cause);\n    }"}
{"Number":"1596","API Relative Path":"javax.xml.soap.SOAPException.java-SOAPException(Throwable)","Corresponding Source":"/**\n     * Constructs a <code>SOAPException<\/code> object initialized\n     * with the given <code>Throwable<\/code> object.\n     */\n    public SOAPException(Throwable cause) {\n        super(cause.toString());\n        initCause(cause);\n    }"}
{"Number":"1597","API Relative Path":"javax.xml.transform.dom.DOMResult.java-DOMResult(Node)","Corresponding Source":"/**\n     * <p>Use a DOM node to create a new output target.<\/p>\n     *\n     * <p>In practice, the node should be\n     * a {@link org.w3c.dom.Document} node,\n     * a {@link org.w3c.dom.DocumentFragment} node, or\n     * a {@link org.w3c.dom.Element} node.\n     * In other words, a node that accepts children.<\/p>\n     *\n     * <p><code>siblingNode<\/code> and\n     * <code>systemId<\/code>\n     * will be set to <code>null<\/code>.<\/p>\n     *\n     * @param node The DOM node that will contain the result tree.\n     */\n    public DOMResult(Node node) {\n        setNode(node);\n        setNextSibling(null);\n        setSystemId(null);\n    }"}
{"Number":"1598","API Relative Path":"javax.xml.transform.dom.DOMResult.java-DOMResult(Node-Node)","Corresponding Source":"/**\n     * <p>Use a DOM node to create a new output target specifying the child node where the result nodes should be inserted before.<\/p>\n     *\n     * <p>In practice, <code>node<\/code> and <code>nextSibling<\/code> should be\n     * a {@link org.w3c.dom.Document} node,\n     * a {@link org.w3c.dom.DocumentFragment} node, or\n     * a {@link org.w3c.dom.Element} node.\n     * In other words, a node that accepts children.<\/p>\n     *\n     * <p>Use <code>nextSibling<\/code> to specify the child node\n     * where the result nodes should be inserted before.\n     * If <code>nextSibling<\/code> is not a sibling of <code>node<\/code>,\n     * then an <code>IllegalArgumentException<\/code> is thrown.\n     * If <code>node<\/code> is <code>null<\/code> and <code>nextSibling<\/code> is not <code>null<\/code>,\n     * then an <code>IllegalArgumentException<\/code> is thrown.\n     * If <code>nextSibling<\/code> is <code>null<\/code>,\n     * then the behavior is the same as calling {@link #DOMResult(Node node)},\n     * i.e. append the result nodes as the last child of the specified <code>node<\/code>.<\/p>\n     *\n     * <p><code>systemId<\/code> will be set to <code>null<\/code>.<\/p>\n     *\n     * @param node The DOM node that will contain the result tree.\n     * @param nextSibling The child node where the result nodes should be inserted before.\n     *\n     * @throws IllegalArgumentException If <code>nextSibling<\/code> is not a sibling of <code>node<\/code> or\n     *   <code>node<\/code> is <code>null<\/code> and <code>nextSibling<\/code>\n     *   is not <code>null<\/code>.\n     *\n     * @since 1.5\n     */\n    public DOMResult(Node node, Node nextSibling) {\n\n        // does the corrent parent/child relationship exist?\n        if (nextSibling != null) {\n            // cannot be a sibling of a null node\n            if (node == null) {\n                throw new IllegalArgumentException(\"Cannot create a DOMResult when the nextSibling is contained by the \\\"null\\\" node.\");\n            }\n\n            // nextSibling contained by node?\n            if ((node.compareDocumentPosition(nextSibling)&Node.DOCUMENT_POSITION_CONTAINED_BY)==0) {\n                throw new IllegalArgumentException(\"Cannot create a DOMResult when the nextSibling is not contained by the node.\");\n            }\n        }\n\n        setNode(node);\n        setNextSibling(nextSibling);\n        setSystemId(null);\n    }"}
{"Number":"1599","API Relative Path":"javax.xml.transform.dom.DOMResult.java-DOMResult(Node-Node)","Corresponding Source":"/**\n     * <p>Use a DOM node to create a new output target specifying the child node where the result nodes should be inserted before.<\/p>\n     *\n     * <p>In practice, <code>node<\/code> and <code>nextSibling<\/code> should be\n     * a {@link org.w3c.dom.Document} node,\n     * a {@link org.w3c.dom.DocumentFragment} node, or\n     * a {@link org.w3c.dom.Element} node.\n     * In other words, a node that accepts children.<\/p>\n     *\n     * <p>Use <code>nextSibling<\/code> to specify the child node\n     * where the result nodes should be inserted before.\n     * If <code>nextSibling<\/code> is not a sibling of <code>node<\/code>,\n     * then an <code>IllegalArgumentException<\/code> is thrown.\n     * If <code>node<\/code> is <code>null<\/code> and <code>nextSibling<\/code> is not <code>null<\/code>,\n     * then an <code>IllegalArgumentException<\/code> is thrown.\n     * If <code>nextSibling<\/code> is <code>null<\/code>,\n     * then the behavior is the same as calling {@link #DOMResult(Node node)},\n     * i.e. append the result nodes as the last child of the specified <code>node<\/code>.<\/p>\n     *\n     * <p><code>systemId<\/code> will be set to <code>null<\/code>.<\/p>\n     *\n     * @param node The DOM node that will contain the result tree.\n     * @param nextSibling The child node where the result nodes should be inserted before.\n     *\n     * @throws IllegalArgumentException If <code>nextSibling<\/code> is not a sibling of <code>node<\/code> or\n     *   <code>node<\/code> is <code>null<\/code> and <code>nextSibling<\/code>\n     *   is not <code>null<\/code>.\n     *\n     * @since 1.5\n     */\n    public DOMResult(Node node, Node nextSibling) {\n\n        // does the corrent parent/child relationship exist?\n        if (nextSibling != null) {\n            // cannot be a sibling of a null node\n            if (node == null) {\n                throw new IllegalArgumentException(\"Cannot create a DOMResult when the nextSibling is contained by the \\\"null\\\" node.\");\n            }\n\n            // nextSibling contained by node?\n            if ((node.compareDocumentPosition(nextSibling)&Node.DOCUMENT_POSITION_CONTAINED_BY)==0) {\n                throw new IllegalArgumentException(\"Cannot create a DOMResult when the nextSibling is not contained by the node.\");\n            }\n        }\n\n        setNode(node);\n        setNextSibling(nextSibling);\n        setSystemId(null);\n    }"}
{"Number":"1600","API Relative Path":"javax.xml.transform.dom.DOMResult.java-DOMResult(Node-Node-String)","Corresponding Source":"/**\n     * <p>Use a DOM node to create a new output target specifying the child node where the result nodes should be inserted before and\n     * the specified System ID.<\/p>\n     *\n     * <p>In practice, <code>node<\/code> and <code>nextSibling<\/code> should be\n     * a {@link org.w3c.dom.Document} node,\n     * a {@link org.w3c.dom.DocumentFragment} node, or a\n     * {@link org.w3c.dom.Element} node.\n     * In other words, a node that accepts children.<\/p>\n     *\n     * <p>Use <code>nextSibling<\/code> to specify the child node\n     * where the result nodes should be inserted before.\n     * If <code>nextSibling<\/code> is not a sibling of <code>node<\/code>,\n     * then an <code>IllegalArgumentException<\/code> is thrown.\n     * If <code>node<\/code> is <code>null<\/code> and <code>nextSibling<\/code> is not <code>null<\/code>,\n     * then an <code>IllegalArgumentException<\/code> is thrown.\n     * If <code>nextSibling<\/code> is <code>null<\/code>,\n     * then the behavior is the same as calling {@link #DOMResult(Node node, String systemId)},\n     * i.e. append the result nodes as the last child of the specified node and use the specified System ID.<\/p>\n     *\n     * @param node The DOM node that will contain the result tree.\n     * @param nextSibling The child node where the result nodes should be inserted before.\n     * @param systemId The system identifier which may be used in association with this node.\n     *\n     * @throws IllegalArgumentException If <code>nextSibling<\/code> is not a\n     *   sibling of <code>node<\/code> or\n     *   <code>node<\/code> is <code>null<\/code> and <code>nextSibling<\/code>\n     *   is not <code>null<\/code>.\n     *\n     * @since 1.5\n     */\n    public DOMResult(Node node, Node nextSibling, String systemId) {\n\n        // does the corrent parent/child relationship exist?\n        if (nextSibling != null) {\n            // cannot be a sibling of a null node\n            if (node == null) {\n                throw new IllegalArgumentException(\"Cannot create a DOMResult when the nextSibling is contained by the \\\"null\\\" node.\");\n            }\n\n            // nextSibling contained by node?\n            if ((node.compareDocumentPosition(nextSibling)&Node.DOCUMENT_POSITION_CONTAINED_BY)==0) {\n                throw new IllegalArgumentException(\"Cannot create a DOMResult when the nextSibling is not contained by the node.\");\n            }\n        }\n\n        setNode(node);\n        setNextSibling(nextSibling);\n        setSystemId(systemId);\n    }"}
{"Number":"1601","API Relative Path":"javax.xml.transform.dom.DOMResult.java-DOMResult(Node-Node-String)","Corresponding Source":"/**\n     * <p>Use a DOM node to create a new output target specifying the child node where the result nodes should be inserted before and\n     * the specified System ID.<\/p>\n     *\n     * <p>In practice, <code>node<\/code> and <code>nextSibling<\/code> should be\n     * a {@link org.w3c.dom.Document} node,\n     * a {@link org.w3c.dom.DocumentFragment} node, or a\n     * {@link org.w3c.dom.Element} node.\n     * In other words, a node that accepts children.<\/p>\n     *\n     * <p>Use <code>nextSibling<\/code> to specify the child node\n     * where the result nodes should be inserted before.\n     * If <code>nextSibling<\/code> is not a sibling of <code>node<\/code>,\n     * then an <code>IllegalArgumentException<\/code> is thrown.\n     * If <code>node<\/code> is <code>null<\/code> and <code>nextSibling<\/code> is not <code>null<\/code>,\n     * then an <code>IllegalArgumentException<\/code> is thrown.\n     * If <code>nextSibling<\/code> is <code>null<\/code>,\n     * then the behavior is the same as calling {@link #DOMResult(Node node, String systemId)},\n     * i.e. append the result nodes as the last child of the specified node and use the specified System ID.<\/p>\n     *\n     * @param node The DOM node that will contain the result tree.\n     * @param nextSibling The child node where the result nodes should be inserted before.\n     * @param systemId The system identifier which may be used in association with this node.\n     *\n     * @throws IllegalArgumentException If <code>nextSibling<\/code> is not a\n     *   sibling of <code>node<\/code> or\n     *   <code>node<\/code> is <code>null<\/code> and <code>nextSibling<\/code>\n     *   is not <code>null<\/code>.\n     *\n     * @since 1.5\n     */\n    public DOMResult(Node node, Node nextSibling, String systemId) {\n\n        // does the corrent parent/child relationship exist?\n        if (nextSibling != null) {\n            // cannot be a sibling of a null node\n            if (node == null) {\n                throw new IllegalArgumentException(\"Cannot create a DOMResult when the nextSibling is contained by the \\\"null\\\" node.\");\n            }\n\n            // nextSibling contained by node?\n            if ((node.compareDocumentPosition(nextSibling)&Node.DOCUMENT_POSITION_CONTAINED_BY)==0) {\n                throw new IllegalArgumentException(\"Cannot create a DOMResult when the nextSibling is not contained by the node.\");\n            }\n        }\n\n        setNode(node);\n        setNextSibling(nextSibling);\n        setSystemId(systemId);\n    }"}
{"Number":"1602","API Relative Path":"javax.xml.transform.dom.DOMResult.java-DOMResult(Node-String)","Corresponding Source":"/**\n     * <p>Use a DOM node to create a new output target with the specified System ID.<p>\n     *\n     * <p>In practice, the node should be\n     * a {@link org.w3c.dom.Document} node,\n     * a {@link org.w3c.dom.DocumentFragment} node, or\n     * a {@link org.w3c.dom.Element} node.\n     * In other words, a node that accepts children.<\/p>\n     *\n     * <p><code>siblingNode<\/code> will be set to <code>null<\/code>.<\/p>\n     *\n     * @param node The DOM node that will contain the result tree.\n     * @param systemId The system identifier which may be used in association with this node.\n     */\n    public DOMResult(Node node, String systemId) {\n        setNode(node);\n        setNextSibling(null);\n        setSystemId(systemId);\n    }"}
{"Number":"1603","API Relative Path":"javax.xml.transform.TransformerException.java-initCause(Throwable)","Corresponding Source":"/**\n     * Initializes the <i>cause<\/i> of this throwable to the specified value.\n     * (The cause is the throwable that caused this throwable to get thrown.)\n     *\n     * <p>This method can be called at most once.  It is generally called from\n     * within the constructor, or immediately after creating the\n     * throwable.  If this throwable was created\n     * with {@link #TransformerException(Throwable)} or\n     * {@link #TransformerException(String,Throwable)}, this method cannot be called\n     * even once.\n     *\n     * @param  cause the cause (which is saved for later retrieval by the\n     *         {@link #getCause()} method).  (A <code>null<\/code> value is\n     *         permitted, and indicates that the cause is nonexistent or\n     *         unknown.)\n     * @return  a reference to this <code>Throwable<\/code> instance.\n     * @throws IllegalArgumentException if <code>cause<\/code> is this\n     *         throwable.  (A throwable cannot\n     *         be its own cause.)\n     * @throws IllegalStateException if this throwable was\n     *         created with {@link #TransformerException(Throwable)} or\n     *         {@link #TransformerException(String,Throwable)}, or this method has already\n     *         been called on this throwable.\n     */\n    public synchronized Throwable initCause(Throwable cause) {\n\n        if (this.containedException != null) {\n            throw new IllegalStateException(\"Can't overwrite cause\");\n        }\n\n        if (cause == this) {\n            throw new IllegalArgumentException(\n                \"Self-causation not permitted\");\n        }\n\n        this.containedException = cause;\n\n        return this;\n    }"}
{"Number":"1604","API Relative Path":"javax.xml.ws.spi.FactoryFinder.java-find(String-String)","Corresponding Source":"/**\n     * Finds the implementation <code>Class<\/code> object for the given\n     * factory name, or if that fails, finds the <code>Class<\/code> object\n     * for the given fallback class name. The arguments supplied MUST be\n     * used in order. If using the first argument is successful, the second\n     * one will not be used.\n     * <P>\n     * This method is package private so that this code can be shared.\n     *\n     * @return the <code>Class<\/code> object of the specified message factory;\n     *         may not be <code>null<\/code>\n     *\n     * @param factoryId             the name of the factory to find, which is\n     *                              a system property\n     * @param fallbackClassName     the implementation class name, which is\n     *                              to be used only if nothing else\n     *                              is found; <code>null<\/code> to indicate that\n     *                              there is no fallback class name\n     * @exception WebServiceException if there is an error\n     */\n    static Object find(String factoryId, String fallbackClassName)\n    {\n        if (isOsgi()) {\n            return lookupUsingOSGiServiceLoader(factoryId);\n        }\n        ClassLoader classLoader;\n        try {\n            classLoader = Thread.currentThread().getContextClassLoader();\n        } catch (Exception x) {\n            throw new WebServiceException(x.toString(), x);\n        }\n\n        String serviceId = \"META-INF/services/\" + factoryId;\n        // try to find services in CLASSPATH\n        BufferedReader rd = null;\n        try {\n            InputStream is;\n            if (classLoader == null) {\n                is=ClassLoader.getSystemResourceAsStream(serviceId);\n            } else {\n                is=classLoader.getResourceAsStream(serviceId);\n            }\n\n            if( is!=null ) {\n                rd = new BufferedReader(new InputStreamReader(is, \"UTF-8\"));\n\n                String factoryClassName = rd.readLine();\n\n                if (factoryClassName != null &&\n                    ! \"\".equals(factoryClassName)) {\n                    return newInstance(factoryClassName, classLoader);\n                }\n            }\n        } catch( Exception ignored) {\n        } finally {\n            close(rd);\n        }\n\n\n        // try to read from $java.home/lib/jaxws.properties\n        FileInputStream inStream = null;\n        try {\n            String javah=System.getProperty( \"java.home\" );\n            String configFile = javah + File.separator +\n                \"lib\" + File.separator + \"jaxws.properties\";\n            File f=new File( configFile );\n            if( f.exists()) {\n                Properties props=new Properties();\n                inStream = new FileInputStream(f);\n                props.load(inStream);\n                String factoryClassName = props.getProperty(factoryId);\n                return newInstance(factoryClassName, classLoader);\n            }\n        } catch(Exception ignored) {\n        } finally {\n            close(inStream);\n        }\n\n        // Use the system property\n        try {\n            String systemProp =\n                System.getProperty( factoryId );\n            if( systemProp!=null) {\n                return newInstance(systemProp, classLoader);\n            }\n        } catch (SecurityException ignored) {\n        }\n\n        if (fallbackClassName == null) {\n            throw new WebServiceException(\n                \"Provider for \" + factoryId + \" cannot be found\", null);\n        }\n\n        return newInstance(fallbackClassName, classLoader);\n    }"}
{"Number":"1605","API Relative Path":"javax.xml.ws.wsaddressing.W3CEndpointReferenceBuilder.java-attribute(QName-String)","Corresponding Source":"/**\n     * Adds an extension attribute to the\n     * <code>W3CEndpointReference<\/code> instance's\n     * <code>wsa:EndpointReference<\/code> element.\n     *\n     * @param name The name of the extension attribute to be added to the\n     *   <code>W3CEndpointReference<\/code>\n     * @param value extension attribute value\n     * @return A <code>W3CEndpointReferenceBuilder<\/code> instance with\n     *   the extension attribute added to the <code>W3CEndpointReference<\/code>\n     *   instance.\n     * @throws java.lang.IllegalArgumentException if <code>name<\/code>\n     *   or <code>value<\/code> is <code>null<\/code>.\n     *\n     * @since JAX-WS 2.2\n     */\n    public W3CEndpointReferenceBuilder attribute(QName name, String value) {\n        if (name == null || value == null) {\n            throw new IllegalArgumentException(\"The extension attribute name or value cannot be null.\");\n        }\n        attributes.put(name, value);\n        return this;\n    }"}
